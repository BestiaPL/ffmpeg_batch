using System.Reflection;
using Microsoft.VisualBasic.FileIO;
using Microsoft.Win32;
using Shell32;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Linq;
using System.Management.Instrumentation;
using System.Net;
using System.Runtime.InteropServices;
using System.Security.Policy;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using System.Web.UI.Design;
using System.Windows.Forms;
using System.Globalization;
using System.Linq.Expressions;
//using FFBatch;

namespace FFBatch
{
    public partial class Form1 : Form
    {
        internal const int CTRL_C_EVENT = 0;
        [DllImport("kernel32.dll")]
        internal static extern bool GenerateConsoleCtrlEvent(uint dwCtrlEvent, uint dwProcessGroupId);
        [DllImport("kernel32.dll", SetLastError = true)]
        internal static extern bool AttachConsole(uint dwProcessId);
        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        internal static extern bool FreeConsole();
        [DllImport("kernel32.dll")]
        static extern bool SetConsoleCtrlHandler(ConsoleCtrlDelegate HandlerRoutine, bool Add);
        // Delegate type to be used as the Handler Routine for SCCH
        delegate Boolean ConsoleCtrlDelegate(uint CtrlType);

        private ListViewColumnSorter lvwColumnSorter3;
        private ListViewColumnSorter lvwColumnSorter_Full;
        private ColumnHeader SortingColumn = null;
                
        private const int _minimumColumnWidth = 64;
        List<string> list_successful_m = new List<string>();
        List<string> list_failed_m = new List<string>();

        int col_width = 0;
        String selected_add_col = "";
        System.Media.SoundPlayer soundPlayer = new System.Media.SoundPlayer();
        Boolean fix_pre = false;
        private Boolean play_on_end = false;
        private String play_file_path = String.Empty;
        Boolean writable_yl = false;
        String saved_pres_two = "";
        String saved_ext_two = "";
        Boolean stopped_recording = false;
        String vc_download = "";
        ToolTip toolT002 = new ToolTip();
        String run_command = String.Empty;
        String run_command_args = String.Empty;
        Boolean m3u_params_checked, output_server_checked = false;
        String down_speed_m = "";
        String embed_subs_m = "";
        String embed_meta_m = "";
        String write_subs_m = "";
        String convert_subs_m = "";
        String format_out_m = "";
        Boolean show_total_prog_m = false;
        String m3u_output_ext_m = String.Empty;
        String output_server_m = String.Empty;
        String m3u_params_m = String.Empty;
        DataGridView dg1_temp = new DataGridView();
        Boolean opened_m = false;
        String multi_dest = "";
        Boolean fatal_parallel = false;
        String fatal_parallel_msg = "";
        Boolean one_ok = false;
        Boolean yt_chk = false;
        public Boolean abort_validate_url = false;
        float font_size = FFBatch.Properties.Settings.Default.font_size;
        Boolean adding_youtube = false;
        ListView lv_size = new ListView();
        Boolean pop_invalids = false;
        Boolean cancel_cache = false;
        WebClient wc = new WebClient();
        WebClient wc2 = new WebClient();
        WebClient wc_dl = new WebClient();
        Boolean cached = false;
        public long file_size_prog = 0;
        private Boolean cancelados_paralelos = false;
        private Boolean cancel_queue = false;
        private Boolean working = false;
        private int tiempo_apaga = 120;
        private Double durat_n = 0;
        private String validate_duration;
        private Boolean valid_prog = false;
        private String def_mux_video_enc = "copy";
        private String def_mux_audio_enc = "copy";
        private String def_mux_subs_enc = "copy";
        private String def_lang_und_tracks = "und";
        private Boolean Extract_img = false;
        private Boolean select_mp4 = false;
        private int time_n_tasks = 0;
        private Boolean total_time = false;
        private Boolean recording_scr = false;
        private Boolean hard_sub = false;
        private String add_suffix = "";
        private int capture_handle;
        private Boolean Enable_txt_hard_Subs = false;
        private long tot_size = 0;
        private Boolean add_subfs = false;

        //Boolean empty_text = false;
        private String n_th_suffix = String.Empty;

        private String n_th_source_ext = String.Empty;
        private int pending_dur = 0;
        private Boolean canceled_add = false;
        private Boolean dur_ok = false;
        private Boolean canceled_file_adding = false;
        private ListView list_pending_dur = new ListView();
        private ListView list_adding = new ListView();
        private ListView list_global_proc = new ListView();
        private List<string> files_to_add = new List<string>();
        private Image[] dg_thumbs = new Image[2000];
        private Boolean change_tab_1 = false;
        private Boolean change_tab_2 = false;
        private Boolean list_not_empty = false;
        private Process process_glob = new Process();
        private Process probe_urls = new Process();
        //private Process update_yl = new Process();
        private Label was_started = new Label();
        private Boolean avoid_overwriting = false;
        private Boolean stop_validating_url = false;
        private Boolean skip_current_url = false;
        private Boolean m3u_running = false;
        private Boolean multi_running = false;
        public Dictionary<string, Process> procs = new Dictionary<string, Process>();
        private Dictionary<string, Point> points = new Dictionary<string, Point>();
        private Dictionary<string, Size> sizes = new Dictionary<string, Size>();
        private Dictionary<string, String> multi_logs = new Dictionary<string, String>();
        private Boolean aborted_url = false;
        private int capture_count = 0;
        private Boolean tried_ok = false;
        private String textbox_params = String.Empty;
        private Boolean aborted = false;
        private Double total_duration = 0;
        private Double total_multi_duration = 0;
        private Double start_total_time = 0;
        //private ComboBox mem_prio = new ComboBox();
        private Boolean tracks_empty = true;
        private int time_est_size = 0;
        private Form frm_log = new Form();
        DataGridView clonegrid = new DataGridView();
        private RichTextBox Rtxt = new RichTextBox();
        private Boolean skipped = false;
        private List<string> tried_params = new List<string>();
        private Boolean m3u_single_running = false;
        private Boolean paused = false;
        private ComboBox CB1_o = new ComboBox();
        private String audio_capture_device = String.Empty;
        private String prev_dev_audio = String.Empty;
        private Boolean abort_capture = false;
        private Boolean hw_decoders = false;
        private String hw_decode_glob = String.Empty;
        private Boolean warn_mux_webm = false;
        private Boolean warn_mux_mov = false;
        private String shut_type = "Power off";
        private Boolean fade_ok = true;
        private String silence_params = String.Empty;
        private String multi_pr1 = String.Empty;
        private String multi_pr2 = String.Empty;
        private String multi_pr3 = String.Empty;
        private String multi_pr1_ext = String.Empty;
        private String multi_pr2_ext = String.Empty;
        private String multi_pr3_ext = String.Empty;
        private int n_multi_presets = 0;
        private String multi_two_pr1 = String.Empty;
        private String multi_two_ext = String.Empty;
        private String multi_1st_pass = String.Empty;
        private Boolean ren_multi = false;
        private Boolean runnin_n_presets = false;
        private TextBox path_txt = new TextBox();
        private ListBox LB1_o_try = new ListBox();
        public Boolean is_portable = false;
        private ToolTip toolTip01 = new ToolTip();
        private ToolTip toolTip_settings = new ToolTip();
        private Boolean back_ff = true;
        private Boolean just_started = true;
        private Boolean just_started5 = true;
        private int current_prio;
        private Boolean save_path_state = false;
        private Boolean save_preset_state = false;
        private List<string> decoders = new List<string>();
        private Boolean big_res = false;
        private int ff_ver_proc = 0;
        private Form frm_output2 = new Form();
        private Boolean tip_sort_dur = false;
        private Boolean sort_multi_dur = false;
        private Boolean is_ff_ok = false;
        private Boolean first_concat = true;
        private ListView LB1_kf = new ListView();

        Form3 form3 = new Form3();
        Form4 form4 = new Form4();
        Form5 form5 = new Form5();
        Form16 frm_mux_jobs = new Form16();

        OpenFileDialog file_dialog_ffq = new OpenFileDialog();
        SaveFileDialog save_ffq = new SaveFileDialog();
        Boolean send_par_consol = true;
        Boolean warn_success_items = true;
        Boolean no_warn_0_dur = true;
        Boolean no_save_logs = false;
        Boolean verbose_logs = false;
        Boolean full_report = false;
        Boolean no_save_cache = false;
        Boolean os_save_cache = false;
        Boolean remember_last_tab = false;
        Boolean remember_w = false;
        ListView unfilter_lv1 = new ListView();
        ListView filtered_lv1 = new ListView();
        ToolTip tool_undo_filter = new ToolTip();
        Boolean size_sorted = false;
        int initial_tab = 0;
        PictureBox pic_pause = new PictureBox();
        Boolean two_try_fail = false;
        public Boolean cancel_two = false;
        int invalids = 0;
        String file_to_copy = String.Empty;
        Boolean ask_cache_net = false;
        Boolean first_run = false;
        Boolean current_save_prio = false;
        ProgressBarWithText Pg1 = new ProgressBarWithText();
        public TextBox pr_default = new TextBox();
        int current_width = 0;
        int current_height = 0;
        Boolean mixed_urls = false;
        Boolean opening_youtubes = false;
        Boolean internet_up = true;
        String pl_url = "";
        String Clear_cache = "";
        Double Total_dur_urls = 0;
        Boolean checking_url_m3u = false;
        private String[] lines_txt_m3u = new String[] { "" };
        private int playlists_int = 0;
        private int errors_enc = 0;
        private string down_ver = "https://drive.upm.es/index.php/s/qx2KzwVy77y7pL3/download";
        private string down_ver2 = "https://ffmpeg-batch.sourceforge.io/current_ffb.txt";
        String yl_latest = "https://youtube-dl.org/downloads/latest/youtube-dl.exe";
        Boolean images_v = false;
        String images_time = "5";

        public String pr1_string_main
        {
            get { return multi_pr1; }
            set { multi_pr1 = value; }
        }

        public Form1()
        {
            InitializeComponent();

            check_res();
            String f_remember_w = String.Empty;
            if (is_portable == false)
            {
                f_remember_w = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_remember_w.ini";
            }
            else
            {
                f_remember_w = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_remember_w_portable.ini";
            }

            if (File.Exists(f_remember_w))
            {
                this.StartPosition = FormStartPosition.Manual;
                this.Location = Properties.Settings.Default.wLocation;

                foreach (String line in File.ReadLines(f_remember_w))
                {
                    this.Height = Convert.ToInt32(line);
                    break;
                }
            }

            lvwColumnSorter3 = new ListViewColumnSorter();
            this.listView3.ListViewItemSorter = lvwColumnSorter3;
            lvwColumnSorter_Full = new ListViewColumnSorter();
            this.listView1.ListViewItemSorter = lvwColumnSorter_Full;
            WebClient webClient1 = new WebClient();

        }

        private void button1_Click(object sender, EventArgs e)
        {
            Pg1.Focus();
            if (!File.Exists(Path.Combine(Application.StartupPath, "ffmpeg.exe")))
            {
                MessageBox.Show("FFmpeg executable file was not found. Restart or reinstall application.", "Executable error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }
            if (!File.Exists(Path.Combine(Application.StartupPath, "ffprobe.exe")))
            {
                MessageBox.Show("FFprobe executable file was not found. Restart or reinstall application.", "Executable error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            openFileDialog1.Filter = "Audio and video |*.mp4; *.mkv; *.ts; *.mp3; *.wav; *.flac; *.m4a; *.avi; *.mts; *.flv; *.alac; *.aac; *.mpg; *.mp2; *.mpe; *.ogv; *.webm; *.aiff; *.vob; *.wma; *.wmv; *.mov; *.mka; *.m2ts; *.ac3; *.ogg|All files(*.*) | *.*";

            if (tabControl1.SelectedIndex == 3)
            {
                btn_add_urls.PerformClick();
                return;
            }

            if (tabControl1.SelectedIndex == 1)
            {
                openFileDialog1.Filter = "Audio and video |*.mp4; *.mkv; *.mp3; *.wav; *.flac; *.avi; *.mts; *.flv; *.alac; *.aac; *.mpg; *.mp2; *.mpe; *.ogv; *.webm; *.aiff; *.vob; *.wma; *.wmv; *.mov; *.mka; *.srt; *.m2ts; *.idx; *.ac3; *.jpg; *.png; *.gif; *.psd; *.tiff; *.ass; *.ogg|All files(*.*) | *.*";
            }
            if (tabControl1.SelectedIndex == 2)
            {
                openFileDialog1.Filter = "Audio and video | *.mp4; *.mkv; *.avi; *.mts; *.flv; *.mpg; *.mp2; *.mpe; *.ogv; *.webm; *.aiff; *.vob; *.wmv; *.mov; *.mka; *.m2ts; *.ogg| All files(*.*) | *.*";
            }

            openFileDialog1.ShowDialog();
        }

        private void openFileDialog1_FileOk(object sender, CancelEventArgs e)
        {
            openFileDialog1.InitialDirectory = Path.GetDirectoryName(openFileDialog1.FileNames[0]);
            initial_tab = tabControl1.SelectedIndex;
            change_tab_1 = false;
            change_tab_2 = false;

            if (tabControl1.SelectedIndex == 1)
            {
                tabControl1.SelectedIndex = 0;
                change_tab_1 = true;
            }
            if (tabControl1.SelectedIndex == 2)
            {
                tabControl1.SelectedIndex = 0;
                change_tab_2 = true;
            }

            string[] file_drop = (string[])openFileDialog1.FileNames;

            List<string> files2 = new List<string>();

            int num_drop = 0;
            foreach (String dropped in file_drop)
            {
                if (File.Exists(dropped))
                {
                    files2.Add(dropped);
                }

                num_drop = files2.Count();

                if (num_drop >= 10000)
                {
                    var a = MessageBox.Show("Adding " + num_drop + " files can take some time. Continue?", "Adding many files", MessageBoxButtons.OKCancel, MessageBoxIcon.Question);
                    if (a == DialogResult.Cancel)
                    {
                        return;
                    }
                }
            }

            files_to_add = files2;
            canceled_file_adding = false;
            btn_cancel_add.Enabled = true;
            btn_cancel_add.Visible = true;
            btn_cancel_add.Refresh();
            BG_Files.RunWorkerAsync();
        }

        private void check_fade()
        {
            //Video fading

            if (fade_v_in.CheckState == CheckState.Checked && fade_v_out.CheckState == CheckState.Unchecked)
            {
                foreach (ListViewItem item in listView1.Items)
                {
                    if (item.SubItems[3].Text != "N/A" && item.SubItems[3].Text != "0:00:00" && item.SubItems[3].Text != "00:00:00" && item.SubItems[3].Text != "Pending")
                    {
                        if (TimeSpan.Parse(item.SubItems[3].Text).TotalSeconds < Convert.ToDouble(num_v_in.Value))
                        {
                            MessageBox.Show("Fade in time is longer that file duration.", "Fade in error", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                            fade_ok = false;
                            return;
                        }
                    }
                }
            }

            if (fade_v_in.CheckState == CheckState.Unchecked && fade_v_out.CheckState == CheckState.Checked)
            {
                foreach (ListViewItem item in listView1.Items)
                {
                    if (item.SubItems[3].Text != "N/A" && item.SubItems[3].Text != "0:00:00" && item.SubItems[3].Text != "00:00:00" && item.SubItems[3].Text != "Pending")
                    {
                        if (TimeSpan.Parse(item.SubItems[3].Text).TotalSeconds < Convert.ToDouble(num_v_out.Value))
                        {
                            MessageBox.Show("Fade out time is longer that file duration.", "Fade in error", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                            fade_ok = false;
                            return;
                        }
                    }
                }
            }
            if (fade_v_in.CheckState == CheckState.Checked && fade_v_out.CheckState == CheckState.Checked)
            {
                foreach (ListViewItem item in listView1.Items)
                {
                    if (item.SubItems[3].Text != "N/A" && item.SubItems[3].Text != "0:00:00" && item.SubItems[3].Text != "00:00:00" && item.SubItems[3].Text != "Pending")
                    {
                        if (TimeSpan.Parse(item.SubItems[3].Text).TotalSeconds < (Convert.ToDouble(num_v_in.Value) + Convert.ToDouble(num_v_out.Value)))
                        {
                            MessageBox.Show("Fade in/out time is longer that file duration.", "Fade in error", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                            fade_ok = false;
                            return;
                        }
                    }
                }
            }
            //Audio fading
            if (fade_a_in.CheckState == CheckState.Checked && fade_a_out.CheckState == CheckState.Unchecked)
            {
                foreach (ListViewItem item in listView1.Items)
                {
                    if (item.SubItems[3].Text != "N/A" && item.SubItems[3].Text != "0:00:00" && item.SubItems[3].Text != "00:00:00" && item.SubItems[3].Text != "Pending")
                    {
                        if (TimeSpan.Parse(item.SubItems[3].Text).TotalSeconds < Convert.ToDouble(num_a_in.Value))
                        {
                            MessageBox.Show("Fade in audio duration is longer that file duration.", "Fade in error", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                            fade_ok = false;
                            return;
                        }
                    }
                }
            }

            if (fade_a_in.CheckState == CheckState.Unchecked && fade_a_out.CheckState == CheckState.Checked)
            {
                foreach (ListViewItem item in listView1.Items)
                {
                    if (item.SubItems[3].Text != "N/A" && item.SubItems[3].Text != "0:00:00" && item.SubItems[3].Text != "00:00:00" && item.SubItems[3].Text != "Pending")
                    {
                        if (TimeSpan.Parse(item.SubItems[3].Text).TotalSeconds < Convert.ToDouble(num_a_out.Value))
                        {
                            MessageBox.Show("Fade out audio duration is longer that file duration.", "Fade in error", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                            fade_ok = false;
                            return;
                        }
                    }
                }
            }
            if (fade_a_in.CheckState == CheckState.Checked && fade_a_out.CheckState == CheckState.Checked)
            {
                foreach (ListViewItem item in listView1.Items)
                {
                    if (item.SubItems[3].Text != "N/A" && item.SubItems[3].Text != "0:00:00" && item.SubItems[3].Text != "00:00:00" && item.SubItems[3].Text != "Pending")
                    {
                        if (TimeSpan.Parse(item.SubItems[3].Text).TotalSeconds < (Convert.ToDouble(num_a_in.Value) + Convert.ToDouble(num_a_out.Value)))
                        {
                            MessageBox.Show("Fade in/out audio duration is longer that file duration.", "Fade in error", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                            fade_ok = false;
                            return;
                        }
                    }
                }
            }
            //End audio fading
        }
        Boolean dups_lv1()
        {
            if (checkBox1.CheckState == CheckState.Checked)
            {
                List<string> no_overw = new List<string>();

                string path_without = "";
                String out_path = txt_path_main.Text;

                foreach (ListViewItem item in listView1.Items)
                {
                    if (txt_path_main.Text.Length == 2)
                    {
                        if (txt_path_main.Text.Substring(0, 2) == ".\\")
                            out_path = item.SubItems[1].Text + txt_path_main.Text.Replace(".\\", "");
                    }
                    else
                    {
                        if (txt_path_main.Text.Substring(0, 2) == ".\\")
                            out_path = item.SubItems[1].Text + txt_path_main.Text.Replace("..", "");
                    }

                    path_without = out_path + "\\" + item.SubItems[1].Text.Substring(Path.GetPathRoot(item.SubItems[1].Text).Length);
                    no_overw.Add(path_without + "\\" + Path.GetFileNameWithoutExtension(item.Text) + "." + txt_format.Text);
                    //MessageBox.Show(path_without + "\\" + Path.GetFileNameWithoutExtension(item.Text) + "." + txt_format.Text);
                }

                var duplicates = no_overw.GroupBy(s => s).SelectMany(grp => grp.Skip(1));
                int count = no_overw.Count;
                no_overw = no_overw.Distinct().ToList();

                if (no_overw.Count < count)
                {
                    String to_show = "";
                    int i = 0;
                    foreach (String str in duplicates)
                    {
                        if (i < 5) to_show = to_show + Environment.NewLine + str;
                        i++;
                    }
                    MessageBox.Show((count - no_overw.Count).ToString() + " file(s) have the same file output name and will overwrite each other:" + Environment.NewLine + Environment.NewLine + to_show, "Overwriting detected", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return true;
                }
                return false;
            }
            else
            {
                List<string> no_overw = new List<string>();

                string path_without = "";
                String out_path = txt_path_main.Text;

                foreach (ListViewItem item in listView1.Items)
                {
                    if (txt_path_main.Text.Length == 2)
                    {
                        if (txt_path_main.Text.Substring(0, 2) == ".\\")
                            out_path = item.SubItems[1].Text + txt_path_main.Text.Replace(".\\", "");
                    }
                    else
                    {
                        if (txt_path_main.Text.Substring(0, 2) == ".\\")
                            out_path = item.SubItems[1].Text + txt_path_main.Text.Replace(".", "");
                    }

                    path_without = out_path;
                    no_overw.Add(path_without + "\\" + Path.GetFileNameWithoutExtension(item.Text) + "." + txt_format.Text);
                }

                var duplicates = no_overw.GroupBy(s => s).SelectMany(grp => grp.Skip(1));
                int count = no_overw.Count;
                no_overw = no_overw.Distinct().ToList();

                if (no_overw.Count < count)
                {
                    String to_show = "";
                    int i = 0;
                    foreach (String str in duplicates)
                    {
                        if (i < 5) to_show = to_show + Environment.NewLine + str;
                        i++;
                    }
                    MessageBox.Show((count - no_overw.Count).ToString() + " file(s) have the same file output name and will overwrite each other:" + Environment.NewLine + Environment.NewLine + to_show, "Overwriting detected", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return true;
                }
                return false;
            }
        }

        private void button2_Click(object sender, EventArgs e)
        {
            Pg1.Focus();
            Pg1.Text = "0" + System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator + "0%";
            LB_Wait.Visible = false;
            if (!File.Exists(Path.Combine(Application.StartupPath, "ffmpeg.exe")))
            {
                MessageBox.Show("FFmpeg executable file was not found. Restart or reinstall application.", "Executable error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            was_started.Text = button2.Text;
            cancel_queue = false;
            notifyIcon1.Visible = true;

            if (listView1.Items.Count == 0)
            {
                MessageBox.Show("File list is empty", "No files to be processed", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            String filename1 = "";
            foreach (ListViewItem file2 in listView1.Items)
            {
                filename1 = file2.SubItems[1].Text + "\\" + file2.Text;
                if (!File.Exists(filename1))
                {
                    MessageBox.Show("File was not found: " + file2.Text, "One file in the queue list was not found", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
            }

            DateTime time2;
            if (!DateTime.TryParse(ss_time_input.Text, out time2))
            {
                MessageBox.Show("Pre-input seeking format is incorrect. Change it or reset it by double-clicking on it", "Pre-input seeking format error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            if (ss_time_input.Text != "0:00:00")
            {
                foreach (ListViewItem item in listView1.Items)
                {
                    if (item.SubItems[3].Text != "N/A" && item.SubItems[3].Text != "0:00:00" && item.SubItems[3].Text != "00:00:00" && item.SubItems[3].Text != "Pending")
                    {
                        if (TimeSpan.Parse(item.SubItems[3].Text).TotalSeconds <= TimeSpan.Parse(ss_time_input.Text).TotalSeconds)
                        {
                            MessageBox.Show("Pre-input seeking exceeds duration of file: " + '\u0022' + Path.GetFileName(item.Text) + '\u0022', "Pre-input seeking error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            return;
                        }
                    }
                }
            }

            DateTime time;
            if (!DateTime.TryParse(ss_time_input.Text, out time))
            {
                MessageBox.Show("Pre-input seeking format is incorrect. Change it or reset it by double-clicking on it", "Pre-input seeking format error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            avoid_overw();

            //Check path is writable
            String destino1 = String.Empty;
            Boolean rel_path = false;
            String filename = listView1.Items[0].SubItems[1].Text + "\\" + listView1.Items[0].Text;
            if (txt_path_main.Text.Contains(".\\"))
            {
                destino1 = filename.Substring(0, filename.LastIndexOf('\\')) + txt_path_main.Text.Replace(".", String.Empty);
                rel_path = true;
            }
            else
            {
                if (checkBox1.CheckState == CheckState.Checked)
                {
                    String pre_dest = Path.GetDirectoryName(filename);
                    destino1 = Path.Combine(txt_path_main.Text, pre_dest.Substring(3, pre_dest.Length - 3));
                    rel_path = true;
                }
                else
                {
                    destino1 = txt_path_main.Text;
                }
            }

            try
            {
                if (rel_path == true)
                {
                    Directory.CreateDirectory(destino1);
                    System.Threading.Thread.Sleep(10);
                }
                else
                {
                    if (!Directory.Exists(destino1)) Directory.CreateDirectory(destino1);
                    File.WriteAllText(destino1 + "\\" + "FFBatch_test.txt", "FFBatch_test");
                    System.Threading.Thread.Sleep(10);
                    File.Delete(destino1 + "\\" + "FFBatch_test.txt");
                }
            }
            catch (System.Exception excpt)
            {
                MessageBox.Show("Write error: " + excpt.Message, "Error writing to destination folder", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            //End path is writable


            //Validated list, start processing
            if ((fade_v_in.Checked == true && num_v_in.Value == 0) || (fade_v_out.Checked == true && num_v_out.Value == 0) || (fade_a_in.Checked == true && num_a_in.Value == 0) || (fade_a_out.Checked == true && num_a_out.Value == 0))
            {
                MessageBox.Show("Fading cannot be zero", "Fading is zero", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            txt_remain.Text = "Time remaining: 00h:00m:00s";

            if (listView1.SelectedIndices.Count == 0)
            {
                listView1.Items[0].Selected = true;
                listView1.Items[0].Focused = true;
                listView1.Focus();
            }

            foreach (String item in tried_params)
            {
                if (item == (txt_parameters.Text))
                {
                    tried_ok = true;
                }
            }

            if (tried_ok == false)
            {
                try
                {
                    BG_Try_preset.RunWorkerAsync();
                }
                catch
                {
                    tried_ok = true;
                }

                return;
            }
            tried_ok = false;


            //Remove test file/folder

            String file_prueba = "";
            String sel_test = filename;
            file_prueba = sel_test;
            String destino = Path.GetTempPath() + "\\" + "FFBatch_test";
            String borrar = destino + "\\" + System.IO.Path.GetFileNameWithoutExtension(file_prueba) + "." + txt_format.Text;

            if (File.Exists(borrar))
            {
                try
                {
                    File.Delete(borrar);
                }
                catch
                {
                }
            }

            if (Directory.Exists(destino) == true)
            {
                try
                {
                    if (Directory.GetFiles(destino).Length == 0)
                    {
                        System.IO.Directory.Delete(destino);
                    }
                }
                catch { }
            }

            //END Remove test file/folder

            //Pending duration

            if (dur_ok == false)
            {
                list_pending_dur.Items.Clear();
                foreach (ListViewItem item in listView1.Items)
                {
                    list_pending_dur.Items.Add((ListViewItem)item.Clone());
                }
                BG_Dur.RunWorkerAsync();
                return;
            }

            if (avoid_overwriting == true && txt_path_main.Text.Contains(".\\") == false && txt_path_main.Text.Length < 4 && checkBox1.CheckState != CheckState.Checked)
            {
                avoid_overwriting = false;
                DialogResult a2 = MessageBox.Show("Multiple folders to single output folder may lead to overwriting. You can enable " + '\u0022' + "Recreate source path" + '\u0022' + " to avoid opossible overwritings." + Environment.NewLine + Environment.NewLine + "Do you want to continue?", "Different input folders to single output folder", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2);
                if (a2 == DialogResult.No) return;
            }

            //Verify names will not cause overwriting

            if (txt_format.Text != String.Empty)
            {
                if (dups_lv1() == true) return;
            }


            String is_overw = txt_path_main.Text + "\\" + Path.GetFileNameWithoutExtension(listView1.Items[0].Text) + "." + txt_format.Text;

            if (is_overw == listView1.Items[0].Text && chk_suffix.Checked == false)
            {
                if (chk_overw.CheckState == CheckState.Unchecked)
                {
                    MessageBox.Show("Overwriting is not enabled. Change destination directory or enable " + '\u0022' + "Rename output" + '\u0022' + " checkbox.", "Overwriting not allowed", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }

                if (chk_overw.CheckState == CheckState.Checked)
                {
                    var a = MessageBox.Show("Overwriting is enabled. Source files will be overwritten. Are you sure?", "Overwriting confirmation", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                    if (a == DialogResult.No)
                    {
                        return;
                    }
                }
            }

            //Check queued items
            if (warn_success_items == true)
            {
                //Boolean all_complete = true;
                Boolean has_complete = false;
                foreach (ListViewItem item in listView1.Items)
                {
                    if (item.SubItems[5].Text == "Success" || item.SubItems[5].Text == "Replaced")
                    {
                        has_complete = true;
                        break;
                    }
                }
                if (has_complete == true)
                {
                    DialogResult a = MessageBox.Show("Some list items were already encoded and are not in " + '\u0022' + "Queued" + '\u0022' + " status, so they may be overwritten. Reset items to Queue status to avoid this warning." + Environment.NewLine + Environment.NewLine + "Do you want to continue anyway?", "Some items with no queued status", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2);
                    if (a == DialogResult.Cancel || a == DialogResult.No) return;
                }
            }
            //End check queued items

            ListView list_proc = new ListView();
            foreach (ListViewItem item in listView1.Items)
            {
                list_proc.Items.Add((ListViewItem)item.Clone());
                item.SubItems[5].Text = "Queued";
                item.UseItemStyleForSubItems = true;
                item.BackColor = Color.White;
                item.SubItems[5].BackColor = Color.White;
            }

            cancel_queue = false;
            Pg1.Value = 0;
            pic_no_errors.Visible = false;
            pic_warnings.Visible = false;
            pic_recording.Visible = false;
            Disable_Controls();

            btn_skip_main.Enabled = true;

            working = true;

            this.InvokeEx(f => f.btn_try_pr.Image = img_try.Images[1]);

            String hw_decode = String.Empty;

            //Detect network files
            ask_cache_net = true;
            Boolean cache_net = false;
            Boolean file_is_network1 = false;
            if (no_save_cache == false)
            {
                foreach (ListViewItem item in list_proc.Items)
                {
                    try
                    {
                        DriveInfo driveInfo = new DriveInfo(item.SubItems[1].Text + "\\" + item.Text);
                        if (driveInfo.DriveType == DriveType.Network)
                        {
                            file_is_network1 = true;
                            if (ask_cache_net == true && file_is_network1 == true)
                            {
                                ask_cache_net = false;
                                DialogResult a = MessageBox.Show("Queue contains files from a network drive. Do you want to cache files to temp folder before encoding?", "Network drive caching", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2);
                                if (a == DialogResult.Yes)
                                {
                                    cache_net = true;
                                }
                                else
                                {
                                    cache_net = false;
                                }
                            }
                            break;
                        }
                    }
                    catch
                    {
                        if (item.Text.Substring(0, 1) == ("\\"))
                        {
                            file_is_network1 = true;
                        }
                        else
                        {
                            file_is_network1 = false;
                        }
                        if (ask_cache_net == true && file_is_network1 == true)
                        {
                            ask_cache_net = false;
                            DialogResult a = MessageBox.Show("Queue contains files from a network share. Do you want to cache files to temp folder before encoding?", "Network drive caching", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2);
                            if (a == DialogResult.Yes)
                            {
                                cache_net = true;
                            }
                            else
                            {
                                cache_net = false;
                            }
                        }
                    }
                    //End detect network files
                }
            }
            else
            {
                cache_net = false;
            }


            if (cb_hwdecode.SelectedItem.ToString() != "none")
            {
                hw_decode = "-hwaccel " + cb_hwdecode.SelectedItem.ToString();
            }

            //Save selected hw decoder

            String path2 = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_hw_dcd.ini";
            String txt_hw_dcd = cb_hwdecode.SelectedItem.ToString();
            if (txt_hw_dcd != "none")
            {
                File.WriteAllText(path2, txt_hw_dcd);
            }
            else
            {
                if (File.Exists(path2)) File.Delete(path2);
            }

            //End save hw decoder

            // Fade validation
            fade_ok = true;
            check_fade();
            if (fade_ok == false)
            {
                Enable_Controls();
                return;
            }
            // END Fade validation

            Pg1.Maximum = listView1.Items.Count;
            listView1.SelectedIndices.Clear();

            total_duration = 0;
            Double total_prog = 0;

            //Get total duration of files            

            foreach (ListViewItem item in listView1.Items)
            {
                if (item.SubItems[3].Text != "N/A" && item.SubItems[3].Text != "0:00:00" && item.SubItems[3].Text != "00:00:00" && item.SubItems[3].Text != "Pending")
                {
                    total_duration = total_duration + TimeSpan.Parse(item.SubItems[3].Text).TotalSeconds - TimeSpan.Parse(ss_time_input.Text).TotalSeconds;
                }
                else
                {
                    total_duration = total_duration + 0;
                }
            }

            Pg1.Minimum = 0;
            Pg1.Maximum = 100;

            lbl_elapsed.Text = "Time elapsed: 00h:00m:00s";

            String remain_time = "0";
            //End get total duration of files

            List<string> list_lines = new List<string>();
            List<string> list_successful = new List<string>();
            List<string> list_failed = new List<string>();
            process_glob.StartInfo.Arguments = String.Empty;

            time_n_tasks = 0;
            timer_tasks.Start();
            timer_est_size.Start();
            time_est_size = 0;
            String file = String.Empty;

            Boolean refresh_list = false;

            btn_add_files.Enabled = true;
            btn_add_folders.Enabled = true;
            chk_subfolders.Enabled = true;
            chk_delete_source.Enabled = true;
            panel2.Enabled = true;
            chk_delete_source.Enabled = true;
            foreach (Control ct in panel2.Controls)
            {
                if (ct.Name != chk_delete_source.Name)
                {
                    this.InvokeEx(f => ct.Enabled = false);
                }
            }
            String in_color = ":color=" + combo_vin_col.SelectedItem.ToString();
            String out_color = ":color=" + combo_vout_color.SelectedItem.ToString();
            if (combo_vin_col.SelectedIndex == 2) in_color = ":alpha=1";
            if (combo_vout_color.SelectedIndex == 2) out_color = ":alpha=1";


            //Save session variables
            String save_path_queue = Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "saved_queue_temp.ffq";
            String lista_queue = String.Empty;
            String queue_params = txt_parameters.Text + Environment.NewLine;
            String queue_ext = lista_queue + txt_format.Text;
            String checkbox1_state = Environment.NewLine + checkBox1.CheckState.ToString();
            String chk_suffix_state = String.Empty;
            if (chk_suffix.CheckState == CheckState.Unchecked) chk_suffix_state = "Unchecked";
            else
            {
                chk_suffix_state = txt_suffix.Text;
            }
            String saved_path = txt_path_main.Text;
            errors_enc = 0;

            wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler(ProgressChanged);
            wc.DownloadFileCompleted += new AsyncCompletedEventHandler(Extract);

            new System.Threading.Thread(() =>
            {
                System.Threading.Thread.CurrentThread.IsBackground = true;

                for (int list_index = 0; list_index < listView1.Items.Count; list_index++)
                {
                    System.Threading.Thread.Sleep(50); //Allow kill process to send cancel_queue
                    listView1.Invoke(new MethodInvoker(delegate
                    {
                        file = listView1.Items[list_index].SubItems[1].Text + "\\" + listView1.Items[list_index].Text;

                    }));

                    if (cancel_queue == true)
                    {
                        this.InvokeEx(f => TaskbarProgress.SetState(this.Handle, TaskbarProgress.TaskbarStates.NoProgress));
                        this.InvokeEx(f => this.Text = "FFmpeg Batch AV Converter");
                        working = false;
                        time_est_size = 0;
                        Enable_Controls();
                        MessageBox.Show("Queue processing aborted", "Tasks aborted", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                        return;
                    }
                    //Detect network files
                    Boolean file_is_network = false;
                    try
                    {
                        DriveInfo driveInfo = new DriveInfo(Path.GetDirectoryName(file));
                        if (driveInfo.DriveType == DriveType.Network)
                        {
                            file_is_network = true;
                        }
                        else
                        {
                            file_is_network = false;
                        }
                    }
                    catch
                    {
                        if (file.Substring(0, 1) == ("\\"))
                        {
                            file_is_network = true;
                        }
                        else
                        {
                            file_is_network = false;
                        }
                    }
                    //End detect network files

                    this.InvokeEx(f => timer_est_size.Start());

                    String ffm = System.IO.Path.Combine(Application.StartupPath, "ffmpeg.exe");
                    String fullPath = file;

                    //Begin Shifting
                    String shifting = "";
                    if (chk_shift.Checked == true)
                    {
                        shifting = " -itsoffset " + Num_Shift.Value.ToString().Replace(",", ".") + " -i " + '\u0022' + file + '\u0022' + " -map 1:v -map 0:a ";
                    }
                    //End Shifting

                    //Begin fading and volume changing
                    String change_vol_fade = "";
                    if (chk_vol.Checked == true)
                    {
                        change_vol_fade = "-af " + '\u0022' + "volume=" + vol_ch.Value.ToString() + "dB " + '\u0022' + " ";
                    }

                    String fade_filter = String.Empty;
                    Decimal fade_frames = 0;

                    if (fade_v_in.CheckState == CheckState.Checked || fade_v_out.CheckState == CheckState.Checked)
                    {
                        String ff_frames = String.Empty;
                        Process get_frames = new Process();
                        get_frames.StartInfo.FileName = System.IO.Path.Combine(Application.StartupPath, "MediaInfo.exe");
                        String ffprobe_frames = " " + '\u0022' + "--Inform=Video;%FrameRate%" + '\u0022';
                        get_frames.StartInfo.Arguments = ffprobe_frames + " " + '\u0022' + list_proc.Items[list_index].SubItems[1].Text + "\\" + list_proc.Items[list_index].Text + '\u0022';
                        get_frames.StartInfo.RedirectStandardOutput = true;
                        get_frames.StartInfo.RedirectStandardError = true;
                        get_frames.StartInfo.UseShellExecute = false;
                        get_frames.StartInfo.CreateNoWindow = true;
                        get_frames.EnableRaisingEvents = true;
                        get_frames.Start();

                        ff_frames = get_frames.StandardOutput.ReadLine();
                        get_frames.WaitForExit();

                        if (get_frames.ExitCode == 0)
                        {
                            if (ff_frames != null)
                            {
                                fade_frames = decimal.Parse(ff_frames) / 1000;

                            }
                        }
                        get_frames.Dispose();
                    }

                    if (fade_v_in.CheckState == CheckState.Checked && fade_v_out.CheckState == CheckState.Unchecked)
                    {
                        Decimal fff_in = Math.Round(num_v_in.Value * fade_frames, 0);
                        fade_filter = "-vf " + '\u0022' + "fade=in:0:" + fff_in.ToString() + in_color + '\u0022';
                    }

                    if (fade_v_in.CheckState == CheckState.Unchecked && fade_v_out.CheckState == CheckState.Checked)
                    {
                        Double dur_frames = TimeSpan.Parse(list_proc.Items[list_index].SubItems[3].Text).TotalSeconds * Convert.ToDouble(fade_frames);
                        Decimal fade_out_total = Math.Round(Convert.ToDecimal(dur_frames), 3, MidpointRounding.AwayFromZero);
                        Decimal fade_out_initial = Math.Round(fade_out_total - (num_v_out.Value * fade_frames), 0, MidpointRounding.AwayFromZero);
                        Decimal fff_out = Math.Round(num_v_out.Value * fade_frames, 0, MidpointRounding.AwayFromZero);

                        fade_filter = "-vf " + '\u0022' + "fade=out:" + fade_out_initial.ToString() + ":" + fff_out.ToString() + out_color + '\u0022';
                    }

                    if (fade_v_in.CheckState == CheckState.Checked && fade_v_out.CheckState == CheckState.Checked)
                    {
                        Decimal fff_in = Math.Round(num_v_in.Value * fade_frames, 0, MidpointRounding.AwayFromZero);
                        Double dur_frames = TimeSpan.Parse(list_proc.Items[list_index].SubItems[3].Text).TotalSeconds * Convert.ToDouble(fade_frames);
                        Decimal fade_out_total = Math.Round(Convert.ToDecimal(dur_frames), 3, MidpointRounding.AwayFromZero);
                        Decimal fade_out_initial = Math.Round(fade_out_total - (num_v_out.Value * fade_frames), 0, MidpointRounding.AwayFromZero);
                        Decimal fff_out = Math.Round(num_v_out.Value * fade_frames, 0, MidpointRounding.AwayFromZero);

                        fade_filter = "-vf " + '\u0022' + "fade=in:0:" + fff_in.ToString() + in_color + ", " + "fade=out:" + fade_out_initial.ToString() + ":" + fff_out.ToString() + out_color + '\u0022';
                    }

                    //Audio fading
                    if (fade_a_in.CheckState == CheckState.Checked && fade_a_out.CheckState == CheckState.Unchecked)
                    {
                        if (chk_vol.Checked == false)
                        {
                            change_vol_fade = "-af " + '\u0022' + "afade=t=in:ss=0:d=" + num_a_in.Value.ToString() + '\u0022';
                        }
                        else
                        {
                            change_vol_fade = "-af " + '\u0022' + "afade=t=in:ss=0:d=" + num_a_in.Value.ToString() + ", " + "volume=" + vol_ch.Value.ToString() + "dB " + '\u0022';
                        }
                    }

                    if (fade_a_in.CheckState == CheckState.Unchecked && fade_a_out.CheckState == CheckState.Checked)
                    {
                        Double af_out = TimeSpan.Parse(list_proc.Items[list_index].SubItems[3].Text).TotalSeconds - Convert.ToDouble(num_a_out.Value);
                        Decimal af_out_dec = Math.Round(Convert.ToDecimal(af_out), 0, MidpointRounding.AwayFromZero);
                        if (chk_vol.Checked == false)
                        {
                            change_vol_fade = "-af " + '\u0022' + "afade=t=out:st=" + af_out_dec + ":d=" + num_a_out.Value.ToString() + '\u0022';
                        }
                        else
                        {
                            change_vol_fade = "-af " + '\u0022' + "afade=t=out:st=" + af_out_dec + ":d=" + num_a_out.Value.ToString() + ", " + "volume=" + vol_ch.Value.ToString() + "dB " + '\u0022';
                        }
                    }
                    if (fade_a_in.CheckState == CheckState.Checked && fade_a_out.CheckState == CheckState.Checked)
                    {
                        Double af_out = TimeSpan.Parse(list_proc.Items[list_index].SubItems[3].Text).TotalSeconds - Convert.ToDouble(num_a_out.Value);
                        Decimal af_out_dec = Math.Round(Convert.ToDecimal(af_out), 0, MidpointRounding.AwayFromZero);

                        if (chk_vol.Checked == false)
                        {
                            change_vol_fade = "-af " + '\u0022' + "afade=t=in:ss=0:d=" + num_a_in.Value.ToString() + ", " + "afade=t=out:st=" + af_out_dec + ":d=" + num_a_out.Value.ToString() + '\u0022';
                        }
                        else
                        {
                            change_vol_fade = "-af " + '\u0022' + "afade=t=in:ss=0:d=" + num_a_in.Value.ToString() + ", " + "afade=t=out:st=" + af_out_dec + ":d=" + num_a_out.Value.ToString() + ", " + "volume=" + vol_ch.Value.ToString() + "dB " + '\u0022';
                        }
                    }
                    //End audio fading

                    //End fading

                    //End Change Volume

                    if (txt_path_main.Text.Contains(".\\"))
                    {
                        if (txt_path_main.Text != ".\\")
                            destino = file.Substring(0, fullPath.LastIndexOf('\\')) + txt_path_main.Text.Replace(".", String.Empty);
                        else
                        {
                            destino = Path.GetDirectoryName(file);
                        }
                    }
                    else
                    {
                        if (checkBox1.CheckState == CheckState.Checked)
                        {
                            String pre_dest = Path.GetDirectoryName(file);
                            destino = Path.Combine(txt_path_main.Text, pre_dest.Substring(3, pre_dest.Length - 3));
                        }
                        else
                        {
                            destino = txt_path_main.Text;
                        }
                    }

                    String pre_input_var = "";
                    if (txt_pre_input.Text != "")
                    {
                        pre_input_var = txt_pre_input.Text;
                    }

                    String pre_ss = "";
                    if (TimeSpan.Parse(ss_time_input.Text).TotalSeconds != 0)
                    {
                        pre_ss = " -ss " + ss_time_input.Text;
                    }

                    add_suffix = "";

                    if (chk_suffix.Checked == true && txt_suffix.Text != String.Empty)
                    {
                        add_suffix = txt_suffix.Text;
                    }

                    String ext_output1 = txt_format.Text;
                    if (txt_format.Text == String.Empty)
                    {
                        ext_output1 = Path.GetExtension(file);
                    }
                    else
                    {
                        ext_output1 = "." + txt_format.Text;
                    }
                    if (txt_format.Text == "nul") ext_output1 = "nul";

                    textbox_params = txt_parameters.Text;
                    String file2 = file;
                    while (textbox_params.Contains("%fn"))
                    {
                        if (textbox_params.Contains("%fn"))
                        {
                            textbox_params = textbox_params.Replace("%fn", Path.GetFileNameWithoutExtension(file));
                        }
                    }
                    while (textbox_params.Contains("%fp"))
                    {
                        if (textbox_params.Contains("%fp"))
                        {
                            textbox_params = textbox_params.Replace("%fp", Path.GetDirectoryName(file));
                        }
                    }

                    while (textbox_params.Contains("%fd"))
                    {
                        if (textbox_params.Contains("%fd"))
                        {
                            var path = Path.GetFullPath(file);
                            var dirName = Path.GetFileName(Path.GetDirectoryName(path));
                            textbox_params = textbox_params.Replace("%fd", dirName);
                        }
                    }

                    while (textbox_params.Contains("%1"))
                    {
                        if (textbox_params.Contains("%1"))
                        {
                            file2 = file2.Replace("\\", "\\\\\\\\");
                            file2 = file2.Replace(":", "\\\\" + ":");
                            textbox_params = textbox_params.Replace("%1", file2);
                        }
                    }

                    while (textbox_params.Contains("%2"))
                    {
                        if (textbox_params.Contains("%2"))
                        {
                            file2 = file2.Replace("\\", "\\\\\\\\");
                            file2 = file2.Replace(":", "\\\\" + ":");
                            textbox_params = textbox_params.Replace("%2", Path.Combine(System.IO.Path.GetDirectoryName(file2), Path.GetFileNameWithoutExtension(file2)));
                        }
                    }

                    String AppParam = String.Empty;
                    String file_cache = String.Empty;
                    String current_out = destino + "\\" + System.IO.Path.GetFileNameWithoutExtension(file) + add_suffix + ext_output1;
                    Boolean to_overw = false;

                    if (file_is_network == true && cache_net == true)
                    {
                        this.InvokeEx(f => f.pg_adding.Style = ProgressBarStyle.Marquee);
                        try
                        {
                            if (Directory.Exists(Path.Combine(Path.GetTempPath(), "FFBatch_test")) == false) Directory.CreateDirectory(Path.Combine(Path.GetTempPath(), "FFBatch_test"));
                            {
                                file_to_copy = file;
                                cached = false;
                                cancel_cache = false;
                                this.InvokeEx(f => f.txt_add_remain.Enabled = true);
                                this.InvokeEx(f => f.txt_add_remain.Text = String.Empty);
                                this.InvokeEx(f => f.txt_add_remain.Visible = true);

                                if (os_save_cache == false)
                                {
                                    CopyCache();
                                    do
                                    {
                                        Thread.Sleep(750);
                                    }
                                    while (cached == false && cancel_cache == false);
                                }
                                else
                                {
                                    this.InvokeEx(f => this.Enabled = false);
                                    this.InvokeEx(f => f.txt_add_remain.Visible = true);
                                    if (File.Exists(Path.Combine(Path.GetTempPath(), "FFBatch_test", Path.GetFileName(file_to_copy))))
                                    {
                                        FileInfo fi = new FileInfo(Path.Combine(Path.GetTempPath(), "FFBatch_test", Path.GetFileName(file_to_copy)));
                                        FileInfo fi2 = new FileInfo(file_to_copy);
                                        if (fi.Length == fi2.Length)
                                        {
                                            cached = true;
                                            this.InvokeEx(f => this.Enabled = true);
                                            this.InvokeEx(f => f.txt_add_remain.Visible = false);
                                            cached = true;
                                        }
                                    }
                                    else
                                    {
                                        net_speed();
                                        FileSystem.CopyFile(file, Path.Combine(Path.GetTempPath(), "FFBatch_test", Path.GetFileName(file)), UIOption.AllDialogs, UICancelOption.ThrowException);
                                        this.InvokeEx(f => this.Enabled = true);
                                        this.InvokeEx(f => f.txt_add_remain.Visible = false);
                                        cached = true;
                                    }
                                }

                                if (cached == true && cancel_cache == false)
                                {
                                    cache_net = true;
                                    file_cache = Path.Combine(Path.GetTempPath(), "FFBatch_test", Path.GetFileName(file));
                                    AppParam = hw_decode + " " + pre_input_var + " " + pre_ss + " -i " + "" + '\u0022' + file_cache + '\u0022' + " " + shifting + " -y " + textbox_params + " " + fade_filter + " " + change_vol_fade + " " + '\u0022' + destino + "\\" + System.IO.Path.GetFileNameWithoutExtension(file_cache) + add_suffix + ext_output1 + '\u0022' + " -hide_banner";
                                }
                                else
                                {
                                    AppParam = hw_decode + " " + pre_input_var + " " + pre_ss + " -i " + "" + '\u0022' + file + '\u0022' + " " + shifting + " -y " + textbox_params + " " + fade_filter + " " + change_vol_fade + " " + '\u0022' + destino + "\\" + System.IO.Path.GetFileNameWithoutExtension(file) + add_suffix + ext_output1 + '\u0022' + " -hide_banner";
                                    cache_net = false;

                                }
                                cancel_cache = false;
                            }
                        }

                        catch
                        {
                            this.InvokeEx(f => this.Enabled = true);
                            this.InvokeEx(f => f.txt_add_remain.Visible = false);
                            this.InvokeEx(f => f.btn_abort_all.Enabled = true);
                            this.InvokeEx(f => f.btn_skip_main.Enabled = true);
                            Thread.Sleep(250);
                            this.InvokeEx(f => f.pg_adding.Visible = false);
                            this.InvokeEx(f => f.LB_Wait.Visible = false);
                            this.InvokeEx(f => f.btn_cancel_add.Visible = false);
                            this.InvokeEx(f => f.txt_adding_p.Visible = false);
                            this.InvokeEx(f => f.txt_add_remain.Visible = false);
                            this.InvokeEx(f => f.txt_add_remain.Enabled = false);
                            this.InvokeEx(f => f.btn_pause.Enabled = true);
                            cache_net = false;
                            AppParam = hw_decode + " " + pre_input_var + " " + pre_ss + " -i " + "" + '\u0022' + file + '\u0022' + " " + shifting + " -y " + textbox_params + " " + fade_filter + " " + change_vol_fade + " " + '\u0022' + destino + "\\" + System.IO.Path.GetFileNameWithoutExtension(file) + add_suffix + ext_output1 + '\u0022' + " -hide_banner";
                            if (ext_output1 == "nul") AppParam = hw_decode + " " + pre_input_var + " " + pre_ss + " -i " + "" + '\u0022' + file + '\u0022' + " " + shifting + " " + textbox_params + " " + fade_filter + " " + change_vol_fade + " " + " -hide_banner";
                        }
                    }
                    else
                    {
                        AppParam = hw_decode + " " + pre_input_var + " " + pre_ss + " -i " + "" + '\u0022' + file + '\u0022' + " " + shifting + " -y " + textbox_params + " " + fade_filter + " " + change_vol_fade + " " + '\u0022' + destino + "\\" + System.IO.Path.GetFileNameWithoutExtension(file) + add_suffix + ext_output1 + '\u0022' + " -hide_banner";
                        if (ext_output1 == "nul") AppParam = hw_decode + " " + pre_input_var + " " + pre_ss + " -i " + "" + '\u0022' + file + '\u0022' + " " + shifting + " " + textbox_params + " " + fade_filter + " " + change_vol_fade + " " + " -hide_banner";
                    }

                    if (chk_overw.CheckState == CheckState.Checked)
                    {
                        if (current_out == file)
                        {
                            AppParam = hw_decode + " " + pre_input_var + " " + pre_ss + " -i " + "" + '\u0022' + file + '\u0022' + " " + shifting + " -y " + textbox_params + " " + fade_filter + " " + change_vol_fade + " " + '\u0022' + destino + "\\" + System.IO.Path.GetFileNameWithoutExtension(file) + "_fftemp" + add_suffix + ext_output1 + '\u0022' + " -hide_banner";
                            if (ext_output1 == "nul") AppParam = hw_decode + " " + pre_input_var + " " + pre_ss + " -i " + "" + '\u0022' + file + '\u0022' + " " + shifting + " " + textbox_params + " " + fade_filter + " " + change_vol_fade + " " + " -hide_banner";
                            to_overw = true;
                        }
                    }
                    if (current_out == file && chk_overw.CheckState == CheckState.Unchecked)
                    {
                        this.InvokeEx(f => TaskbarProgress.SetState(this.Handle, TaskbarProgress.TaskbarStates.NoProgress));
                        working = false;
                        time_est_size = 0;
                        Enable_Controls();
                        MessageBox.Show("Source and destination files are the same, but overwriting is not enabled.", "Overwriting not possible", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        return;
                    }

                    String second_path = "";
                    if (ext_output1 == "nul")
                    {
                        String[] split = txt_parameters.Text.Split(' ');
                        for (int i = 0; i < split.Length; i++)
                        {
                            if (split[i].Contains("\\") == true)
                            {
                                String pre_path = split[i].Replace("%fp", Path.GetDirectoryName(file)).Replace("%fn", Path.GetFileNameWithoutExtension(file)).Replace("%", "_");
                                second_path = Path.GetDirectoryName(pre_path.Replace('\u0022', ' '));
                                
                                if (!Directory.Exists(second_path))
                                {
                                    try
                                    {
                                        Directory.CreateDirectory(second_path);
                                    }
                                    catch
                                    {

                                    }
                                }
                            }
                        }
                    }

                    if (!Directory.Exists(destino) && ext_output1 != "nul")
                    {
                        try { Directory.CreateDirectory(destino); }
                        catch { }
                    }

                    if (verbose_logs == false) AppParam = AppParam + " -loglevel warning -stats";                    
                    process_glob.StartInfo.FileName = ffm;
                    process_glob.StartInfo.Arguments = AppParam;
                    valid_prog = false;
                    this.InvokeEx(f => f.listView1.Items[list_index].SubItems[5].Text = "Processing");
                    
                    process_glob.StartInfo.RedirectStandardOutput = true;
                    process_glob.StartInfo.StandardOutputEncoding = Encoding.UTF8;
                    process_glob.StartInfo.RedirectStandardInput = true;
                    process_glob.StartInfo.RedirectStandardError = true;
                    process_glob.StartInfo.StandardErrorEncoding = Encoding.UTF8;
                    process_glob.StartInfo.UseShellExecute = false;
                    process_glob.StartInfo.CreateNoWindow = true;
                    process_glob.EnableRaisingEvents = true;
                    process_glob.Start();

                    System.Threading.Thread.Sleep(50);
                    combo_prio.Invoke(new MethodInvoker(delegate
                    {
                        if (combo_prio.SelectedIndex != 2)
                        {
                            Change_mem_prio();
                        }

                    }));

                    this.InvokeEx(f => validate_duration = listView1.Items[list_index].SubItems[3].Text);
                    if (validate_duration != "N/A" && validate_duration != "0:00:00" && validate_duration != "00:00:00" && validate_duration != "Pending")
                    {
                        valid_prog = true;
                    }

                    String err_txt = "";
                    Double interval = 0;
                    Decimal est_bitrate = 0;
                    Decimal est_size = 0;
                    lbl_speed.Text = String.Empty;
                    Double sec_prog = 0;

                    while (!process_glob.StandardError.EndOfStream)
                    {
                        err_txt = process_glob.StandardError.ReadLine();
                        list_lines.Add(err_txt);

                        if (err_txt.Contains("time=") && err_txt.Contains("time=-") == false)
                        {
                            if (valid_prog == true)
                            {
                                this.InvokeEx(f => durat_n = TimeSpan.Parse(listView1.Items[list_index].SubItems[3].Text).TotalSeconds - TimeSpan.Parse(ss_time_input.Text).TotalSeconds);
                                int start_time_index = err_txt.IndexOf("time=") + 5;
                                sec_prog = TimeSpan.Parse(err_txt.Substring(start_time_index, 8)).TotalSeconds;

                                Double percent = (sec_prog * 100 / durat_n);

                                total_prog = total_prog + (sec_prog - interval);
                                interval = sec_prog;
                                int percent2 = Convert.ToInt32(percent);

                                Double percent_tot = (total_prog * 100 / total_duration);
                                int percent_tot_2 = Convert.ToInt32(percent_tot);

                                if (percent_tot_2 <= 100)
                                {
                                    this.InvokeEx(f => f.Pg1.Value = percent_tot_2);
                                    this.InvokeEx(f => f.Pg1.Refresh());

                                    if (Math.Round(percent_tot, 1).ToString().Contains(".") || Math.Round(percent_tot, 1).ToString().Contains(","))
                                    {
                                        this.InvokeEx(f => f.Pg1.Text = Math.Round(percent_tot, 1).ToString() + "%");
                                    }
                                    else
                                    {
                                        this.InvokeEx(f => f.Pg1.Text = Math.Round(percent_tot, 1).ToString() + System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator + "0" + "%");
                                    }

                                    this.InvokeEx(f => TaskbarProgress.SetValue(this.Handle, percent_tot, Pg1.Maximum));
                                }

                                if (percent2 <= 100)
                                {
                                    if (Math.Round(percent, 1).ToString().Contains(".") || Math.Round(percent, 1).ToString().Contains(","))
                                    {
                                        this.InvokeEx(f => f.listView1.Items[list_index].SubItems[5].Text = Math.Round(percent, 1).ToString() + "%");

                                    }
                                    else
                                    {
                                        this.InvokeEx(f => f.listView1.Items[list_index].SubItems[5].Text = Math.Round(percent, 1).ToString() + System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator + "0" + "%");

                                    }
                                }

                                if (cancel_queue == false)
                                {
                                    //Estimated remaining time

                                    remain_time = err_txt.Substring(err_txt.LastIndexOf("speed=") + 6, err_txt.Length - err_txt.LastIndexOf("speed=") - 6);
                                    if (time_est_size % 3 == 0) this.InvokeEx(f => f.lbl_speed.Text = "Speed: " + remain_time);
                                    remain_time = remain_time.Replace("x", String.Empty);
                                    Double timing1 = 0;

                                    if (System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator == ",")
                                    {
                                        timing1 = Math.Round(Double.Parse(remain_time.Replace(".", ",")), 2);
                                    }
                                    else
                                    {
                                        timing1 = Math.Round(Double.Parse(remain_time), 2);
                                    }

                                    Decimal timing = (decimal)timing1;
                                    Decimal total_dur_dec = Convert.ToDecimal(total_duration);
                                    Decimal total_prog_dec = Convert.ToDecimal(total_prog);
                                    Decimal remain_secs = 0;
                                    if (timing > 0)
                                    {
                                        remain_secs = (decimal)(total_dur_dec - total_prog_dec) / timing;
                                    }

                                    if (remain_secs > 60)
                                    {
                                        remain_secs = remain_secs + 60;
                                    }

                                    String remain_from_secs = "";

                                    TimeSpan t = TimeSpan.FromSeconds(Convert.ToDouble(remain_secs));
                                    remain_from_secs = string.Format("{0:D2}h:{1:D2}",
                                       t.Hours,
                                      t.Minutes);

                                    if (remain_secs >= 43200)
                                    {
                                        this.InvokeEx(f => f.txt_remain.Text = "Time remaining: " + Math.Round(remain_secs / 3600).ToString() + " hours");
                                        this.InvokeEx(f => this.Text = "Enc. " + Pg1.Text + " / " + "Est. " + Math.Round(remain_secs / 3600).ToString() + " hours");
                                    }

                                    if (remain_secs >= 3600 && remain_secs < 43200)
                                    {
                                        this.InvokeEx(f => f.txt_remain.Text = "Time remaining: " + remain_from_secs + " min");
                                        this.InvokeEx(f => this.Text = "Enc. " + Pg1.Text + " / " + "Est. " + remain_from_secs + " min");
                                    }

                                    if (remain_secs < 3600 && remain_secs >= 600)
                                    {
                                        this.InvokeEx(f => f.txt_remain.Text = "Time remaining: " + remain_from_secs.Substring(remain_from_secs.LastIndexOf(":") + 1, 2) + " minutes");
                                        this.InvokeEx(f => this.Text = "Enc. " + Pg1.Text + " / " + "Est. " + remain_from_secs.Substring(remain_from_secs.LastIndexOf(":") + 1, 2) + " min");
                                    }
                                    if (remain_secs < 600 && remain_secs >= 120)
                                    {
                                        this.InvokeEx(f => f.txt_remain.Text = "Time remaining: " + remain_from_secs.Substring(remain_from_secs.LastIndexOf(":") + 2, 1) + " minutes");
                                        this.InvokeEx(f => this.Text = "Enc. " + Pg1.Text + " / " + "Est. " + remain_from_secs.Substring(remain_from_secs.LastIndexOf(":") + 2, 1) + " min");
                                    }

                                    if (remain_secs <= 59 && remain_secs != 0)
                                    {
                                        this.InvokeEx(f => f.txt_remain.Text = "Time remaining: " + Convert.ToInt16(Math.Abs(remain_secs)) + " seconds");
                                        this.InvokeEx(f => this.Text = "Enc. " + Pg1.Text + " / " + "Est. " + Convert.ToInt16(Math.Abs(remain_secs)) + " s");
                                    }
                                    if (remain_secs == 0)
                                    {
                                        this.InvokeEx(f => f.txt_remain.Text = "Time remaining: " + "About to finish");
                                        this.InvokeEx(f => this.Text = "Enc. " + Pg1.Text);

                                    }
                                }
                                //End remaining time

                                //Estimated size and bitrate

                                String read_size = String.Empty;
                                if (err_txt.Contains("size=") && (time_est_size % 3 == 0))
                                {
                                    int size_index = err_txt.IndexOf("size=") + 5;
                                    read_size = err_txt.Substring(size_index, 8);
                                    if (Convert.ToDecimal(sec_prog) != 0 & read_size.Contains("N/A") == false)
                                    {
                                        est_bitrate = (Math.Round(Convert.ToDecimal(read_size) * 8 / Convert.ToDecimal(sec_prog), 0));
                                    }
                                    else
                                    {
                                        est_bitrate = 0;
                                    }

                                    if (read_size.Contains("N/A") == false && Convert.ToDecimal(read_size) > 1 && time_n_tasks > 1)
                                    {
                                        if (est_bitrate < 9999)
                                        {
                                            if (est_bitrate > 48)
                                            {
                                                this.InvokeEx(f => f.lbl_bitrate.Text = "Avg. bitrate: " + est_bitrate + " Kb/s");
                                            }
                                            else
                                            {
                                                this.InvokeEx(f => f.lbl_bitrate.Text = "Avg. bitrate: ");
                                            }
                                        }
                                        else
                                        {
                                            this.InvokeEx(f => f.lbl_bitrate.Text = "Avg. bitrate: " + (Math.Round(est_bitrate / 1000, 0)) + " Mb/s");
                                        }
                                        //Estimated size
                                        est_size = Convert.ToDecimal(durat_n) * est_bitrate / 8;

                                        if (est_size > 1000000)
                                        {
                                            this.InvokeEx(f => f.lbl_est_size.Text = "Estimated size: " + (Math.Round(est_size / 1000000, 1)).ToString() + " GB");
                                        }
                                        else
                                        {
                                            if (Math.Round(est_size / 1000, 0) > 0)
                                            {
                                                this.InvokeEx(f => f.lbl_est_size.Text = "Estimated size: " + (Math.Round(est_size / 1000, 0)).ToString() + " MB");
                                            }
                                            else
                                            {
                                                this.InvokeEx(f => f.lbl_est_size.Text = "Estimated size: ");
                                            }
                                        }
                                    }

                                    this.InvokeEx(f => f.lbl_est_size.Refresh());
                                }
                            }
                        }
                    }
                    process_glob.WaitForExit();
                    process_glob.StartInfo.Arguments = String.Empty;
                    timer_est_size.Stop();
                    time_est_size = 0;
                    this.InvokeEx(f => lbl_speed.Text = String.Empty);
                    this.InvokeEx(f => f.lbl_est_size.Text = String.Empty);
                    this.InvokeEx(f => f.lbl_bitrate.Text = String.Empty);

                    list_lines.Add("");
                    list_lines.Add("---------------------End of " + Path.GetFileName(file) + " log-------------------------------");
                    list_lines.Add("");

                    if (process_glob.ExitCode == 0)
                    {
                        list_successful.Add(file);
                        if (skipped == false)
                        {
                            this.InvokeEx(f => f.listView1.Items[list_index].SubItems[5].Text = "Success");
                            if (chk_overw.CheckState == CheckState.Checked)
                            {
                                if (current_out == file)
                                {

                                    try
                                    {
                                        File.Delete(file);
                                        FileSystem.RenameFile(destino + "\\" + System.IO.Path.GetFileNameWithoutExtension(file) + "_fftemp" + add_suffix + ext_output1, Path.GetFileNameWithoutExtension(file) + add_suffix + ext_output1);
                                        this.InvokeEx(f => f.listView1.Items[list_index].SubItems[5].Text = "Replaced");
                                        refresh_list = true;
                                    }
                                    catch
                                    {
                                        this.InvokeEx(f => f.listView1.Items[list_index].SubItems[5].Text = "Not replaced");

                                    }
                                }
                            }
                        }
                        else
                        {
                            this.InvokeEx(f => f.listView1.Items[list_index].SubItems[5].Text = "Skipped");
                            this.InvokeEx(f => f.listView1.Items[list_index].SubItems[5].BackColor = Color.Beige);
                            total_prog = total_prog + durat_n - sec_prog;
                            skipped = false;
                        }
                    }
                    else
                    {
                        list_failed.Add(file);
                        this.InvokeEx(f => f.listView1.Items[list_index].SubItems[5].Text = "Error");
                        errors_enc = errors_enc + 1;
                    }
                    
                    //Save session
                    lista_queue = queue_params;
                    lista_queue = lista_queue + queue_ext;
                    lista_queue = lista_queue + checkbox1_state;
                    lista_queue = lista_queue + Environment.NewLine + chk_suffix_state;
                    lista_queue = lista_queue + Environment.NewLine + saved_path;
                    listView1.Invoke(new MethodInvoker(delegate
                    {
                        foreach (ListViewItem item in listView1.Items)
                        {
                            lista_queue = lista_queue + Environment.NewLine + item.SubItems[1].Text + "\\" + item.Text + " --0 " + item.SubItems[2].Text + " --1 " + item.SubItems[3].Text + " --2 " + item.SubItems[4].Text + " --3 " + item.SubItems[5].Text;
                        }
                    }));

                    if (file_is_network == true && cache_net == true && process_glob.ExitCode == 0)
                    {
                        Thread.Sleep(500);
                        try
                        {
                            File.Delete(file_cache.Replace("\\\\", "\\"));
                        }
                        catch { }

                    }
                    File.WriteAllText(save_path_queue, lista_queue);

                    //End save session

                    if (list_index == listView1.Items.Count - 1)
                    {

                        this.InvokeEx(f => f.Pg1.Value = 100);
                        this.InvokeEx(f => f.Pg1.Text = "100%");
                        this.InvokeEx(f => f.Pg1.Refresh());
                        this.InvokeEx(f => TaskbarProgress.SetState(this.Handle, TaskbarProgress.TaskbarStates.NoProgress));
                        this.InvokeEx(f => this.Text = "FFmpeg Batch AV Converter");
                        try
                        {
                            File.Delete(save_path_queue);
                        }
                        catch { }

                        working = false;
                        timer_est_size.Stop();
                        time_est_size = 0;

                        //Save log
                        if (no_save_logs == false)
                        {
                            string[] array_err = list_lines.ToArray();
                            String path = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_batch.log";
                            System.IO.StreamWriter SaveFile = new System.IO.StreamWriter(path);
                            SaveFile.WriteLine("FFmpeg log sesion: " + System.DateTime.Now);
                            SaveFile.WriteLine("-------------------------------");
                            foreach (String item in array_err)
                            {
                                SaveFile.WriteLine(item);
                            }
                            SaveFile.Close();

                            File.AppendAllText(path, "-----------------------");
                            File.AppendAllText(path, Environment.NewLine + "END OF LOG FILE" + Environment.NewLine);
                            File.AppendAllText(path, "-----------------------");
                            System.IO.FileInfo fileInfo = new System.IO.FileInfo(path);

                            var bytes = fileInfo.Length;

                            var kilobytes = (double)bytes / 1024;
                            var megabytes = kilobytes / 1024;
                            var gigabytes = megabytes / 1024;

                            //Format size view
                            String size = "";
                            String separator = ".";

                            if (bytes > 1000000000)
                            {
                                if (gigabytes.ToString().Contains("."))
                                {
                                    separator = ".";
                                }
                                else
                                {
                                    separator = ",";
                                }

                                String gigas = gigabytes.ToString();
                                if (gigas.Length >= 5)
                                {
                                    gigas = gigas.Substring(0, gigas.LastIndexOf(separator) + 3);
                                    size = (gigas + " GB");
                                }
                                else
                                {
                                    size = (gigas + " GB");
                                }
                            }

                            if (bytes >= 1048576 && bytes <= 1000000000)
                            {
                                if (megabytes.ToString().Contains("."))
                                {
                                    separator = ".";
                                }
                                else
                                {
                                    separator = ",";
                                }
                                String megas = megabytes.ToString();
                                if (megas.Length > 5)
                                {
                                    megas = megas.Substring(0, megas.LastIndexOf(separator));
                                    size = (megas + " MB");
                                }
                                else
                                {
                                    size = (megas + " MB");
                                }
                            }

                            if (bytes >= 1024 && bytes < 1048576)

                            {
                                if (kilobytes.ToString().Contains("."))
                                {
                                    separator = ".";
                                }
                                else
                                {
                                    separator = ",";
                                }

                                String kbs = kilobytes.ToString();
                                if (kbs.Length >= 5)
                                {
                                    kbs = kbs.Substring(0, kbs.LastIndexOf(separator));
                                    size = (kbs + " KB");
                                }
                                else
                                {
                                    size = (kbs + " KB");
                                }
                            }
                            if (bytes > -1 && bytes < 1024)
                            {
                                String bits = bytes.ToString();
                                size = (bits + " Bytes");
                            }

                            //End Format size view
                            timer_tasks.Stop();
                            TimeSpan t = TimeSpan.FromSeconds(time_n_tasks);
                            String tx_elapsed = string.Format("{0:D2}h:{1:D2}m:{2:D2}s",
                                t.Hours,
                                t.Minutes,
                                t.Seconds);
                            File.AppendAllText(path, Environment.NewLine);
                            File.AppendAllText(path, Environment.NewLine + "Total time: " + tx_elapsed);
                            File.AppendAllText(path, Environment.NewLine + "LOG SIZE: " + size);

                            //End save log
                        }

                        this.Invoke(new MethodInvoker(delegate
                        {
                            if (errors_enc == 0) pic_no_errors.Visible = true;
                            else
                            {
                                pic_no_errors.Visible = false;
                                pic_recording.Visible = false;
                                toolT002.SetToolTip(this.pic_warnings, "There were " + errors_enc.ToString() + " error(s) during last session");
                                pic_warnings.Visible = true;
                            }
                        }));

                        //Automatic shutdown check
                        if (chkshut.Checked && cancel_queue == false)
                        {
                            auto_shut();
                            return;
                        }
                        //End shutdown check
                        else
                        {
                            if (cancel_queue == false)
                            {
                                if (chk_delete_source.CheckState == CheckState.Checked)
                                {
                                    Disable_Controls();
                                    System.Threading.Thread.Sleep(500);                                    

                                    Label prog_txt = new Label();
                                    this.InvokeEx(f => prog_txt.Parent = panel1);
                                    this.InvokeEx(f => prog_txt.Top = 95);
                                    this.InvokeEx(f => prog_txt.Left = 80);
                                    this.InvokeEx(f => prog_txt.Width = 250);
                                    this.InvokeEx(f => prog_txt.TabIndex = 1);
                                    this.InvokeEx(f => prog_txt.BackColor = panel1.BackColor);
                                    this.InvokeEx(f => prog_txt.BorderStyle = BorderStyle.None);
                                    this.InvokeEx(f => prog_txt.TextAlign = ContentAlignment.MiddleLeft);
                                    this.InvokeEx(f => prog_txt.BringToFront());
                                    this.InvokeEx(f => prog_txt.Text = "Sending processed files to recycle bin...");

                                    ProgressBar pg_del = new ProgressBar();
                                    this.InvokeEx(f => pg_del.Parent = panel1);
                                    this.InvokeEx(f => pg_del.Top = 98);
                                    this.InvokeEx(f => pg_del.Left = 315);
                                    this.InvokeEx(f => pg_del.Width = 152);
                                    this.InvokeEx(f => pg_del.Height = 15);
                                    this.InvokeEx(f => pg_del.TabIndex = 0);
                                    this.InvokeEx(f => pg_del.BackColor = this.BackColor);
                                    this.InvokeEx(f => pg_del.Minimum = 0);
                                    this.InvokeEx(f => pg_del.BringToFront());
                                    this.InvokeEx(f => pg_del.Maximum = list_proc.Items.Count);
                                    this.InvokeEx(f => pg_del.Show());
                                    this.InvokeEx(f => pg_del.Refresh());
                                    int i = 0;
                                    int err = 0;

                                    foreach (String item in list_successful)
                                    {                                       
                                            try
                                            {
                                                FileSystem.DeleteFile(item, UIOption.OnlyErrorDialogs, RecycleOption.SendToRecycleBin);
                                                this.InvokeEx(f => pg_del.Value = i);
                                                i = i + 1;
                                            }
                                            catch
                                            {
                                                err = err + 1;
                                            list_failed.Add(item + " could not be deleted.");
                                            }

                                            this.InvokeEx(f => prog_txt.Text = "Sending source files to recycle bin... " + i.ToString() + " of " + list_proc.Items.Count);
                                            this.InvokeEx(f => prog_txt.Refresh());
                                    
                                    }
                                    this.InvokeEx(f => prog_txt.Visible = false);
                                    this.InvokeEx(f => prog_txt.Dispose());
                                    this.InvokeEx(f => pg_del.Visible = false);
                                    this.InvokeEx(f => pg_del.Dispose());
                                    Enable_Controls();

                                    if (err > 0) MessageBox.Show(err.ToString() + " files could not be moved to the recycle bin. Check log file at the end for further details.", "Some files not recycled", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);

                                    Boolean all_ok = true;
                                    foreach (ListViewItem item in list_proc.Items)
                                    {
                                        if (item.SubItems[5].Text != "Success")
                                        {
                                            all_ok = false;
                                            break;
                                        }
                                    }
                                    if (all_ok == true)
                                    {
                                        this.InvokeEx(f => f.btn_refresh.PerformClick());
                                    }
                                    if (list_failed.Count > 0)
                                    {
                                        String path = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_batch.log";
                                        File.AppendAllText(path, Environment.NewLine + Environment.NewLine +  "Source files that could not be deleted due to failed encoding or file in use:");
                                        File.AppendAllText(path, Environment.NewLine + "-------------------------------");
                                        foreach (String item in list_failed)
                                        {                                            
                                            File.AppendAllText(path, Environment.NewLine + item);
                                        }                                        
                                    }
                                }
                                if (errors_enc == 0)
                                {
                                    if (play_on_end == true) play_end();
                                }
                                else if (play_on_end == true) System.Media.SystemSounds.Asterisk.Play();

                                if (Form.ActiveForm == null)
                                {
                                    if (errors_enc == 0)
                                    {
                                        notifyIcon1.BalloonTipText = "FFmpeg Batch encoding succesfully completed";
                                        notifyIcon1.BalloonTipIcon = ToolTipIcon.Info;
                                        notifyIcon1.BalloonTipTitle = "Encoding complete";
                                        notifyIcon1.ShowBalloonTip(0);


                                    }
                                    else
                                    {
                                        notifyIcon1.BalloonTipText = "FFmpeg Batch encoding completed with " + errors_enc.ToString() + " error(s).";
                                        notifyIcon1.BalloonTipIcon = ToolTipIcon.Warning;
                                        notifyIcon1.BalloonTipTitle = "Encoding complete";
                                        notifyIcon1.ShowBalloonTip(0);
                                    }
                                }

                                if (checkBox3.Checked)
                                {
                                    if (Directory.Exists(second_path) && Directory.GetFiles(second_path).Length != 0 && ext_output1 == "nul")
                                    {
                                        Process open_processed = new Process();
                                        open_processed.StartInfo.FileName = "explorer.exe";
                                        open_processed.StartInfo.Arguments = '\u0022' + second_path + '\u0022';
                                        open_processed.Start();
                                    }
                                    if (Directory.Exists(destino) && Directory.GetFiles(destino).Length != 0 && ext_output1 != "nul")
                                    {
                                        Process open_processed = new Process();
                                        open_processed.StartInfo.FileName = "explorer.exe";
                                        open_processed.StartInfo.Arguments = '\u0022' + destino + '\u0022';
                                        open_processed.Start();
                                    }
                                    else
                                    {
                                        if (Directory.Exists(destino))
                                        {
                                            try { System.IO.Directory.Delete(destino); }
                                            catch { }
                                        }
                                    }
                                }
                            }
                            else
                            {
                                this.InvokeEx(f => f.Pg1.Text = "100%");
                                this.InvokeEx(f => MessageBox.Show("Queue processing aborted", "Aborted", MessageBoxButtons.OK, MessageBoxIcon.Error));
                            }
                        }
                    }
                }

                this.InvokeEx(f => this.Cursor = Cursors.Arrow);
                Enable_Controls();
            }).Start();
        }

        private void auto_shut()
        {
            int index = 0;
            combo_shut.Invoke(new MethodInvoker(delegate
            {
                index = combo_shut.SelectedIndex;
            }));

            if (index < 3)
            {
                Disable_Controls();
                disable_abort_btn();
                this.InvokeEx(f => f.chkshut.Enabled = false);
                this.InvokeEx(f => f.btn_pause.Enabled = false);
                this.InvokeEx(f => f.Timer_apaga.Start());
                this.InvokeEx(f => f.TopMost = true);
                this.InvokeEx(f => f.TB1.Enabled = true);
                this.InvokeEx(f => f.TB1.Visible = true);
                this.InvokeEx(f => f.btn_cancel_shut.Enabled = true);
                this.InvokeEx(f => f.btn_cancel_shut.Visible = true);
                this.InvokeEx(f => f.btn_abort_all.Enabled = false);
                this.InvokeEx(f => f.TB1.Text = "Computer will " + shut_type + " in 60 seconds");
                this.InvokeEx(f => f.btn_cancel_shut.Text = "Press to cancel " + shut_type);
                notifyIcon1.BalloonTipText = "Computer will " + shut_type + " in 60 seconds";
                notifyIcon1.BalloonTipIcon = ToolTipIcon.Warning;
                notifyIcon1.BalloonTipTitle = "FFmpeg Batch AV Converter";
                notifyIcon1.ShowBalloonTip(0);
            }
            else
            {
                this.InvokeEx(f => this.Enabled = false);
                Form14 frm_run = new Form14();
                frm_run.txt_path.Text = run_command;
                frm_run.args = run_command_args;
                frm_run.ShowDialog();
                this.InvokeEx(f => this.Enabled = true);
                Enable_Controls();
            }
        }

        private void start_multiple()
        {
            cancel_queue = false;
            notifyIcon1.Visible = true;
            pic_no_errors.Visible = false;
            pic_warnings.Visible = false;
            pic_recording.Visible = false;
            errors_enc = 0;
            lbl_multip.Text = String.Empty;
            //Validated list, start processing
            if ((fade_v_in.Checked == true && num_v_in.Value == 0) || (fade_v_out.Checked == true && num_v_out.Value == 0) || (fade_a_in.Checked == true && num_a_in.Value == 0) || (fade_a_out.Checked == true && num_a_out.Value == 0))
            {
                MessageBox.Show("Fading cannot be zero", "Fading is zero", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            txt_remain.Text = "Time remaining: 00h:00m:00s";

            if (listView1.SelectedIndices.Count == 0)
            {
                listView1.Items[0].Selected = true;
                listView1.Items[0].Focused = true;
                listView1.Focus();
            }

            Boolean pr2_ok = false;
            foreach (String item in tried_params)
            {
                if (item == multi_pr1)
                {
                    tried_ok = true;
                    break;
                }
            }

            if (tried_ok == true)
            {
                foreach (String item in tried_params)
                {
                    if (item == (multi_pr2))
                    {
                        pr2_ok = true;
                        break;
                    }
                }
                if (pr2_ok != true) tried_ok = false;
            }

            if (tried_ok == true && multi_pr3.Length == 0)
            {
                foreach (String item in tried_params)
                {
                    if (item == (multi_pr2))
                    {
                        tried_ok = true;
                        break;
                    }
                }
            }

            if (tried_ok == false)
            {
                try
                {
                    BG_Try_multi.RunWorkerAsync();
                }
                catch
                {
                    tried_ok = true;
                }

                return;
            }
            tried_ok = false;

            //Remove test file/folder

            String file_prueba = "";
            String sel_test = listView1.SelectedItems[0].SubItems[1].Text + "\\" + listView1.SelectedItems[0].Text;
            file_prueba = sel_test;
            String destino = Path.Combine(Path.GetTempPath(), "\\" + "FFBatch_test");
            String borrar = destino + "\\" + System.IO.Path.GetFileNameWithoutExtension(file_prueba) + "." + txt_format.Text;

            if (File.Exists(borrar))
            {
                try
                {
                    File.Delete(borrar);
                }
                catch
                {
                }
            }

            if (Directory.Exists(destino) == true)
            {
                if (Directory.GetFiles(destino).Length == 0)
                {
                    System.IO.Directory.Delete(destino);
                }
            }

            //END Remove test file/folder

            //Pending duration

            if (dur_ok == false)
            {
                list_pending_dur.Items.Clear();
                foreach (ListViewItem item in listView1.Items)
                {
                    list_pending_dur.Items.Add((ListViewItem)item.Clone());
                }
                BG_Dur.RunWorkerAsync();
                return;
            }

            //Check queued items

            if (warn_success_items == true)
            {
                Boolean no_queued = true;
                Boolean has_complete = false;
                foreach (ListViewItem item in listView1.Items)
                {
                    if (item.SubItems[5].Text == "Queued")
                    {
                        no_queued = false;
                    }
                    if (item.SubItems[5].Text == "Success" || item.SubItems[5].Text == "Replaced")
                    {
                        has_complete = true;
                    }
                }

                if (no_queued == true && listView1.Items.Count > 1)
                {
                    var a = MessageBox.Show("There are no items with status " + '\u0022' + "Queued" + '\u0022' + ". All files have been already processed. Do you want to continue?", "No items with queued status", MessageBoxButtons.OKCancel, MessageBoxIcon.Question);
                    if (a == DialogResult.Cancel) return;
                }

                if (no_queued == false && has_complete == true)
                {
                    var a = MessageBox.Show("Some list items were already encoded and are not in " + '\u0022' + "Queued" + '\u0022' + " status. Do you want to continue?", "Some items with no queued status", MessageBoxButtons.OKCancel, MessageBoxIcon.Question);
                    if (a == DialogResult.Cancel) return;
                }
                //End check queued items
            }

            cancel_queue = false;
            Pg1.Value = 0;
            //pg_current.Value = 0;
            Disable_Controls();

            btn_skip_main.Enabled = true;
            //textBox4.Text = "0%";
            working = true;
            runnin_n_presets = true;


            ListView list_proc = new ListView();
            foreach (ListViewItem item in listView1.Items)
            {
                list_proc.Items.Add((ListViewItem)item.Clone());
                item.SubItems[5].Text = "Queued";
                item.BackColor = Color.White;

            }
            String hw_decode = String.Empty;
            if (cb_hwdecode.SelectedItem.ToString() != "none")
            {
                hw_decode = "-hwaccel " + cb_hwdecode.SelectedItem.ToString();
            }

            //Save selected hw decoder

            String path2 = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_hw_dcd.ini";
            String txt_hw_dcd = cb_hwdecode.SelectedItem.ToString();
            if (txt_hw_dcd != "none")
            {
                File.WriteAllText(path2, txt_hw_dcd);
            }
            else
            {
                if (File.Exists(path2)) File.Delete(path2);
            }

            //End save hw decoder

            // Fade validation
            fade_ok = true;
            check_fade();
            if (fade_ok == false)
            {
                Enable_Controls();
                return;
            }
            // END Fade validation

            Pg1.Maximum = listView1.Items.Count;
            listView1.SelectedIndices.Clear();

            total_duration = 0;
            Double total_prog = 0;

            //Get total duration of files

            foreach (ListViewItem item in listView1.Items)
            {
                if (item.SubItems[3].Text != "N/A" && item.SubItems[3].Text != "0:00:00" && item.SubItems[3].Text != "00:00:00" && item.SubItems[3].Text != "Pending")
                {
                    total_duration = total_duration + TimeSpan.Parse(item.SubItems[3].Text).TotalSeconds - TimeSpan.Parse(ss_time_input.Text).TotalSeconds;
                }
                else
                {
                    total_duration = total_duration + 0;
                }
            }

            if (n_multi_presets == 2) total_duration = total_duration * 2;
            if (n_multi_presets == 3) total_duration = total_duration * 3;

            Pg1.Minimum = 0;
            Pg1.Maximum = 100;
            String remain_time = "0";
            //End get total duration of files

            List<string> list_lines = new List<string>();
            process_glob.StartInfo.Arguments = String.Empty;

            time_n_tasks = 0;
            timer_tasks.Start();
            timer_est_size.Start();
            time_est_size = 0;
            String file = String.Empty;

            chk_delete_source.Enabled = true;
            panel2.Enabled = true;
            chk_delete_source.Enabled = true;
            foreach (Control ct in panel2.Controls)
            {
                if (ct.Name != chk_delete_source.Name)
                {
                    this.InvokeEx(f => ct.Enabled = false);
                }
            }
            String in_color = ":color=" + combo_vin_col.SelectedItem.ToString();
            String out_color = ":color=" + combo_vout_color.SelectedItem.ToString();
            if (combo_vin_col.SelectedIndex == 2) in_color = ":alpha=1";
            if (combo_vout_color.SelectedIndex == 2) out_color = ":alpha=1";

            int preset_run = 1;
            int to_go = n_multi_presets;

            new System.Threading.Thread(() =>
            {
                System.Threading.Thread.CurrentThread.IsBackground = true;

                for (int list_index = 0; list_index < listView1.Items.Count; list_index++)
                {
                    System.Threading.Thread.Sleep(50); //Allow kill process to send cancel_queue

                    listView1.Invoke(new MethodInvoker(delegate
                    {
                        file = listView1.Items[list_index].SubItems[1].Text + "\\" + listView1.Items[list_index].Text;
                    }));

                    if (cancel_queue == true)
                    {
                        this.InvokeEx(f => TaskbarProgress.SetState(this.Handle, TaskbarProgress.TaskbarStates.NoProgress));
                        working = false;
                        time_est_size = 0;
                        //this.InvokeEx(f => f.button2.Enabled = true);
                        Enable_Controls();
                        MessageBox.Show("Queue processing aborted", "Tasks aborted", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                        return;
                    }


                    this.InvokeEx(f => timer_est_size.Start());

                    String ffm = System.IO.Path.Combine(Application.StartupPath, "ffmpeg.exe");
                    String fullPath = file;

                    //Begin Shifting
                    String shifting = "";
                    if (chk_shift.Checked == true)
                    {

                        shifting = " -itsoffset " + Num_Shift.Value.ToString().Replace(",", ".") + " -i " + '\u0022' + file + '\u0022' + " -map 1:v -map 0:a ";

                    }
                    //End Shifting

                    //Begin fading and volume changing
                    String change_vol_fade = "";
                    if (chk_vol.Checked == true)
                    {
                        change_vol_fade = "-af " + '\u0022' + "volume=" + vol_ch.Value.ToString() + "dB " + '\u0022' + " ";
                    }

                    String fade_filter = String.Empty;
                    Decimal fade_frames = 0;

                    if (fade_v_in.CheckState == CheckState.Checked || fade_v_out.CheckState == CheckState.Checked)
                    {
                        String ff_frames = String.Empty;
                        Process get_frames = new Process();
                        get_frames.StartInfo.FileName = System.IO.Path.Combine(Application.StartupPath, "MediaInfo.exe");
                        String ffprobe_frames = " " + '\u0022' + "--Inform=Video;%FrameRate%" + '\u0022';
                        get_frames.StartInfo.Arguments = ffprobe_frames + " " + '\u0022' + list_proc.Items[list_index].SubItems[1].Text + "\\" + list_proc.Items[list_index].Text + '\u0022';
                        get_frames.StartInfo.RedirectStandardOutput = true;
                        get_frames.StartInfo.RedirectStandardError = true;
                        get_frames.StartInfo.UseShellExecute = false;
                        get_frames.StartInfo.CreateNoWindow = true;
                        get_frames.EnableRaisingEvents = true;
                        get_frames.Start();

                        ff_frames = get_frames.StandardOutput.ReadLine();
                        get_frames.WaitForExit();

                        if (get_frames.ExitCode == 0)
                        {
                            if (ff_frames != null)
                            {
                                fade_frames = decimal.Parse(ff_frames) / 1000;
                            }
                        }
                        get_frames.Dispose();
                    }

                    if (fade_v_in.CheckState == CheckState.Checked && fade_v_out.CheckState == CheckState.Unchecked)
                    {
                        Decimal fff_in = Math.Round(num_v_in.Value * fade_frames, 0);
                        fade_filter = "-vf " + '\u0022' + "fade=in:0:" + fff_in.ToString() + in_color + '\u0022';
                    }

                    if (fade_v_in.CheckState == CheckState.Unchecked && fade_v_out.CheckState == CheckState.Checked)
                    {
                        Double dur_frames = TimeSpan.Parse(list_proc.Items[list_index].SubItems[3].Text).TotalSeconds * Convert.ToDouble(fade_frames);
                        Decimal fade_out_total = Math.Round(Convert.ToDecimal(dur_frames), 3, MidpointRounding.AwayFromZero);
                        Decimal fade_out_initial = Math.Round(fade_out_total - (num_v_out.Value * fade_frames), 0, MidpointRounding.AwayFromZero);
                        Decimal fff_out = Math.Round(num_v_out.Value * fade_frames, 0, MidpointRounding.AwayFromZero);

                        fade_filter = "-vf " + '\u0022' + "fade=out:" + fade_out_initial.ToString() + ":" + fff_out.ToString() + out_color + '\u0022';
                    }

                    if (fade_v_in.CheckState == CheckState.Checked && fade_v_out.CheckState == CheckState.Checked)
                    {
                        Decimal fff_in = Math.Round(num_v_in.Value * fade_frames, 0, MidpointRounding.AwayFromZero);
                        Double dur_frames = TimeSpan.Parse(list_proc.Items[list_index].SubItems[3].Text).TotalSeconds * Convert.ToDouble(fade_frames);
                        Decimal fade_out_total = Math.Round(Convert.ToDecimal(dur_frames), 3, MidpointRounding.AwayFromZero);
                        Decimal fade_out_initial = Math.Round(fade_out_total - (num_v_out.Value * fade_frames), 0, MidpointRounding.AwayFromZero);
                        Decimal fff_out = Math.Round(num_v_out.Value * fade_frames, 0, MidpointRounding.AwayFromZero);

                        fade_filter = "-vf " + '\u0022' + "fade=in:0:" + fff_in.ToString() + in_color + ", " + "fade=out:" + fade_out_initial.ToString() + ":" + fff_out.ToString() + out_color + '\u0022';
                    }

                    //Audio fading
                    if (fade_a_in.CheckState == CheckState.Checked && fade_a_out.CheckState == CheckState.Unchecked)
                    {
                        if (chk_vol.Checked == false)
                        {
                            change_vol_fade = "-af " + '\u0022' + "afade=t=in:ss=0:d=" + num_a_in.Value.ToString() + '\u0022';
                        }
                        else
                        {
                            change_vol_fade = "-af " + '\u0022' + "afade=t=in:ss=0:d=" + num_a_in.Value.ToString() + ", " + "volume=" + vol_ch.Value.ToString() + "dB " + '\u0022';
                        }
                    }

                    if (fade_a_in.CheckState == CheckState.Unchecked && fade_a_out.CheckState == CheckState.Checked)
                    {
                        Double af_out = TimeSpan.Parse(list_proc.Items[list_index].SubItems[3].Text).TotalSeconds - Convert.ToDouble(num_a_out.Value);
                        Decimal af_out_dec = Math.Round(Convert.ToDecimal(af_out), 0, MidpointRounding.AwayFromZero);
                        if (chk_vol.Checked == false)
                        {
                            change_vol_fade = "-af " + '\u0022' + "afade=t=out:st=" + af_out_dec + ":d=" + num_a_out.Value.ToString() + '\u0022';
                        }
                        else
                        {
                            change_vol_fade = "-af " + '\u0022' + "afade=t=out:st=" + af_out_dec + ":d=" + num_a_out.Value.ToString() + ", " + "volume=" + vol_ch.Value.ToString() + "dB " + '\u0022';
                        }
                    }
                    if (fade_a_in.CheckState == CheckState.Checked && fade_a_out.CheckState == CheckState.Checked)
                    {
                        Double af_out = TimeSpan.Parse(list_proc.Items[list_index].SubItems[3].Text).TotalSeconds - Convert.ToDouble(num_a_out.Value);
                        Decimal af_out_dec = Math.Round(Convert.ToDecimal(af_out), 0, MidpointRounding.AwayFromZero);

                        if (chk_vol.Checked == false)
                        {
                            change_vol_fade = "-af " + '\u0022' + "afade=t=in:ss=0:d=" + num_a_in.Value.ToString() + ", " + "afade=t=out:st=" + af_out_dec + ":d=" + num_a_out.Value.ToString() + '\u0022';
                        }
                        else
                        {
                            change_vol_fade = "-af " + '\u0022' + "afade=t=in:ss=0:d=" + num_a_in.Value.ToString() + ", " + "afade=t=out:st=" + af_out_dec + ":d=" + num_a_out.Value.ToString() + ", " + "volume=" + vol_ch.Value.ToString() + "dB " + '\u0022';
                        }
                    }
                    //End audio fading

                    //End fading

                    //End Change Volume

                    if (txt_path_main.Text.Contains(".\\"))
                    {
                        if (txt_path_main.Text != ".\\")
                            destino = file.Substring(0, fullPath.LastIndexOf('\\')) + txt_path_main.Text.Replace(".", String.Empty);
                        else
                        {
                            destino = Path.GetDirectoryName(file);
                        }
                    }
                    else
                    {
                        if (checkBox1.CheckState == CheckState.Checked)
                        {
                            String pre_dest = Path.GetDirectoryName(file);
                            destino = Path.Combine(txt_path_main.Text, pre_dest.Substring(3, pre_dest.Length - 3));
                        }
                        else
                        {
                            destino = txt_path_main.Text;
                        }
                    }

                    String pre_input_var = "";
                    if (txt_pre_input.Text != "")
                    {
                        pre_input_var = txt_pre_input.Text;
                    }

                    String pre_ss = "";
                    if (TimeSpan.Parse(ss_time_input.Text).TotalSeconds != 0)
                    {
                        pre_ss = " -ss " + ss_time_input.Text;
                    }

                    add_suffix = "";

                    if (chk_suffix.Checked == true && txt_suffix.Text != String.Empty)
                    {
                        add_suffix = txt_suffix.Text;
                    }
                    String add_pr_suffix = String.Empty;
                    if (ren_multi == true)
                    {
                        add_pr_suffix = "_" + preset_run.ToString();
                    }

                    String ext_output1 = String.Empty;

                    if (preset_run == 1) ext_output1 = multi_pr1_ext;
                    if (preset_run == 2) ext_output1 = multi_pr2_ext;
                    if (preset_run == 3) ext_output1 = multi_pr3_ext;

                    ext_output1 = "." + ext_output1;

                    if (preset_run == 1) textbox_params = multi_pr1;
                    if (preset_run == 2) textbox_params = multi_pr2;
                    if (preset_run == 3) textbox_params = multi_pr3;


                    String file2 = file;

                    if (textbox_params.Contains("%fn"))
                    {
                        textbox_params = textbox_params.Replace("%fn", Path.GetFileNameWithoutExtension(file));
                    }
                    if (textbox_params.Contains("%fp"))
                    {
                        textbox_params = textbox_params.Replace("%fp", Path.GetDirectoryName(file));
                    }
                    if (textbox_params.Contains("%fd"))
                    {
                        var path = Path.GetFullPath(file);
                        var dirName = Path.GetFileName(Path.GetDirectoryName(path));
                        textbox_params = textbox_params.Replace("%fd", dirName);
                    }

                    if (textbox_params.Contains("%1"))
                    {
                        file2 = file2.Replace("\\", "\\\\\\\\");
                        file2 = file2.Replace(":", "\\\\" + ":");
                        textbox_params = textbox_params.Replace("%1", file2);
                    }
                    if (textbox_params.Contains("%2"))
                    {
                        file2 = file2.Replace("\\", "\\\\\\\\");
                        file2 = file2.Replace(":", "\\\\" + ":");
                        textbox_params = textbox_params.Replace("%2", Path.Combine(System.IO.Path.GetDirectoryName(file2), Path.GetFileNameWithoutExtension(file2)));
                    }


                    String output_file = output_file = '\u0022' + destino + "\\" + System.IO.Path.GetFileNameWithoutExtension(file) + add_suffix + add_pr_suffix + ext_output1 + '\u0022';

                    String AppParam = hw_decode + " " + pre_input_var + " " + pre_ss + " -i " + "" + '\u0022' + file + '\u0022' + " " + shifting + " -y " + textbox_params + " " + fade_filter + " " + change_vol_fade + " " + output_file;

                    if (!Directory.Exists(destino))
                    {
                        Directory.CreateDirectory(destino);
                    }

                    process_glob.StartInfo.FileName = ffm;
                    process_glob.StartInfo.Arguments = AppParam;

                    valid_prog = false;
                    this.InvokeEx(f => f.listView1.Items[list_index].SubItems[5].Text = "Processing");
                    //this.InvokeEx(f => f.pg_current.Value = 0);
                    //this.InvokeEx(f => f.pg_current.Refresh());

                    process_glob.StartInfo.RedirectStandardOutput = true;
                    process_glob.StartInfo.RedirectStandardInput = true;
                    process_glob.StartInfo.RedirectStandardError = true;
                    process_glob.StartInfo.UseShellExecute = false;
                    process_glob.StartInfo.CreateNoWindow = true;
                    process_glob.EnableRaisingEvents = true;
                    process_glob.Start();

                    System.Threading.Thread.Sleep(50);
                    combo_prio.Invoke(new MethodInvoker(delegate
                    {
                        if (combo_prio.SelectedIndex != 2)
                        {
                            Change_mem_prio();
                        }

                    }));

                    this.InvokeEx(f => validate_duration = listView1.Items[list_index].SubItems[3].Text);
                    if (validate_duration != "N/A" && validate_duration != "0:00:00" && validate_duration != "00:00:00" && validate_duration != "Pending")
                    {
                        valid_prog = true;
                    }

                    String err_txt = "";
                    Double interval = 0;
                    Decimal est_bitrate = 0;
                    Decimal est_size = 0;
                    this.InvokeEx(f => durat_n = TimeSpan.Parse(listView1.Items[list_index].SubItems[3].Text).TotalSeconds - TimeSpan.Parse(ss_time_input.Text).TotalSeconds);

                    lbl_speed.Text = String.Empty;
                    Double sec_prog = 0;
                    this.InvokeEx(f => f.lbl_multip.Enabled = true);
                    this.InvokeEx(f => f.lbl_multip.Visible = true);
                    this.InvokeEx(f => f.lbl_multip.Text = "Encoding preset " + preset_run.ToString() + " of " + to_go.ToString());

                    while (!process_glob.StandardError.EndOfStream)
                    {
                        err_txt = process_glob.StandardError.ReadLine();
                        list_lines.Add(err_txt);

                        if (err_txt.Contains("time=") && err_txt.Contains("time=-") == false)
                        {
                            if (valid_prog == true)
                            {
                                int start_time_index = err_txt.IndexOf("time=") + 5;
                                sec_prog = TimeSpan.Parse(err_txt.Substring(start_time_index, 8)).TotalSeconds;

                                Double percent = (sec_prog * 100 / durat_n);

                                total_prog = total_prog + (sec_prog - interval);
                                interval = sec_prog;
                                int percent2 = Convert.ToInt32(percent);

                                Double percent_tot = (total_prog * 100 / total_duration);
                                int percent_tot_2 = Convert.ToInt32(percent_tot);

                                if (percent_tot_2 <= 100)
                                {
                                    this.InvokeEx(f => f.Pg1.Value = percent_tot_2);
                                    this.InvokeEx(f => f.Pg1.Refresh());

                                    this.InvokeEx(f => f.Pg1.Text = Math.Round(percent_tot, 1).ToString() + "%");
                                    this.InvokeEx(f => TaskbarProgress.SetValue(this.Handle, percent_tot, Pg1.Maximum));
                                }

                                if (percent2 <= 100)
                                {
                                    if (Math.Round(percent, 1).ToString().Contains(".") || Math.Round(percent, 1).ToString().Contains(","))
                                    {
                                        this.InvokeEx(f => f.listView1.Items[list_index].SubItems[5].Text = Math.Round(percent, 1).ToString() + "%");
                                    }
                                    else
                                    {
                                        this.InvokeEx(f => f.listView1.Items[list_index].SubItems[5].Text = Math.Round(percent, 1).ToString() + System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator + "0" + "%");
                                    }
                                }

                                if (cancel_queue == false)
                                {
                                    //Estimated remaining time

                                    remain_time = err_txt.Substring(err_txt.LastIndexOf("speed=") + 6, err_txt.Length - err_txt.LastIndexOf("speed=") - 6);
                                    if (time_est_size % 3 == 0) this.InvokeEx(f => f.lbl_speed.Text = "Speed: " + remain_time);
                                    remain_time = remain_time.Replace("x", String.Empty);
                                    Double timing1 = 0;

                                    if (System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator == ",")
                                    {
                                        timing1 = Math.Round(Double.Parse(remain_time.Replace(".", ",")), 2);
                                    }
                                    else
                                    {
                                        timing1 = Math.Round(Double.Parse(remain_time), 2);
                                    }

                                    Decimal timing = (decimal)timing1;
                                    Decimal total_dur_dec = Convert.ToDecimal(total_duration);
                                    Decimal total_prog_dec = Convert.ToDecimal(total_prog);
                                    Decimal remain_secs = 0;

                                    if (timing > 0)
                                    {
                                        remain_secs = (decimal)(total_dur_dec - total_prog_dec) / timing;
                                    }

                                    if (remain_secs > 60)
                                    {
                                        remain_secs = remain_secs + 60;
                                    }

                                    String remain_from_secs = String.Empty;

                                    TimeSpan t = TimeSpan.FromSeconds(Convert.ToDouble(remain_secs));
                                    remain_from_secs = string.Format("{0:D2}h:{1:D2}", t.Hours, t.Minutes);

                                    if (remain_secs >= 43200)
                                    {
                                        this.InvokeEx(f => f.txt_remain.Text = "Time remaining: " + Math.Round(remain_secs / 3600).ToString() + " hours");
                                    }

                                    if (remain_secs >= 3600 && remain_secs < 43200)
                                    {
                                        this.InvokeEx(f => f.txt_remain.Text = "Time remaining: " + remain_from_secs + " min");
                                    }

                                    if (remain_secs < 3600 && remain_secs >= 600)
                                    {
                                        this.InvokeEx(f => f.txt_remain.Text = "Time remaining: " + remain_from_secs.Substring(remain_from_secs.LastIndexOf(":") + 1, 2) + " minutes");
                                    }

                                    if (remain_secs < 600 && remain_secs >= 120)
                                    {
                                        this.InvokeEx(f => f.txt_remain.Text = "Time remaining: " + remain_from_secs.Substring(remain_from_secs.LastIndexOf(":") + 2, 1) + " minutes");
                                    }

                                    if (remain_secs <= 59 && remain_secs != 0)
                                    {
                                        this.InvokeEx(f => f.txt_remain.Text = "Time remaining: " + Convert.ToInt16(remain_secs) + " seconds");
                                    }

                                    if (remain_secs == 0)
                                    {
                                        this.InvokeEx(f => f.txt_remain.Text = "Time remaining: " + "About to finish");
                                    }
                                }

                                //End remaining time

                                //Estimated size and bitrate

                                String read_size = String.Empty;
                                if (err_txt.Contains("size=") && (time_est_size % 3 == 0))
                                {
                                    int size_index = err_txt.IndexOf("size=") + 5;
                                    read_size = err_txt.Substring(size_index, 8);
                                    if (Convert.ToDecimal(sec_prog) != 0)
                                    {
                                        est_bitrate = (Math.Round(Convert.ToDecimal(read_size) * 8 / Convert.ToDecimal(sec_prog), 0));
                                    }
                                    else
                                    {
                                        est_bitrate = 0;
                                    }

                                    if (Convert.ToDecimal(read_size) > 1 && time_n_tasks > 1)
                                    {
                                        if (est_bitrate < 9999)
                                        {
                                            if (est_bitrate > 48)
                                            {
                                                this.InvokeEx(f => f.lbl_bitrate.Text = "Avg. bitrate: " + est_bitrate + " Kb/s");
                                            }
                                            else
                                            {
                                                this.InvokeEx(f => f.lbl_bitrate.Text = "Avg. bitrate: ");
                                            }
                                        }
                                        else
                                        {
                                            this.InvokeEx(f => f.lbl_bitrate.Text = "Avg. bitrate: " + (Math.Round(est_bitrate / 1000, 0)) + " Mb/s");
                                        }
                                        //Estimated size
                                        est_size = Convert.ToDecimal(durat_n) * est_bitrate / 8;

                                        if (est_size > 1000000)
                                        {
                                            this.InvokeEx(f => f.lbl_est_size.Text = "Estimated size: " + (Math.Round(est_size / 1000000, 1)).ToString() + " GB");
                                        }
                                        else
                                        {
                                            if (Math.Round(est_size / 1000, 0) > 0)
                                            {
                                                this.InvokeEx(f => f.lbl_est_size.Text = "Estimated size: " + (Math.Round(est_size / 1000, 0)).ToString() + " MB");
                                            }
                                            else
                                            {
                                                this.InvokeEx(f => f.lbl_est_size.Text = "Estimated size: ");
                                            }
                                        }
                                    }

                                    this.InvokeEx(f => f.lbl_est_size.Refresh());
                                }
                            }
                        }
                    }
                    process_glob.WaitForExit();
                    process_glob.StartInfo.Arguments = String.Empty;
                    timer_est_size.Stop();
                    time_est_size = 0;
                    this.InvokeEx(f => lbl_speed.Text = String.Empty);
                    this.InvokeEx(f => f.lbl_est_size.Text = String.Empty);
                    this.InvokeEx(f => f.lbl_bitrate.Text = String.Empty);
                    list_lines.Add("");
                    list_lines.Add("---------------------End of " + Path.GetFileName(file) + " log-------------------------------");
                    list_lines.Add("");

                    if (process_glob.ExitCode == 0)
                    {
                        if (skipped == false)
                        {
                            this.InvokeEx(f => f.listView1.Items[list_index].SubItems[5].Text = "Success");
                            this.InvokeEx(f => f.listView1.Items[list_index].BackColor = listView1.BackColor);
                        }
                        else
                        {
                            this.InvokeEx(f => f.listView1.Items[list_index].SubItems[5].Text = "Skipped");
                            this.InvokeEx(f => f.listView1.Items[list_index].BackColor = Color.Beige);
                            total_prog = (total_prog + durat_n - sec_prog) / n_multi_presets;
                            skipped = false;
                        }
                        //this.InvokeEx(f => f.listView1.Items[list_index].EnsureVisible());
                    }
                    else
                    {
                        this.InvokeEx(f => f.listView1.Items[list_index].SubItems[5].Text = "Error");
                        errors_enc = errors_enc + 1;
                        total_prog = total_prog + durat_n - sec_prog;
                    }

                    if (list_index == listView1.Items.Count - 1)
                    {
                        n_multi_presets = n_multi_presets - 1;
                        preset_run = preset_run + 1;
                        list_index = -1;
                    }
                    if (n_multi_presets == 0)
                    {
                        this.InvokeEx(f => f.lbl_multip.Visible = false);
                        runnin_n_presets = false;
                        list_index = listView1.Items.Count - 1;
                        this.InvokeEx(f => TaskbarProgress.SetState(this.Handle, TaskbarProgress.TaskbarStates.NoProgress));
                        this.InvokeEx(f => f.Pg1.Value = 100);
                        this.InvokeEx(f => f.Pg1.Text = "100%");
                        this.InvokeEx(f => f.Pg1.Refresh());
                        working = false;
                        timer_est_size.Stop();
                        time_est_size = 0;

                        if (no_save_logs == false)
                        {
                            //Save log
                            string[] array_err = list_lines.ToArray();
                            String path = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_batch.log";

                            System.IO.StreamWriter SaveFile = new System.IO.StreamWriter(path);
                            SaveFile.WriteLine("FFmpeg log sesion: " + System.DateTime.Now);
                            SaveFile.WriteLine("-------------------------------");
                            foreach (String item in array_err)
                            {
                                SaveFile.WriteLine(item);
                            }
                            SaveFile.Close();

                            File.AppendAllText(path, "-----------------------");
                            File.AppendAllText(path, Environment.NewLine + "END OF LOG FILE" + Environment.NewLine);
                            File.AppendAllText(path, "-----------------------");
                            System.IO.FileInfo fileInfo = new System.IO.FileInfo(path);

                            var bytes = fileInfo.Length;

                            var kilobytes = (double)bytes / 1024;
                            var megabytes = kilobytes / 1024;
                            var gigabytes = megabytes / 1024;

                            //Format size view
                            String size = "";
                            String separator = ".";

                            if (bytes > 1000000000)
                            {
                                if (gigabytes.ToString().Contains("."))
                                {
                                    separator = ".";
                                }
                                else
                                {
                                    separator = ",";
                                }

                                String gigas = gigabytes.ToString();
                                if (gigas.Length >= 5)
                                {
                                    gigas = gigas.Substring(0, gigas.LastIndexOf(separator) + 3);
                                    size = (gigas + " GB");
                                }
                                else
                                {
                                    size = (gigas + " GB");
                                }
                            }

                            if (bytes >= 1048576 && bytes <= 1000000000)
                            {
                                if (megabytes.ToString().Contains("."))
                                {
                                    separator = ".";
                                }
                                else
                                {
                                    separator = ",";
                                }
                                String megas = megabytes.ToString();
                                if (megas.Length > 5)
                                {
                                    megas = megas.Substring(0, megas.LastIndexOf(separator));
                                    size = (megas + " MB");
                                }
                                else
                                {
                                    size = (megas + " MB");
                                }
                            }

                            if (bytes >= 1024 && bytes < 1048576)

                            {
                                if (kilobytes.ToString().Contains("."))
                                {
                                    separator = ".";
                                }
                                else
                                {
                                    separator = ",";
                                }

                                String kbs = kilobytes.ToString();
                                if (kbs.Length >= 5)
                                {
                                    kbs = kbs.Substring(0, kbs.LastIndexOf(separator));
                                    size = (kbs + " KB");
                                }
                                else
                                {
                                    size = (kbs + " KB");
                                }
                            }
                            if (bytes > -1 && bytes < 1024)
                            {
                                String bits = bytes.ToString();
                                size = (bits + " Bytes");
                            }

                            //End Format size view
                            timer_tasks.Stop();
                            TimeSpan t = TimeSpan.FromSeconds(time_n_tasks);
                            String tx_elapsed = string.Format("{0:D2}h:{1:D2}m:{2:D2}s",
                                t.Hours,
                                t.Minutes,
                                t.Seconds);
                            File.AppendAllText(path, Environment.NewLine);
                            File.AppendAllText(path, Environment.NewLine + "Total time: " + tx_elapsed);
                            File.AppendAllText(path, Environment.NewLine + "LOG SIZE: " + size);
                            //End save log
                        }

                        this.Invoke(new MethodInvoker(delegate
                        {
                            if (errors_enc == 0) pic_no_errors.Visible = true;
                            else
                            {
                                pic_no_errors.Visible = false;
                                pic_recording.Visible = false;
                                toolT002.SetToolTip(this.pic_warnings, "There were " + errors_enc.ToString() + " error(s) during last session");
                                pic_warnings.Visible = true;
                            }
                        }));

                        //Automatic shutdown check                        
                        if (chkshut.Checked && cancel_queue == false)
                        {
                            auto_shut();
                            return;
                        }
                        //End shutdown check

                        else
                        {
                            if (cancel_queue == false)
                            {
                                if (chk_delete_source.CheckState == CheckState.Checked)
                                {
                                    Disable_Controls();
                                    System.Threading.Thread.Sleep(500);
                                    list_proc.Items.Clear();
                                    listView1.Invoke(new MethodInvoker(delegate
                                    {
                                        foreach (ListViewItem item in listView1.Items)
                                        {
                                            list_proc.Items.Add((ListViewItem)item.Clone());
                                        }
                                    }));

                                    Label prog_txt = new Label();
                                    this.InvokeEx(f => prog_txt.Parent = panel1);
                                    this.InvokeEx(f => prog_txt.Top = 95);
                                    this.InvokeEx(f => prog_txt.Left = 80);
                                    this.InvokeEx(f => prog_txt.Width = 250);
                                    this.InvokeEx(f => prog_txt.TabIndex = 1);
                                    this.InvokeEx(f => prog_txt.BackColor = panel1.BackColor);
                                    this.InvokeEx(f => prog_txt.BorderStyle = BorderStyle.None);
                                    this.InvokeEx(f => prog_txt.TextAlign = ContentAlignment.MiddleLeft);
                                    this.InvokeEx(f => prog_txt.BringToFront());
                                    this.InvokeEx(f => prog_txt.Text = "Sending processed files to recycle bin...");

                                    ProgressBar pg_del = new ProgressBar();
                                    this.InvokeEx(f => pg_del.Parent = panel1);
                                    this.InvokeEx(f => pg_del.Top = 98);
                                    this.InvokeEx(f => pg_del.Left = 315);
                                    this.InvokeEx(f => pg_del.Width = 302);
                                    this.InvokeEx(f => pg_del.Height = 15);
                                    this.InvokeEx(f => pg_del.TabIndex = 0);
                                    this.InvokeEx(f => pg_del.BackColor = this.BackColor);
                                    this.InvokeEx(f => pg_del.Minimum = 0);
                                    this.InvokeEx(f => pg_del.BringToFront());
                                    this.InvokeEx(f => pg_del.Maximum = list_proc.Items.Count);
                                    this.InvokeEx(f => pg_del.Show());
                                    this.InvokeEx(f => pg_del.Refresh());
                                    int i = 0;
                                    int err = 0;

                                    foreach (ListViewItem item in list_proc.Items)
                                    {
                                        if (item.SubItems[5].Text == "Success")
                                        {
                                            try
                                            {
                                                FileSystem.DeleteFile(item.SubItems[1].Text + "\\" + item.Text, UIOption.OnlyErrorDialogs, RecycleOption.SendToRecycleBin);
                                                this.InvokeEx(f => pg_del.Value = i);
                                                i = i + 1;
                                            }
                                            catch
                                            {
                                                err = err + 1;
                                            }

                                            this.InvokeEx(f => prog_txt.Text = "Sending source files to recycle bin... " + i.ToString() + " of " + list_proc.Items.Count);
                                            this.InvokeEx(f => prog_txt.Refresh());
                                        }
                                    }
                                    this.InvokeEx(f => prog_txt.Visible = false);
                                    this.InvokeEx(f => prog_txt.Dispose());
                                    this.InvokeEx(f => pg_del.Visible = false);
                                    this.InvokeEx(f => pg_del.Dispose());
                                    Enable_Controls();

                                    if (err > 0) MessageBox.Show(err.ToString() + " files could not be moved to the recycle bin", "Some files not recycled", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);

                                    Boolean all_ok = true;
                                    foreach (ListViewItem item in list_proc.Items)
                                    {
                                        if (item.SubItems[5].Text != "Success")
                                        {
                                            all_ok = false;
                                            break;
                                        }
                                    }
                                    if (all_ok == true)
                                    {
                                        this.InvokeEx(f => f.btn_refresh.PerformClick());
                                    }
                                }
                                if (errors_enc == 0)
                                {
                                    if (play_on_end == true) play_end();
                                }
                                else if (play_on_end == true) System.Media.SystemSounds.Asterisk.Play();

                                if (Form.ActiveForm == null)
                                {
                                    if (errors_enc == 0)
                                    {

                                        notifyIcon1.BalloonTipText = "FFmpeg Batch encoding successfully completed";
                                        notifyIcon1.BalloonTipIcon = ToolTipIcon.Info;
                                        notifyIcon1.BalloonTipTitle = "Encoding complete";
                                        notifyIcon1.ShowBalloonTip(0);

                                    }
                                    else
                                    {
                                        notifyIcon1.BalloonTipText = "FFmpeg Batch encoding completed with " + errors_enc.ToString() + " error(s)";
                                        notifyIcon1.BalloonTipIcon = ToolTipIcon.Warning;
                                        notifyIcon1.BalloonTipTitle = "Encoding complete";
                                        notifyIcon1.ShowBalloonTip(0);
                                    }
                                }

                                if (checkBox3.Checked)
                                {
                                    if (Directory.GetFiles(destino).Length != 0)
                                    {
                                        Process open_processed = new Process();
                                        open_processed.StartInfo.FileName = "explorer.exe";
                                        open_processed.StartInfo.Arguments = '\u0022' + destino + '\u0022';
                                        open_processed.Start();
                                    }
                                    else
                                    {
                                        if (Directory.Exists(destino))
                                        {
                                            System.IO.Directory.Delete(destino);
                                        }
                                    }
                                }
                            }
                            else
                            {
                                this.InvokeEx(f => f.Pg1.Text = "100%");
                                this.InvokeEx(f => f.Pg1.Refresh());
                                this.InvokeEx(f => MessageBox.Show("Queue processing aborted", "Aborted", MessageBoxButtons.OK, MessageBoxIcon.Error));
                            }
                        }
                    }
                }

                this.InvokeEx(f => this.Cursor = Cursors.Arrow);
                Enable_Controls();
            }).Start();
        }

        private void detect_silence()
        {
            Pg1.Focus();
            if (!File.Exists(Path.Combine(Application.StartupPath, "ffmpeg.exe")))
            {
                MessageBox.Show("FFmpeg executable file was not found. Restart or reinstall application.", "Executable error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            String ffm = Path.Combine(Application.StartupPath, "AeroWizard.dll");
            if (!File.Exists(ffm))
            {
                MessageBox.Show("AeroWizard.dll was not found in application path. Reinstalling the application should fix it.", "Required file not found", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            if (listView1.Items.Count == 0)
            {
                MessageBox.Show("File list is empty", "No files to be processed", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            foreach (ListViewItem file2 in listView1.Items)
            {
                if (!File.Exists(file2.SubItems[1].Text + "\\" + file2.Text))
                {
                    MessageBox.Show("File was not found: " + file2.Text, "One file in the queue list was not found", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
            }

            pg_adding.Visible = true;
            pg_adding.Value = 0;
            pg_adding.Maximum = listView1.Items.Count;
            LB_Wait.Visible = true;
            txt_adding_p.Visible = true;

            LB_Wait.Text = String.Empty;
            LB_Wait.Visible = false;
            pg_adding.Visible = false;
            txt_adding_p.Text = String.Empty;

            String f_nologs = String.Empty;
            if (is_portable == false)
            {
                f_nologs = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_nologs.ini";
            }
            else
            {
                f_nologs = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_nologs_portable.ini";
            }

            if (File.Exists(f_nologs))
            {
                no_save_logs = true;
            }
            else
            {
                no_save_logs = false;
            }

            //End do not save logs

            if (no_save_logs == true)
            {
                DialogResult a = MessageBox.Show("Logging is required to store full silence detection information. Do you want to enable it?", "Logging is disabled", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                if (a == DialogResult.No) return;
                else
                {
                    no_save_logs = false;
                    try
                    {
                        File.Delete(f_nologs);
                    }
                    catch (Exception excpt)
                    {
                        MessageBox.Show("Logging option could not be saved. Logging will be enabled for this session." + Environment.NewLine + Environment.NewLine + excpt.Message);
                    }
                }
            }

            AeroWizard4 wizard4 = new AeroWizard4();
            wizard4.StartPosition = FormStartPosition.CenterScreen;
            wizard4.ShowDialog();
            if (wizard4.ok_silence == true)
            {
                silence_params = wizard4.pr1_first_params;
                start_silence();
            }
            else
            {
                return;
            }

        }

        private void start_silence()
        {
            Pg1.Text = "0" + System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator + "0%";
            cancel_queue = false;
            notifyIcon1.Visible = true;
            lbl_multip.Text = String.Empty;
            //Validated list, start processing

            txt_remain.Text = "Time remaining: 00h:00m:00s";

            if (listView1.SelectedIndices.Count == 0)
            {
                listView1.Items[0].Selected = true;
                listView1.Items[0].Focused = true;
                listView1.Focus();
            }

            //Remove test file/folder

            String file_prueba = "";
            String sel_test = listView1.SelectedItems[0].SubItems[1].Text + "\\" + listView1.SelectedItems[0].Text;
            file_prueba = sel_test;
            String destino = Path.Combine(Path.GetTempPath(), "\\" + "FFBatch_test");
            String borrar = destino + "\\" + System.IO.Path.GetFileNameWithoutExtension(file_prueba) + "." + txt_format.Text;

            cancel_queue = false;
            Pg1.Value = 0;
            //pg_current.Value = 0;
            Disable_Controls();

            btn_skip_main.Enabled = true;
            //textBox4.Text = "0%";
            working = true;
            runnin_n_presets = true;

            ListView list_proc = new ListView();
            foreach (ListViewItem item in listView1.Items)
            {
                list_proc.Items.Add((ListViewItem)item.Clone());
                item.SubItems[5].Text = "Queued";
                item.BackColor = Color.White;
            }

            //End save hw decoder


            Pg1.Maximum = listView1.Items.Count;
            listView1.SelectedIndices.Clear();

            total_duration = 0;
            Double total_prog = 0;

            //Get total duration of files

            foreach (ListViewItem item in listView1.Items)
            {
                if (item.SubItems[3].Text != "N/A" && item.SubItems[3].Text != "0:00:00" && item.SubItems[3].Text != "00:00:00" && item.SubItems[3].Text != "Pending")
                {
                    total_duration = total_duration + TimeSpan.Parse(item.SubItems[3].Text).TotalSeconds - TimeSpan.Parse(ss_time_input.Text).TotalSeconds;
                }
                else
                {
                    total_duration = total_duration + 0;
                }
            }

            Pg1.Minimum = 0;
            Pg1.Maximum = 100;
            String remain_time = "0";
            //End get total duration of files

            List<string> list_lines = new List<string>();
            process_glob.StartInfo.Arguments = String.Empty;

            time_n_tasks = 0;
            timer_tasks.Start();
            timer_est_size.Start();
            time_est_size = 0;
            String file = String.Empty;

            chk_delete_source.Enabled = true;
            panel2.Enabled = true;
            chk_delete_source.Enabled = true;

            Boolean silence_found = false;

            foreach (Control ct in panel2.Controls)
            {
                if (ct.Name != chk_delete_source.Name)
                {
                    this.InvokeEx(f => ct.Enabled = false);
                }
            }

            new System.Threading.Thread(() =>
            {
                System.Threading.Thread.CurrentThread.IsBackground = true;

                for (int list_index = 0; list_index < listView1.Items.Count; list_index++)
                {
                    System.Threading.Thread.Sleep(50); //Allow kill process to send cancel_queue

                    listView1.Invoke(new MethodInvoker(delegate
                    {
                        file = listView1.Items[list_index].SubItems[1].Text + "\\" + listView1.Items[list_index].Text;
                    }));

                    if (cancel_queue == true)
                    {
                        this.InvokeEx(f => TaskbarProgress.SetState(this.Handle, TaskbarProgress.TaskbarStates.NoProgress));
                        working = false;
                        time_est_size = 0;

                        Enable_Controls();
                        MessageBox.Show("Queue processing aborted", "Tasks aborted", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                        return;
                    }
                    this.InvokeEx(f => timer_est_size.Start());

                    String ffm = System.IO.Path.Combine(Application.StartupPath, "ffmpeg.exe");
                    String fullPath = file;

                    if (txt_path_main.Text.Contains(".\\"))
                    {
                        if (txt_path_main.Text != ".\\")
                            destino = file.Substring(0, fullPath.LastIndexOf('\\')) + txt_path_main.Text.Replace(".", String.Empty);
                        else
                        {
                            destino = Path.GetDirectoryName(file);
                        }
                    }
                    else
                    {
                        if (checkBox1.CheckState == CheckState.Checked)
                        {
                            String pre_dest = Path.GetDirectoryName(file);
                            destino = Path.Combine(txt_path_main.Text, pre_dest.Substring(3, pre_dest.Length - 3));
                        }
                        else
                        {
                            destino = txt_path_main.Text;
                        }
                    }

                    String pre_input_var = "";
                    if (txt_pre_input.Text != "")
                    {
                        pre_input_var = txt_pre_input.Text;
                    }

                    String pre_ss = "";
                    if (TimeSpan.Parse(ss_time_input.Text).TotalSeconds != 0)
                    {
                        pre_ss = " -ss " + ss_time_input.Text;
                    }

                    add_suffix = "";

                    if (chk_suffix.Checked == true && txt_suffix.Text != String.Empty)
                    {
                        add_suffix = txt_suffix.Text;
                    }

                    String AppParam = pre_input_var + " " + pre_ss + " -i " + "" + '\u0022' + file + '\u0022' + " " + silence_params + " -loglevel info -stats";


                    if (!Directory.Exists(destino))
                    {
                        Directory.CreateDirectory(destino);
                    }

                    process_glob.StartInfo.FileName = ffm;
                    process_glob.StartInfo.Arguments = AppParam;

                    valid_prog = false;
                    this.InvokeEx(f => f.listView1.Items[list_index].SubItems[5].Text = "Processing");

                    process_glob.StartInfo.RedirectStandardOutput = true;
                    process_glob.StartInfo.RedirectStandardInput = true;
                    process_glob.StartInfo.RedirectStandardError = true;
                    process_glob.StartInfo.UseShellExecute = false;
                    process_glob.StartInfo.CreateNoWindow = true;
                    process_glob.EnableRaisingEvents = true;
                    process_glob.Start();

                    System.Threading.Thread.Sleep(50);
                    combo_prio.Invoke(new MethodInvoker(delegate
                    {
                        if (combo_prio.SelectedIndex != 2)
                        {
                            Change_mem_prio();
                        }

                    }));


                    this.InvokeEx(f => validate_duration = listView1.Items[list_index].SubItems[3].Text);
                    if (validate_duration != "N/A" && validate_duration != "0:00:00" && validate_duration != "00:00:00" && validate_duration != "Pending")
                    {
                        valid_prog = true;
                    }

                    String err_txt = "";

                    String silence_duration = String.Empty;
                    String silence_start = String.Empty;
                    Double interval = 0;
                    this.InvokeEx(f => durat_n = TimeSpan.Parse(listView1.Items[list_index].SubItems[3].Text).TotalSeconds - TimeSpan.Parse(ss_time_input.Text).TotalSeconds);

                    lbl_speed.Text = String.Empty;
                    Double sec_prog = 0;
                    Boolean silence_found_file = false;

                    while (!process_glob.StandardError.EndOfStream)
                    {
                        err_txt = process_glob.StandardError.ReadLine();

                        if (err_txt.ToLower().Contains("silence"))
                        {
                            silence_found = true;
                            silence_found_file = true;
                            list_lines.Add(err_txt);
                            try
                            {
                                if (err_txt.ToLower().Contains("silence_start:")) silence_start = err_txt.Substring(err_txt.LastIndexOf("silence_start:") + 15, 6);
                                if (err_txt.ToLower().Contains("silence_duration:")) silence_duration = err_txt.Substring(err_txt.LastIndexOf("silence_duration:") + 18, 6);
                            }
                            catch { }
                        }
                        if (err_txt.Contains("time=") && err_txt.Contains("time=-") == false)
                        {
                            if (valid_prog == true)
                            {
                                int start_time_index = err_txt.IndexOf("time=") + 5;
                                sec_prog = TimeSpan.Parse(err_txt.Substring(start_time_index, 8)).TotalSeconds;

                                Double percent = (sec_prog * 100 / durat_n);

                                total_prog = total_prog + (sec_prog - interval);
                                interval = sec_prog;
                                int percent2 = Convert.ToInt32(percent);

                                Double percent_tot = (total_prog * 100 / total_duration);
                                int percent_tot_2 = Convert.ToInt32(percent_tot);

                                if (percent_tot_2 <= 100)
                                {
                                    this.InvokeEx(f => f.Pg1.Value = percent_tot_2);
                                    this.InvokeEx(f => f.Pg1.Refresh());

                                    this.InvokeEx(f => f.Pg1.Text = Math.Round(percent_tot, 1).ToString() + "%");
                                    this.InvokeEx(f => TaskbarProgress.SetValue(this.Handle, percent_tot, Pg1.Maximum));
                                }

                                if (percent2 <= 100)
                                {

                                    if (Math.Round(percent, 1).ToString().Contains(".") || Math.Round(percent, 1).ToString().Contains(","))
                                    {
                                        this.InvokeEx(f => f.listView1.Items[list_index].SubItems[5].Text = Math.Round(percent, 1).ToString() + "%");

                                    }
                                    else
                                    {
                                        this.InvokeEx(f => f.listView1.Items[list_index].SubItems[5].Text = Math.Round(percent, 1).ToString() + System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator + "0" + "%");
                                    }

                                }

                                if (cancel_queue == false)
                                {
                                    //Estimated remaining time

                                    remain_time = err_txt.Substring(err_txt.LastIndexOf("speed=") + 6, err_txt.Length - err_txt.LastIndexOf("speed=") - 6);
                                    if (time_est_size % 3 == 0) this.InvokeEx(f => f.lbl_speed.Text = "Speed: " + remain_time);
                                    remain_time = remain_time.Replace("x", String.Empty);
                                    Double timing1 = 0;

                                    if (System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator == ",")
                                    {
                                        timing1 = Math.Round(Double.Parse(remain_time.Replace(".", ",")), 2);
                                    }
                                    else
                                    {
                                        timing1 = Math.Round(Double.Parse(remain_time), 2);
                                    }

                                    Decimal timing = (decimal)timing1;
                                    Decimal total_dur_dec = Convert.ToDecimal(total_duration);
                                    Decimal total_prog_dec = Convert.ToDecimal(total_prog);
                                    Decimal remain_secs = 0;

                                    if (timing > 0)
                                    {
                                        remain_secs = (decimal)(total_dur_dec - total_prog_dec) / timing;
                                    }

                                    if (remain_secs > 60)
                                    {
                                        remain_secs = remain_secs + 60;
                                    }

                                    String remain_from_secs = String.Empty;

                                    TimeSpan t = TimeSpan.FromSeconds(Convert.ToDouble(remain_secs));
                                    remain_from_secs = string.Format("{0:D2}h:{1:D2}", t.Hours, t.Minutes);

                                    if (remain_secs >= 43200)
                                    {
                                        this.InvokeEx(f => f.txt_remain.Text = "Time remaining: " + Math.Round(remain_secs / 3600).ToString() + " hours");
                                    }

                                    if (remain_secs >= 3600 && remain_secs < 43200)
                                    {
                                        this.InvokeEx(f => f.txt_remain.Text = "Time remaining: " + remain_from_secs + " min");
                                    }

                                    if (remain_secs < 3600 && remain_secs >= 600)
                                    {
                                        this.InvokeEx(f => f.txt_remain.Text = "Time remaining: " + remain_from_secs.Substring(remain_from_secs.LastIndexOf(":") + 1, 2) + " minutes");
                                    }

                                    if (remain_secs < 600 && remain_secs >= 120)
                                    {
                                        this.InvokeEx(f => f.txt_remain.Text = "Time remaining: " + remain_from_secs.Substring(remain_from_secs.LastIndexOf(":") + 2, 1) + " minutes");
                                    }

                                    if (remain_secs <= 59 && remain_secs != 0)
                                    {
                                        this.InvokeEx(f => f.txt_remain.Text = "Time remaining: " + Convert.ToInt16(remain_secs) + " seconds");
                                    }

                                    if (remain_secs == 0)
                                    {
                                        this.InvokeEx(f => f.txt_remain.Text = "Time remaining: " + "About to finish");
                                    }
                                }
                                //End remaining time
                            }
                        }
                    }
                    process_glob.WaitForExit();
                    process_glob.StartInfo.Arguments = String.Empty;
                    timer_est_size.Stop();
                    time_est_size = 0;
                    this.InvokeEx(f => lbl_speed.Text = String.Empty);
                    //this.InvokeEx(f => pg_lv.Visible = false);
                    //this.InvokeEx(f => pg_lv.Dispose());
                    this.InvokeEx(f => f.lbl_est_size.Text = String.Empty);
                    this.InvokeEx(f => f.lbl_bitrate.Text = String.Empty);

                    list_lines.Add("");
                    list_lines.Add("---------------------End of " + Path.GetFileName(file) + " log-------------------------------");
                    list_lines.Add("");

                    if (process_glob.ExitCode == 0)
                    {
                        if (skipped == false)
                        {
                            if (silence_found_file == false)
                            {
                                this.InvokeEx(f => f.listView1.Items[list_index].SubItems[5].Text = "Success");
                            }
                            else
                            {
                                this.InvokeEx(f => f.listView1.Items[list_index].SubItems[5].Text = "Silence found. Start: " + silence_start + ". Duration: " + silence_duration);
                                this.InvokeEx(f => f.listView1.Items[list_index].BackColor = Color.LightGoldenrodYellow);
                            }
                        }
                        else
                        {
                            this.InvokeEx(f => f.listView1.Items[list_index].SubItems[5].Text = "Skipped");
                            this.InvokeEx(f => f.listView1.Items[list_index].BackColor = Color.Beige);
                            total_prog = (total_prog + durat_n - sec_prog) / n_multi_presets;
                            skipped = false;
                        }
                    }
                    else
                    {
                        this.InvokeEx(f => f.listView1.Items[list_index].SubItems[5].Text = "Error");
                        total_prog = total_prog + durat_n - sec_prog;
                    }

                    if (list_index == listView1.Items.Count - 1)
                    {
                        this.InvokeEx(f => f.lbl_multip.Visible = false);
                        runnin_n_presets = false;
                        list_index = listView1.Items.Count - 1;
                        this.InvokeEx(f => TaskbarProgress.SetState(this.Handle, TaskbarProgress.TaskbarStates.NoProgress));
                        this.InvokeEx(f => f.Pg1.Value = 100);
                        this.InvokeEx(f => f.Pg1.Text = "100%");
                        working = false;
                        timer_est_size.Stop();
                        time_est_size = 0;

                        if (no_save_logs == false)
                        {
                            //Save log
                            string[] array_err = list_lines.ToArray();
                            String path = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_batch.log";

                            System.IO.StreamWriter SaveFile = new System.IO.StreamWriter(path);
                            SaveFile.WriteLine("FFmpeg log sesion: " + System.DateTime.Now);
                            SaveFile.WriteLine("-------------------------------");
                            foreach (String item in array_err)
                            {
                                SaveFile.WriteLine(item);
                            }
                            SaveFile.Close();

                            File.AppendAllText(path, "-----------------------");
                            File.AppendAllText(path, Environment.NewLine + "END OF LOG FILE" + Environment.NewLine);
                            File.AppendAllText(path, "-----------------------");
                            System.IO.FileInfo fileInfo = new System.IO.FileInfo(path);

                            var bytes = fileInfo.Length;

                            var kilobytes = (double)bytes / 1024;
                            var megabytes = kilobytes / 1024;
                            var gigabytes = megabytes / 1024;

                            //Format size view
                            String size = "";
                            String separator = ".";

                            if (bytes > 1000000000)
                            {
                                if (gigabytes.ToString().Contains("."))
                                {
                                    separator = ".";
                                }
                                else
                                {
                                    separator = ",";
                                }

                                String gigas = gigabytes.ToString();
                                if (gigas.Length >= 5)
                                {
                                    gigas = gigas.Substring(0, gigas.LastIndexOf(separator) + 3);
                                    size = (gigas + " GB");
                                }
                                else
                                {
                                    size = (gigas + " GB");
                                }
                            }

                            if (bytes >= 1048576 && bytes <= 1000000000)
                            {
                                if (megabytes.ToString().Contains("."))
                                {
                                    separator = ".";
                                }
                                else
                                {
                                    separator = ",";
                                }
                                String megas = megabytes.ToString();
                                if (megas.Length > 5)
                                {
                                    megas = megas.Substring(0, megas.LastIndexOf(separator));
                                    size = (megas + " MB");
                                }
                                else
                                {
                                    size = (megas + " MB");
                                }
                            }

                            if (bytes >= 1024 && bytes < 1048576)

                            {
                                if (kilobytes.ToString().Contains("."))
                                {
                                    separator = ".";
                                }
                                else
                                {
                                    separator = ",";
                                }

                                String kbs = kilobytes.ToString();
                                if (kbs.Length >= 5)
                                {
                                    kbs = kbs.Substring(0, kbs.LastIndexOf(separator));
                                    size = (kbs + " KB");
                                }
                                else
                                {
                                    size = (kbs + " KB");
                                }
                            }
                            if (bytes > -1 && bytes < 1024)
                            {
                                String bits = bytes.ToString();
                                size = (bits + " Bytes");
                            }

                            //End Format size view
                            timer_tasks.Stop();
                            TimeSpan t = TimeSpan.FromSeconds(time_n_tasks);
                            String tx_elapsed = string.Format("{0:D2}h:{1:D2}m:{2:D2}s",
                                t.Hours,
                                t.Minutes,
                                t.Seconds);
                            File.AppendAllText(path, Environment.NewLine);
                            File.AppendAllText(path, Environment.NewLine + "Total time: " + tx_elapsed);
                            File.AppendAllText(path, Environment.NewLine + "LOG SIZE: " + size);
                            //End save log
                        }

                        //Automatic shutdown check
                        if (chkshut.Checked && cancel_queue == false)
                        {
                            auto_shut();
                            return;
                        }
                        //End shutdown check
                        else
                        {
                            if (cancel_queue == false)
                            {
                                if (chk_delete_source.CheckState == CheckState.Checked)
                                {
                                    Disable_Controls();
                                    System.Threading.Thread.Sleep(500);
                                    list_proc.Items.Clear();
                                    listView1.Invoke(new MethodInvoker(delegate
                                    {
                                        foreach (ListViewItem item in listView1.Items)
                                        {
                                            list_proc.Items.Add((ListViewItem)item.Clone());
                                        }
                                    }));

                                    Label prog_txt = new Label();
                                    this.InvokeEx(f => prog_txt.Parent = panel1);
                                    this.InvokeEx(f => prog_txt.Top = 95);
                                    this.InvokeEx(f => prog_txt.Left = 80);
                                    this.InvokeEx(f => prog_txt.Width = 250);
                                    this.InvokeEx(f => prog_txt.TabIndex = 1);
                                    this.InvokeEx(f => prog_txt.BackColor = panel1.BackColor);
                                    this.InvokeEx(f => prog_txt.BorderStyle = BorderStyle.None);
                                    this.InvokeEx(f => prog_txt.TextAlign = ContentAlignment.MiddleLeft);
                                    this.InvokeEx(f => prog_txt.BringToFront());
                                    this.InvokeEx(f => prog_txt.Text = "Sending processed files to recycle bin...");

                                    ProgressBar pg_del = new ProgressBar();
                                    this.InvokeEx(f => pg_del.Parent = panel1);
                                    this.InvokeEx(f => pg_del.Top = 98);
                                    this.InvokeEx(f => pg_del.Left = 315);
                                    this.InvokeEx(f => pg_del.Width = 302);
                                    this.InvokeEx(f => pg_del.Height = 15);
                                    this.InvokeEx(f => pg_del.TabIndex = 0);
                                    this.InvokeEx(f => pg_del.BackColor = this.BackColor);
                                    this.InvokeEx(f => pg_del.Minimum = 0);
                                    this.InvokeEx(f => pg_del.BringToFront());
                                    this.InvokeEx(f => pg_del.Maximum = list_proc.Items.Count);
                                    this.InvokeEx(f => pg_del.Show());
                                    this.InvokeEx(f => pg_del.Refresh());
                                    int i = 0;
                                    int err = 0;

                                    foreach (ListViewItem item in list_proc.Items)
                                    {
                                        if (item.SubItems[5].Text == "Success")
                                        {
                                            try
                                            {
                                                FileSystem.DeleteFile(item.SubItems[1].Text + "\\" + item.Text, UIOption.OnlyErrorDialogs, RecycleOption.SendToRecycleBin);
                                                this.InvokeEx(f => pg_del.Value = i);
                                                i = i + 1;
                                            }
                                            catch
                                            {
                                                err = err + 1;
                                            }

                                            this.InvokeEx(f => prog_txt.Text = "Sending source files to recycle bin... " + i.ToString() + " of " + list_proc.Items.Count);
                                            this.InvokeEx(f => prog_txt.Refresh());
                                        }
                                    }
                                    this.InvokeEx(f => prog_txt.Visible = false);
                                    this.InvokeEx(f => prog_txt.Dispose());
                                    this.InvokeEx(f => pg_del.Visible = false);
                                    this.InvokeEx(f => pg_del.Dispose());
                                    Enable_Controls();

                                    if (err > 0) MessageBox.Show(err.ToString() + " files could not be moved to the recycle bin", "Some files not recycled", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);

                                    Boolean all_ok = true;
                                    foreach (ListViewItem item in list_proc.Items)
                                    {
                                        if (item.SubItems[5].Text != "Success")
                                        {
                                            all_ok = false;
                                            break;
                                        }
                                    }
                                    if (all_ok == true)
                                    {
                                        this.InvokeEx(f => f.btn_refresh.PerformClick());
                                    }
                                }

                                if (play_on_end == true) play_end();

                                if (Form.ActiveForm == null)
                                {
                                    notifyIcon1.BalloonTipText = "FFmpeg Batch silence detection complete";
                                    notifyIcon1.BalloonTipIcon = ToolTipIcon.Info;
                                    notifyIcon1.BalloonTipTitle = "Silence detection complete";
                                    notifyIcon1.ShowBalloonTip(0);
                                }

                                if (checkBox3.Checked)
                                {
                                    if (Directory.GetFiles(destino).Length != 0)
                                    {
                                        Process open_processed = new Process();
                                        open_processed.StartInfo.FileName = "explorer.exe";
                                        open_processed.StartInfo.Arguments = '\u0022' + destino + '\u0022';
                                        open_processed.Start();
                                    }
                                    else
                                    {
                                        if (Directory.Exists(destino))
                                        {
                                            System.IO.Directory.Delete(destino);
                                        }
                                    }
                                }
                            }

                            else
                            {
                                this.InvokeEx(f => f.Pg1.Text = "100%");
                                this.InvokeEx(f => MessageBox.Show("Queue processing aborted", "Aborted", MessageBoxButtons.OK, MessageBoxIcon.Error));
                            }
                        }
                    }

                }

                this.InvokeEx(f => this.Cursor = Cursors.Arrow);
                Enable_Controls();
                if (silence_found == true)
                {
                    Enable_Controls();
                    if (play_on_end == true)
                    {
                        System.Media.SystemSounds.Asterisk.Play();
                    }
                    this.InvokeEx(f => MessageBox.Show("Silence was found in one or more files. Please check log file for further details.", "Silence found", MessageBoxButtons.OK, MessageBoxIcon.Warning));

                }

            }).Start();
        }

        private void two_pass_encoding()
        {
            cancel_queue = false;
            notifyIcon1.Visible = true;
            lbl_multip.Text = String.Empty;
            //Validated list, start processing
            if ((fade_v_in.Checked == true && num_v_in.Value == 0) || (fade_v_out.Checked == true && num_v_out.Value == 0) || (fade_a_in.Checked == true && num_a_in.Value == 0) || (fade_a_out.Checked == true && num_a_out.Value == 0))
            {
                MessageBox.Show("Fading cannot be zero", "Fading is zero", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            txt_remain.Text = "Time remaining: 00h:00m:00s";

            if (listView1.SelectedIndices.Count == 0)
            {
                listView1.Items[0].Selected = true;
                listView1.Items[0].Focused = true;
                listView1.Focus();
            }
            String destino = Path.GetTempPath() + "\\" + "FFBatch_test";
            //Pending duration

            if (dur_ok == false)
            {
                list_pending_dur.Items.Clear();
                foreach (ListViewItem item in listView1.Items)
                {
                    list_pending_dur.Items.Add((ListViewItem)item.Clone());
                }
                BG_Dur.RunWorkerAsync();
                return;
            }

            //Check queued items

            if (warn_success_items == true)
            {
                Boolean no_queued = true;
                Boolean has_complete = false;
                foreach (ListViewItem item in listView1.Items)
                {
                    if (item.SubItems[5].Text == "Queued")
                    {
                        no_queued = false;
                    }
                    if (item.SubItems[5].Text == "Success" || item.SubItems[5].Text == "Replaced")
                    {
                        has_complete = true;
                    }
                }

                if (no_queued == true && listView1.Items.Count > 1)
                {
                    var a = MessageBox.Show("There are no items with status " + '\u0022' + "Queued" + '\u0022' + ". All files have been already processed. Do you want to continue?", "No items with queued status", MessageBoxButtons.OKCancel, MessageBoxIcon.Question);
                    if (a == DialogResult.Cancel) return;
                }

                if (no_queued == false && has_complete == true)
                {
                    var a = MessageBox.Show("Some list items were already encoded and are not in " + '\u0022' + "Queued" + '\u0022' + " status. Do you want to continue?", "Some items with no queued status", MessageBoxButtons.OKCancel, MessageBoxIcon.Question);
                    if (a == DialogResult.Cancel) return;
                }
                //End check queued items
            }

            cancel_queue = false;
            Pg1.Value = 0;
            //pg_current.Value = 0;
            Disable_Controls();

            btn_skip_main.Enabled = true;
            //textBox4.Text = "0%";
            working = true;
            runnin_n_presets = true;

            ListView list_proc = new ListView();
            foreach (ListViewItem item in listView1.Items)
            {
                list_proc.Items.Add((ListViewItem)item.Clone());
                item.SubItems[5].Text = "Queued";
                item.BackColor = Color.White;

            }
            String hw_decode = String.Empty;
            if (cb_hwdecode.SelectedItem.ToString() != "none")
            {
                hw_decode = "-hwaccel " + cb_hwdecode.SelectedItem.ToString();
            }

            //Save selected hw decoder

            String path2 = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_hw_dcd.ini";
            String txt_hw_dcd = cb_hwdecode.SelectedItem.ToString();
            if (txt_hw_dcd != "none")
            {
                File.WriteAllText(path2, txt_hw_dcd);
            }
            else
            {
                if (File.Exists(path2)) File.Delete(path2);
            }

            //End save hw decoder

            // Fade validation
            fade_ok = true;
            check_fade();
            if (fade_ok == false)
            {
                Enable_Controls();
                return;
            }
            // END Fade validation

            Pg1.Maximum = listView1.Items.Count;
            listView1.SelectedIndices.Clear();

            total_duration = 0;
            Double total_prog = 0;

            //Get total duration of files

            foreach (ListViewItem item in listView1.Items)
            {
                if (item.SubItems[3].Text != "N/A" && item.SubItems[3].Text != "0:00:00" && item.SubItems[3].Text != "00:00:00" && item.SubItems[3].Text != "Pending")
                {
                    total_duration = total_duration + TimeSpan.Parse(item.SubItems[3].Text).TotalSeconds - TimeSpan.Parse(ss_time_input.Text).TotalSeconds;
                }
                else
                {
                    total_duration = total_duration + 0;
                }
            }

            Pg1.Minimum = 0;
            Pg1.Maximum = 100;
            Pg1.Text = "0" + System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator + "0%";
            String remain_time = "0";
            //End get total duration of files

            List<string> list_lines = new List<string>();
            process_glob.StartInfo.Arguments = String.Empty;

            time_n_tasks = 0;
            timer_tasks.Start();
            timer_est_size.Start();
            time_est_size = 0;
            String file = String.Empty;

            chk_delete_source.Enabled = true;
            panel2.Enabled = true;
            chk_delete_source.Enabled = true;
            foreach (Control ct in panel2.Controls)
            {
                if (ct.Name != chk_delete_source.Name)
                {
                    this.InvokeEx(f => ct.Enabled = false);
                }
            }
            String in_color = ":color=" + combo_vin_col.SelectedItem.ToString();
            String out_color = ":color=" + combo_vout_color.SelectedItem.ToString();
            if (combo_vin_col.SelectedIndex == 2) in_color = ":alpha=1";
            if (combo_vout_color.SelectedIndex == 2) out_color = ":alpha=1";

            n_multi_presets = 2;
            int preset_run = 1;
            int to_go = n_multi_presets;

            Boolean is_vp9 = false;
            if (multi_two_pr1.ToLower().Contains("libvpx-vp9"))
            {
                is_vp9 = true;
            }
            else
            {
                total_duration = total_duration * 2;
            }

            new System.Threading.Thread(() =>
            {
                System.Threading.Thread.CurrentThread.IsBackground = true;

                for (int list_index = 0; list_index < listView1.Items.Count;)
                {
                    System.Threading.Thread.Sleep(50); //Allow kill process to send cancel_queue

                    listView1.Invoke(new MethodInvoker(delegate
                    {
                        file = listView1.Items[list_index].SubItems[1].Text + "\\" + listView1.Items[list_index].Text;
                    }));

                    if (cancel_queue == true)
                    {
                        this.InvokeEx(f => TaskbarProgress.SetState(this.Handle, TaskbarProgress.TaskbarStates.NoProgress));
                        working = false;
                        time_est_size = 0;
                        //this.InvokeEx(f => f.button2.Enabled = true);
                        Enable_Controls();
                        MessageBox.Show("Queue processing aborted", "Tasks aborted", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                        return;
                    }
                    int fframes = 0;
                    ProgressBarWithText pg_lv_vp9 = new ProgressBarWithText();

                    if (is_vp9 == true && preset_run == 1)
                    {
                        this.InvokeEx(f => f.Pg1.Text = "0" + System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator + "0%");
                        this.InvokeEx(f => f.Pg1.Refresh());
                        this.InvokeEx(f => pg_lv_vp9.Parent = panel1);
                        this.InvokeEx(f => pg_lv_vp9.Top = 98);
                        this.InvokeEx(f => pg_lv_vp9.Left = 339);
                        this.InvokeEx(f => pg_lv_vp9.Width = 130);
                        this.InvokeEx(f => pg_lv_vp9.Height = 15);
                        this.InvokeEx(f => pg_lv_vp9.BringToFront());
                        this.InvokeEx(f => pg_lv_vp9.Show());

                        String ff_frames = String.Empty;
                        Process get_frames = new Process();
                        get_frames.StartInfo.FileName = System.IO.Path.Combine(Application.StartupPath, "mediainfo.exe");
                        String ffprobe_frames = "--Output=" + '\u0022' + "Video;%FrameCount%" + '\u0022';
                        get_frames.StartInfo.Arguments = ffprobe_frames + " " + '\u0022' + list_proc.Items[list_index].SubItems[1].Text + "\\" + list_proc.Items[list_index].Text + '\u0022';
                        get_frames.StartInfo.RedirectStandardOutput = true;
                        get_frames.StartInfo.RedirectStandardError = true;
                        get_frames.StartInfo.UseShellExecute = false;
                        get_frames.StartInfo.CreateNoWindow = true;
                        get_frames.EnableRaisingEvents = true;
                        get_frames.Start();

                        ff_frames = get_frames.StandardOutput.ReadLine();
                        get_frames.WaitForExit();

                        if (get_frames.ExitCode == 0)
                        {
                            if (ff_frames != null)
                            {
                                if (ff_frames.ToLower() != "n/a")
                                {
                                    int try_ff = 0;
                                    if (int.TryParse(ff_frames, out try_ff))
                                    {
                                        fframes = try_ff;
                                    }
                                }
                                else
                                {
                                    fframes = 0;
                                }
                            }
                        }
                        else
                        {
                            fframes = 0;
                        }

                        get_frames.Dispose();
                        this.InvokeEx(f => pg_lv_vp9.Maximum = fframes);
                    }

                    this.InvokeEx(f => timer_est_size.Start());

                    String ffm = System.IO.Path.Combine(Application.StartupPath, "ffmpeg.exe");
                    String fullPath = file;

                    //Begin Shifting
                    String shifting = "";
                    if (chk_shift.Checked == true)
                    {

                        shifting = " -itsoffset " + Num_Shift.Value.ToString().Replace(",", ".") + " -i " + '\u0022' + file + '\u0022' + " -map 1:v -map 0:a ";

                    }
                    //End Shifting

                    //Begin fading and volume changing
                    String change_vol_fade = "";
                    if (chk_vol.Checked == true)
                    {
                        change_vol_fade = "-af " + '\u0022' + "volume=" + vol_ch.Value.ToString() + "dB " + '\u0022' + " ";
                    }

                    String fade_filter = String.Empty;
                    Decimal fade_frames = 0;

                    if (fade_v_in.CheckState == CheckState.Checked || fade_v_out.CheckState == CheckState.Checked || fframes == 0)
                    {
                        String ff_frames = String.Empty;
                        Process get_frames = new Process();
                        get_frames.StartInfo.FileName = System.IO.Path.Combine(Application.StartupPath, "MediaInfo.exe");
                        String ffprobe_frames = " " + '\u0022' + "--Inform=Video;%FrameRate%" + '\u0022';
                        get_frames.StartInfo.Arguments = ffprobe_frames + " " + '\u0022' + list_proc.Items[list_index].SubItems[1].Text + "\\" + list_proc.Items[list_index].Text + '\u0022';
                        get_frames.StartInfo.RedirectStandardOutput = true;
                        get_frames.StartInfo.RedirectStandardError = true;
                        get_frames.StartInfo.UseShellExecute = false;
                        get_frames.StartInfo.CreateNoWindow = true;
                        get_frames.EnableRaisingEvents = true;
                        get_frames.Start();

                        ff_frames = get_frames.StandardOutput.ReadLine();

                        get_frames.WaitForExit();

                        if (get_frames.ExitCode == 0)
                        {
                            if (ff_frames != null)
                            {
                                fade_frames = decimal.Parse(ff_frames) / 1000;
                            }
                        }
                        get_frames.Dispose();
                    }

                    if (fade_v_in.CheckState == CheckState.Checked && fade_v_out.CheckState == CheckState.Unchecked)
                    {
                        Decimal fff_in = Math.Round(num_v_in.Value * fade_frames, 0);
                        fade_filter = "-vf " + '\u0022' + "fade=in:0:" + fff_in.ToString() + in_color + '\u0022';
                    }

                    if (fade_v_in.CheckState == CheckState.Unchecked && fade_v_out.CheckState == CheckState.Checked)
                    {
                        Double dur_frames = TimeSpan.Parse(list_proc.Items[list_index].SubItems[3].Text).TotalSeconds * Convert.ToDouble(fade_frames);
                        Decimal fade_out_total = Math.Round(Convert.ToDecimal(dur_frames), 3, MidpointRounding.AwayFromZero);
                        Decimal fade_out_initial = Math.Round(fade_out_total - (num_v_out.Value * fade_frames), 0, MidpointRounding.AwayFromZero);
                        Decimal fff_out = Math.Round(num_v_out.Value * fade_frames, 0, MidpointRounding.AwayFromZero);

                        fade_filter = "-vf " + '\u0022' + "fade=out:" + fade_out_initial.ToString() + ":" + fff_out.ToString() + out_color + '\u0022';
                    }

                    if (fade_v_in.CheckState == CheckState.Checked && fade_v_out.CheckState == CheckState.Checked)
                    {
                        Decimal fff_in = Math.Round(num_v_in.Value * fade_frames, 0, MidpointRounding.AwayFromZero);
                        Double dur_frames = TimeSpan.Parse(list_proc.Items[list_index].SubItems[3].Text).TotalSeconds * Convert.ToDouble(fade_frames);
                        Decimal fade_out_total = Math.Round(Convert.ToDecimal(dur_frames), 3, MidpointRounding.AwayFromZero);
                        Decimal fade_out_initial = Math.Round(fade_out_total - (num_v_out.Value * fade_frames), 0, MidpointRounding.AwayFromZero);
                        Decimal fff_out = Math.Round(num_v_out.Value * fade_frames, 0, MidpointRounding.AwayFromZero);

                        fade_filter = "-vf " + '\u0022' + "fade=in:0:" + fff_in.ToString() + in_color + ", " + "fade=out:" + fade_out_initial.ToString() + ":" + fff_out.ToString() + out_color + '\u0022';
                    }

                    //Audio fading
                    if (fade_a_in.CheckState == CheckState.Checked && fade_a_out.CheckState == CheckState.Unchecked)
                    {
                        if (chk_vol.Checked == false)
                        {
                            change_vol_fade = "-af " + '\u0022' + "afade=t=in:ss=0:d=" + num_a_in.Value.ToString() + '\u0022';
                        }
                        else
                        {
                            change_vol_fade = "-af " + '\u0022' + "afade=t=in:ss=0:d=" + num_a_in.Value.ToString() + ", " + "volume=" + vol_ch.Value.ToString() + "dB " + '\u0022';
                        }
                    }

                    if (fade_a_in.CheckState == CheckState.Unchecked && fade_a_out.CheckState == CheckState.Checked)
                    {
                        Double af_out = TimeSpan.Parse(list_proc.Items[list_index].SubItems[3].Text).TotalSeconds - Convert.ToDouble(num_a_out.Value);
                        Decimal af_out_dec = Math.Round(Convert.ToDecimal(af_out), 0, MidpointRounding.AwayFromZero);
                        if (chk_vol.Checked == false)
                        {
                            change_vol_fade = "-af " + '\u0022' + "afade=t=out:st=" + af_out_dec + ":d=" + num_a_out.Value.ToString() + '\u0022';
                        }
                        else
                        {
                            change_vol_fade = "-af " + '\u0022' + "afade=t=out:st=" + af_out_dec + ":d=" + num_a_out.Value.ToString() + ", " + "volume=" + vol_ch.Value.ToString() + "dB " + '\u0022';
                        }
                    }
                    if (fade_a_in.CheckState == CheckState.Checked && fade_a_out.CheckState == CheckState.Checked)
                    {
                        Double af_out = TimeSpan.Parse(list_proc.Items[list_index].SubItems[3].Text).TotalSeconds - Convert.ToDouble(num_a_out.Value);
                        Decimal af_out_dec = Math.Round(Convert.ToDecimal(af_out), 0, MidpointRounding.AwayFromZero);

                        if (chk_vol.Checked == false)
                        {
                            change_vol_fade = "-af " + '\u0022' + "afade=t=in:ss=0:d=" + num_a_in.Value.ToString() + ", " + "afade=t=out:st=" + af_out_dec + ":d=" + num_a_out.Value.ToString() + '\u0022';
                        }
                        else
                        {
                            change_vol_fade = "-af " + '\u0022' + "afade=t=in:ss=0:d=" + num_a_in.Value.ToString() + ", " + "afade=t=out:st=" + af_out_dec + ":d=" + num_a_out.Value.ToString() + ", " + "volume=" + vol_ch.Value.ToString() + "dB " + '\u0022';
                        }
                    }
                    //End audio fading

                    //End fading

                    //End Change Volume

                    if (txt_path_main.Text.Contains(".\\"))
                    {
                        destino = file.Substring(0, fullPath.LastIndexOf('\\')) + txt_path_main.Text.Replace(".", String.Empty);
                    }
                    else
                    {
                        if (checkBox1.CheckState == CheckState.Checked)
                        {
                            String pre_dest = Path.GetDirectoryName(file);
                            destino = Path.Combine(txt_path_main.Text, pre_dest.Substring(3, pre_dest.Length - 3));
                        }
                        else
                        {
                            destino = txt_path_main.Text;
                        }
                    }

                    String pre_input_var = "";
                    if (txt_pre_input.Text != "")
                    {
                        pre_input_var = txt_pre_input.Text;
                    }

                    String pre_ss = "";
                    if (TimeSpan.Parse(ss_time_input.Text).TotalSeconds != 0)
                    {
                        pre_ss = " -ss " + ss_time_input.Text;
                    }

                    add_suffix = "";

                    if (chk_suffix.Checked == true && txt_suffix.Text != String.Empty)
                    {
                        add_suffix = txt_suffix.Text;
                    }
                    String add_pr_suffix = String.Empty;
                    if (ren_multi == true)
                    {
                        add_pr_suffix = "_" + preset_run.ToString();
                    }

                    String ext_output1 = String.Empty;

                    if (preset_run == 1) ext_output1 = "nul";
                    if (preset_run == 2)
                    {
                        ext_output1 = multi_two_ext;
                        ext_output1 = "." + ext_output1;
                    }

                    if (preset_run == 1) textbox_params = multi_1st_pass;
                    if (preset_run == 2) textbox_params = multi_two_pr1;


                    String file2 = file;
                    if (textbox_params.Contains("%fn"))
                    {
                        textbox_params = textbox_params.Replace("%fn", Path.GetFileNameWithoutExtension(file));
                    }
                    if (textbox_params.Contains("%fp"))
                    {
                        textbox_params = textbox_params.Replace("%fp", Path.GetDirectoryName(file));
                    }
                    if (textbox_params.Contains("%fd"))
                    {
                        var path = Path.GetFullPath(file);
                        var dirName = Path.GetFileName(Path.GetDirectoryName(path));
                        textbox_params = textbox_params.Replace("%fd", dirName);
                    }

                    if (textbox_params.Contains("%1"))
                    {
                        file2 = file2.Replace("\\", "\\\\\\\\");
                        file2 = file2.Replace(":", "\\\\" + ":");
                        textbox_params = textbox_params.Replace("%1", file2);
                    }
                    String AppParam = String.Empty;
                    String templog = Path.GetTempPath() + "\\" + "FF_pass2.log";

                    if (preset_run == 1) AppParam = hw_decode + " " + pre_input_var + " " + pre_ss + " -y -i " + "" + '\u0022' + file + '\u0022' + " " + shifting + " " + textbox_params + " -passlogfile " + '\u0022' + templog + '\u0022' + " " + ext_output1;
                    else AppParam = hw_decode + " " + pre_input_var + " " + pre_ss + " -i " + "" + '\u0022' + file + '\u0022' + " " + shifting + " -y " + textbox_params + " -passlogfile " + '\u0022' + templog + '\u0022' + " " + fade_filter + " " + change_vol_fade + " " + '\u0022' + destino + "\\" + System.IO.Path.GetFileNameWithoutExtension(file) + add_suffix + add_pr_suffix + ext_output1 + '\u0022';

                    if (!Directory.Exists(destino))
                    {
                        Directory.CreateDirectory(destino);
                    }

                    process_glob.StartInfo.FileName = ffm;
                    process_glob.StartInfo.Arguments = AppParam;

                    valid_prog = false;
                    if (preset_run == 1) this.InvokeEx(f => f.listView1.Items[list_index].SubItems[5].Text = "Processing");

                    process_glob.StartInfo.RedirectStandardOutput = true;
                    process_glob.StartInfo.RedirectStandardInput = true;
                    process_glob.StartInfo.RedirectStandardError = true;
                    process_glob.StartInfo.UseShellExecute = false;
                    process_glob.StartInfo.CreateNoWindow = true;
                    process_glob.EnableRaisingEvents = true;
                    process_glob.Start();

                    System.Threading.Thread.Sleep(50);
                    combo_prio.Invoke(new MethodInvoker(delegate
                    {
                        if (combo_prio.SelectedIndex != 2)
                        {
                            Change_mem_prio();
                        }
                    }));

                    this.InvokeEx(f => durat_n = TimeSpan.Parse(listView1.Items[list_index].SubItems[3].Text).TotalSeconds - TimeSpan.Parse(ss_time_input.Text).TotalSeconds);

                    //Recalculate total frames for vp9

                    if (fframes == 0)
                    {
                        try
                        {
                            fframes = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(fade_frames) * durat_n));
                        }
                        catch { }
                        this.InvokeEx(f => pg_lv_vp9.Minimum = 0);
                        this.InvokeEx(f => pg_lv_vp9.Maximum = fframes);
                    }
                    //End recalculate total frames for vp9                    

                    this.InvokeEx(f => validate_duration = listView1.Items[list_index].SubItems[3].Text);
                    if (validate_duration != "N/A" && validate_duration != "0:00:00" && validate_duration != "00:00:00" && validate_duration != "Pending")
                    {
                        valid_prog = true;
                    }

                    String err_txt = "";
                    Double interval = 0;
                    Decimal est_bitrate = 0;
                    Decimal est_size = 0;
                    lbl_speed.Text = String.Empty;
                    Double sec_prog = 0;
                    this.InvokeEx(f => f.lbl_multip.Enabled = true);
                    this.InvokeEx(f => f.lbl_multip.Visible = true);
                    if (preset_run == 1) this.InvokeEx(f => f.lbl_multip.Text = "1st pass: Analysing video");
                    if (preset_run == 2)
                    {
                        this.InvokeEx(f => f.lbl_multip.Text = "2nd pass: Encoding file");
                        this.InvokeEx(f => f.listView1.Items[list_index].SubItems[5].Text = "50%");
                        //this.InvokeEx(f => pg_lv.Value = 50);
                    }

                    while (!process_glob.StandardError.EndOfStream)
                    {
                        err_txt = process_glob.StandardError.ReadLine();
                        list_lines.Add(err_txt);
                        if (is_vp9 == false || preset_run == 2)
                        {
                            if (err_txt.Contains("time=") && err_txt.Contains("time=-") == false)
                            {
                                if (valid_prog == true)
                                {
                                    this.InvokeEx(f => durat_n = TimeSpan.Parse(listView1.Items[list_index].SubItems[3].Text).TotalSeconds - TimeSpan.Parse(ss_time_input.Text).TotalSeconds);
                                    durat_n = durat_n * 2;
                                    int start_time_index = err_txt.IndexOf("time=") + 5;
                                    sec_prog = TimeSpan.Parse(err_txt.Substring(start_time_index, 8)).TotalSeconds;

                                    Double percent = (sec_prog * 100 / durat_n);

                                    total_prog = total_prog + (sec_prog - interval);
                                    interval = sec_prog;
                                    int percent2 = Convert.ToInt32(percent);

                                    Double percent_tot = (total_prog * 100 / total_duration);
                                    int percent_tot_2 = Convert.ToInt32(percent_tot);

                                    if (percent_tot_2 <= 100)
                                    {
                                        this.InvokeEx(f => f.Pg1.Value = percent_tot_2);
                                        this.InvokeEx(f => f.Pg1.Refresh());

                                        if (Math.Round(percent_tot, 1).ToString().Contains(".") || Math.Round(percent_tot, 1).ToString().Contains(","))
                                        {
                                            this.InvokeEx(f => f.Pg1.Text = Math.Round(percent_tot, 1).ToString() + "%");
                                        }
                                        else
                                        {
                                            this.InvokeEx(f => f.Pg1.Text = Math.Round(percent_tot, 1).ToString() + ".0" + "%");
                                        }

                                        this.InvokeEx(f => TaskbarProgress.SetValue(this.Handle, percent_tot, Pg1.Maximum));
                                    }

                                    if (percent2 <= 100)
                                    {
                                        //this.InvokeEx(f => f.listView1.Items[list_index].SubItems[5].Text = percent2.ToString() + "%");

                                        if (preset_run == 2)
                                            if (percent2 <= 50)
                                            {
                                                if (Math.Round(percent, 1).ToString().Contains(".") || Math.Round(percent, 1).ToString().Contains(","))
                                                {
                                                    this.InvokeEx(f => f.listView1.Items[list_index].SubItems[5].Text = Math.Round(percent + 50, 1).ToString() + "%");
                                                }
                                                else
                                                {
                                                    this.InvokeEx(f => f.listView1.Items[list_index].SubItems[5].Text = Math.Round(percent + 50, 1).ToString() + System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator + "0" + "%");
                                                }
                                            }
                                            else
                                            {
                                                if (Math.Round(percent, 1).ToString().Contains(".") || Math.Round(percent, 1).ToString().Contains(","))
                                                {
                                                    this.InvokeEx(f => f.listView1.Items[list_index].SubItems[5].Text = "100%");
                                                }
                                                else
                                                {
                                                    this.InvokeEx(f => f.listView1.Items[list_index].SubItems[5].Text = "100%");
                                                }
                                            }
                                        else
                                        {
                                            if (Math.Round(percent, 1).ToString().Contains(".") || Math.Round(percent, 1).ToString().Contains(","))
                                            {
                                                this.InvokeEx(f => f.listView1.Items[list_index].SubItems[5].Text = Math.Round(percent, 1).ToString() + "%");
                                            }
                                            else
                                            {
                                                this.InvokeEx(f => f.listView1.Items[list_index].SubItems[5].Text = Math.Round(percent, 1).ToString() + System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator + "0" + "%");
                                            }
                                        }

                                        if (preset_run == 2)
                                        {
                                            if (Math.Round(percent, 1).ToString().Contains(".") || Math.Round(percent, 1).ToString().Contains(","))
                                            {
                                                this.InvokeEx(f => f.listView1.Items[list_index].SubItems[5].Text = Math.Round(percent + 50, 1).ToString() + "%");
                                            }
                                            else
                                            {
                                                this.InvokeEx(f => f.listView1.Items[list_index].SubItems[5].Text = Math.Round(percent + 50, 1).ToString() + System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator + "0" + "%");
                                            }
                                        }
                                        else
                                        {
                                            if (Math.Round(percent, 1).ToString().Contains(".") || Math.Round(percent, 1).ToString().Contains(","))
                                            {
                                                this.InvokeEx(f => f.listView1.Items[list_index].SubItems[5].Text = Math.Round(percent, 1).ToString() + "%");
                                            }
                                            else
                                            {
                                                this.InvokeEx(f => f.listView1.Items[list_index].SubItems[5].Text = Math.Round(percent, 1).ToString() + System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator + "0" + "%");
                                            }
                                        }
                                        //this.InvokeEx(f => pg_lv.Refresh());
                                    }

                                    if (cancel_queue == false)
                                    {
                                        //Estimated remaining time

                                        remain_time = err_txt.Substring(err_txt.LastIndexOf("speed=") + 6, err_txt.Length - err_txt.LastIndexOf("speed=") - 6);
                                        if (time_est_size % 3 == 0) this.InvokeEx(f => f.lbl_speed.Text = "Speed: " + remain_time);
                                        remain_time = remain_time.Replace("x", String.Empty);
                                        Double timing1 = 0;

                                        if (System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator == ",")
                                        {
                                            timing1 = Math.Round(Double.Parse(remain_time.Replace(".", ",")), 2);
                                        }
                                        else
                                        {
                                            timing1 = Math.Round(Double.Parse(remain_time), 2);
                                        }

                                        Decimal timing = (decimal)timing1;
                                        Decimal total_dur_dec = Convert.ToDecimal(total_duration);
                                        Decimal total_prog_dec = Convert.ToDecimal(total_prog);
                                        Decimal remain_secs = 0;

                                        if (timing > 0)
                                        {
                                            remain_secs = (decimal)(total_dur_dec - total_prog_dec) / timing;
                                        }

                                        if (remain_secs > 60)
                                        {
                                            remain_secs = remain_secs + 60;
                                        }

                                        String remain_from_secs = String.Empty;

                                        TimeSpan t = TimeSpan.FromSeconds(Convert.ToDouble(remain_secs));
                                        remain_from_secs = string.Format("{0:D2}h:{1:D2}", t.Hours, t.Minutes);

                                        if (remain_secs >= 43200)
                                        {
                                            this.InvokeEx(f => f.txt_remain.Text = "Time remaining: " + Math.Round(remain_secs / 3600).ToString() + " hours");
                                        }

                                        if (remain_secs >= 3600 && remain_secs < 43200)
                                        {
                                            this.InvokeEx(f => f.txt_remain.Text = "Time remaining: " + remain_from_secs + " min");
                                        }

                                        if (remain_secs < 3600 && remain_secs >= 600)
                                        {
                                            this.InvokeEx(f => f.txt_remain.Text = "Time remaining: " + remain_from_secs.Substring(remain_from_secs.LastIndexOf(":") + 1, 2) + " minutes");
                                        }

                                        if (remain_secs < 600 && remain_secs >= 120)
                                        {
                                            this.InvokeEx(f => f.txt_remain.Text = "Time remaining: " + remain_from_secs.Substring(remain_from_secs.LastIndexOf(":") + 2, 1) + " minutes");
                                        }

                                        if (remain_secs <= 59 && remain_secs != 0)
                                        {
                                            this.InvokeEx(f => f.txt_remain.Text = "Time remaining: " + Convert.ToInt16(remain_secs) + " seconds");
                                        }

                                        if (remain_secs <= 0)
                                        {
                                            this.InvokeEx(f => f.txt_remain.Text = "Time remaining: " + "About to finish");
                                        }
                                    }

                                    //End remaining time

                                    if (preset_run == 2)
                                    {
                                        //Estimated size and bitrate

                                        String read_size = String.Empty;
                                        if (err_txt.Contains("size=") && (time_est_size % 3 == 0))
                                        {
                                            int size_index = err_txt.IndexOf("size=") + 5;
                                            read_size = err_txt.Substring(size_index, 8);
                                            if (Convert.ToDecimal(sec_prog) != 0)
                                            {
                                                est_bitrate = (Math.Round(Convert.ToDecimal(read_size) * 8 / Convert.ToDecimal(sec_prog), 0));
                                            }
                                            else
                                            {
                                                est_bitrate = 0;
                                            }

                                            if (Convert.ToDecimal(read_size) > 1 && time_n_tasks > 1)
                                            {
                                                if (est_bitrate < 9999)
                                                {
                                                    if (est_bitrate > 48)
                                                    {
                                                        this.InvokeEx(f => f.lbl_bitrate.Text = "Avg. bitrate: " + est_bitrate + " Kb/s");
                                                    }
                                                    else
                                                    {
                                                        this.InvokeEx(f => f.lbl_bitrate.Text = "Avg. bitrate: ");
                                                    }
                                                }
                                                else
                                                {
                                                    this.InvokeEx(f => f.lbl_bitrate.Text = "Avg. bitrate: " + (Math.Round(est_bitrate / 1000, 0)) + " Mb/s");
                                                }
                                                //Estimated size
                                                est_size = Convert.ToDecimal(durat_n) * est_bitrate / 8;

                                                if (est_size > 1000000)
                                                {
                                                    this.InvokeEx(f => f.lbl_est_size.Text = "Estimated size: " + (Math.Round(est_size / 1000000, 1)).ToString() + " GB");
                                                }
                                                else
                                                {
                                                    if (Math.Round(est_size / 1000, 0) > 0)
                                                    {
                                                        this.InvokeEx(f => f.lbl_est_size.Text = "Estimated size: " + (Math.Round(est_size / 1000, 0)).ToString() + " MB");
                                                    }
                                                    else
                                                    {
                                                        this.InvokeEx(f => f.lbl_est_size.Text = "Estimated size: ");
                                                    }
                                                }
                                            }

                                            this.InvokeEx(f => f.lbl_est_size.Refresh());
                                        }
                                    }
                                }
                            }
                        }
                        else
                        {
                            //Progress bar vp9

                            if (err_txt.ToLower().Contains("frame="))
                            {
                                int start_fps_index = err_txt.IndexOf("frame=");
                                int try_ff = 0;

                                if (int.TryParse(err_txt.Substring(start_fps_index + 6, 5), out try_ff) && fframes != 0 && fframes <= pg_lv_vp9.Maximum)
                                {
                                    this.InvokeEx(f => pg_lv_vp9.Value = try_ff);
                                    this.InvokeEx(f => pg_lv_vp9.Text = (try_ff * 100 / fframes).ToString() + "%");
                                    this.InvokeEx(f => pg_lv_vp9.Refresh());
                                    //this.InvokeEx(f => pg_lv.Value = try_ff * 100 / fframes / 2);
                                    this.InvokeEx(f => f.listView1.Items[list_index].SubItems[5].Text = (try_ff * 100 / fframes / 2).ToString() + "%");
                                    //this.InvokeEx(f => pg_lv.Refresh());
                                }
                                else
                                {
                                    this.InvokeEx(f => pg_lv_vp9.Value = 0);
                                }
                                //End Progress bar
                            }
                        }
                    }
                    process_glob.WaitForExit();
                    process_glob.StartInfo.Arguments = String.Empty;
                    this.InvokeEx(f => pg_lv_vp9.Dispose());
                    timer_est_size.Stop();
                    time_est_size = 0;
                    this.InvokeEx(f => lbl_speed.Text = String.Empty);
                    //if (preset_run == 1)
                    //{
                    //    //this.InvokeEx(f => pg_lv.Visible = false);
                    //    //this.InvokeEx(f => pg_lv.Dispose());
                    //}
                    if (preset_run == 2)
                    {
                        this.InvokeEx(f => f.listView1.Items[list_index].SubItems[5].Text = "50%");
                        //this.InvokeEx(f => pg_lv.Refresh());
                    }

                    this.InvokeEx(f => f.lbl_est_size.Text = String.Empty);
                    this.InvokeEx(f => f.lbl_bitrate.Text = String.Empty);

                    list_lines.Add("");
                    list_lines.Add("---------------------End of " + Path.GetFileName(file) + " log-------------------------------");
                    list_lines.Add("");


                    if (preset_run == 2)
                    {
                        this.InvokeEx(f => f.listView1.Items[list_index].SubItems[5].Text = "100%");
                        //this.InvokeEx(f => pg_lv.Visible = false);
                        if (process_glob.ExitCode == 0)
                        {
                            if (skipped == false)
                            {
                                this.InvokeEx(f => f.listView1.Items[list_index].SubItems[5].Text = "Success");
                                //this.InvokeEx(f => f.listView1.Items[list_index].BackColor = listView1.BackColor);
                            }
                            else
                            {
                                this.InvokeEx(f => f.listView1.Items[list_index].SubItems[5].Text = "Skipped");
                                //this.InvokeEx(f => f.listView1.Items[list_index].BackColor = Color.Beige);
                                total_prog = (total_prog + durat_n - sec_prog) / n_multi_presets;
                                skipped = false;
                            }
                        }
                        else
                        {
                            this.InvokeEx(f => f.listView1.Items[list_index].SubItems[5].Text = "Error");
                            this.InvokeEx(f => f.listView1.Items[list_index].BackColor = Color.PaleGoldenrod);
                            total_prog = total_prog + durat_n - sec_prog;
                        }
                        preset_run = 1;
                        list_index = list_index + 1;
                    }
                    else
                    {
                        if (process_glob.ExitCode != 0)
                        {
                            this.InvokeEx(f => f.listView1.Items[list_index].SubItems[5].Text = "Error");
                            this.InvokeEx(f => f.listView1.Items[list_index].BackColor = Color.PaleGoldenrod);
                            total_prog = total_prog + durat_n - sec_prog;
                            list_index = list_index + 1;
                            preset_run = 1;
                        }
                        if (process_glob.ExitCode == 0)
                        {
                            if (skipped == false)
                            {
                                this.InvokeEx(f => f.listView1.Items[list_index].SubItems[5].Text = "50%");
                                preset_run = 2;
                            }
                            else
                            {
                                this.InvokeEx(f => f.listView1.Items[list_index].SubItems[5].Text = "Skipped");
                                //this.InvokeEx(f => f.listView1.Items[list_index].BackColor = Color.Beige);
                                total_prog = (total_prog + durat_n - sec_prog) / n_multi_presets;
                                skipped = false;
                                list_index = list_index + 1;
                                preset_run = 1;
                            }
                        }
                    }

                    if (list_index == listView1.Items.Count)
                    {
                        this.InvokeEx(f => f.lbl_multip.Visible = false);
                        //this.InvokeEx(f => pg_lv.Visible = false);
                        //this.InvokeEx(f => pg_lv.Dispose());
                        runnin_n_presets = false;
                        this.InvokeEx(f => TaskbarProgress.SetState(this.Handle, TaskbarProgress.TaskbarStates.NoProgress));
                        this.InvokeEx(f => f.Pg1.Value = 100);
                        this.InvokeEx(f => f.Pg1.Text = "100%");
                        working = false;
                        timer_est_size.Stop();
                        time_est_size = 0;

                        if (no_save_logs == false)
                        {
                            //Save log
                            string[] array_err = list_lines.ToArray();
                            String path = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_batch.log";

                            System.IO.StreamWriter SaveFile = new System.IO.StreamWriter(path);
                            SaveFile.WriteLine("FFmpeg log sesion: " + System.DateTime.Now);
                            SaveFile.WriteLine("-------------------------------");
                            foreach (String item in array_err)
                            {
                                SaveFile.WriteLine(item);
                            }
                            SaveFile.Close();

                            File.AppendAllText(path, "-----------------------");
                            File.AppendAllText(path, Environment.NewLine + "END OF LOG FILE" + Environment.NewLine);
                            File.AppendAllText(path, "-----------------------");
                            System.IO.FileInfo fileInfo = new System.IO.FileInfo(path);

                            var bytes = fileInfo.Length;

                            var kilobytes = (double)bytes / 1024;
                            var megabytes = kilobytes / 1024;
                            var gigabytes = megabytes / 1024;

                            //Format size view
                            String size = "";
                            String separator = ".";

                            if (bytes > 1000000000)
                            {
                                if (gigabytes.ToString().Contains("."))
                                {
                                    separator = ".";
                                }
                                else
                                {
                                    separator = ",";
                                }

                                String gigas = gigabytes.ToString();
                                if (gigas.Length >= 5)
                                {
                                    gigas = gigas.Substring(0, gigas.LastIndexOf(separator) + 3);
                                    size = (gigas + " GB");
                                }
                                else
                                {
                                    size = (gigas + " GB");
                                }
                            }

                            if (bytes >= 1048576 && bytes <= 1000000000)
                            {
                                if (megabytes.ToString().Contains("."))
                                {
                                    separator = ".";
                                }
                                else
                                {
                                    separator = ",";
                                }
                                String megas = megabytes.ToString();
                                if (megas.Length > 5)
                                {
                                    megas = megas.Substring(0, megas.LastIndexOf(separator));
                                    size = (megas + " MB");
                                }
                                else
                                {
                                    size = (megas + " MB");
                                }
                            }

                            if (bytes >= 1024 && bytes < 1048576)

                            {
                                if (kilobytes.ToString().Contains("."))
                                {
                                    separator = ".";
                                }
                                else
                                {
                                    separator = ",";
                                }

                                String kbs = kilobytes.ToString();
                                if (kbs.Length >= 5)
                                {
                                    kbs = kbs.Substring(0, kbs.LastIndexOf(separator));
                                    size = (kbs + " KB");
                                }
                                else
                                {
                                    size = (kbs + " KB");
                                }
                            }
                            if (bytes > -1 && bytes < 1024)
                            {
                                String bits = bytes.ToString();
                                size = (bits + " Bytes");
                            }

                            //End Format size view
                            timer_tasks.Stop();
                            TimeSpan t = TimeSpan.FromSeconds(time_n_tasks);
                            String tx_elapsed = string.Format("{0:D2}h:{1:D2}m:{2:D2}s",
                                t.Hours,
                                t.Minutes,
                                t.Seconds);
                            File.AppendAllText(path, Environment.NewLine);
                            File.AppendAllText(path, Environment.NewLine + "Total time: " + tx_elapsed);
                            File.AppendAllText(path, Environment.NewLine + "LOG SIZE: " + size);
                            //End save log
                        }

                        //Automatic shutdown check

                        if (chkshut.Checked && cancel_queue == false)
                        {
                            auto_shut();
                            return;
                        }
                        //End shutdown check
                        else
                        {
                            if (cancel_queue == false)
                            {
                                if (chk_delete_source.CheckState == CheckState.Checked)
                                {
                                    Disable_Controls();
                                    System.Threading.Thread.Sleep(500);
                                    list_proc.Items.Clear();
                                    listView1.Invoke(new MethodInvoker(delegate
                                    {
                                        foreach (ListViewItem item in listView1.Items)
                                        {
                                            list_proc.Items.Add((ListViewItem)item.Clone());
                                        }
                                    }));

                                    Label prog_txt = new Label();
                                    this.InvokeEx(f => prog_txt.Parent = panel1);
                                    this.InvokeEx(f => prog_txt.Top = 95);
                                    this.InvokeEx(f => prog_txt.Left = 80);
                                    this.InvokeEx(f => prog_txt.Width = 250);
                                    this.InvokeEx(f => prog_txt.TabIndex = 1);
                                    this.InvokeEx(f => prog_txt.BackColor = panel1.BackColor);
                                    this.InvokeEx(f => prog_txt.BorderStyle = BorderStyle.None);
                                    this.InvokeEx(f => prog_txt.TextAlign = ContentAlignment.MiddleLeft);
                                    this.InvokeEx(f => prog_txt.BringToFront());
                                    this.InvokeEx(f => prog_txt.Text = "Sending processed files to recycle bin...");

                                    ProgressBar pg_del = new ProgressBar();
                                    this.InvokeEx(f => pg_del.Parent = panel1);
                                    this.InvokeEx(f => pg_del.Top = 98);
                                    this.InvokeEx(f => pg_del.Left = 315);
                                    this.InvokeEx(f => pg_del.Width = 302);
                                    this.InvokeEx(f => pg_del.Height = 15);
                                    this.InvokeEx(f => pg_del.TabIndex = 0);
                                    this.InvokeEx(f => pg_del.BackColor = this.BackColor);
                                    this.InvokeEx(f => pg_del.Minimum = 0);
                                    this.InvokeEx(f => pg_del.BringToFront());
                                    this.InvokeEx(f => pg_del.Maximum = list_proc.Items.Count);
                                    this.InvokeEx(f => pg_del.Show());
                                    this.InvokeEx(f => pg_del.Refresh());
                                    int i = 0;
                                    int err = 0;

                                    foreach (ListViewItem item in list_proc.Items)
                                    {
                                        if (item.SubItems[5].Text == "Success")
                                        {
                                            try
                                            {
                                                FileSystem.DeleteFile(item.SubItems[1].Text + "\\" + item.Text, UIOption.OnlyErrorDialogs, RecycleOption.SendToRecycleBin);
                                                this.InvokeEx(f => pg_del.Value = i);
                                                i = i + 1;
                                            }
                                            catch
                                            {
                                                err = err + 1;
                                            }

                                            this.InvokeEx(f => prog_txt.Text = "Sending source files to recycle bin... " + i.ToString() + " of " + list_proc.Items.Count);
                                            this.InvokeEx(f => prog_txt.Refresh());
                                        }
                                    }
                                    this.InvokeEx(f => prog_txt.Visible = false);
                                    this.InvokeEx(f => prog_txt.Dispose());
                                    this.InvokeEx(f => pg_del.Visible = false);
                                    this.InvokeEx(f => pg_del.Dispose());
                                    Enable_Controls();

                                    if (err > 0) MessageBox.Show(err.ToString() + " files could not be moved to the recycle bin", "Some files not recycled", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);

                                    Boolean all_ok = true;
                                    foreach (ListViewItem item in list_proc.Items)
                                    {
                                        if (item.SubItems[5].Text != "Success")
                                        {
                                            all_ok = false;
                                            break;
                                        }
                                    }
                                    if (all_ok == true)
                                    {
                                        this.InvokeEx(f => f.btn_refresh.PerformClick());
                                    }
                                }

                                if (play_on_end == true) play_end();
                                if (Form.ActiveForm == null)
                                {
                                    notifyIcon1.BalloonTipText = "FFmpeg Batch encoding complete";
                                    notifyIcon1.BalloonTipIcon = ToolTipIcon.Info;
                                    notifyIcon1.BalloonTipTitle = "Encoding complete";
                                    notifyIcon1.ShowBalloonTip(0);
                                }

                                if (checkBox3.Checked)
                                {
                                    if (Directory.GetFiles(destino).Length != 0)
                                    {
                                        Process open_processed = new Process();
                                        open_processed.StartInfo.FileName = "explorer.exe";
                                        open_processed.StartInfo.Arguments = '\u0022' + destino + '\u0022';
                                        open_processed.Start();
                                    }
                                    else
                                    {
                                        if (Directory.Exists(destino))
                                        {
                                            System.IO.Directory.Delete(destino);
                                        }
                                    }
                                }
                            }
                            else
                            {
                                this.InvokeEx(f => f.Pg1.Text = "100%");
                                this.InvokeEx(f => MessageBox.Show("Queue processing aborted", "Aborted", MessageBoxButtons.OK, MessageBoxIcon.Error));
                            }
                        }
                    }
                }

                this.InvokeEx(f => this.Cursor = Cursors.Arrow);
                Enable_Controls();

            }).Start();
        }

        private void check_res()
        {
            SystemEvents.DisplaySettingsChanged += new EventHandler(SystemEvents_DisplaySettingsChanged);

            foreach (Control ct1 in this.Controls)
            {
                points.Add(ct1.Name, new Point(ct1.Left, ct1.Top));
            }
            foreach (Control ct1 in this.Controls)
            {
                sizes.Add(ct1.Name, new Size(ct1.Width, ct1.Height));
            }

            Rectangle resolution = Screen.PrimaryScreen.Bounds;
            if (resolution.Width > 1366 && resolution.Height > 768)
            {
                big_res = true;
                this.Width = this.Width + 30;
                foreach (Control ct in this.Controls)
                {
                    ct.Left = ct.Left + 15;
                }
                this.Height = this.Height + 25;
                foreach (Control ct in this.Controls)
                {
                    ct.Top = ct.Top + 6;
                }

                groupBox10.Height = groupBox10.Height + 6;

                foreach (Control ct in groupBox10.Controls)
                {
                    ct.Top = ct.Top + 3;
                }
                pic_title.Top = pic_title.Top - 9;
                change_ff.Top = change_ff.Top - 9;
                btn_clear_list.Left = btn_clear_list.Left - 2;
                btn_add_files.Left = btn_add_files.Left - 2;
                tabControl1.Left = tabControl1.Left + 2;
                tabControl1.Width = tabControl1.Width - 2;
            }
            else
            {
                big_res = false;
            }
        }

        private void SystemEvents_DisplaySettingsChanged(object sender, EventArgs e)
        {
            //Rectangle resolution = Screen.PrimaryScreen.Bounds;
            //if (resolution.Width <= 1366 && resolution.Height <= 800 && big_res == true)
            //{
            //this.Width = this.Width - 20;
            //this.Height = this.Height - 30;
            //groupBox5.Height = groupBox5.Height - 6;
            //groupBox10.Height = groupBox10.Height - 6;
            //pictureBox1.Top = pictureBox1.Top + 9;
            //change_ff.Top = change_ff.Top + 9;
            //button5.Left = button5.Left + 2;
            //button1.Left = button1.Left + 2;
            //foreach (Control ct in groupBox5.Controls)
            //{
            //ct.Top = ct.Top -3;
            //}
            //foreach (Control ct in groupBox10.Controls)
            //{
            //ct.Top = ct.Top - 3;
            //}

            //foreach (Control ct2 in this.Controls)
            //{
            //ct2.Left = points[ct2.Name].X;
            //ct2.Top = points[ct2.Name].Y;
            //ct2.Width = sizes[ct2.Name].Width;
            //ct2.Height = sizes[ct2.Name].Height;
            //}

            //big_res = false;
            //}

            //if (resolution.Width >= 1366 && resolution.Height >= 800 && big_res == false)
            //{
            //this.Width = this.Width + 30;
            //foreach (Control ct in this.Controls)
            //{
            //ct.Left = ct.Left + 15;
            //
            //}
            //this.Height = this.Height + 30;
            //foreach (Control ct in this.Controls)
            //{
            //ct.Top = ct.Top + 12;
            //}
            //groupBox5.Height = groupBox5.Height + 6;
            //groupBox10.Height = groupBox10.Height + 6;
            //foreach (Control ct in groupBox5.Controls)
            //{
            //ct.Top = ct.Top + 3;
            //}
            //foreach (Control ct in groupBox10.Controls)
            //{
            //ct.Top = ct.Top + 3;
            //}
            //pictureBox1.Top = pictureBox1.Top - 9;
            //change_ff.Top = change_ff.Top - 9;
            //button5.Left = button5.Left - 2;
            //button1.Left = button1.Left - 2;
            //big_res = true;
            //}
        }

        private void check_back_updates()
        {

            new System.Threading.Thread(() =>
            {
                System.Threading.Thread.CurrentThread.IsBackground = true;
                Thread.Sleep(500);
                String current_ver = btn_update.Text;

                String content2 = String.Empty;
                try
                {

                    WebClient client = new WebClientWithTimeout();
                    Stream stream = client.OpenRead(down_ver);
                    StreamReader reader = new StreamReader(stream);
                    String content = reader.ReadToEnd();
                    content2 = content;

                }
                catch
                {
                    try
                    {
                        //Backup server
                        WebClient client = new WebClientWithTimeout();
                        Stream stream = client.OpenRead(down_ver2);
                        StreamReader reader = new StreamReader(stream);
                        String content = reader.ReadToEnd();
                        content2 = content;
                    }
                    catch
                    {
                        this.InvokeEx(f => f.lbl_updates.Text = "Update connection error");
                        this.InvokeEx(f => f.btn_update.Text = current_ver);
                        return;
                    }
                }

                try
                {
                    if (Convert.ToInt16(content2.Replace(".", String.Empty).Substring(0, 3)) > Convert.ToInt16(Application.ProductVersion.Replace(".", String.Empty)))
                    {
                        this.InvokeEx(f => f.lbl_updates.Text = "Version " + content2.Substring(0, 5) + "  available!");
                    }
                }
                catch (Exception excpt)
                {
                    MessageBox.Show("There was an error checking for updates." + Environment.NewLine + Environment.NewLine + excpt.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }

                this.InvokeEx(f => f.btn_update.Text = current_ver);

            }).Start();
        }

        private void check_internet()
        {
            internet_up = true;

            System.Threading.Thread.CurrentThread.IsBackground = true;
            String current_ver = btn_update.Text;

            String content2 = String.Empty;
            try
            {

                WebClient client = new WebClientWithTimeout();
                Stream stream = client.OpenRead("http://google.com/generate_204");
                StreamReader reader = new StreamReader(stream);
                String content = reader.ReadToEnd();
                content2 = content;

            }
            catch
            {
                try
                {
                    //Backup server
                    WebClient client = new WebClientWithTimeout();
                    Stream stream = client.OpenRead("http://www.baidu.com/baidu.html?from=noscript");
                    StreamReader reader = new StreamReader(stream);
                    String content = reader.ReadToEnd();
                    content2 = content;
                }
                catch
                {
                    DialogResult a = MessageBox.Show("There was an error connecting to the Internet. Continue anyway?", "Internet connection error", MessageBoxButtons.OKCancel, MessageBoxIcon.Warning);
                    if (a == DialogResult.OK) internet_up = true;
                    else internet_up = false;
                }
            }
        }

        private void sort_size_lv1()
        {
            //Create sortable size listview

            listView1.BeginUpdate();
            foreach (ListViewItem item in listView1.Items)
            {
                if (File.Exists(item.Text))
                {
                    FileInfo fi = new FileInfo(item.Text);
                    item.SubItems[3].Text = fi.Length.ToString("D13");
                }
                else
                {
                    item.SubItems[3].Text = "0000000000000";
                }
            }

            listView1.EndUpdate();
            lvwColumnSorter_Full.SortColumn = 3;
            lvwColumnSorter_Full.Order = SortOrder.Descending;
            listView1.Sort();
            this.Cursor = Cursors.Arrow;
            foreach (ListViewItem item in listView1.Items)
            {
                //Format size view
                var bytes = long.Parse(item.SubItems[3].Text);

                var kilobytes = (double)bytes / 1024;
                var megabytes = kilobytes / 1024;
                var gigabytes = megabytes / 1024;

                String size = "";

                String separator = System.Globalization.CultureInfo.CurrentUICulture.NumberFormat.NumberDecimalSeparator;

                if (bytes > 1000000000)
                {
                    String gigas = gigabytes.ToString();
                    if (gigas.Length >= 5)
                    {
                        gigas = gigas.Substring(0, gigas.LastIndexOf(separator) + 3);
                        size = (gigas + " GB");
                    }
                    else
                    {
                        size = (gigas + " GB");
                    }
                }

                if (bytes >= 1048576 && bytes <= 1000000000)
                {

                    String megas = megabytes.ToString();
                    if (megas.Length > 5)
                    {
                        megas = megas.Substring(0, megas.LastIndexOf(separator) + 2);
                        size = (megas + " MB");
                    }
                    else
                    {
                        size = (megas + " MB");
                    }
                }

                if (bytes >= 1024 && bytes < 1048576)

                {
                    String kbs = kilobytes.ToString();
                    if (kbs.Length >= 5)
                    {
                        kbs = kbs.Substring(0, kbs.LastIndexOf(separator));
                        size = (kbs + " KB");
                    }
                    else
                    {
                        size = (kbs + " KB");
                    }
                }
                if (bytes > -1 && bytes < 1024)
                {
                    String bits = bytes.ToString();
                    size = (bits + " Bytes");
                }
                item.SubItems[3].Text = size;

                //End Format size view
            }
        }

        private void clone_lv_grid()
        {
            if (listView1.Items.Count == 0) return;
            clonegrid.Rows.Clear();
            int ni = listView1.Items.Count * 2;
            int nl = listView1.Items.Count;
            if (listView1.Items.Count > 1000)
            {
                pg_adding.Value = 0;
                pg_adding.Visible = true;
                pg_adding.Maximum = listView1.Items.Count * 2;
                LB_Wait.Visible = true;
                txt_adding_p.Visible = true;
                LB_Wait.Text = "Sorting list";
            }

            listView1.BeginUpdate();

            for (int i = 0; i < listView1.Items.Count; i++)
            {
                if (nl > 1000)
                {
                    pg_adding.Value = pg_adding.Value + 1;
                    txt_adding_p.Text = (pg_adding.Value * 100 / ni).ToString() + "%";
                    txt_adding_p.Refresh();
                    LB_Wait.Refresh();
                    pg_adding.Refresh();
                }

                FileInfo fi = new FileInfo(listView1.Items[i].Text);

                if (File.Exists(listView1.Items[i].Text))
                {
                    clonegrid.Rows.Add(listView1.Items[i].Text, listView1.Items[i].SubItems[1].Text, listView1.Items[i].SubItems[3].Text, fi.Length, listView1.Items[i].SubItems[5].Text);
                }
                else
                {
                    MessageBox.Show("File: " + listView1.Items[i].Text + Environment.NewLine + "was not found. Please remove it or refresh list.", "Missing file on the list", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    this.Cursor = Cursors.Arrow;
                    pg_adding.Visible = false;
                    txt_adding_p.Visible = false;
                    pg_adding.Value = 0;
                    LB_Wait.Text = String.Empty;
                    listView1.EndUpdate();
                    return;
                }
            }
            if (size_sorted == false)
            {
                size_sorted = true;
                this.clonegrid.Sort(this.clonegrid.Columns["Size"], ListSortDirection.Descending);
            }
            else
            {
                size_sorted = false;
                this.clonegrid.Sort(this.clonegrid.Columns["Size"], ListSortDirection.Ascending);
            }

            Type ts = Type.GetTypeFromProgID("Shell.Application");
            dynamic shell = Activator.CreateInstance(ts);
            int files_to_add = listView1.Items.Count;
            ListViewItem[] itemsToAdd = new ListViewItem[listView1.Items.Count];
            listView1.Items.Clear();

            for (int n = 0; n < files_to_add; n++)
            {
                if (nl > 1000)
                {
                    pg_adding.Value = pg_adding.Value + 1;
                    pg_adding.Refresh();
                    LB_Wait.Text = "Sorting list";
                    txt_adding_p.Text = (pg_adding.Value * 100 / ni).ToString() + "%";
                    txt_adding_p.Refresh();
                }

                Icon iconForFile = SystemIcons.WinLogo;

                if (!imageList2.Images.ContainsKey(System.IO.Path.GetExtension(clonegrid.Rows[n].Cells[1].Value.ToString())))
                {
                    iconForFile = System.Drawing.Icon.ExtractAssociatedIcon(clonegrid.Rows[n].Cells[1].Value.ToString());
                    this.InvokeEx(f => f.imageList2.Images.Add(System.IO.Path.GetExtension(clonegrid.Rows[n].Cells[1].Value.ToString()), iconForFile));
                }

                itemsToAdd[n] = new ListViewItem(clonegrid.Rows[n].Cells[1].Value.ToString());
                itemsToAdd[n].ImageKey = System.IO.Path.GetExtension(clonegrid.Rows[n].Cells[1].Value.ToString());


                Folder rFolder = shell.NameSpace(Path.GetDirectoryName(clonegrid.Rows[n].Cells[1].Value.ToString()));
                FolderItem rFiles = rFolder.ParseName(System.IO.Path.GetFileName(clonegrid.Rows[n].Cells[1].Value.ToString()));
                String FileSize = rFolder.GetDetailsOf(rFiles, 1).Trim();
                itemsToAdd[n].SubItems.Add(clonegrid.Rows[n].Cells[2].Value.ToString());
                itemsToAdd[n].SubItems.Add(clonegrid.Rows[n].Cells[3].Value.ToString());
                itemsToAdd[n].SubItems.Add(FileSize);
                itemsToAdd[n].SubItems.Add(clonegrid.Rows[n].Cells[5].Value.ToString());
            }
            listView1.Items.AddRange(itemsToAdd.ToArray());
            listView1.EndUpdate();
            pg_adding.Visible = false;
            txt_adding_p.Visible = false;
            pg_adding.Value = 0;
            LB_Wait.Text = String.Empty;
        }

        private void abort_view1()
        {
            Pg1.Focus();
            this.Text = "FFmpeg Batch AV Converter";
            if (recording_scr == true)
            {
                working = false;
                recording_scr = false;
                StreamWriter write_q = process_glob.StandardInput;
                write_q.Write("q");
                this.InvokeEx(f => f.pic_recording.Visible = false);
                Enable_Controls();
                return;
            }
            if (working == false)
            {
                int num = 0;
                Process[] localByName = Process.GetProcessesByName("ffmpeg");
                num = localByName.Length;
                if (num > 0 && localByName[0].Id == ff_ver_proc) return;

                if (num > 0)
                {
                    var a = MessageBox.Show("FFmpeg processes still running were detected on the system. Do you want to terminate them?", "FFmpeg processes running", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                    if (a == DialogResult.Yes)
                    {
                        foreach (Process p in localByName)
                        {
                            try
                            {
                                p.Kill();
                            }
                            catch
                            {
                                MessageBox.Show("Error closing process. ID " + p.Id, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            }
                        }
                    }
                }
                cancelados_paralelos = true;
                return;
            }
            working = false;
            btn_abort_all.Enabled = false;
            lbl_multip.Visible = false;
            runnin_n_presets = false;           

            if (multi_running == true)
            {
                timer_aborting.Start();
                working = false;
                multi_running = false;
                aborted = true;
                cancelados_paralelos = true;

                foreach (ListViewItem item in listView1.Items)
                {
                    if (item.SubItems[5].Text != "Success" && item.SubItems[5].Text != "Ready" && item.SubItems[5].Text != "Queued")
                    {
                        item.SubItems[5].Text = "Aborting";
                        //item.SubItems[5].BackColor = Color.PaleGoldenrod;
                    }
                }

                foreach (Process proc in procs.Values)
                {
                    cancelados_paralelos = true;
                    if (proc.StartInfo.Arguments != String.Empty)

                    {
                        try
                        {
                            StreamWriter write_q = proc.StandardInput;
                            write_q.Write("q");
                        }
                        catch (Exception exc)
                        {
                            MessageBox.Show("Error: " + exc.Message + " Some processes already finished or could not be aborted. Press Ok to retry.", "Queue abortion incomplete", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                    }
                }
                return;
            }

            if (process_glob.StartInfo.Arguments != String.Empty)
            {
                try
                {
                    process_glob.Kill();
                    working = false;
                }
                catch
                {
                }
            }
            else
            {
                MessageBox.Show("Some processes could not be aborted. Press Ok to retry.", "Queue abortion incomplete", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            cancel_queue = true;
            cancelados_paralelos = true;

            if (process_glob.StartInfo.Arguments != String.Empty)
            {
                StreamWriter write_q = process_glob.StandardInput;
                write_q.Write("q");
                return;
            }
        }
        private void main_progress_bar()
        {
            Pg1.Parent = groupBox10;
            Pg1.Value = 0;
            Pg1.Top = 32;
            Pg1.Left = 259;
            Pg1.Width = 745;
            Pg1.Height = 23;
            Pg1.Value = 0;
            Pg1.Text = "0" + System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator + "0%";
            Pg1.Show();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            pic_pause.Image = btn_pause.Image;
            main_progress_bar();
            listView1.OwnerDraw = true;
            listView3.OwnerDraw = true;            

            typeof(DataGridView).InvokeMember(
            "DoubleBuffered", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.SetProperty,
            null, listView1, new object[] { true });
            typeof(DataGridView).InvokeMember(
            "DoubleBuffered", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.SetProperty,
            null, listView3, new object[] { true });

            Rectangle resolution = Screen.PrimaryScreen.Bounds;
            if (big_res == false)
            {
                Pg1.Top = Pg1.Top - 3;
                this.MinimumSize = new Size(1276, 590);
                //this.MaximumSize = new Size(1276,  resolution.Height - 30);
            }
            else
            {
                this.MinimumSize = new Size(1276 + 30, 615);
                //this.MaximumSize = new Size(1276 + 30, resolution.Height - 30);
            }

            clonegrid.Columns.Add("Name", String.Empty);
            clonegrid.Columns.Add("Media type", String.Empty);
            clonegrid.Columns.Add("Duration", String.Empty);
            clonegrid.Columns.Add("Size", String.Empty);
            clonegrid.Columns.Add("Status", String.Empty);
            clonegrid.AllowUserToAddRows = false;

            if (!Directory.Exists(Path.Combine(Path.GetTempPath(), "FFBatch_test")))
            {
                try
                {
                    Directory.CreateDirectory(Path.Combine(Path.GetTempPath(), "FFBatch_test"));
                    watch_other_instance.Path = Path.Combine(Path.GetTempPath(), "FFBatch_test");
                }
                catch (Exception excpt)
                {
                    watch_other_instance.Path = String.Empty;
                    MessageBox.Show("Error writing to temp folder." + Environment.NewLine + Environment.NewLine + excpt.Message);
                }
            }
            else
            {
                watch_other_instance.Path = Path.Combine(Path.GetTempPath(), "FFBatch_test");
            }

            this.MainMenuStrip = main_menu;
            this.Cursor = Cursors.WaitCursor;
            this.InvokeEx(f => f.btn_update.Text = "Version " + Application.ProductVersion);
            //String temp_location = Path.Combine(Path.GetTempPath(), "FFmpeg_Batch_Converter_Portable");
            String app_location = Application.StartupPath;
            String portable_flag = Application.StartupPath + "\\" + "portable.ini";
            if (File.Exists(portable_flag))
            {
                is_portable = true;
                lbl_port.Visible = true;
            }
            else is_portable = false;
            read_main_config();

            new System.Threading.Thread(() =>
            {
                System.Threading.Thread.CurrentThread.IsBackground = true;


                foreach (String item in Combo_sub_lang_mux.Items)
                {
                    Combo_single_subs_lang.Items.Add(item);
                    ct3_combo_language.Items.Add(item);
                    combo_item_lang_2.Items.Add(item);
                }

            }).Start();

            read_config_files();

            read_hw_dec();

            //Load priority

            String f_prio = String.Empty;
            if (is_portable == false)
            {
                f_prio = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_priority.ini";
            }
            else
            {
                f_prio = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_priority_portable.ini";
            }

            if (File.Exists(f_prio))
            {
                String saved_prio = File.ReadAllText(f_prio);
                if (saved_prio != String.Empty)
                {
                    this.InvokeEx(f => f.combo_prio.SelectedIndex = Convert.ToInt16(saved_prio));
                    current_prio = Convert.ToInt16(saved_prio);
                }
            }
            else
            {
                this.InvokeEx(f => f.combo_prio.SelectedIndex = 2);
            }
            this.InvokeEx(f => f.btn_save_prio.Enabled = false);

            //End load priority

            this.Cursor = Cursors.Arrow;
        }

        private void read_hw_dec()
        {
            //HW_Decoders
            try
            {

                String f_hw_dcd = String.Empty;
                if (is_portable == false)
                {
                    f_hw_dcd = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_hw_dcd.ini";
                }
                else
                {
                    f_hw_dcd = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_hw_dcd_portable.ini";
                }

                Boolean bug_1 = false;
                if (File.Exists(f_hw_dcd))
                {
                    String all_file = File.ReadAllText(f_hw_dcd);
                    if (f_hw_dcd.Contains("*")) bug_1 = true;
                }
                else
                {
                    bug_1 = true;
                }
                if (bug_1 == false)
                {
                    int dcd_saved = 0;
                    String[] saved_hw_dcd = File.ReadAllLines(f_hw_dcd);
                    foreach (string line in File.ReadLines(f_hw_dcd))
                    {
                        this.InvokeEx(f => f.cb_hwdecode.Items.Add(line));
                    }
                    this.InvokeEx(f => f.cb_hwdecode.SelectedIndex = dcd_saved);
                }
                else
                {
                    cb_hwdecode.Invoke(new MethodInvoker(delegate
                    {
                        this.InvokeEx(f => f.cb_hwdecode.Items.Add("none"));
                        decoders.Add("none");
                        this.InvokeEx(f => f.cb_hwdecode.SelectedIndex = 0);
                        String selected = cb_hwdecode.SelectedItem.ToString();
                        if (hw_decoders == true) return;

                        if (hw_decoders == false)
                        {
                            hw_decoders = true;

                            //Read hardware decoders
                            Process consola_hw = new Process();

                            consola_hw.StartInfo.FileName = System.IO.Path.Combine(Application.StartupPath, "ffmpeg.exe");
                            consola_hw.StartInfo.Arguments = " -hwaccels";
                            consola_hw.StartInfo.RedirectStandardOutput = true;
                            consola_hw.StartInfo.RedirectStandardError = true;
                            consola_hw.StartInfo.UseShellExecute = false;
                            consola_hw.StartInfo.CreateNoWindow = true;
                            consola_hw.EnableRaisingEvents = true;

                            String duracion = String.Empty;
                            String std_out = String.Empty;
                            consola_hw.Start();
                            Boolean hw_found = false;

                            while (!consola_hw.StandardOutput.EndOfStream)
                            {
                                std_out = consola_hw.StandardOutput.ReadLine();

                                if (std_out.Contains("Hardware acceleration methods:"))
                                {
                                    if (selected != "auto") cb_hwdecode.Items.Add("auto");
                                    hw_found = true;
                                    decoders.Add("auto");
                                    continue;
                                }

                                if (hw_found == true && std_out != String.Empty && std_out != selected)
                                {
                                    cb_hwdecode.Items.Add(std_out);
                                    decoders.Add(std_out);
                                }
                            }
                            consola_hw.WaitForExit();
                            consola_hw.Close();
                            File.WriteAllLines(f_hw_dcd, decoders);
                        }
                    }));
                }
            }
            catch
            {
                this.InvokeEx(f => f.cb_hwdecode.Items.Add("none"));
                decoders.Add("none");
                this.InvokeEx(f => f.cb_hwdecode.SelectedIndex = 0);
            }
            //End HW_Decoders                  
        }

        private void read_saved_path()
        {
            String path_s = String.Empty;
            if (is_portable == false)
            {
                path_s = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_path.ini";
            }
            else
            {
                path_s = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_path_portable.ini";
            }

            if (File.Exists(path_s))
            {
                String saved_path = File.ReadAllText(path_s);


                if (saved_path != String.Empty)
                {

                    if (Directory.Exists(saved_path) == true)
                    {
                        txt_path_main.Text = saved_path;
                        txt_path_main.BackColor = Color.White;
                    }

                    else
                    {
                        if (saved_path.Contains(".\\"))
                        {
                            txt_path_main.Text = saved_path;
                            txt_path_main.BackColor = txt_parameters.BackColor;
                            txt_path_main.BackColor = this.BackColor;
                        }
                    }
                }
                else
                {
                    File.Delete(path_s);
                    txt_path_main.BackColor = this.BackColor;
                }

            }
            else
            {
                txt_path_main.Text = ".\\FFBatch";
                txt_path_main.BackColor = this.BackColor;
            }

            //End read saved path
        }

        private void read_main_config()
        {
            //Read saved path

            String path_s = String.Empty;
            if (is_portable == false)
            {
                path_s = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_path.ini";
            }
            else
            {
                path_s = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_path_portable.ini";
            }

            if (File.Exists(path_s))
            {
                String saved_path = File.ReadAllText(path_s);


                if (saved_path != String.Empty)
                {

                    if (Directory.Exists(saved_path) == true)
                    {
                        txt_path_main.Text = saved_path;
                        txt_path_main.BackColor = Color.White;
                    }

                    else
                    {
                        if (saved_path.Contains(".\\"))
                        {
                            txt_path_main.Text = saved_path;
                            txt_path_main.BackColor = txt_parameters.BackColor;
                        }
                        txt_path_main.BackColor = this.BackColor;
                    }

                }
                else
                {
                    File.Delete(path_s);
                    txt_path_main.BackColor = this.BackColor;

                }

            }

            //End read saved path

            //Read saved path URL

            String path_s2 = String.Empty;
            if (is_portable == false)
            {
                path_s2 = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_path_url.ini";
            }
            else
            {
                path_s2 = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_path_url_portable.ini";
            }

            if (File.Exists(path_s2))
            {
                String saved_path = File.ReadAllText(path_s2);

                if (saved_path.Length != 0)
                {
                    if (Directory.Exists(saved_path) == true)
                    {
                        txt_path_m3u.Text = saved_path;
                    }
                }
                else
                {
                    File.Delete(path_s2);
                }
            }

            //End read saved path URL

            //Read configuration

            SetStyle(ControlStyles.SupportsTransparentBackColor, true);

            this.InvokeEx(f => f.combo_presets.Items.Add("Default parameters"));
            this.InvokeEx(f => f.combo_presets.SelectedIndex = 0);
            //this.InvokeEx(f => f.combo_presets.Items.Clear());
            //this.InvokeEx(f => f.combo_presets.Items.Add("Default parameters"));


            String path = String.Empty;
            String path_pr = String.Empty;
            if (is_portable == false)
            {
                path = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_batch.ini";
                path_pr = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_presets.ini";
            }
            else
            {
                path = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_batch_portable.ini";
                path_pr = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_presets_portable.ini";
            }

            int linea = 0;
            this.InvokeEx(f => f.combo_presets.SelectedIndex = combo_presets.FindString(("Default parameters")));

            foreach (string line in File.ReadLines(path))
            {
                linea = linea + 1;
                if (linea == 1)
                {
                    this.InvokeEx(f => f.txt_parameters.Text = line);
                    continue;
                }

                if (linea == 2)
                {
                    this.InvokeEx(f => f.txt_format.Text = line);
                    continue;
                }

                if (line == "yes")

                {
                    this.InvokeEx(f => f.checkBox3.CheckState = CheckState.Checked);
                    continue;
                }

                if (line == "no")
                {
                    this.InvokeEx(f => f.checkBox3.CheckState = CheckState.Unchecked);
                    continue;
                }


                if (line == "Vn")
                {
                    this.InvokeEx(f => f.chk_suffix.CheckState = CheckState.Unchecked);
                    continue;
                }
                if (line.Substring(0, 2) == "Vs")
                {
                    this.InvokeEx(f => f.chk_suffix.CheckState = CheckState.Checked);
                    this.InvokeEx(f => f.txt_suffix.Text = line.Substring(3, line.Length - 3));
                    continue;
                }

                if (line == "grid_yes")
                {
                    this.InvokeEx(f => f.listView1.GridLines = true);
                    this.InvokeEx(f => f.listView2.GridLines = true);
                    this.InvokeEx(f => f.listView3.GridLines = true);
                    continue;
                }
                if (line == "grid_no")
                {
                    this.InvokeEx(f => f.listView1.GridLines = false);
                    this.InvokeEx(f => f.listView2.GridLines = false);
                    this.InvokeEx(f => f.listView3.GridLines = false);
                    continue;
                }

                if (line == "keep_yes")
                {
                    this.InvokeEx(f => f.checkBox1.CheckState = CheckState.Checked);
                    continue;
                }
                if (line == "keep_no")
                {
                    this.InvokeEx(f => f.checkBox1.CheckState = CheckState.Unchecked);
                    continue;
                }

                if (line == "subf_yes")
                {
                    this.InvokeEx(f => f.chk_subfolders.CheckState = CheckState.Checked);
                    add_subfs = true;
                    continue;
                }
                if (line == "subf_no")
                {
                    this.InvokeEx(f => f.chk_subfolders.CheckState = CheckState.Unchecked);
                    add_subfs = false;
                    continue;
                }
            }
            if (File.Exists(path_pr))
            {
                foreach (string line in File.ReadLines(path_pr))
                {
                    if (line.Length > 8)
                    {
                        if (line.Substring(0, 7).ToLower() == "version")
                        {
                            txt_config_ver.Text = line.Substring(8, line.Length - 8);
                            continue;
                        }
                    }

                    if (line.Contains("PR: "))
                    {
                        this.InvokeEx(f => f.combo_presets.Items.Add(line.Substring(4, line.LastIndexOf("&") - 5)));
                    }
                }
            }

            this.InvokeEx(f => f.btn_save_config.ImageKey = "Save_settings_39.png");

            //End read configuration
        }

        private void read_config_files()
        {
            new System.Threading.Thread(() =>
            {
                System.Threading.Thread.CurrentThread.IsBackground = true;

                //N-threads read
                this.InvokeEx(f => f.n_threads.Maximum = Environment.ProcessorCount);
                this.InvokeEx(f => f.n_downs.Maximum = n_threads.Maximum);
                tabControl1.Invoke(new MethodInvoker(delegate
                {
                    if (n_threads.Maximum > 2)
                    {
                        n_threads.Minimum = 2;
                        n_downs.Minimum = 2;
                    }
                    else
                    {
                        n_threads.Minimum = 1;
                        n_downs.Minimum = 1;
                    }

                    try
                    {
                        if (Environment.ProcessorCount > 2)
                        {
                            n_threads.Value = Environment.ProcessorCount / 2;
                            n_downs.Value = Environment.ProcessorCount / 2;
                        }
                        else
                        {
                            n_threads.Value = 2;
                            n_downs.Value = 2;
                        }
                    }
                    catch
                    {
                        if (n_threads.Maximum >= 2)
                        {
                            n_threads.Value = 2;
                            n_downs.Value = 2;
                        }
                    }
                }));

                String path_first = String.Empty;
                if (is_portable == false)
                {
                    path_first = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_first.ini";
                }
                else
                {
                    path_first = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_first_portable.ini";
                }
                if (!File.Exists(path_first))
                {
                    first_run = true;
                    File.WriteAllText(path_first, String.Empty);
                }

                String f_thr = String.Empty;
                if (is_portable == false)
                {
                    f_thr = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_nthreads.ini";
                }
                else
                {
                    f_thr = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_nthreads_portable.ini";
                }

                if (File.Exists(f_thr))
                {
                    String saved_th = File.ReadAllText(f_thr);
                    this.InvokeEx(f => f.n_threads.Value = Convert.ToInt16(saved_th));
                }
                //End N-threads read

                //Begin n_downloads

                String f_thr2 = String.Empty;
                if (is_portable == false)
                {
                    f_thr2 = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_downs.ini";
                }
                else
                {
                    f_thr2 = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_downs_portable.ini";
                }

                if (File.Exists(f_thr2))
                {
                    String saved_th2 = File.ReadAllText(f_thr2);
                    this.InvokeEx(f => f.n_downs.Value = Convert.ToInt16(saved_th2));

                }
                //End N-downloads

                this.InvokeEx(f => f.pic_title.BackColor = Color.Transparent);
                //this.InvokeEx(f => f.mem_prio.Items.AddRange(combo_prio.Items.Cast<Object>().ToArray()));
                this.InvokeEx(f => f.combo_prio.Text = "Priority");

                //Sleep off

                String f_sleep = String.Empty;
                if (is_portable == false)
                {
                    f_sleep = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_sleep.ini";
                }
                else
                {
                    f_sleep = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_sleep_portable.ini";
                }

                if (File.Exists(f_sleep))
                {
                    this.InvokeEx(f => f.chk_no_sleep.Checked = true);
                    Timer_idle.Start();
                }
                else
                {
                    this.InvokeEx(f => f.chk_no_sleep.Checked = false);
                }
                //End sleep off                              

                //Disable try preset

                String f_try = String.Empty;
                if (is_portable == false)
                {
                    f_try = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_try.ini";
                }
                else
                {
                    f_try = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_try_portable.ini";
                }

                if (File.Exists(f_try))
                {
                    this.InvokeEx(f => f.chk_try.Checked = true);
                }
                else
                {
                    this.InvokeEx(f => f.chk_try.Checked = false);
                }
                //End Disable preset

                //Send params to console

                String f_params_console = String.Empty;
                if (is_portable == false)
                {
                    f_params_console = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_par_con.ini";
                }
                else
                {
                    f_params_console = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_par_con_portable.ini";
                }

                if (File.Exists(f_params_console))
                {
                    send_par_consol = false;
                }
                else
                {
                    send_par_consol = true;
                }
                //End send params to console

                //Concat video filter

                String f_concat = String.Empty;
                if (is_portable == false)
                {
                    f_concat = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_concat.ini";
                }
                else
                {
                    f_concat = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_concat_portable.ini";
                }

                if (File.Exists(f_concat))
                {
                    this.InvokeEx(f => f.check_concat.Checked = true);
                }
                else
                {
                    this.InvokeEx(f => f.check_concat.Checked = false);
                }
                first_concat = false;
                //End concat video filter

                //Warn successful items

                String f_warn_suc = String.Empty;
                if (is_portable == false)
                {
                    f_warn_suc = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_warn_suc.ini";
                }
                else
                {
                    f_warn_suc = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_warn_suc_portable.ini";
                }

                if (File.Exists(f_warn_suc))
                {
                    warn_success_items = false;
                }
                else
                {
                    warn_success_items = true;
                }
                //End warn sucessful items

                //Warn 0

                String f_warn_0 = String.Empty;
                if (is_portable == false)
                {
                    f_warn_0 = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_warn_0.ini";
                }
                else
                {
                    f_warn_0 = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_warn_0_portable.ini";
                }

                if (File.Exists(f_warn_0))
                {
                    no_warn_0_dur = true;
                }
                else
                {
                    no_warn_0_dur = false;
                }
                //End warn 0

                //Do not save logs

                String f_nologs = String.Empty;
                if (is_portable == false)
                {
                    f_nologs = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_nologs.ini";
                }
                else
                {
                    f_nologs = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_nologs_portable.ini";
                }

                if (File.Exists(f_nologs))
                {
                    no_save_logs = true;
                }
                else
                {
                    no_save_logs = false;
                }

                //End do not save logs

                //Verbose logs

                String f_verbose = String.Empty;
                if (is_portable == false)
                {
                    f_verbose = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_verbose.ini";
                }
                else
                {
                    f_verbose = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_verbose_portable.ini";
                }

                if (File.Exists(f_verbose))
                {
                    verbose_logs = true;
                }
                else
                {
                    verbose_logs = false;
                }

                //End Verbose logs

                //Full report

                String f_report = String.Empty;
                if (is_portable == false)
                {
                    f_report = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_report.ini";
                }
                else
                {
                    f_report = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_report_portable.ini";
                }

                if (File.Exists(f_report))
                {
                    full_report = true;
                }
                else
                {
                    full_report = false;
                }

                //End full report

                //Do not cache network files

                String f_nocache = String.Empty;
                if (is_portable == false)
                {
                    f_nocache = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_nocache.ini";
                }
                else
                {
                    f_nocache = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_nocache_portable.ini";
                }

                if (File.Exists(f_nocache))
                {
                    no_save_cache = true;
                }
                else
                {
                    no_save_cache = false;
                }

                //End do cache network files

                //Use OS cache dialog

                String f_oscache = String.Empty;
                if (is_portable == false)
                {
                    f_oscache = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_oscache.ini";
                }
                else
                {
                    f_oscache = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_oscache_portable.ini";
                }

                if (File.Exists(f_oscache))
                {
                    os_save_cache = true;
                }
                else
                {
                    os_save_cache = false;
                }
                //End use OS cache dialog

                //Delete source files to recycle bin

                String f_delete = String.Empty;
                if (is_portable == false)
                {
                    f_delete = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_delete.ini";
                }
                else
                {
                    f_delete = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_delete_portable.ini";
                }

                if (File.Exists(f_delete))
                {
                    this.InvokeEx(f => f.chk_delete_source.CheckState = CheckState.Checked);
                }
                else
                {
                    this.InvokeEx(f => f.chk_delete_source.CheckState = CheckState.Unchecked);
                }

                //END delete source files to recycle bin

                //Read play sound

                String ff_play_sound = String.Empty;
                if (is_portable == false)
                {
                    ff_play_sound = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_play.ini";
                }
                else
                {
                    ff_play_sound = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_play_portable.ini";
                }

                if (!File.Exists(ff_play_sound))
                {
                    play_on_end = false;
                }
                else
                {
                    String read_play = File.ReadAllText(ff_play_sound);
                    if (read_play.Length != 0)
                    {
                        play_on_end = true;
                        play_file_path = read_play;
                    }
                    else
                    {
                        play_on_end = false;
                    }
                }
                //End Read play sound

                String f_remember_w = String.Empty;
                if (is_portable == false)
                {
                    f_remember_w = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_remember_w.ini";
                }
                else
                {
                    f_remember_w = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_remember_w_portable.ini";
                }
                if (File.Exists(f_remember_w))
                {
                    remember_w = true;
                }
                else remember_w = false;

                //Fix pre-input

                String f_fix_pre = String.Empty;
                if (is_portable == false)
                {
                    f_fix_pre = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_fix_pre.ini";
                }
                else
                {
                    f_fix_pre = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_fix_pre_portable.ini";
                }
                if (File.Exists(f_fix_pre))
                {
                    fix_pre = true;
                    this.InvokeEx(f => f.txt_pre_input.Text = File.ReadAllText(f_fix_pre));
                }
                else fix_pre = false;

                //End fix pre_input

                //Save trim check

                String f_trim = String.Empty;
                if (is_portable == false)
                {
                    f_trim = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_trim.ini";
                }
                else
                {
                    f_trim = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_trim_portable.ini";
                }
                if (File.Exists(f_trim))
                {
                    this.InvokeEx(f => f.chk_trim2.CheckState = CheckState.Checked);
                }
                else
                {
                    this.InvokeEx(f => f.chk_trim2.CheckState = CheckState.Unchecked);
                }

                //End save trim check

            }).Start();
        }

        private void button3_Click(object sender, EventArgs e)
        {
            Pg1.Focus();
            String path_log_backup = String.Empty;
            String path, path_pre = String.Empty;
            if (is_portable == false)
            {
                path_log_backup = Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_batch_bck.ini";
                path = Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_batch.ini";
                path_pre = Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_batch_pre.ini";
            }
            else
            {
                path_log_backup = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_batch_bck_portable.ini";
                path = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_batch_portable.ini";
                path_pre = Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_batch_pre_portable.ini";
            }

            File.Copy(path, path_log_backup, true);

            String[] lines = System.IO.File.ReadAllLines(path);

            for (int i = 0; i < lines.Length - 1; i++)
            {
                lines[0] = txt_parameters.Text;
                lines[1] = txt_format.Text;


                if (checkBox3.Checked)
                {
                    lines[2] = "yes";

                }
                else
                {
                    lines[2] = "no";

                }

                if (chk_suffix.Checked)
                {
                    lines[3] = "Vs " + txt_suffix.Text;

                }
                else
                {
                    lines[3] = "Vn";
                }

                if (listView1.GridLines == true)
                {
                    lines[4] = "grid_yes";
                }
                else
                {
                    lines[4] = "grid_no";
                }

                if (checkBox1.Checked)
                {
                    lines[5] = "keep_yes";
                }
                else
                {
                    lines[5] = "keep_no";
                }

                if (chk_subfolders.Checked)
                {
                    lines[6] = "subf_yes";
                }
                else
                {
                    lines[6] = "subf_no";
                }
            }
            File.WriteAllLines(path, lines);
            if (txt_pre_input.Text.Length > 0) File.WriteAllText(path_pre, "Default " + txt_pre_input.Text);
            else
            {
                try
                {
                    File.Delete(path_pre);
                }
                catch
                {
                    MessageBox.Show("An error ocurred while saving pre-input configuration. Please ensure you have access rightrs to your appdata folder.", "Configuration error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
            btn_save_config.ImageKey = "Save_settings_39.png";

            toolTip_settings.SetToolTip(this.btn_save_config, "Save current parameters as default.");
            btn_load_config.PerformClick();
        }

        private void button4_Click(object sender, EventArgs e)
        {
            Pg1.Focus();
            Boolean ver = false;
            ss_time_input.Text = "0:00:00.000";
            if (fix_pre == false) txt_pre_input.Text = "";
            txt_pre_input.BackColor = txt_parameters.BackColor;
            txt_suffix.Text = "_FFB";

            combo_presets.Items.Clear();
            combo_presets.Items.Add("Default parameters");
            String path = String.Empty;
            String path_pr, path_pre = String.Empty;
            if (is_portable == false)
            {
                path = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_batch.ini";
                path_pr = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_presets.ini";
                path_pre = Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_batch_pre.ini";
            }
            else
            {
                path = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_batch_portable.ini";
                path_pr = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_presets_portable.ini";
                path_pre = Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_batch_portable_pre.ini";
            }

            Boolean f_presets_exist = false;
            int linea = 0;
            if (File.Exists(path_pr)) f_presets_exist = true;

            combo_presets.SelectedIndex = combo_presets.FindString("Default parameters");

            foreach (string line in File.ReadLines(path))
            {
                linea = linea + 1;
                if (linea == 1)
                {
                    this.InvokeEx(f => f.txt_parameters.Text = line);
                    continue;
                }

                if (linea == 2)
                {
                    this.InvokeEx(f => f.txt_format.Text = line);
                    continue;
                }

                if (line == "yes")

                {
                    this.InvokeEx(f => f.checkBox3.CheckState = CheckState.Checked);
                    continue;
                }

                if (line == "no")
                {
                    this.InvokeEx(f => f.checkBox3.CheckState = CheckState.Unchecked);
                    continue;
                }

                //if (linea == 4)
                //{
                if (line == "Vn")
                {
                    this.InvokeEx(f => f.chk_suffix.CheckState = CheckState.Unchecked);
                    continue;
                }
                if (line.Substring(0, 2) == "Vs")
                {
                    this.InvokeEx(f => f.chk_suffix.CheckState = CheckState.Checked);
                    this.InvokeEx(f => f.txt_suffix.Text = line.Substring(3, line.Length - 3));
                    continue;
                }
                //}

                if (line == "grid_yes")
                {
                    this.InvokeEx(f => f.listView1.GridLines = true);
                    this.InvokeEx(f => f.listView2.GridLines = true);
                    this.InvokeEx(f => f.listView3.GridLines = true);
                    continue;
                }
                if (line == "grid_no")
                {
                    this.InvokeEx(f => f.listView1.GridLines = false);
                    this.InvokeEx(f => f.listView2.GridLines = false);
                    this.InvokeEx(f => f.listView3.GridLines = false);
                    continue;
                }

                if (line == "keep_yes")
                {
                    this.InvokeEx(f => f.checkBox1.CheckState = CheckState.Checked);
                    continue;
                }
                if (line == "keep_no")
                {
                    this.InvokeEx(f => f.checkBox1.CheckState = CheckState.Unchecked);
                    continue;
                }

                if (line == "subf_yes")
                {
                    this.InvokeEx(f => f.chk_subfolders.CheckState = CheckState.Checked);
                    add_subfs = true;
                    continue;
                }
                if (line == "subf_no")
                {
                    this.InvokeEx(f => f.chk_subfolders.CheckState = CheckState.Unchecked);
                    add_subfs = false;
                    continue;
                }
                if (f_presets_exist == false)
                {
                    if (line.Contains("Version") == true)
                    {
                        this.InvokeEx(f => f.txt_config_ver.Text = line.Replace("Version ", String.Empty));
                        continue;
                    }

                    if (line.Contains("PR: "))
                    {
                        this.InvokeEx(f => f.combo_presets.Items.Add(line.Substring(4, line.LastIndexOf("&") - 5)));
                        continue;
                    }
                }
            }
            if (f_presets_exist == true)
            {
                foreach (string line in File.ReadLines(path_pr))
                {
                    if (line.Length > 8)
                    {
                        if (line.Substring(0, 7).ToLower() == "version")
                        {
                            txt_config_ver.Text = line.Substring(8, line.Length - 8);
                            continue;
                        }
                    }

                    if (line.Contains("PR: "))
                    {
                        this.InvokeEx(f => f.combo_presets.Items.Add(line.Substring(4, line.LastIndexOf("&") - 5)));
                    }
                }
            }
            btn_save_config.ImageKey = "Save_settings_39.png";
        }

        private void button5_Click(object sender, EventArgs e)
        {
            Pg1.Focus();

            lbl_mux_jobs.Text = "Jobs: 0";
            lbl_size.Text = "";
            LB_Wait.Visible = false;
            txt_remain.Text = "Time remaining: 00h:00m:00s";
            lbl_elapsed.Text = "Time elapsed: 00h:00m:00s";
            listView1.Items.Clear();
            listView2.Items.Clear();
            listView3.Items.Clear();
            dg1.Rows.Clear();
            ss_time_input.Text = "0:00:00.000";
            //txt_pre_input.Text = "";
            //txt_pre_input.BackColor = textBox1.BackColor;
            txt_folder_subs.Text = String.Empty;
            txt_folder_subs.BackColor = Control.DefaultBackColor;
            lbl_items.Text = "";
            lbl_dur_list.Text = "";
            Pg1.Value = 0;
            Pg1.Text = "0" + System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator + "0%";
            Pg1.Refresh();
            list_tracks.Items.Clear();
            combo_item_lang_2.SelectedIndex = -1;
            Combo_sub_lang_mux.SelectedIndex = -1;
            lbl_tr_n.Text = "Tracks: 0";
            lbl_urls_time.Text = "";
            txt_mux_type.Text = String.Empty;
            btn_try_pr.Image = img_try.Images[0];
            lbl_urls_time.Text = "";
            lbl_n_urls.Text = "";
            pic_warnings.Visible = false;
            pic_no_errors.Visible = false;
            pic_recording.Visible = false;
            clean_imgs();
        }

        private void comboBox1_SelectedIndexChanged(object sender, EventArgs e)
        {
            String path;
            String path_pr;

            if (is_portable == false)
            {
                path = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_batch.ini";
                path_pr = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_presets.ini";
            }
            else
            {
                path = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_batch_portable.ini";
                path_pr = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_presets_portable.ini";
            }

            if (combo_presets.SelectedIndex == 0)
            {
                txt_pre_input.BackColor = txt_parameters.BackColor;

                if (!Directory.Exists(System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch")))
                {
                    Directory.CreateDirectory(System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch"));
                }

                if (!File.Exists(path))
                {
                    File.WriteAllText(path, "-c copy" + Environment.NewLine + "mp4" + Environment.NewLine + "yes"
                        + Environment.NewLine + "Vn" + Environment.NewLine + "grid_yes" + Environment.NewLine + "keep_no"
                        + Environment.NewLine + "subf_no");
                }

                if (!File.Exists(path_pr) && File.Exists(path))
                {
                    List<string> presets_old = new List<string>();
                    List<string> new_config = new List<string>();
                    foreach (string line in File.ReadLines(path))
                    {
                        if (line.Length > 4)
                        {
                            if (line.Substring(0, 4) == "PR: ")
                            {
                                presets_old.Add(line + Environment.NewLine);
                            }
                        }
                        if (!line.Contains("PR: ") && line.Substring(0, 2).ToLower() != "ve") new_config.Add(line + Environment.NewLine);

                    }

                    File.Delete(path);
                    foreach (String st in presets_old) File.AppendAllText(path_pr, st);
                    foreach (String st in new_config)
                    {
                        File.AppendAllText(path, st);
                    }
                }

                int linea = 0;
                foreach (string line in File.ReadLines(path))
                {
                    linea = linea + 1;

                    if (linea == 1)
                    {
                        txt_parameters.Text = line;
                    }

                    if (linea == 2)
                    {
                        txt_format.Text = line;
                    }

                    if (line == "yes")

                    {
                        checkBox3.CheckState = CheckState.Checked;
                    }

                    if (line == "no")
                    {
                        checkBox3.CheckState = CheckState.Unchecked;
                    }
                }
            }
            else
            {
                String pre_name = String.Empty;
                if (File.Exists(path_pr)) path = path_pr;
                int i = 0;
                foreach (string line in File.ReadLines(path))
                {
                    if (line.Length > 8)
                    {
                        if (line.Substring(0, 7).ToLower() == "version")
                        {
                            txt_config_ver.Text = line.Substring(8, line.Length - 8);
                            continue;
                        }
                    }
                    if (line.Length > 4 && line.Substring(4, line.IndexOf("&") - 5) == combo_presets.SelectedItem.ToString())
                    {
                        int cortar = line.LastIndexOf("%") - line.LastIndexOf("&");
                        txt_format.Text = line.Substring(line.LastIndexOf("%") + 2);
                        try
                        {
                            txt_parameters.Text = line.Substring(line.LastIndexOf("&") + 2, cortar - 3);
                        }
                        catch
                        {
                            MessageBox.Show("Invalid preset data found.", "Preset error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                        continue;
                    }
                }
            }
            btn_save_preset.Enabled = false;
            //Read pre-input

            if (combo_presets.SelectedIndex == 0)
            {
                String path_pre = String.Empty;
                if (is_portable == false)
                {
                    path_pre = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_batch_pre.ini";
                }
                else
                {
                    path_pre = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_batch_pre_portable.ini";
                }

                String pre_input = String.Empty;
                if (File.Exists(path_pre)) pre_input = File.ReadAllText(path_pre);

                if (pre_input.Length > 0)
                    txt_pre_input.Text = pre_input.Substring(8, pre_input.Length - 8);

            }
            else
            {
                if (fix_pre == false) txt_pre_input.Text = "";
            }
            //End read-pre-input


        }

        private void cti1_Click(object sender, EventArgs e)
        {
            if (listView1.SelectedItems.Count > 0)
            {
                String fullPath = listView1.SelectedItems[0].SubItems[1].Text + "\\" + listView1.SelectedItems[0].Text;
                String destino = Path.GetDirectoryName(fullPath);

                if (Directory.Exists(destino))
                {
                    Process process = new System.Diagnostics.Process();
                    process.StartInfo.FileName = "explorer.exe";
                    process.StartInfo.Arguments = "\u0022" + destino + "\u0022";
                    process.StartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Normal;
                    process.Start();
                }
                else
                {
                    MessageBox.Show("Path was not found", "Folder not found", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }

        private void cti2_Click(object sender, EventArgs e)
        {
            if (listView1.SelectedItems.Count > 0)
            {
                String fullPath = listView1.SelectedItems[0].SubItems[1].Text + "\\" + listView1.SelectedItems[0].Text;
                if (File.Exists(fullPath))
                {
                    System.Diagnostics.Process.Start(fullPath);
                }
                else
                {
                    MessageBox.Show("File was not found", "File missing", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }

        private void ctm1_Opening(object sender, CancelEventArgs e)
        {
            cti6.Visible = false;
            if (runnin_n_presets == true) e.Cancel = true;

            ctm1_queue.Enabled = false;

            if (working == true)
            {
                cti1.Enabled = false;
                cti2.Enabled = false;
                cti3.Enabled = false;
                cti4.Enabled = false;
                cti5.Enabled = false;
                ctdel.Enabled = false;
                ct1_total_frames.Enabled = false;
                ct1_streams.Enabled = false;
                ctm1_queue.Enabled = false;
                cti1_cols.Enabled = false;
                cti_remove_col.Enabled = false;
                
                if (listView1.SelectedItems.Count == 1 && listView1.SelectedItems[0].SubItems[5].Text != "Aborted" && listView1.SelectedItems[0].SubItems[5].Text != "Queued" && listView1.SelectedItems[0].SubItems[5].Text != "Aborting" && listView1.SelectedItems[0].SubItems[5].Text != "Success")
                {
                    cti6.Visible = true;
                    cti6.Text = "Stop processing " + "\u0022" + Path.GetFileName(listView1.SelectedItems[0].Text) + "\u0022";
                }

                if (listView1.SelectedItems.Count == 1 && listView1.SelectedItems[0].SubItems[5].Text == "Queued" && multi_running == false)
                {
                    ctdel.Enabled = true;
                }
            }
            else
            {
                if (Clipboard.ContainsText() == false)
                {
                    ct1_paste_m3u.Visible = false;
                    ct1_paste_youtube.Visible = false;
                }

                else
                {
                    if (Clipboard.GetText().ToLower().Contains("youtu.be") == true || Clipboard.GetText().ToLower().Contains("youtube.com") == true)
                    {
                        ct1_paste_youtube.Visible = true;
                        ct1_paste_m3u.Visible = false;
                    }
                    else
                    {
                        ct1_paste_youtube.Visible = false;
                        if (Clipboard.GetText().ToLower().Contains("http") == true) ct1_paste_m3u.Visible = true;
                        else
                        {
                            ct1_paste_m3u.Visible = false;
                        }
                    }
                    if (listView1.Columns.Count >= 10)
                    {
                        cti1_cols.Enabled = false;
                    }
                    if (listView1.Columns.Count <= 10 && listView1.Columns.Count >= 6)
                    {
                        cti1_cols.Enabled = true;
                    }
                    if (listView1.Columns.Count > 6)
                    {
                        cti_remove_col.Enabled = true;
                    }
                    else
                    {
                        cti_remove_col.Enabled = false;
                    }
                }

                if (listView1.SelectedItems.Count > 0)
                {
                    cti1.Enabled = true;
                    cti2.Enabled = true;

                    String fullPath = listView1.SelectedItems[0].SubItems[1].Text + "\\" + listView1.SelectedItems[0].Text;
                    String destino = "";
                    if (txt_path_main.Text.Contains(".\\"))
                    {
                        destino = fullPath.Substring(0, fullPath.LastIndexOf('\\')) + txt_path_main.Text.Replace(".", String.Empty);
                    }
                    else
                    {
                        destino = txt_path_main.Text;
                    }

                    if (Directory.Exists(destino))
                    {
                        cti3.Enabled = true;
                    }
                    else
                    {
                        cti3.Enabled = false;
                    }

                    String second_path = "";
                    if (txt_format.Text == "nul")
                    {
                        String[] split = txt_parameters.Text.Split(' ');
                        for (int i = 0; i < split.Length; i++)
                        {
                            if (split[i].Contains("\\") == true)
                            {
                                String pre_path = split[i].Replace("%fp", Path.GetDirectoryName(fullPath)).Replace("%", "_");

                                second_path = Path.GetDirectoryName(pre_path.Replace('\u0022', ' '));

                                if (Directory.Exists(second_path))
                                {
                                    cti3.Enabled = true;
                                }
                                else
                                {
                                    cti3.Enabled = false;
                                }

                            }
                        }
                    }

                    cti4.Enabled = true;
                    cti5.Enabled = true;
                    ctdel.Enabled = true;
                    ct1_total_frames.Enabled = true;
                    ct1_streams.Enabled = true;
                    ctm_add_files.Visible = false;
                    ctm_add_folder.Visible = false;
                    ctm_paste_path.Visible = false;
                    ct_move_bottom.Enabled = true;
                    ct_move_top.Enabled = true;
                    toolStripSeparator2.Visible = false;
                    ctm1_queue.Enabled = false;
                    foreach (ListViewItem item in listView1.SelectedItems)
                    {
                        if (item.SubItems[5].Text != "Queued")
                        {
                            ctm1_queue.Enabled = true;
                            break;
                        }
                    }
                }
                else
                {
                    e.Cancel = false;
                    ctm_add_files.Visible = true;
                    ctm_add_folder.Visible = true;
                    ctm_paste_path.Visible = true;
                    ctm1_queue.Enabled = false;
                    ct_move_bottom.Enabled = false;
                    ct_move_top.Enabled = false;
                    toolStripSeparator2.Visible = true;
                    cti1.Enabled = false;
                    cti2.Enabled = false;
                    cti3.Enabled = false;
                    cti4.Enabled = false;
                    cti5.Enabled = false;
                    ctdel.Enabled = false;
                    ct1_total_frames.Enabled = false;
                    ct1_streams.Enabled = false;
                    toolStripSeparator2.Visible = true;
                }
            }
        }

        private void timer1_Tick(object sender, EventArgs e)
        {
            Double weight = 0;
            Double dg_multi_prog = 0;
            start_total_time = start_total_time + 0.5;

            TimeSpan t9 = TimeSpan.FromSeconds(start_total_time);
            String tx_elapsed = string.Format("{0:D2}h:{1:D2}m:{2:D2}s",
                t9.Hours,
                t9.Minutes,
                t9.Seconds);
            lbl_elapsed.Text = "Time elapsed: " + tx_elapsed;

            foreach (ListViewItem item_p in listView1.Items)
            {
                if (item_p.SubItems[3].Text == "N/A")
                {
                    weight = 1 / listView1.Items.Count;
                }
                else
                {
                    weight = TimeSpan.Parse(item_p.SubItems[3].Text).TotalSeconds / total_multi_duration;
                }

                if (item_p.SubItems[5].Text.Contains("%") == true && cancelados_paralelos == false)
                {
                    if (item_p.SubItems[5].Text.Contains(".0") || item_p.SubItems[5].Text.Contains(",0"))
                    {
                        dg_multi_prog = dg_multi_prog + Convert.ToDouble(item_p.SubItems[5].Text.Replace("%", "")) / 10 * weight * listView1.Items.Count;

                    }
                    else
                    {
                        dg_multi_prog = dg_multi_prog + Convert.ToDouble(item_p.SubItems[5].Text.Replace("%", "")) * weight * listView1.Items.Count;
                    }
                }

                if (item_p.SubItems[5].Text == "Success" || item_p.SubItems[5].Text == "Failed" || item_p.SubItems[5].Text == "Aborted" || item_p.SubItems[5].Text == "Aborting" || item_p.SubItems[5].Text == "Skipped" || item_p.SubItems[5].Text == "Replaced" || item_p.SubItems[5].Text == "Not replaced")
                {
                    dg_multi_prog = dg_multi_prog + (100 * weight * listView1.Items.Count);
                }
            }

            if (time_n_tasks > 1)
            {
                Pg1.Value = (int)(dg_multi_prog);
                //Pg1.Text = Math.Round(dg_multi_prog / listView1.Items.Count, 1).ToString() + "%";
                if (Math.Round(dg_multi_prog / list_global_proc.Items.Count, 1).ToString().Contains(".") || Math.Round(dg_multi_prog / list_global_proc.Items.Count, 1).ToString().Contains(","))
                {
                    Pg1.Text = Math.Round(dg_multi_prog / list_global_proc.Items.Count, 1).ToString() + "%";
                }
                else
                {
                    Pg1.Text = Math.Round(dg_multi_prog / list_global_proc.Items.Count, 1).ToString() + System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator + "0%";
                }

                TaskbarProgress.SetValue(this.Handle, Convert.ToInt32(dg_multi_prog), Pg1.Maximum);

            }
            else
            {
                Pg1.Value = 0;
                Pg1.Text = "0" + System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator + "0%";
            }

            if (Pg1.Value / listView1.Items.Count > 0 && start_total_time > 4)
            {
                Double remain_secs = time_n_tasks * 100 / (Pg1.Value / listView1.Items.Count) - start_total_time;
                String remain_string = String.Empty;

                TimeSpan t = TimeSpan.FromSeconds(remain_secs);
                remain_string = string.Format("{0:D2}h:{1:D2}",
                t.Hours,
                t.Minutes);

                if (remain_secs >= 43200)
                {
                    txt_remain.Text = "Time remaining: " + Math.Round(remain_secs / 3600).ToString() + " hours";
                }

                if (remain_secs >= 3600 && remain_secs < 43200)
                {
                    txt_remain.Text = "Time remaining: " + remain_string + " min";
                }

                if (remain_secs < 3600 && remain_secs >= 600)
                {
                    txt_remain.Text = "Time remaining: " + remain_string.Substring(remain_string.LastIndexOf(":") + 1, 2) + " minutes";
                }
                if (remain_secs < 600 && remain_secs >= 120)
                {
                    txt_remain.Text = "Time remaining: " + remain_string.Substring(remain_string.LastIndexOf(":") + 2, 1) + " minutes";
                }

                if (remain_secs < 120 && remain_secs > 59)
                {
                    txt_remain.Text = "Time remaining: " + "About 1 minute";
                }

                if (remain_secs <= 59)
                {
                    txt_remain.Text = "Time remaining: < 1 minute";
                }
                if (remain_secs <= 0)
                {
                    txt_remain.Text = "Time remaining: Almost done";
                }
                txt_remain.Refresh();
            }
            else
            {
                txt_remain.Text = "Time remaining: Calculating...";
                txt_remain.Refresh();
            }
            if (cancelados_paralelos == true)
            {
                this.InvokeEx(f => TaskbarProgress.SetState(this.Handle, TaskbarProgress.TaskbarStates.NoProgress));
            }
        }

        private void cti3_Click(object sender, EventArgs e)
        {
            String fullPath = listView1.SelectedItems[0].SubItems[1].Text + "\\" + listView1.SelectedItems[0].Text;
            String destino = "";
            if (txt_format.Text != "nul")
            {
                if (txt_path_main.Text.Contains(".\\"))
                {
                    destino = fullPath.Substring(0, fullPath.LastIndexOf('\\')) + txt_path_main.Text.Replace(".", String.Empty);
                }
                else
                {
                    destino = txt_path_main.Text;
                }

                if (Directory.Exists(destino))
                {
                    var process = new System.Diagnostics.Process();
                    process.StartInfo.FileName = "explorer.exe";
                    process.StartInfo.Arguments = "\u0022" + destino + "\u0022";
                    process.StartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Normal;
                    process.Start();
                }
                else
                {
                    MessageBox.Show("Folder was not found", "Folder not found", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
            }
            String second_path = "";
            if (txt_format.Text == "nul")
            {
                String[] split = txt_parameters.Text.Split(' ');
                for (int i = 0; i < split.Length; i++)
                {
                    if (split[i].Contains("\\") == true)
                    {
                        String pre_path = split[i].Replace("%fp", Path.GetDirectoryName(fullPath)).Replace("%", "_");

                        second_path = Path.GetDirectoryName(pre_path.Replace('\u0022', ' '));

                        if (Directory.Exists(second_path))
                        {
                            var process = new System.Diagnostics.Process();
                            process.StartInfo.FileName = "explorer.exe";
                            process.StartInfo.Arguments = "\u0022" + second_path + "\u0022";
                            process.StartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Normal;
                            process.Start();
                        }
                        else
                        {
                            MessageBox.Show("Folder was not found", "Folder not found", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        }

                    }
                }
            }
        }

        private void cti4_Click(object sender, EventArgs e)
        {
            media_info();
        }

        private void media_info()
        {
            if (listView1.Items.Count == 1) listView1.Items[0].Selected = true;

            String ffm = System.IO.Path.Combine(Application.StartupPath, "mediainfo.exe");
            if (!File.Exists(ffm))
            {
                MessageBox.Show("Error obtaining file information. You may have to reinstall application.", "Mediainfo not found", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            if (listView1.SelectedItems.Count == 1)
            {
                String file1 = System.IO.Path.Combine(Application.StartupPath + "\\", "mediainfo.exe");
                String fullPath = "\u0022" + listView1.SelectedItems[0].SubItems[1].Text + "\\" + listView1.SelectedItems[0].Text + "\u0022";
                String testPath = listView1.SelectedItems[0].SubItems[1].Text + "\\" + listView1.SelectedItems[0].Text;
                if (!File.Exists(testPath))
                {
                    MessageBox.Show("File was not found", "File missing", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
                this.Cursor = Cursors.WaitCursor;

                String salida = "";

                Form frmInfo = new Form();
                frmInfo.Name = "Multimedia information";
                frmInfo.Text = "FFmpeg Batch AV Converter";
                frmInfo.Icon = this.Icon;
                frmInfo.Height = 724;
                frmInfo.Width = 496;
                frmInfo.FormBorderStyle = FormBorderStyle.Fixed3D;
                frmInfo.MaximizeBox = false;
                frmInfo.MinimizeBox = false;
                frmInfo.BackColor = this.BackColor;

                var fuente_list = new System.Drawing.Font("Microsoft Sans Serif", 9, FontStyle.Regular);

                ListView LB1 = new ListView();
                LB1.Parent = frmInfo;
                LB1.ShowItemToolTips = true;
                LB1.Left = 14;
                LB1.Top = 56;
                LB1.Height = 591;
                LB1.Width = 447;
                LB1.SmallImageList = img_streams;
                LB1.View = View.Details;
                LB1.FullRowSelect = true;
                LB1.GridLines = true;
                LB1.Columns.Add("", 130);
                LB1.Columns.Add("", 295);
                LB1.HeaderStyle = ColumnHeaderStyle.None;
                LB1.Refresh();

                TextBox titulo = new TextBox();
                titulo.Parent = frmInfo;
                titulo.Top = 6;
                titulo.Left = 14;
                titulo.Width = 448;
                titulo.TabIndex = 0;
                var fuente = new System.Drawing.Font("Microsoft Sans Serif", 10, FontStyle.Bold);
                titulo.BackColor = this.BackColor;

                titulo.Font = fuente;
                titulo.BorderStyle = BorderStyle.Fixed3D;
                titulo.TextAlign = HorizontalAlignment.Center;
                titulo.ReadOnly = true;

                if (full_report == false) titulo.Text = "MULTIMEDIA INFORMATION (SUMMARY)";
                else titulo.Text = "MULTIMEDIA INFORMATION (FULL REPORT)";

                Button boton_ok = new Button();
                boton_ok.Parent = frmInfo;
                boton_ok.Left = 73;
                boton_ok.Top = 650;
                boton_ok.Width = 330;
                boton_ok.Height = 27;
                boton_ok.Text = "Close window";
                boton_ok.Click += new EventHandler(boton_ok_Click);
                frmInfo.CancelButton = boton_ok;

                Button btn_next = new Button();
                btn_next.Parent = frmInfo;
                btn_next.Left = 404;
                btn_next.Top = 650;
                btn_next.Width = 59;
                btn_next.Height = 27;
                btn_next.Text = "Next  -->";
                btn_next.Click += new EventHandler(btn_next_Click);

                Button btn_prev = new Button();
                btn_prev.Parent = frmInfo;
                btn_prev.Left = 14;
                btn_prev.Top = 650;
                btn_prev.Width = 59;
                btn_prev.Height = 27;
                btn_prev.Text = "<-- Prev ";
                btn_prev.Click += new EventHandler(btn_prev_Click);

                String fichero = Path.GetFileName(listView1.SelectedItems[0].Text);
                TextBox titulo2 = new TextBox();
                titulo2.Parent = frmInfo;
                titulo2.Top = 34;
                titulo2.Left = 14;
                titulo2.Width = 440;
                titulo2.BackColor = this.BackColor;

                titulo2.BorderStyle = BorderStyle.None;
                titulo2.TextAlign = HorizontalAlignment.Center;
                titulo2.ReadOnly = true;

                titulo2.Text = (fichero);
                int indx = 0;
                List<string> salida1 = new List<string>();
                var font_item = new System.Drawing.Font("Microsoft Sans Serif", 8, FontStyle.Bold);

                String[] fields_mi = new string[] { "Format  ", "Bit depth", "General", "Bit rate", "bit rate", "Duration", "Audio", "Frame rate  ", "Width", "Height", "Color space", "Chroma subsampling", "Channel(s)", "Channel positions", "Sampling rate ", "Maximum bit rate", "File size", "Format profile", "Display aspect ratio", "Stream size", "Text", "Language", "Recorded date", "Performer", "Album", "Genre", "Track name" };

                var process = new System.Diagnostics.Process();
                process.StartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
                process.StartInfo.FileName = file1;
                process.StartInfo.Arguments = fullPath;
                process.StartInfo.UseShellExecute = false;
                process.StartInfo.CreateNoWindow = true;
                process.StartInfo.RedirectStandardOutput = true;
                process.StartInfo.StandardOutputEncoding = Encoding.UTF8;
                process.Start();

                while (!process.StandardOutput.EndOfStream)
                {
                    salida = process.StandardOutput.ReadLine();
                    salida1.Add(salida);
                }
                process.WaitForExit();
                LB1.BeginUpdate();

                foreach (String salida2 in salida1)
                {
                    Boolean match = false;
                    if (full_report == false)
                    {
                        foreach (String str in fields_mi)
                        {
                            if (salida2.Contains(str) == true)
                            {
                                match = true;
                                break;
                            }
                        }
                    }
                    else match = true;

                    if (salida2 == "" || salida2 == "Video" || match == true)

                    {
                        int derecha = 0;

                        if (!salida2.Contains("  : "))
                        {
                            LB1.Items.Add(salida2.ToUpper());
                            LB1.Items[indx].Font = font_item;
                            LB1.Items[indx].ForeColor = Color.DarkBlue;
                            if (salida2 != String.Empty)
                            {
                                LB1.Items[indx].SubItems[0].BackColor = Color.FromArgb(255, 220, 238, 255);
                                if (salida2.Contains("Video")) LB1.Items[indx].ImageIndex = 0;
                                if (salida2.Contains("Audio")) LB1.Items[indx].ImageIndex = 1;
                                if (salida2.Contains("Text")) LB1.Items[indx].ImageIndex = 2;
                                if (salida2.Contains("General"))
                                {
                                    LB1.Items[indx].ImageIndex = 5;
                                    LB1.Items[indx].SubItems[0].BackColor = Color.FromArgb(255, 255, 248, 220);
                                }
                            }

                            indx = indx + 1;
                        }
                        else

                        {
                            if (!salida2.Contains("SPF"))
                            {
                                LB1.Items.Add(salida2.Substring(0, salida2.LastIndexOf("  : ")).Replace("  ", ""));
                                derecha = salida2.Length - (salida2.LastIndexOf("  :"));
                                LB1.Items[indx].SubItems.Add(salida2.Substring(salida2.LastIndexOf("  :") + 4, derecha - 4).Replace("kb", "Kb"));
                                indx = indx + 1;
                            }
                        }
                    }
                }

                for (int x = 0; x < 2; x++)
                {
                    LB1.Items.RemoveAt(LB1.Items.Count - 1);
                }

                int duraciones = 0;
                String elemento = "";
                for (int i = 0; i < LB1.Items.Count; i++)
                {
                    elemento = LB1.Items[i].Text;

                    if (elemento.Contains("Duration"))
                    {
                        duraciones = duraciones + 1;

                        if (duraciones > 1)
                        {
                            LB1.Items.RemoveAt(i);
                        }
                    }
                }

                foreach (ListViewItem item in LB1.Items)
                {
                    if (item.Text == String.Empty)
                    {
                        item.Remove();
                    }
                }
                LB1.EndUpdate();
                frmInfo.StartPosition = FormStartPosition.CenterParent;
                this.Cursor = Cursors.Arrow;
                frmInfo.ShowDialog();
            }
            else

            {
                MessageBox.Show("No item was selected", "No item selected", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            this.Cursor = Cursors.Arrow;
        }

        private void button6_Click(object sender, EventArgs e)
        {

            Pg1.Focus();
            if (!File.Exists(Path.Combine(Application.StartupPath, "ffmpeg.exe")))
            {
                MessageBox.Show("FFmpeg executable file was not found. Restart or reinstall application.", "Executable error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }
            if (!File.Exists(Path.Combine(Application.StartupPath, "ffprobe.exe")))
            {
                MessageBox.Show("FFprobe executable file was not found. Restart or reinstall application.", "Executable error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }
            folderBrowserDialog1.Description = "Adding subfolders not enabled";
            if (add_subfs == true)
            {
                folderBrowserDialog1.Description = "Adding subfolders enabled";
            }

            folderBrowserDialog1.ShowNewFolderButton = false;

            change_tab_1 = false;
            change_tab_2 = false;

            if (listView1.Items.Count == 0)
            {
                list_not_empty = false;
            }
            else
            {
                list_not_empty = true;
            }

            if (tabControl1.SelectedIndex == 1)
            {
                change_tab_1 = true;
            }
            if (tabControl1.SelectedIndex == 2)
            {
                change_tab_2 = true;
            }
            int fl = 0;
            if (folderBrowserDialog1.ShowDialog() == DialogResult.OK)
            {
                Form11_2 frm11_2 = new Form11_2();
                Task t2 = Task.Run(() =>
                {
                    frm11_2.label1.Text = "Reading path contents, please wait...";
                    frm11_2.ShowDialog();
                });
                Thread.Sleep(100);
                List<string> files2 = new List<string>();

                foreach (string file in Directory.GetFiles(folderBrowserDialog1.SelectedPath))
                {
                    if (!File.GetAttributes(file).HasFlag(FileAttributes.Hidden))
                    {
                        files2.Add(file);
                        fl = fl + 1;
                        if (frm11_2.abort_validate == true) return;
                        else
                        {
                            try
                            {
                                frm11_2.Invoke(new MethodInvoker(delegate
                                {
                                    frm11_2.label2.Text = fl.ToString() + " files";
                                }));
                            }
                            catch { }
                        }
                    }
                }

                int num_drop = files2.Count();

                if (add_subfs == true)
                {
                    string[] dirs = Directory.GetDirectories(folderBrowserDialog1.SelectedPath);

                    foreach (string ds in dirs)
                    {
                        try
                        {
                            foreach (string f in Directory.GetFiles(ds, "*.*", System.IO.SearchOption.AllDirectories))
                            {
                                if (!File.GetAttributes(f).HasFlag(FileAttributes.Hidden))
                                {
                                    files2.Add(f);
                                    fl = fl + 1;
                                    num_drop++;
                                    if (frm11_2.abort_validate == true) return;
                                    else
                                    {
                                        try
                                        {
                                            frm11_2.Invoke(new MethodInvoker(delegate
                                            {
                                                frm11_2.label2.Text = fl.ToString() + " files";
                                            }));
                                        }
                                        catch { }
                                    }
                                }
                            }
                        }
                        catch (System.Exception excpt)
                        {
                            try
                            {
                                frm11_2.Invoke(new MethodInvoker(delegate
                                {
                                    frm11_2.TopMost = true;
                                    frm11_2.TopMost = false;
                                }));
                            }
                            catch { }
                            var a = MessageBox.Show("Error: " + excpt.Message + " Continue?", "Access error", MessageBoxButtons.OKCancel, MessageBoxIcon.Error);
                            if (a == DialogResult.Cancel) 
                            {                                
                                try
                                {
                                    frm11_2.Invoke(new MethodInvoker(delegate
                                    {
                                        frm11_2.Dispose();
                                    }));
                                }
                                catch { }
                                return;
                            }
                        }
                    }
                }
                Thread.Sleep(100);
                try
                {
                    frm11_2.Invoke(new MethodInvoker(delegate
                    {
                        frm11_2.Dispose();
                    }));
                }
                catch { }

                if (num_drop == 0)
                {                    
                    MessageBox.Show("Folder is empty", "Folder empty", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }                                

                if (num_drop >= 10000)
                {
                    var a = MessageBox.Show("Adding " + num_drop + " files can take some time. Continue?", "Adding many files", MessageBoxButtons.OKCancel, MessageBoxIcon.Question);
                    if (a == DialogResult.Cancel)
                    {
                        return;
                    }
                }
                files_to_add = files2;
                canceled_file_adding = false;
                btn_cancel_add.Enabled = true;
                btn_cancel_add.Visible = true;
                btn_cancel_add.Refresh();
                BG_Files.RunWorkerAsync();
            }
        }

        private void folderBrowserDialog1_HelpRequest(object sender, EventArgs e)
        {

        }

        private void ctdel_Click(object sender, EventArgs e)
        {
            if (listView1.SelectedItems.Count > 0)
            {
                listView1.BeginUpdate();
                foreach (ListViewItem item in listView1.SelectedItems)
                {
                    if (working == false)
                    {
                        listView1.Items.Remove(item);

                        foreach (ListViewItem item2 in listView3.Items)
                        {
                            if (item2.Text == item.Text)
                            {
                                listView3.Items.RemoveAt(item2.Index);
                            }
                        }
                    }
                    else
                    {
                        if (item.SubItems[5].Text == "Queued")
                        {
                            listView1.Items.RemoveAt(item.Index);
                        }
                    }
                }

                listView1.EndUpdate();
                lbl_items.Text = listView1.Items.Count + " file(s)";

                calc_total_dur();
                calc_list_size();

                if (working == true && multi_running == false)
                {
                    total_duration = 0;

                    foreach (ListViewItem item in listView1.Items)
                    {
                        if (item.SubItems[3].Text != "N/A" && item.SubItems[3].Text != "0:00:00" && item.SubItems[3].Text != "00:00:00" && item.SubItems[3].Text != "Pending")
                        {
                            total_duration = total_duration + TimeSpan.Parse(item.SubItems[3].Text).TotalSeconds - TimeSpan.Parse(ss_time_input.Text).TotalSeconds;
                        }
                        else
                        {
                            total_duration = total_duration + 0;
                        }
                    }
                }
            }
        }

        private void ctm_add_files_Click(object sender, EventArgs e)
        {
            this.btn_add_files.PerformClick();
        }

        private void ctm_add_folder_Click(object sender, EventArgs e)
        {
            this.btn_add_folders.PerformClick();
        }

        private void button7_Click(object sender, EventArgs e)
        {
            if (combo_presets.Text == "")
            {
                return;
            }
            if (combo_presets.SelectedIndex == 0)
            {
            }
            if (combo_presets.Text == "Default parameters")
            {
                MessageBox.Show("Select a preset different from default, or write a new preset description", "Select a different preset", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            String path_check = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_batch.ini";

            foreach (string line in File.ReadLines(path_check))
            {
                if (line.LastIndexOf("&") >= 0)
                {
                    if (line.Substring(4, line.LastIndexOf("&") - 5) == combo_presets.Text)
                    {
                        MessageBox.Show("Presets can't be overwritten. Please change description before saving as a new one.", "Add nuew preset", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                        return;
                    }
                }
            }

            String path = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_batch.ini";
            string createText = "PR: " + combo_presets.Text + " & " + txt_parameters.Text + " % " + txt_format.Text;
            File.AppendAllText(path, Environment.NewLine + createText);

            combo_presets.Items.Clear();
            combo_presets.Items.Add("Default parameters");
            String path2 = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_batch.ini";
            int linea = 0;

            foreach (string line in File.ReadLines(path2))
            {
                linea = linea + 1;

                if (line == "yes")

                {
                    checkBox3.CheckState = CheckState.Checked;
                }

                if (line == "no")
                {
                    checkBox3.CheckState = CheckState.Unchecked;
                }

                if (linea == 1)
                {
                    txt_parameters.Text = line;
                }

                if (linea == 2)
                {
                    txt_format.Text = line;
                }

                if (line.Contains("PR: "))
                {
                    combo_presets.Items.Add(line.Substring(4, line.LastIndexOf("&") - 5));
                }
            }

            combo_presets.SelectedIndex = combo_presets.Items.Count - 1;
            MessageBox.Show("The new preset has been saved.", "Preset saved", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }


        private void boton_ok_Click(object sender, System.EventArgs e)
        {
            Form.ActiveForm.Close();
        }

        private void btn_next_Click(object sender, System.EventArgs e)
        {
            Form.ActiveForm.Close();
            if (listView1.SelectedItems[0].Index < listView1.Items.Count - 1)
            {
                listView1.Items[listView1.SelectedIndices[0] + 1].Selected = true;
                listView1.Items[listView1.SelectedIndices[0]].Selected = false;
                listView1.Select();
                cti4.PerformClick();
            }
        }

        private void btn_prev_Click(object sender, System.EventArgs e)
        {
            Form.ActiveForm.Close();
            if (listView1.SelectedItems[0].Index > 0)
            {
                int selected_item = listView1.SelectedIndices[0];
                //listView1.Items[listView1.SelectedIndices[0] - 2].Selected = true;
                listView1.Items[selected_item].Selected = false;
                listView1.Items[selected_item - 1].Selected = true;
                listView1.Select();
                cti4.PerformClick();
            }
        }

        private void boton_ok_wave_Click(object sender, System.EventArgs e)
        {
            Form.ActiveForm.Close();
        }

        private void boton_kill_Click(object sender, System.EventArgs e)
        {
            cancelados_paralelos = true;
            cancel_queue = true;

            Form.ActiveForm.Close();

            Process[] localByName = Process.GetProcessesByName("ffmpeg");
            foreach (Process p in localByName)
                p.Kill();
            System.Threading.Thread.Sleep(250);
            Process[] localByName2 = Process.GetProcessesByName("ffmpeg");
            foreach (Process p2 in localByName2)
                p2.Kill();
        }

        private void boton_ok_ff_Click(object sender, System.EventArgs e)
        {
            Form.ActiveForm.Close();
            this.InvokeEx(f => this.Enabled = true);

        }

        private void boton_copy_kf_Click(object sender, System.EventArgs e)
        {
            String lista = "Video keyframes" + Environment.NewLine;

            foreach (ListViewItem item in LB1_kf.Items)
            {
                try
                {
                    lista = lista + Environment.NewLine + item.Text + " --- " + item.SubItems[1].Text + " ---" + item.SubItems[3].Text;
                }
                catch
                {
                    continue;
                }
            }

            String temp_file = Path.Combine(Path.GetTempPath(), "temp_copy_kf.ff");
            if (File.Exists(temp_file))
            {
                try
                {
                    File.Delete(temp_file);
                }
                catch
                {
                    MessageBox.Show("Error copying to clipboard");
                    return;
                }
            }

            File.WriteAllText(Path.Combine(Path.GetTempPath(), "temp_copy_kf.ff"), lista);
            Process.Start("notepad.exe", Path.Combine(Path.GetTempPath(), "temp_copy_kf.ff"));
        }

        private void boton_copy_ff_Click(object sender, System.EventArgs e)
        {
            String lista = String.Empty;

            for (int i = 0; i < LB1_o_try.Items.Count; i++)
            {
                lista = lista + Environment.NewLine + LB1_o_try.Items[i].ToString();
            }

            String temp_file = Path.Combine(Path.GetTempPath(), "temp_copy_clp.ff");
            if (File.Exists(temp_file))
            {
                try
                {
                    File.Delete(temp_file);
                }
                catch
                {
                    MessageBox.Show("Error copying to clipboard");
                    return;
                }
            }

            File.WriteAllText(Path.Combine(Path.GetTempPath(), "temp_copy_clp.ff"), lista);
            Process.Start("notepad.exe", Path.Combine(Path.GetTempPath(), "temp_copy_clp.ff"));
        }

        private void LB1_o_Click(object sender, System.EventArgs e)
        {
            //Form.ActiveForm.Close();
        }


        private void Timer_apaga_Tick(object sender, EventArgs e)
        {
            tiempo_apaga = tiempo_apaga - 1;

            if (tiempo_apaga % 2 == 0)

            {
                TB1.ForeColor = Color.Black;
                this.InvokeEx(f => TaskbarProgress.SetValue(this.Handle, 100, 100));
                this.InvokeEx(f => TaskbarProgress.SetState(this.Handle, TaskbarProgress.TaskbarStates.Paused));
            }
            else
            {
                TB1.ForeColor = Color.DarkRed;
                this.InvokeEx(f => TaskbarProgress.SetValue(this.Handle, 100, 100));
                this.InvokeEx(f => TaskbarProgress.SetState(this.Handle, TaskbarProgress.TaskbarStates.Error));
            }

            TB1.Text = "COMPUTER WILL " + combo_shut.SelectedItem.ToString().ToUpper() + " IN " + (tiempo_apaga / 2).ToString() + " seconds";

            if (tiempo_apaga == 0)
            {
                if (combo_shut.SelectedIndex == 0)
                {
                    Process apagar = new System.Diagnostics.Process();
                    apagar.StartInfo.FileName = "shutdown.exe";
                    apagar.StartInfo.Arguments = "-s -t 60";
                    apagar.StartInfo.CreateNoWindow = true;
                    apagar.Start();
                    //Application.Exit();
                    TB1.Text = "COMPUTER SHUTDOWN LAUNCHED";
                }
                if (combo_shut.SelectedIndex == 1) Application.SetSuspendState(PowerState.Hibernate, true, true);
                if (combo_shut.SelectedIndex == 2) Application.SetSuspendState(PowerState.Suspend, true, true);
                Timer_apaga.Stop();
            }
        }

        private void disable_abort_btn()
        {
            this.InvokeEx(f => f.btn_abort_all.Enabled = false);
            this.InvokeEx(f => f.tabControl1.Enabled = false);
            this.InvokeEx(f => f.btn_stop_m3u8.Enabled = false);
        }

        private void button10_Click(object sender, EventArgs e)
        {
            this.InvokeEx(f => TaskbarProgress.SetState(this.Handle, TaskbarProgress.TaskbarStates.Normal));
            this.InvokeEx(f => TaskbarProgress.SetValue(this.Handle, 0, 100));
            this.TopMost = false;
            Enable_Controls();
            chkshut.Enabled = true;
            btn_pause.Enabled = true;
            txt_parameters.Enabled = true;
            btn_save_config.Enabled = true;
            btn_load_config.Enabled = true;

            checkBox3.Enabled = true;

            Timer_apaga.Stop();
            TB1.Visible = false;
            TB1.Text = "AUTOMATIC SHUTDOWN ENABLED";
            btn_cancel_shut.Visible = false;

            chkshut.CheckState = CheckState.Unchecked;
            notifyIcon1.Visible = false;
            txt_remain.Text = "Time remaining";

            if (tiempo_apaga == 0)
            {
                Process no_apagar = new System.Diagnostics.Process();
                no_apagar.StartInfo.FileName = "shutdown.exe";
                no_apagar.StartInfo.Arguments = "-a";
                no_apagar.StartInfo.UseShellExecute = false;
                no_apagar.StartInfo.CreateNoWindow = true;
                no_apagar.Start();
            }
            tiempo_apaga = 120;
        }

        private void comboBox1_DropDown(object sender, EventArgs e)
        {
            if (combo_presets.Text == "")
            {
                return;
            }

            String path = String.Empty;
            String path_pr = String.Empty;

            if (is_portable == false)
            {
                path = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_batch.ini";
                path_pr = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_presets.ini";
            }
            else
            {
                path = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_batch_portable.ini";
                path_pr = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_presets_portable.ini";
            }

            if (combo_presets.SelectedIndex == 0)
            {

                int linea = 0;
                foreach (string line in File.ReadLines(path))
                {
                    linea = linea + 1;

                    if (linea == 1)
                    {
                        txt_parameters.Text = line;
                    }

                    if (linea == 2)
                    {
                        txt_format.Text = line;
                    }

                    if (line == "yes")

                    {
                        checkBox3.CheckState = CheckState.Checked;
                    }

                    if (line == "no")
                    {
                        checkBox3.CheckState = CheckState.Unchecked;
                    }
                }
            }
            else
            {
                if (File.Exists(path_pr)) path = path_pr;
                foreach (string line in File.ReadLines(path))
                {
                    if (line.Contains(combo_presets.Text))
                    {
                        int cortar = line.LastIndexOf("%") - line.LastIndexOf("&");

                        txt_format.Text = line.Substring(line.LastIndexOf("%") + 2);
                        txt_parameters.Text = line.Substring(line.LastIndexOf("&") + 2, cortar - 3);
                    }
                }
            }
        }

        private void button13_Click(object sender, EventArgs e)
        {
            Pg1.Focus();
            if (!File.Exists(Path.Combine(Application.StartupPath, "ffmpeg.exe")))
            {
                MessageBox.Show("FFmpeg executable file was not found. Restart or reinstall application.", "Executable error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            String path = "cmd.exe";
            String param = String.Empty;
            Process ff_ext = new Process();
            if (listView1.Items.Count == 0) param = "/k " + "ffmpeg.exe -version " + '\u0022' + "chcp 65001 >nul " + '\u0022';
            else
            {
                if (send_par_consol == true)
                {
                    if (!Directory.Exists(Path.GetTempPath() + "FFBatch_test"))
                    {
                        try
                        {
                            Directory.CreateDirectory(Path.GetTempPath() + "FFBatch_test");
                        }
                        catch (Exception excpt)
                        {
                            MessageBox.Show("Test folder could not be created at TEMP location" + Environment.NewLine + excpt.Message, "Error creating directory", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                        }
                    }

                    param = "/k " + "ffmpeg.exe " + txt_pre_input.Text + " -i " + '\u0022' + listView1.Items[0].SubItems[1].Text + "\\" + listView1.Items[0].Text + '\u0022' + " " + txt_parameters.Text + " " + '\u0022' + Path.GetTempPath() + "FFBatch_test" + "\\" + Path.GetFileNameWithoutExtension(listView1.Items[0].Text) + "." + txt_format.Text + '\u0022';
                    Clipboard.SetText(param.Substring(3, param.Length - 3));
                }
                else param = "/k " + "ffmpeg.exe -version " + '\u0022' + "chcp 65001 >nul " + '\u0022';
            }

            ff_ext.StartInfo.FileName = path;
            ff_ext.StartInfo.Arguments = param;
            ff_ext.Start();
            if (listView1.Items.Count == 0) Clipboard.GetText();
            ff_ext.WaitForExit();
        }

        private void chkshut_CheckedChanged(object sender, EventArgs e)
        {
            Pg1.Focus();
            if (btn_cancel_shut.Visible == true)
            {
                return;
            }

            if (chkshut.Checked == false)
            {
                TB1.Visible = false;
                chkshut.ImageIndex = 0;
                combo_shut.Enabled = false;
                groupBox10.Focus();
            }
            else
            {
                chkshut.ImageIndex = 1;
                combo_shut.Enabled = true;
                chk_delete_source.CheckState = CheckState.Unchecked;
            }
        }

        private void OnApplicationExit(object sender, EventArgs e)
        {
            Process[] localByName = Process.GetProcessesByName("ffmpeg");
            foreach (Process p in localByName)
                p.Kill();
        }

        private void listView1_DragDrop(object sender, DragEventArgs e)
        {
            change_tab_1 = false;
            change_tab_2 = false;

            string[] file_drop = (string[])e.Data.GetData(DataFormats.FileDrop);

            List<string> files2 = new List<string>();

            int num_drop = 0;

            //Load queue file

            if (file_drop.Count() == 1 && Path.GetExtension(file_drop[0]) == ".ffq")
            {
                int linea = 0;
                int not_found = 0;
                combo_presets.Text = "";
                List<ListViewItem> itemsToAdd = new List<ListViewItem>();
                try
                {
                    foreach (string line in File.ReadLines(file_drop[0]))
                    {

                        if (linea == 0)
                        {
                            txt_parameters.Text = line;
                        }
                        if (linea == 1)
                        {
                            txt_format.Text = line;
                        }

                        if (linea == 2)
                        {
                            if (line == "Unchecked") checkBox1.CheckState = CheckState.Unchecked;
                            else checkBox1.CheckState = CheckState.Checked;
                        }

                        if (linea == 3)
                        {
                            if (line == "Unchecked") chk_suffix.CheckState = CheckState.Unchecked;
                            else
                            {
                                chk_suffix.CheckState = CheckState.Checked;
                                txt_suffix.Text = line;
                            }

                        }

                        if (linea == 4)
                        {
                            txt_path_main.Text = line;
                        }

                        if (linea > 4)
                        {

                            Boolean missing = false;
                            listView1.SmallImageList = imageList2;

                            itemsToAdd.Add(new ListViewItem(Path.GetFileName(line.Substring(0, line.LastIndexOf(" --0 "))), 1));
                            //ListViewItem elemento = new ListViewItem(line.Substring(0, line.LastIndexOf(" --0 ")), 1);
                            //Begin get file icon
                            Icon iconForFile = SystemIcons.WinLogo;

                            // Check to see if the image collection contains an image
                            // for this extension, using the extension as a key.
                            if (File.Exists(line.Substring(0, line.LastIndexOf(" --0 "))))
                            {
                                if (!imageList2.Images.ContainsKey(System.IO.Path.GetExtension(line.Substring(0, line.LastIndexOf(" --0 ")))))
                                {
                                    // If not, add the image to the image list.
                                    iconForFile = System.Drawing.Icon.ExtractAssociatedIcon(line.Substring(0, line.LastIndexOf(" --0 ")));
                                    imageList2.Images.Add(System.IO.Path.GetExtension(line.Substring(0, line.LastIndexOf(" --0 "))), iconForFile);
                                }

                                //listView1.Items.Add(elemento);
                                itemsToAdd[linea - 5].ImageKey = System.IO.Path.GetExtension(System.IO.Path.GetExtension(line.Substring(0, line.LastIndexOf(" --0 "))));
                            }
                            else
                            {
                                not_found = not_found + 1;
                                missing = true;
                            }

                            //listView1.Items.Add(line.Substring(0,line.LastIndexOf(" --0 ")));
                            String type = line.Substring(line.LastIndexOf(" --0 ") + 5, line.Length - (line.LastIndexOf(" --0") + 5));
                            type = type.Substring(0, type.LastIndexOf(" --1"));
                            String dur = line.Substring(line.LastIndexOf(" --1 ") + 5, line.Length - (line.LastIndexOf(" --1") + 5));
                            dur = dur.Substring(0, dur.LastIndexOf(" --2"));
                            String size = line.Substring(line.LastIndexOf(" --2 ") + 5, line.Length - (line.LastIndexOf(" --2") + 5));
                            size = size.Substring(0, size.LastIndexOf(" --3"));
                            String status = line.Substring(line.LastIndexOf(" --3 ") + 5, line.Length - (line.LastIndexOf(" --3") + 5));

                            itemsToAdd[linea - 5].SubItems.Add(Path.GetDirectoryName(line.Substring(0, line.LastIndexOf(" --0 "))));
                            itemsToAdd[linea - 5].SubItems.Add(type);
                            itemsToAdd[linea - 5].SubItems.Add(dur);
                            itemsToAdd[linea - 5].SubItems.Add(size);
                            if (missing == false) itemsToAdd[linea - 5].SubItems.Add(status);
                            else
                            {
                                itemsToAdd[linea - 5].SubItems.Add("File not found");
                                itemsToAdd[linea - 5].BackColor = Color.LightGoldenrodYellow;
                            }
                        }
                        linea = linea + 1;
                    }
                    listView1.Items.AddRange(itemsToAdd.ToArray());

                }
                catch (Exception excpt)
                {
                    this.Cursor = Cursors.Arrow;
                    MessageBox.Show("Error loading queue session. Unexpected file format." + Environment.NewLine + excpt.Message, "Queue file error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    btn_load_config.PerformClick();
                    read_saved_path();
                    return;
                }
                this.Cursor = Cursors.Arrow;

                if (tabControl1.SelectedIndex == 0)
                {
                    calc_list_size();
                    calc_total_dur();
                    lbl_items.Text = listView1.Items.Count.ToString() + " files";


                    if (not_found > 0)
                    {
                        this.Cursor = Cursors.Arrow;
                        MessageBox.Show("Queue list loaded successfully. " + Environment.NewLine + not_found.ToString() + " queue file(s) were not found. " + Environment.NewLine + Environment.NewLine + "Please sort and check file list for items marked with status " + '\u0022' + "File not found" + '\u0022' + ".", "Queue list loaded with missing files", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    }
                    return;
                }
            }

            //End load queue file

            foreach (String dropped in file_drop)
            {
                if (File.Exists(dropped))
                {
                    files2.Add(dropped);
                    num_drop = files2.Count();
                }
                else
                {
                    if (Directory.Exists(dropped))
                    {
                        if (add_subfs == false)
                        {
                            foreach (String file in Directory.GetFiles(dropped))
                            {
                                if (!File.GetAttributes(file).HasFlag(FileAttributes.Hidden))
                                {
                                    files2.Add(file);
                                    num_drop = num_drop + 1;
                                }
                            }
                        }
                        else
                        {
                            try
                            {
                                foreach (string f in Directory.GetFiles(dropped, "*.*", System.IO.SearchOption.AllDirectories))
                                {
                                    if (!File.GetAttributes(f).HasFlag(FileAttributes.Hidden))
                                    {
                                        files2.Add(f);
                                        num_drop = num_drop + 1;
                                    }
                                }
                            }
                            catch (System.Exception excpt)
                            {
                                var a = MessageBox.Show("Error: " + excpt.Message, "Access error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                        }
                    }
                }
            }

            if (num_drop >= 5000)
            {
                var a = MessageBox.Show("Adding " + num_drop + " files could take some time. Continue?", "Adding many files", MessageBoxButtons.OKCancel, MessageBoxIcon.Question);
                if (a == DialogResult.Cancel)
                {
                    return;
                }
            }

            files_to_add = files2;
            canceled_file_adding = false;
            btn_cancel_add.Enabled = true;
            btn_cancel_add.Visible = true;
            btn_cancel_add.Refresh();
            BG_Files.RunWorkerAsync();
        }

        private void listView1_DragEnter(object sender, DragEventArgs e)
        {
            if (e.Data.GetDataPresent(DataFormats.FileDrop, false))
                e.Effect = DragDropEffects.All;
            else
                e.Effect = DragDropEffects.None;

            //   if (e.Data.GetDataPresent(DataFormats.FileDrop)) e.Effect = DragDropEffects.Copy;
        }

        private void button16_Click(object sender, EventArgs e)
        {
            listView1.View = View.LargeIcon;
        }

        private void listView1_KeyUp(object sender, KeyEventArgs e)
        {
            if (e.KeyCode != Keys.Delete) return;

            if (multi_running == true) return;

            if (working == true)
            {
                Boolean remove = true;
                foreach (ListViewItem item in listView1.SelectedItems)
                {
                    if (item.SubItems[5].Text != "Queued")
                    {
                        remove = false;
                        break;
                    }
                }

                if (e.KeyCode == Keys.Delete && remove == true)
                {
                    ctdel.PerformClick();
                }
                return;
            }

            if (e.KeyCode == Keys.Delete)
            {
                ctdel.PerformClick();
            }
        }

        private void button17_Click(object sender, EventArgs e)
        {
            listView1.Sorting = SortOrder.Ascending;
        }

        private void button17_Click_1(object sender, EventArgs e)
        {
            foreach (ListViewItem n_a in listView1.Items)
            {
                if (n_a.BackColor == Color.LightGoldenrodYellow)
                {
                    n_a.Remove();
                }
            }
            lbl_items.Text = listView1.Items.Count + " file(s)";
        }

        private void listView1_DoubleClick(object sender, EventArgs e)
        {
            media_info();
        }

        private void listView1_ColumnClick(object sender, ColumnClickEventArgs e)
        {
            ListView myListView = (ListView)sender;
            //if (e.Column == 0 || e.Column == 1 || e.Column == 2 || e.Column == 3 || e.Column == 5)

            //{
            //    // Determine if clicked column is already the column that is being sorted.
            //    if (e.Column == lvwColumnSorter_Full.SortColumn)
            //    {
            //        // Reverse the current sort direction for this column.
            //        if (lvwColumnSorter_Full.Order == SortOrder.Ascending)
            //        {
            //            lvwColumnSorter_Full.Order = SortOrder.Descending;
            //        }
            //        else
            //        {
            //            lvwColumnSorter_Full.Order = SortOrder.Ascending;
            //        }
            //    }
            //    else
            //    {
            //        // Set the column number that is to be sorted; default to ascending.
            //        lvwColumnSorter_Full.SortColumn = e.Column;
            //        lvwColumnSorter_Full.Order = SortOrder.Ascending;
            //    }
            //    myListView.Sort();
            //}
            if (e.Column == 4)
            {
                lvwColumnSorter_Full.SortColumn = 4;
                if (size_sorted == false)
                {
                    size_sorted = true;
                    lvwColumnSorter_Full.Order = SortOrder.Descending;
                }
                else
                {
                    size_sorted = false;
                    lvwColumnSorter_Full.Order = SortOrder.Ascending;
                }

                if (listView1.Items.Count > 6000) this.Cursor = Cursors.WaitCursor;
                listView1.BeginUpdate();

                foreach (ListViewItem item in listView1.Items)
                {
                    String filename = item.SubItems[1].Text + "\\" + item.Text;
                    if (File.Exists(filename))
                    {
                        FileInfo fi = new FileInfo(filename);
                        item.SubItems[4].Text = fi.Length.ToString("D13");
                    }
                    else
                    {
                        item.SubItems[4].Text = "0000000000000";
                    }
                }
                ColumnHeader new_sorting_column = listView1.Columns[e.Column];

                // Figure out the new sorting order.

                System.Data.SqlClient.SortOrder sort_order;
                if (SortingColumn == null)
                {
                    // New column. Sort ascending.
                    sort_order = System.Data.SqlClient.SortOrder.Ascending;
                }
                else
                {
                    // See if this is the same column.
                    if (new_sorting_column == SortingColumn)
                    {
                        // Same column. Switch the sort order.
                        if (SortingColumn.Text.StartsWith("> "))
                        {
                            sort_order = System.Data.SqlClient.SortOrder.Descending;
                        }
                        else
                        {
                            sort_order = System.Data.SqlClient.SortOrder.Ascending;
                        }
                    }
                    else
                    {
                        // New column. Sort ascending.
                        sort_order = System.Data.SqlClient.SortOrder.Ascending;
                    }

                    // Remove the old sort indicator.
                    SortingColumn.Text = SortingColumn.Text.Substring(2);
                }

                // Display the new sort order.
                SortingColumn = new_sorting_column;
                if (sort_order == System.Data.SqlClient.SortOrder.Ascending)
                {
                    SortingColumn.Text = "> " + SortingColumn.Text;
                }
                else
                {
                    SortingColumn.Text = "< " + SortingColumn.Text;
                }

                // Create a comparer.
                listView1.ListViewItemSorter =
                    new ListViewComparer(e.Column, sort_order);

                // Sort.
                listView1.Sort();

                foreach (ListViewItem item in listView1.Items)
                {
                    //Format size view
                    var bytes = long.Parse(item.SubItems[4].Text);

                    var kilobytes = (double)bytes / 1024;
                    var megabytes = kilobytes / 1024;
                    var gigabytes = megabytes / 1024;

                    String size = "";

                    String separator = System.Globalization.CultureInfo.CurrentUICulture.NumberFormat.NumberDecimalSeparator;

                    if (bytes > 1000000000)
                    {
                        String gigas = gigabytes.ToString();
                        if (gigas.Length >= 5)
                        {
                            gigas = gigas.Substring(0, gigas.LastIndexOf(separator) + 3);
                            size = (gigas + " GB");
                        }
                        else
                        {
                            size = (gigas + " GB");
                        }
                    }

                    if (bytes >= 1048576 && bytes <= 1000000000)
                    {

                        String megas = megabytes.ToString();
                        if (megas.Length > 5)
                        {
                            megas = megas.Substring(0, megas.LastIndexOf(separator) + 2);
                            size = (megas + " MB");
                        }
                        else
                        {
                            size = (megas + " MB");
                        }
                    }

                    if (bytes >= 1024 && bytes < 1048576)

                    {
                        String kbs = kilobytes.ToString();
                        if (kbs.Length >= 5)
                        {
                            kbs = kbs.Substring(0, kbs.LastIndexOf(separator));
                            size = (kbs + " KB");
                        }
                        else
                        {
                            size = (kbs + " KB");
                        }
                    }
                    if (bytes > -1 && bytes < 1024)
                    {
                        String bits = bytes.ToString();
                        size = (bits + " Bytes");
                    }
                    item.SubItems[4].Text = size;

                    //End Format size view
                }
                this.Cursor = Cursors.Arrow;
                listView1.EndUpdate();
            }
            if (e.Column != 4)
            {
                ColumnHeader new_sorting_column = listView1.Columns[e.Column];

                // Figure out the new sorting order.

                System.Data.SqlClient.SortOrder sort_order;
                if (SortingColumn == null)
                {
                    // New column. Sort ascending.
                    sort_order = System.Data.SqlClient.SortOrder.Ascending;
                }
                else
                {
                    // See if this is the same column.
                    if (new_sorting_column == SortingColumn)
                    {
                        // Same column. Switch the sort order.
                        if (SortingColumn.Text.StartsWith("> "))
                        {
                            sort_order = System.Data.SqlClient.SortOrder.Descending;
                        }
                        else
                        {
                            sort_order = System.Data.SqlClient.SortOrder.Ascending;
                        }
                    }
                    else
                    {
                        // New column. Sort ascending.
                        sort_order = System.Data.SqlClient.SortOrder.Ascending;
                    }

                    // Remove the old sort indicator.
                    SortingColumn.Text = SortingColumn.Text.Substring(2);
                }

                // Display the new sort order.
                SortingColumn = new_sorting_column;
                if (sort_order == System.Data.SqlClient.SortOrder.Ascending)
                {
                    SortingColumn.Text = "> " + SortingColumn.Text;
                }
                else
                {
                    SortingColumn.Text = "< " + SortingColumn.Text;
                }

                // Create a comparer.
                listView1.ListViewItemSorter =
                    new ListViewComparer(e.Column, sort_order);

                // Sort.
                listView1.Sort();

                
            }
        }

        private void button19_Click(object sender, EventArgs e)
        {
            listView1.View = View.Details;
            listView2.View = View.Details;
            listView3.View = View.Details;
        }

        private void button12_Click(object sender, EventArgs e)
        {
            Pg1.Focus();

            if (tabControl1.SelectedIndex == 0)
            {
                this.Cursor = Cursors.WaitCursor;
                //Backup listview1
                ListViewItem[] itemsToAdd = new ListViewItem[listView1.Items.Count];
                ListView lv_clean = new ListView();
                listView1.BeginUpdate();
                lv_clean.Items.AddRange((from ListViewItem item in listView1.Items select (ListViewItem)item.Clone()).ToArray());

                foreach (ListViewItem n_a in lv_clean.Items)
                {
                    if (n_a.BackColor == Color.LightGoldenrodYellow || n_a.SubItems[3].Text == "N/A" || n_a.SubItems[3].Text == "0:00:00" || n_a.SubItems[3].Text == "00:00:00")
                    {
                        n_a.Remove();
                    }
                }
                listView1.Items.Clear();
                listView1.Items.AddRange((from ListViewItem item in lv_clean.Items select (ListViewItem)item.Clone()).ToArray());
                lbl_items.Text = listView1.Items.Count + " file(s)";
                calc_total_dur();
                calc_list_size();
                listView1.EndUpdate();
            }

            if (tabControl1.SelectedIndex == 3)
            {
                if (dg1.RowCount == 0) return;
                this.Cursor = Cursors.WaitCursor;
                dg1.EndEdit();
                dg1.ClearSelection();

                for (int i = 1; i < dg1.RowCount; i++)

                {
                    if (dg1.Rows[i].Cells[5].Value.ToString() == "Error")

                    {
                        dg1.Rows.RemoveAt(i);
                        i--;
                    }
                }

                if (dg1.Rows[0].Cells[1] != null && dg1.Rows[0].Cells[5].Value.ToString() == "Error")
                {
                    dg1.Rows.RemoveAt(0);
                    this.Cursor = Cursors.Arrow;
                    return;
                }
                dg1.Refresh();
            }
            this.Cursor = Cursors.Arrow;
        }

        private void CopyAction(object sender, EventArgs e)
        {
            if (Rtxt.SelectedText != String.Empty) Clipboard.SetText(Rtxt.SelectedText);
        }

        private void Disable_Controls()
        {
            if (btn_save_path.Enabled == true) save_path_state = true;
            else save_path_state = false;
            if (btn_save_preset.Enabled == true) save_preset_state = true;
            else save_preset_state = false;
            if (btn_save_prio.Enabled == true) current_save_prio = true;
            else current_save_prio = false;


            foreach (Control p in this.Controls)
            {
                if (p.Name != panel1.Name && p.Name != tabControl1.Name && p.Name != groupBox15.Name && p.Name != groupBox10.Name && p.Name != groupBox_m3u.Name && p.Name != groupBox9.Name && p.Name != groupBox1.Name && p.Name != groupBox4.Name)
                {
                    this.InvokeEx(f => p.Enabled = false);
                }
                this.InvokeEx(f => f.btn_pause.Enabled = true);
            }

            foreach (Control ct in groupBox_m3u.Controls)
            {
                this.InvokeEx(f => ct.Enabled = false);
            }

            this.InvokeEx(f => f.btn_stop_m3u8.Enabled = true);

            foreach (Control ct in panel1.Controls)
            {
                this.InvokeEx(f => ct.Enabled = false);
            }

            foreach (Control ct_g in groupBox15.Controls)
            {

                this.InvokeEx(f => ct_g.Enabled = false);
            }

            foreach (Control ct in groupBox9.Controls)
            {
                this.InvokeEx(f => ct.Enabled = false);
            }
            foreach (Control ct in groupBox1.Controls)
            {
                this.InvokeEx(f => ct.Enabled = false);
            }

            this.InvokeEx(f => f.groupBox4.Enabled = true);
            foreach (Control ct in groupBox4.Controls)
            {
                if (ct.Name != chk_delete_source.Name)
                    this.InvokeEx(f => ct.Enabled = false);
            }

            this.InvokeEx(f => f.TB1.Enabled = true);
            this.InvokeEx(f => f.chkshut.Enabled = true);

            if (chkshut.CheckState == CheckState.Checked)
            {
                this.InvokeEx(f => f.combo_shut.Enabled = true);
            }

            this.InvokeEx(f => f.btn_pause.Enabled = true);
            this.InvokeEx(f => f.listView2.Enabled = false);
            this.InvokeEx(f => f.list_tracks.Enabled = false);
            this.InvokeEx(f => f.btn_mux.Enabled = false);

            this.InvokeEx(f => f.listView1.Enabled = true);
            this.InvokeEx(f => f.txt_remain.Enabled = true);
            this.InvokeEx(f => f.label11.Enabled = true);
            this.InvokeEx(f => f.Pg1.Enabled = true);
            //this.InvokeEx(f => f.pg_current.Enabled = true);
            total_time = false;
            this.InvokeEx(f => f.LB_Wait.Enabled = true);
            this.InvokeEx(f => f.pg_adding.Enabled = true);
            this.InvokeEx(f => f.txt_adding_p.Enabled = true);

            this.InvokeEx(f => f.combo_prio.Enabled = true);

            this.InvokeEx(f => f.item_up.Enabled = true);
            this.InvokeEx(f => f.item_down.Enabled = true);

            if (runnin_n_presets == true)
            {
                this.InvokeEx(f => f.btn_add_files.Enabled = false);
                this.InvokeEx(f => f.btn_add_folders.Enabled = false);
                this.InvokeEx(f => f.chk_subfolders.Enabled = false);
            }
        }

        private void Enable_Controls()
        {
            //this.InvokeEx(f => f.button20.Text = "Abort queue");
            foreach (Control p in this.Controls)
            {
                this.InvokeEx(f => p.Enabled = true);
            }
            foreach (Control p2 in groupBox10.Controls)
            {
                this.InvokeEx(f => p2.Enabled = true);
            }
            foreach (Control ct in panel1.Controls)
            {
                this.InvokeEx(f => ct.Enabled = true);
            }

            if (save_path_state == false)
            {
                this.InvokeEx(f => f.btn_save_path.Enabled = false);
            }

            foreach (Control ct in panel2.Controls)
            {
                this.InvokeEx(f => ct.Enabled = true);
            }

            foreach (Control ct_g in groupBox15.Controls)
            {
                this.InvokeEx(f => ct_g.Enabled = true);
            }

            foreach (Control ct_g in groupBox1.Controls)
            {
                this.InvokeEx(f => ct_g.Enabled = true);
            }

            if (save_preset_state == false)
            {
                this.InvokeEx(f => f.btn_save_preset.Enabled = false);
            }

            if (current_save_prio == false)
            {
                this.InvokeEx(f => f.btn_save_prio.Enabled = false);
            }

            foreach (Control ct in groupBox_m3u.Controls)
            {
                this.InvokeEx(f => ct.Enabled = true);
            }

            foreach (Control ct in groupBox9.Controls)
            {
                this.InvokeEx(f => ct.Enabled = true);
            }

            foreach (Control ct in groupBox2.Controls)
            {
                this.InvokeEx(f => ct.Enabled = true);
            }

            foreach (Control ct in groupBox4.Controls)
            {
                this.InvokeEx(f => ct.Enabled = true);
            }

            if (chkshut.CheckState == CheckState.Checked)
            {
                this.InvokeEx(f => f.combo_shut.Enabled = true);
            }
            else
            {
                this.InvokeEx(f => f.combo_shut.Enabled = false);
            }

            //this.InvokeEx(f => f.chk_shift.Checked = false);
            //this.InvokeEx(f => f.Num_Shift.Enabled = false);
            this.InvokeEx(f => f.listView2.Enabled = true);
            this.InvokeEx(f => f.list_tracks.Enabled = true);
            this.InvokeEx(f => f.btn_mux.Enabled = true);
            this.InvokeEx(f => f.txt_remain.Text = "");

            if (Enable_txt_hard_Subs == true)
            {
                this.InvokeEx(f => f.txt_hard_subs.Enabled = true);
            }
            else
            {
                this.InvokeEx(f => f.txt_hard_subs.Enabled = false);
            }

            timer_tasks.Stop();
            TimeSpan t = TimeSpan.FromSeconds(time_n_tasks);
            String tx_elapsed = string.Format("{0:D2}h:{1:D2}m:{2:D2}s",
                t.Hours,
                t.Minutes,
                t.Seconds);
            this.InvokeEx(f => f.txt_remain.Text = "Time remaining: 00h:00m:00s");

            this.InvokeEx(f => f.pg_adding.Visible = false);

            if (chk_m3u_params.CheckState == CheckState.Checked)
            {
                this.InvokeEx(f => f.txt_m3u_params.Enabled = true);
            }
            else
            {
                this.InvokeEx(f => f.txt_m3u_params.Enabled = false);
            }

            if (chk_output_server.CheckState == CheckState.Checked)
            {
                this.InvokeEx(f => f.txt_output_server.Enabled = true);
            }
            else
            {
                this.InvokeEx(f => f.txt_output_server.Enabled = false);
            }
            check_jobs();
        }

        private void Create_Tooltips()
        {
            ToolTip toolT4z = new ToolTip();
            toolT4z.AutoPopDelay = 9000;
            toolT4z.InitialDelay = 750;
            toolT4z.ReshowDelay = 500;
            toolT4z.ShowAlways = true;
            toolT4z.SetToolTip(this.btn_track_up, "Move track up");

            ToolTip toolT5z = new ToolTip();
            toolT5z.AutoPopDelay = 9000;
            toolT5z.InitialDelay = 750;
            toolT5z.ReshowDelay = 500;
            toolT5z.ShowAlways = true;
            toolT5z.SetToolTip(this.btn_track_down, "Move track down");

            ToolTip toolT2z = new ToolTip();
            toolT2z.AutoPopDelay = 9000;
            toolT2z.InitialDelay = 750;
            toolT2z.ReshowDelay = 500;
            toolT2z.ShowAlways = true;
            toolT2z.SetToolTip(this.pic_title, "About application and donations");

            ToolTip toolT1z = new ToolTip();
            toolT1z.AutoPopDelay = 9000;
            toolT1z.InitialDelay = 750;
            toolT1z.ReshowDelay = 500;
            toolT1z.ShowAlways = true;
            toolT1z.SetToolTip(this.btn_add_col, "Add custom column to list");

            ToolTip toolT0z = new ToolTip();
            toolT0z.AutoPopDelay = 9000;
            toolT0z.InitialDelay = 750;
            toolT0z.ReshowDelay = 500;
            toolT0z.ShowAlways = true;
            toolT0z.SetToolTip(this.btn_display_log, "Display last saved log");

            ToolTip toolT00z = new ToolTip();
            toolT00z.AutoPopDelay = 9000;
            toolT00z.InitialDelay = 750;
            toolT00z.ReshowDelay = 500;
            toolT00z.ShowAlways = true;
            toolT00z.SetToolTip(this.btn_edit_presets, "Edit presets list");

            toolT002.AutoPopDelay = 9000;
            toolT002.InitialDelay = 750;
            toolT002.ReshowDelay = 500;
            toolT002.ShowAlways = true;
            toolT002.SetToolTip(this.pic_warnings, "There were errors during last session");

            ToolTip toolT001 = new ToolTip();
            toolT001.AutoPopDelay = 9000;
            toolT001.InitialDelay = 750;
            toolT001.ReshowDelay = 500;
            toolT001.ShowAlways = true;
            toolT001.SetToolTip(this.pic_no_errors, "All items successfully encoded");

            ToolTip toolTipaH7 = new ToolTip();
            toolTipaH7.AutoPopDelay = 9000;
            toolTipaH7.InitialDelay = 750;
            toolTipaH7.ReshowDelay = 500;
            toolTipaH7.ShowAlways = true;
            toolTipaH7.SetToolTip(this.btn_inc_font, "Increase list font size");

            ToolTip toolTipaH8 = new ToolTip();
            toolTipaH8.AutoPopDelay = 9000;
            toolTipaH8.InitialDelay = 750;
            toolTipaH8.ReshowDelay = 500;
            toolTipaH8.ShowAlways = true;
            toolTipaH8.SetToolTip(this.btn_decr_font, "Decrease list font size");

            ToolTip toolTipaH6 = new ToolTip();
            toolTipaH6.AutoPopDelay = 9000;
            toolTipaH6.InitialDelay = 750;
            toolTipaH6.ReshowDelay = 500;
            toolTipaH6.ShowAlways = true;
            toolTipaH6.SetToolTip(this.combo_prio, "Encoding priority");

            tool_undo_filter.AutoPopDelay = 9000;
            tool_undo_filter.InitialDelay = 750;
            tool_undo_filter.ReshowDelay = 500;
            tool_undo_filter.ShowAlways = true;
            tool_undo_filter.SetToolTip(this.btn_undo_filter, "Undo applied filter");

            ToolTip toolTipaA6 = new ToolTip();
            toolTipaA6.AutoPopDelay = 9000;
            toolTipaA6.InitialDelay = 750;
            toolTipaA6.ReshowDelay = 500;
            toolTipaA6.ShowAlways = true;
            toolTipaA6.SetToolTip(this.btn_filter, "Filter list items");

            ToolTip toolTipaA5 = new ToolTip();
            toolTipaA5.AutoPopDelay = 9000;
            toolTipaA5.InitialDelay = 750;
            toolTipaA5.ReshowDelay = 500;
            toolTipaA5.ShowAlways = true;
            toolTipaA5.SetToolTip(this.chk_overw, "Allow overwriting if source and destination filename is the same.");

            ToolTip toolTipaA4 = new ToolTip();
            toolTipaA4.AutoPopDelay = 9000;
            toolTipaA4.InitialDelay = 750;
            toolTipaA4.ReshowDelay = 500;
            toolTipaA4.ShowAlways = true;
            toolTipaA4.SetToolTip(this.chk_trim2, "Check this to trim the amount of time selected at start/end fields." + Environment.NewLine + "Uncheck to use trim fields as start/end positions.");

            ToolTip toolTipaA3 = new ToolTip();
            toolTipaA3.AutoPopDelay = 5000;
            toolTipaA3.InitialDelay = 750;
            toolTipaA3.ReshowDelay = 500;
            toolTipaA3.ShowAlways = true;
            toolTipaA3.SetToolTip(this.check_concat, "Switch between concat muxer and video filter muxer.");

            ToolTip toolTipa33 = new ToolTip();
            toolTipa33.AutoPopDelay = 5000;
            toolTipa33.InitialDelay = 750;
            toolTipa33.ReshowDelay = 500;
            toolTipa33.ShowAlways = true;
            toolTipa33.SetToolTip(this.checkBox1, "Create source path structure on destination folder.");

            ToolTip toolTipa3 = new ToolTip();
            toolTipa3.AutoPopDelay = 5000;
            toolTipa3.InitialDelay = 750;
            toolTipa3.ReshowDelay = 500;
            toolTipa3.ShowAlways = true;
            toolTipa3.SetToolTip(this.btn_ref_dcd, "Refresh decoders list.");

            toolTip_settings.AutoPopDelay = 5000;
            toolTip_settings.InitialDelay = 750;
            toolTip_settings.ReshowDelay = 500;
            toolTip_settings.ShowAlways = true;
            toolTip_settings.SetToolTip(this.btn_save_config, "Save current parameters as default.");

            ToolTip toolTip03 = new ToolTip();
            toolTip03.AutoPopDelay = 5000;
            toolTip03.InitialDelay = 750;
            toolTip03.ReshowDelay = 500;
            toolTip03.ShowAlways = true;
            toolTip03.SetToolTip(this.change_ff, "Click to replace current ffmpeg.exe version.");

            ToolTip toolTip022 = new ToolTip();
            toolTip022.AutoPopDelay = 5000;
            toolTip022.InitialDelay = 750;
            toolTip022.ReshowDelay = 500;
            toolTip022.ShowAlways = true;
            toolTip022.SetToolTip(this.chk_try, "Disables trying preset before starting encoding." + Environment.NewLine + "Check it in case of trouble processing queue.");

            ToolTip toolTip02 = new ToolTip();
            toolTip02.AutoPopDelay = 5000;
            toolTip02.InitialDelay = 750;
            toolTip02.ReshowDelay = 500;
            toolTip02.ShowAlways = true;
            toolTip02.SetToolTip(this.item_up, "Move queued item up");

            ToolTip toolTip033 = new ToolTip();
            toolTip033.AutoPopDelay = 5000;
            toolTip033.InitialDelay = 750;
            toolTip033.ReshowDelay = 500;
            toolTip033.ShowAlways = true;
            toolTip033.SetToolTip(this.item_down, "Move queued item down");

            ToolTip toolTip04 = new ToolTip();
            toolTip04.AutoPopDelay = 5000;
            toolTip04.InitialDelay = 750;
            toolTip04.ReshowDelay = 500;
            toolTip04.ShowAlways = true;
            toolTip04.SetToolTip(this.requeue, "Reset items status to queued");

            ToolTip toolTip0 = new ToolTip();
            toolTip0.AutoPopDelay = 5000;
            toolTip0.InitialDelay = 750;
            toolTip0.ReshowDelay = 500;
            toolTip0.ShowAlways = true;
            toolTip0.SetToolTip(this.chk_delete_source, "Move source files to recycle bin on successful completion");

            ToolTip toolTip1 = new ToolTip();
            toolTip1.AutoPopDelay = 5000;
            toolTip1.InitialDelay = 750;
            toolTip1.ReshowDelay = 500;
            toolTip1.ShowAlways = true;
            toolTip1.SetToolTip(this.listView1, "Drag and drop files or folders here");

            ToolTip toolTip2 = new ToolTip();
            toolTip2.AutoPopDelay = 5000;
            toolTip2.InitialDelay = 750;
            toolTip2.ReshowDelay = 500;
            toolTip1.ShowAlways = true;
            toolTip1.SetToolTip(this.btn_del_preset, "Remove current preset");

            ToolTip toolTip3 = new ToolTip();
            toolTip3.AutoPopDelay = 5000;
            toolTip3.InitialDelay = 750;
            toolTip3.ReshowDelay = 500;
            toolTip3.ShowAlways = true;
            toolTip3.SetToolTip(this.btn_try_pr, "Try ffmpeg parameters with selected file");

            ToolTip toolTip4 = new ToolTip();
            toolTip4.AutoPopDelay = 5000;
            toolTip4.InitialDelay = 750;
            toolTip4.ReshowDelay = 500;
            toolTip4.ShowAlways = true;
            toolTip4.SetToolTip(this.btn_clean_list, "Remove invalid items");

            ToolTip toolTip5 = new ToolTip();
            toolTip5.AutoPopDelay = 5000;
            toolTip5.InitialDelay = 750;
            toolTip5.ReshowDelay = 500;
            toolTip5.ShowAlways = true;
            toolTip5.SetToolTip(this.chkshut, "Automatic shutdown on completion");

            ToolTip toolTip6 = new ToolTip();
            toolTip6.AutoPopDelay = 5000;
            toolTip6.InitialDelay = 500;
            toolTip6.ReshowDelay = 500;
            toolTip6.ShowAlways = true;
            toolTip6.SetToolTip(this.txt_path_main, "Double-click to reset default output folder");

            ToolTip toolTip6_2 = new ToolTip();
            toolTip6_2.AutoPopDelay = 5000;
            toolTip6_2.InitialDelay = 500;
            toolTip6_2.ReshowDelay = 500;
            toolTip6_2.ShowAlways = true;
            toolTip6_2.SetToolTip(this.btn_reset_path, "Click to reset default output folder");

            ToolTip toolTip8 = new ToolTip();
            toolTip8.AutoPopDelay = 5000;
            toolTip8.InitialDelay = 750;
            toolTip8.ReshowDelay = 500;
            toolTip8.ShowAlways = true;
            toolTip8.SetToolTip(this.button2, "Start sequential processing");

            ToolTip toolTipZ8 = new ToolTip();
            toolTipZ8.AutoPopDelay = 5000;
            toolTipZ8.InitialDelay = 750;
            toolTipZ8.ReshowDelay = 500;
            toolTipZ8.ShowAlways = true;
            toolTipZ8.SetToolTip(this.btn_abort_all, "Abort encoding");

            ToolTip toolTip10 = new ToolTip();
            toolTip10.AutoPopDelay = 5000;
            toolTip10.InitialDelay = 750;
            toolTip10.ReshowDelay = 500;
            toolTip10.ShowAlways = true;
            toolTip10.SetToolTip(this.btn_concat, "Concatenate files in queue using selected preset");

            ToolTip toolTip12 = new ToolTip();
            toolTip12.AutoPopDelay = 5000;
            toolTip12.InitialDelay = 750;
            toolTip12.ReshowDelay = 500;
            toolTip12.ShowAlways = true;
            toolTip12.SetToolTip(this.checkBox3, "Open output folder on completion");

            ToolTip toolTip13 = new ToolTip();
            toolTip13.AutoPopDelay = 5000;
            toolTip13.InitialDelay = 750;
            toolTip13.ReshowDelay = 500;
            toolTip13.ShowAlways = true;
            toolTip13.SetToolTip(this.button22, "Show audio waveform");

            ToolTip toolTip15 = new ToolTip();
            toolTip15.AutoPopDelay = 1500;
            toolTip15.InitialDelay = 750;
            toolTip15.ReshowDelay = 500;
            toolTip15.ShowAlways = true;
            toolTip15.SetToolTip(this.label13, "Double-click to set default output folder");

            ToolTip toolTip16 = new ToolTip();
            toolTip16.AutoPopDelay = 1500;
            toolTip16.InitialDelay = 750;
            toolTip16.ReshowDelay = 500;
            toolTip16.ShowAlways = true;
            toolTip16.SetToolTip(this.button23, "Clear track list");

            ToolTip toolTip18 = new ToolTip();
            toolTip18.AutoPopDelay = 1500;
            toolTip18.InitialDelay = 750;
            toolTip18.ReshowDelay = 500;
            toolTip18.ShowAlways = true;
            toolTip18.SetToolTip(this.btn_mux, "Multiplex streams");


            ToolTip toolTip20 = new ToolTip();
            toolTip20.AutoPopDelay = 1500;
            toolTip20.InitialDelay = 750;
            toolTip20.ReshowDelay = 500;
            toolTip20.ShowAlways = true;
            toolTip20.SetToolTip(this.btn_set_track_param, "Restore default parameters");

            ToolTip toolTip21 = new ToolTip();
            toolTip21.AutoPopDelay = 1500;
            toolTip21.InitialDelay = 750;
            toolTip21.ReshowDelay = 500;
            toolTip21.ShowAlways = true;
            toolTip21.SetToolTip(this.btn_update, "Check for updates");

            ToolTip toolTip22 = new ToolTip();
            toolTip22.AutoPopDelay = 1500;
            toolTip22.InitialDelay = 750;
            toolTip22.ReshowDelay = 500;
            toolTip22.ShowAlways = true;
            toolTip22.SetToolTip(this.txt_track_param, "Do not include -c:v / -c:a / -c:s");

            ToolTip toolTip23 = new ToolTip();
            toolTip23.AutoPopDelay = 1500;
            toolTip23.InitialDelay = 750;
            toolTip23.ReshowDelay = 500;
            toolTip23.ShowAlways = true;
            toolTip23.SetToolTip(this.lbl_mux_par, "Do not include -c:v / -c:a / -c:s");

            ToolTip toolTip24 = new ToolTip();
            toolTip24.AutoPopDelay = 1500;
            toolTip24.InitialDelay = 750;
            toolTip24.ReshowDelay = 500;
            toolTip24.ShowAlways = true;
            toolTip24.SetToolTip(this.btn_save_preset, "Save current preset");

            ToolTip toolTip25 = new ToolTip();
            toolTip25.AutoPopDelay = 1500;
            toolTip25.InitialDelay = 750;
            toolTip25.ReshowDelay = 500;
            toolTip25.ShowAlways = true;
            toolTip25.SetToolTip(this.btn_add_tracks, "Add selected file to tracks list");

            ToolTip toolTip26 = new ToolTip();
            toolTip26.AutoPopDelay = 3500;
            toolTip26.InitialDelay = 750;
            toolTip26.ReshowDelay = 500;
            toolTip26.ShowAlways = true;
            toolTip26.SetToolTip(this.btn_capture, "1-Click record screen using gdigrab");

            ToolTip toolTip27 = new ToolTip();
            toolTip27.AutoPopDelay = 3500;
            toolTip27.InitialDelay = 750;
            toolTip27.ReshowDelay = 500;
            toolTip27.ShowAlways = true;
            toolTip27.SetToolTip(this.chk_suffix, "Add text to output filename.");

            ToolTip toolTip30 = new ToolTip();
            toolTip30.AutoPopDelay = 3500;
            toolTip30.InitialDelay = 750;
            toolTip30.ReshowDelay = 500;
            toolTip30.ShowAlways = true;
            toolTip30.SetToolTip(this.chk_subfolders, "Add files in path subfolders");
            
            ToolTip toolTip32 = new ToolTip();
            toolTip32.AutoPopDelay = 3500;
            toolTip32.InitialDelay = 750;
            toolTip32.ReshowDelay = 500;
            toolTip32.ShowAlways = true;
            toolTip32.SetToolTip(this.btn_refresh, "Refresh list");

            ToolTip toolTip33 = new ToolTip();
            toolTip33.AutoPopDelay = 3500;
            toolTip33.InitialDelay = 750;
            toolTip33.ReshowDelay = 500;
            toolTip33.ShowAlways = true;
            toolTip33.SetToolTip(this.label2, "Output file extension. Leave blank to use source file extension");

            ToolTip toolTip34 = new ToolTip();
            toolTip34.AutoPopDelay = 3500;
            toolTip34.InitialDelay = 750;
            toolTip34.ReshowDelay = 500;
            toolTip34.ShowAlways = true;
            toolTip34.SetToolTip(this.txt_format, "Output file extension. Leave blank to use source file extension");

            ToolTip toolTip35 = new ToolTip();
            toolTip35.AutoPopDelay = 3500;
            toolTip35.InitialDelay = 750;
            toolTip35.ReshowDelay = 500;
            toolTip35.ShowAlways = true;
            toolTip35.SetToolTip(this.btn_start_m3u, "Start sequential capture (one by one)");

            ToolTip toolTip36 = new ToolTip();
            toolTip36.AutoPopDelay = 3500;
            toolTip36.InitialDelay = 750;
            toolTip36.ReshowDelay = 500;
            toolTip36.ShowAlways = true;
            toolTip36.SetToolTip(this.btn_n_urls, "Start capturing all urls");

            ToolTip toolTip37 = new ToolTip();
            toolTip37.AutoPopDelay = 3500;
            toolTip37.InitialDelay = 750;
            toolTip37.ReshowDelay = 500;
            toolTip37.ShowAlways = true;
            toolTip37.SetToolTip(this.btn_validate_url, "Check URLs are ready for capture");

            ToolTip toolTip38 = new ToolTip();
            toolTip38.AutoPopDelay = 3500;
            toolTip38.InitialDelay = 750;
            toolTip38.ReshowDelay = 500;
            toolTip38.ShowAlways = true;
            toolTip38.SetToolTip(this.btn_url_info, "Get url multimedia information");

            ToolTip toolTip39 = new ToolTip();
            toolTip39.AutoPopDelay = 3500;
            toolTip39.InitialDelay = 750;
            toolTip39.ReshowDelay = 500;
            toolTip39.ShowAlways = true;
            toolTip39.SetToolTip(this.btn_multi_m, "Start processing multiple files using number below");

            ToolTip toolTip40 = new ToolTip();
            toolTip40.AutoPopDelay = 3500;
            toolTip40.InitialDelay = 750;
            toolTip40.ReshowDelay = 500;
            toolTip40.ShowAlways = true;
            toolTip40.SetToolTip(this.btn_save_path, "Save this path as default");

            ToolTip toolTip41 = new ToolTip();
            toolTip41.AutoPopDelay = 3500;
            toolTip41.InitialDelay = 750;
            toolTip41.ReshowDelay = 500;
            toolTip41.ShowAlways = true;
            toolTip41.SetToolTip(this.btn_save_prio, "Save this priority as default");

            ToolTip toolTip42 = new ToolTip();
            toolTip42.AutoPopDelay = 3500;
            toolTip42.InitialDelay = 750;
            toolTip42.ReshowDelay = 500;
            toolTip42.ShowAlways = true;
            toolTip42.SetToolTip(this.btn_pause, "Pause/resume encoding");

            ToolTip toolTip43 = new ToolTip();
            toolTip43.AutoPopDelay = 3500;
            toolTip43.InitialDelay = 750;
            toolTip43.ReshowDelay = 500;
            toolTip43.ShowAlways = true;
            toolTip43.SetToolTip(this.btn_skip_main, "Abort current task and continue");

            ToolTip toolTip17 = new ToolTip();
            toolTip17.AutoPopDelay = 3500;
            toolTip17.InitialDelay = 750;
            toolTip17.ReshowDelay = 500;
            toolTip17.ShowAlways = true;
            toolTip17.SetToolTip(this.btn_help, "Open quick guide");

            ToolTip toolTip45 = new ToolTip();
            toolTip45.AutoPopDelay = 3500;
            toolTip45.InitialDelay = 750;
            toolTip45.ReshowDelay = 500;
            toolTip45.ShowAlways = true;
            toolTip45.SetToolTip(this.btn_multiple_presets, "Encode applying up to three presets");
        }

        private void button21_Click_1(object sender, EventArgs e)
        {
            folderBrowserDialog1.ShowNewFolderButton = true;

            if (folderBrowserDialog1.ShowDialog() == DialogResult.OK)
            {
                txt_path_main.Text = folderBrowserDialog1.SelectedPath;
                txt_path_main.BackColor = txt_parameters.BackColor;
                txt_path_mux.Text = folderBrowserDialog1.SelectedPath;
                txt_path_mux.BackColor = txt_parameters.BackColor;
                btn_reset_path.BackColor = txt_parameters.BackColor;
                btn_save_path.Enabled = true;
                if (listView1.Items.Count == 0) return;

                try
                {
                    File.WriteAllText(folderBrowserDialog1.SelectedPath + "\\" + "FFBatch_test.txt", "FFBatch_test");
                    System.Threading.Thread.Sleep(10);
                    File.Delete(folderBrowserDialog1.SelectedPath + "\\" + "FFBatch_test.txt");
                }
                catch (System.Exception excpt)
                {
                    MessageBox.Show("Access error. Path may not be writable: " + Environment.NewLine + excpt.Message, "Access denied to folder", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    this.InvokeEx(f => this.Cursor = Cursors.Arrow);
                    return;
                }
            }
        }

        private void textBox3_DoubleClick(object sender, EventArgs e)
        {
            txt_path_main.Text = ".\\FFBatch";
            txt_path_main.BackColor = this.BackColor;
            txt_path_mux.Text = ".\\FFBatch";
            txt_path_mux.BackColor = this.BackColor;
            btn_save_path.Enabled = true;
        }

        private void chk_vol_CheckedChanged(object sender, EventArgs e)
        {
            if (chk_vol.Checked == true)
            {
                vol_ch.Enabled = true;
                vol_ch.BackColor = Color.LightYellow;
            }
            else
            {
                vol_ch.Enabled = false;
                vol_ch.BackColor = Color.White;
            }
        }

        private void chk_shift_CheckedChanged(object sender, EventArgs e)
        {
            if (chk_shift.Checked == true)
            {
                Num_Shift.Enabled = true;
            }
            else
            {
                Num_Shift.Enabled = false;
            }
        }

        private void button22_Click(object sender, EventArgs e)
        {
            if (listView1.Items.Count == 0)
            {
                MessageBox.Show("File list is empty", "No files to be processed", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            //Validated list, start processing

            if (listView1.SelectedIndices.Count == 0)
            {
                listView1.Items[0].Selected = true;
                listView1.Items[0].Focused = true;
                listView1.Focus();
            }

            if (!File.Exists(listView1.SelectedItems[0].SubItems[1].Text + "\\" + listView1.SelectedItems[0].Text))
            {
                MessageBox.Show("File was not found: " + listView1.SelectedItems[0].Text, "Selected file not found", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            //Try preset

            String sel_test = listView1.SelectedItems[0].SubItems[1].Text + "\\" + listView1.SelectedItems[0].Text;
            this.Cursor = Cursors.WaitCursor;

            String file_prueba = "";

            file_prueba = sel_test;
            String fichero = Path.GetFileName(file_prueba);

            String destino_test = file_prueba.Substring(0, file_prueba.LastIndexOf('\\')) + "\\" + "FFBatch_wave";
            if (!Directory.Exists(destino_test))
            {
                Directory.CreateDirectory(destino_test);
            }

            Form frmAWait_Wave = new Form();
            frmAWait_Wave.Name = "Processing audio, please wait";
            frmAWait_Wave.Text = "Processing audio, please wait...";
            frmAWait_Wave.Height = 100;
            frmAWait_Wave.Width = 340;
            frmAWait_Wave.MinimizeBox = false;
            frmAWait_Wave.MaximizeBox = false;
            frmAWait_Wave.Icon = this.Icon;
            frmAWait_Wave.ControlBox = false;

            frmAWait_Wave.BackColor = this.BackColor;
            Button boton_cancel_wav = new Button();
            boton_cancel_wav.Parent = frmAWait_Wave;
            boton_cancel_wav.Left = 40;
            boton_cancel_wav.Top = 20;
            boton_cancel_wav.Width = 250;
            boton_cancel_wav.Height = 27;
            boton_cancel_wav.Text = "Cancel waveform creation";
            boton_cancel_wav.BackColor = frmAWait_Wave.BackColor;
            boton_cancel_wav.TextAlign = ContentAlignment.MiddleCenter;
            boton_cancel_wav.Click += new EventHandler(boton_cancel_wav_Click);
            frmAWait_Wave.StartPosition = FormStartPosition.CenterScreen;
            frmAWait_Wave.Show();

            new System.Threading.Thread(() =>
            {
                System.Threading.Thread.CurrentThread.IsBackground = true;
                /* run your code here */

                Process consola_pre = new Process();
                consola_pre.StartInfo.FileName = "ffmpeg.exe";
                consola_pre.StartInfo.Arguments = " -i " + "" + '\u0022' + file_prueba + '\u0022' + " -y " + "-filter_complex " + '\u0022' + "showwavespic=colors=#0000A0:s=800x180" + '\u0022' + " -frames:v 1" + " " + '\u0022' + destino_test + "\\" + System.IO.Path.GetFileNameWithoutExtension(file_prueba) + "." + "png" + '\u0022';
                consola_pre.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;

                consola_pre.Start();
                consola_pre.WaitForExit();
                this.InvokeEx(f => frmAWait_Wave.Close());

                if (consola_pre.ExitCode != 0)
                {
                    this.InvokeEx(f => f.Cursor = Cursors.Arrow);

                    MessageBox.Show("Waveform creation aborted", "Encoding test failed", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    this.InvokeEx(f => f.Cursor = Cursors.Arrow);

                    if (Directory.GetFiles(destino_test).Length == 0)
                    {
                        System.IO.Directory.Delete(destino_test);
                    }

                    return;
                }
                else
                {
                    this.InvokeEx(f => f.Cursor = Cursors.Arrow);
                    //Form wave image
                    Form frmAddWave = new Form();
                    frmAddWave.Name = "File audio waveform";
                    frmAddWave.Text = "Audio waveform";
                    frmAddWave.Icon = this.Icon;
                    frmAddWave.Height = 280;
                    frmAddWave.Width = 810;
                    frmAddWave.FormBorderStyle = FormBorderStyle.Fixed3D;
                    frmAddWave.MaximizeBox = false;
                    frmAddWave.MinimizeBox = false;
                    frmAddWave.BackColor = this.BackColor;

                    TextBox txt_titulo = new TextBox();
                    txt_titulo.Parent = frmAddWave;
                    txt_titulo.Top = 5;
                    txt_titulo.Left = 5;
                    txt_titulo.Width = 800;
                    txt_titulo.TextAlign = HorizontalAlignment.Center;
                    txt_titulo.BorderStyle = BorderStyle.None;
                    this.InvokeEx(f => txt_titulo.Text = listView1.SelectedItems[0].Text);
                    txt_titulo.BackColor = Control.DefaultBackColor;
                    txt_titulo.Enabled = false;
                    txt_titulo.BackColor = this.BackColor;

                    PictureBox pic_wave = new PictureBox();
                    pic_wave.SizeMode = PictureBoxSizeMode.Zoom;
                    pic_wave.Parent = frmAddWave;
                    pic_wave.Left = 0;
                    pic_wave.Top = 20;
                    pic_wave.BackColor = this.BackColor;
                    String pic_file = destino_test + "\\" + System.IO.Path.GetFileNameWithoutExtension(file_prueba) + "." + "png";
                    Image img;
                    using (var bmpTemp = new Bitmap(pic_file))
                    {
                        img = new Bitmap(bmpTemp);
                    }
                    pic_wave.Image = img;
                    if (File.Exists(pic_file))
                    {
                        File.Delete(pic_file);
                    }
                    if (Directory.Exists(destino_test))
                    {
                        int num = Directory.EnumerateFiles(destino_test, "*.*").Count();
                        if (num == 0)
                        {
                            Directory.Delete(destino_test);
                        }
                    }

                    pic_wave.Width = 800;
                    pic_wave.Height = 180;
                    pic_wave.BorderStyle = BorderStyle.FixedSingle;

                    Button boton_ok_wave = new Button();
                    boton_ok_wave.Parent = frmAddWave;
                    boton_ok_wave.Left = 330;
                    boton_ok_wave.Top = 205;
                    boton_ok_wave.Width = 120;
                    boton_ok_wave.Height = 27;
                    boton_ok_wave.Text = "Close window";
                    boton_ok_wave.BackColor = this.BackColor;
                    boton_ok_wave.Click += new EventHandler(boton_ok_wave_Click);

                    frmAddWave.StartPosition = FormStartPosition.CenterScreen;
                    frmAddWave.ShowDialog();
                    frmAddWave.Disposed += new EventHandler(frmAddWave_Disposed);
                }
            }).Start();
            //END try preset
        }

        private void boton_cancel_wav_Click(object sender, EventArgs e)
        {
            Process[] localByName = Process.GetProcessesByName("ffmpeg");
            foreach (Process p in localByName)
                p.Kill();
            System.Threading.Thread.Sleep(500);
            Process[] localByName2 = Process.GetProcessesByName("ffmpeg");
            foreach (Process p2 in localByName2)
                p2.Kill();

            //throw new NotImplementedException();
        }

        private void frmAddWave_Disposed(object sender, EventArgs e)
        {
            //throw new NotImplementedException();
        }


        private void Form1_FormClosing(object sender, FormClosingEventArgs e)
        {
            System.Drawing.Rectangle bounds = this.WindowState != FormWindowState.Normal ? this.RestoreBounds : this.DesktopBounds;
            Properties.Settings.Default.wLocation = bounds.Location;
            Properties.Settings.Default.Save();

            //Remember window and size

            String f_remember_w = String.Empty;
            if (is_portable == false)
            {
                f_remember_w = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_remember_w.ini";
            }
            else
            {
                f_remember_w = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_remember_w_portable.ini";
            }
            try
            {
                if (remember_w == false)
                {

                    if (File.Exists(f_remember_w)) File.Delete(f_remember_w);

                }
                else
                {
                    File.WriteAllText(f_remember_w, this.Height.ToString() + Environment.NewLine + this.Width.ToString());
                }
            }
            catch
            {
                MessageBox.Show("Unknown error changing setting.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            //End remember window

            if (remember_last_tab == true)
            {
                String f_remember = String.Empty;
                if (is_portable == false)
                {
                    f_remember = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_remember.ini";
                }
                else
                {
                    f_remember = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_remember_portable.ini";
                }

                System.IO.File.WriteAllText(f_remember, tabControl1.SelectedIndex.ToString());
            }

            if (btn_save_config.ImageKey != "Save_settings_39.png")
            {
                var a = MessageBox.Show("Settings changed. Save before closing?", "Settings not saved", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question);
                if (a == DialogResult.Cancel) e.Cancel = true;
                if (a == DialogResult.Yes) btn_save_config.PerformClick();
            }

            String save_path_queue = Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "saved_queue_temp.ffq";
            if (File.Exists(save_path_queue))
            {
                try
                {
                    File.Delete(save_path_queue);
                }
                catch
                {
                }
            }

            String temp_file = Path.Combine(Path.GetTempPath(), "temp_copy_clp.ff");
            if (File.Exists(temp_file))
            {
                try
                {
                    File.Delete(temp_file);
                }
                catch
                {
                }
            }
            String temp_concat = Path.Combine(Path.GetTempPath(), "concat.txt");
            if (File.Exists(temp_concat))
            {
                try
                {
                    File.Delete(temp_concat);
                }
                catch
                {

                }
            }

            clean_ffb_test();

            ////Clean file blank lines

            //String path3 = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_batch.ini";
            //if (File.Exists(path3))
            //{
            //    String path_temp = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_batch_temp.txt";

            //    int i2 = 0;

            //    foreach (string line in File.ReadLines(path3))
            //    {
            //        i2 = i2 + 1;

            //        if (line != String.Empty)
            //        {
            //            if (i2 < File.ReadAllLines(path3).Count())
            //            {
            //                File.AppendAllText(path_temp, line + Environment.NewLine);
            //            }
            //            else
            //            {
            //                File.AppendAllText(path_temp, line);
            //            }
            //        }
            //    }
            //    File.Delete(path3);
            //    File.Copy(System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_batch_temp.txt", path3);
            //    File.Delete(System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_batch_temp.txt");
            //}

            if (working == true)
            {
                if (paused == false)
                {
                    MessageBox.Show("Queue processing is in progress. Please abort queue before exiting application", "Encoding in progress", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    e.Cancel = true;
                    return;

                }
                else
                {
                    DialogResult a = MessageBox.Show("Queue processing is in pause mode. Do you want to abort queue and exit application?", "Abort paused enconding", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Warning);
                    if (a == DialogResult.No || a == DialogResult.Cancel)
                    {
                        e.Cancel = true;
                        return;
                    }
                    else
                    {

                        btn_pause.PerformClick();
                        this.Cursor = Cursors.WaitCursor;
                        Thread.Sleep(750);
                        //Abort
                        if (recording_scr == true)
                        {
                            Enable_Controls();
                            working = false;
                            recording_scr = false;

                            StreamWriter write_q = process_glob.StandardInput;
                            write_q.Write("q");
                            this.Cursor = Cursors.Arrow;
                            return;
                        }

                        if (multi_running == true)
                        {
                            working = false;
                            multi_running = false;
                            aborted = true;
                            cancelados_paralelos = true;

                            foreach (ListViewItem item in listView1.Items)
                            {
                                if (item.SubItems[5].Text != "Success" && item.SubItems[5].Text != "Ready" && item.SubItems[5].Text != "Queued")
                                {
                                    item.SubItems[5].Text = "Aborting";
                                }
                            }

                            foreach (Process proc in procs.Values)
                            {
                                cancelados_paralelos = true;
                                if (proc.StartInfo.Arguments != String.Empty)

                                {
                                    try
                                    {
                                        StreamWriter write_q = proc.StandardInput;
                                        write_q.Write("q");
                                    }
                                    catch (Exception exc)
                                    {
                                        MessageBox.Show("Error: " + exc.Message + " Some processes already finished or could not be aborted. Press Ok to retry.", "Queue abortion incomplete", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                    }
                                }
                            }
                            return;
                        }

                        if (process_glob.StartInfo.Arguments != String.Empty)
                        {
                            try
                            {
                                process_glob.Kill();
                                working = false;
                            }
                            catch
                            {

                            }
                        }
                        else
                        {
                            int num1 = 0;
                            Process[] localByName1 = Process.GetProcessesByName("ffmpeg");
                            num1 = localByName1.Length;
                            if (num1 == 1 && localByName1[0].Id == ff_ver_proc) return;

                            if (num1 > 0)
                            {
                                this.Cursor = Cursors.Arrow;
                                MessageBox.Show("FFmpeg processes still running were detected.", "FFmpeg processes warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            }
                        }
                        cancel_queue = true;
                        cancelados_paralelos = true;

                        if (process_glob.StartInfo.Arguments != String.Empty)
                        {
                            StreamWriter write_q = process_glob.StandardInput;
                            write_q.Write("q");
                            this.Cursor = Cursors.Arrow;
                            return;
                        }
                        //End abort
                    }
                }
                this.Cursor = Cursors.Arrow;
            }

            if (notifyIcon1 != null)
            {
                notifyIcon1.Visible = false;
            }
            //Child processes
            //List<Process> proc_child = new List<Process>();
            Boolean cleaned = true;
            foreach (Process proc in ProcessExtensions.GetChildProcesses(Process.GetCurrentProcess()))
            {
                try
                {
                    proc.Kill();
                }
                catch
                {
                    cleaned = false;
                }
            }
            if (cleaned == false) MessageBox.Show("Orphan encoding processes were found running in the background", "Orphan processes found", MessageBoxButtons.OK, MessageBoxIcon.Warning);

            //Remaining ffmpeg
            int num = 0;
            Process[] localByName = Process.GetProcessesByName("ffmpeg");
            num = localByName.Length;
            if (num == 1 && localByName[0].Id == ff_ver_proc) return;

            if (num > 0)
            {
                MessageBox.Show("FFmpeg processes running were detected.", "FFmpeg processes warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
            notifyIcon1.Dispose();
        }

        private void notifyIcon1_BalloonTipClicked(object sender, EventArgs e)
        {
            this.TopMost = true;
            this.TopMost = false;
            this.BringToFront();
            this.Focus();
            notifyIcon1.Visible = false;
        }

        private void label13_DoubleClick(object sender, EventArgs e)
        {
            txt_path_main.Text = ".\\FFBatch";
            txt_path_main.BackColor = Control.DefaultBackColor;
        }

        private void label13_Click(object sender, EventArgs e)
        {
            txt_path_main.Text = ".\\FFBatch";
            txt_path_main.BackColor = Control.DefaultBackColor;
        }

        private void tabControl1_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (tabControl1.SelectedIndex == 0)
            {
                lbl_size.Visible = true;
                lbl_dur_list.Visible = true;
                lbl_items.Visible = true;
                lbl_urls_time.Visible = false;
                lbl_search_url.Visible = false;
                txt_search_url.Visible = false;
                lbl_n_urls.Visible = false;

                groupBox_m3u.Visible = false;
                groupBox9.Visible = false;
                groupBox2.Visible = false;
                list_tracks.Visible = false;
                checkBox3.Visible = true;
                chkshut.Visible = true;
                combo_ext.Visible = false;
                label19.Visible = false;
                btn_set_mux_def.Visible = false;
                lbl_tr_n.Visible = false;

                groupBox15.Visible = false;
                label17.Visible = false;
                combo_item_lang_2.Visible = false;

                btn_clean_list.Visible = true;
                label13.Visible = true;
                txt_path_main.Visible = true;
                button21.Visible = true;
                chkshut.Visible = true;
                btn_pause.Visible = true;
                btn_mux.Visible = false;
                btn_extract.Visible = false;
                txt_track_format.Visible = false;
                //btn_mux_cancel.Visible = false;
                btn_del_track.Visible = false;
                btn_default_track.Visible = false;
                button23.Visible = false;
                pic_encode_param.Visible = false;
                lbl_mux_par.Visible = false;
                txt_track_param.Visible = false;
                btn_set_track_param.Visible = false;
                groupBox1.Visible = true;
                panel1.Visible = true;
                list_tracks.Visible = false;
                btn_add_tracks.Visible = false;
                btn_mux_job.Visible = false;
                btn_mux_show_jobs.Visible = false;
                lbl_mux_jobs.Visible = false;

                return;
            }

            if (tabControl1.SelectedIndex == 1)
            {
                lbl_size.Visible = true;
                lbl_tr_n.Visible = true;
                lbl_dur_list.Visible = true;
                lbl_items.Visible = true;
                lbl_urls_time.Visible = false;
                lbl_search_url.Visible = false;
                txt_search_url.Visible = false;
                lbl_n_urls.Visible = false;
                txt_search_url.Visible = false;
                groupBox_m3u.Visible = false;
                groupBox9.Visible = true;
                groupBox2.Visible = true;
                list_tracks.Visible = true;
                chkshut.Visible = true;
                btn_pause.Visible = true;

                checkBox3.Visible = false;
                btn_set_mux_def.Visible = true;
                btn_set_track_param.Visible = true;

                combo_ext.Visible = true;
                label19.Visible = true;
                groupBox15.Visible = false;
                label17.Visible = true;
                combo_item_lang_2.Visible = true;

                label13.Visible = false;
                txt_path_main.Visible = false;
                button21.Visible = false;

                lbl_mux_jobs.Visible = true;
                btn_mux.Visible = true;
                btn_add_tracks.Visible = true;
                btn_mux_job.Visible = true;
                btn_mux_show_jobs.Visible = true;
                btn_extract.Visible = true;
                txt_track_format.Visible = true;
                btn_del_track.Visible = true;
                btn_default_track.Visible = true;
                //btn_mux_cancel.Visible = true;
                btn_mux.Refresh();
                button23.Visible = true;
                pic_encode_param.Visible = true;
                lbl_mux_par.Visible = true;
                txt_track_param.Visible = true;
                btn_set_track_param.Visible = true;
                groupBox1.Visible = false;
                panel1.Visible = false;
                list_tracks.Visible = true;
                list_tracks.Refresh();
                txt_path_mux.Text = txt_path_main.Text;
                txt_path_mux.BackColor = txt_path_main.BackColor;

                int list_int = 0;
                if (listView1.Items.Count == listView2.Items.Count)
                {
                    foreach (ListViewItem item in listView1.Items)
                    {
                        if (listView2.Items[list_int].Text == item.SubItems[1].Text + "\\" + item.Text)
                        {
                            list_int = list_int + 1;
                        }
                    }

                    if (list_int == listView1.Items.Count)
                    {
                        return;
                    }
                }
                else
                {
                    if (listView1.Items.Count > 20)
                    {
                        var a = MessageBox.Show("Obtaining streams for " + listView1.Items.Count + " files can take a long time. Are you sure?", "Too many files to be parsed", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                        if (a == DialogResult.No)
                        {
                            tabControl1.SelectedIndex = 0;

                            return;
                        }
                        listView2.Clear();
                        add_to_tab_2();
                    }
                    else
                    {
                        listView2.Clear();
                        add_to_tab_2();
                        return;
                    }
                }

                listView2.Clear();
                add_to_tab_2();
            }

            if (tabControl1.SelectedIndex == 2)
            {
                lbl_mux_jobs.Visible = false;
                btn_add_tracks.Visible = false;
                btn_mux_job.Visible = false;
                btn_mux_show_jobs.Visible = false;
                lbl_tr_n.Visible = false;
                lbl_size.Visible = true;
                lbl_dur_list.Visible = true;
                lbl_items.Visible = true;
                lbl_urls_time.Visible = false;
                lbl_search_url.Visible = false;
                txt_search_url.Visible = false;
                lbl_n_urls.Visible = false;

                groupBox_m3u.Visible = false;
                groupBox9.Visible = false;
                groupBox2.Visible = false;
                list_tracks.Visible = false;
                groupBox15.Visible = true;
                chkshut.Visible = true;
                btn_pause.Visible = true;
                btn_set_mux_def.Visible = false;
                btn_extract.Visible = false;
                txt_track_format.Visible = false;
                btn_del_track.Visible = false;
                btn_default_track.Visible = false;
                btn_set_track_param.Visible = false;

                groupBox15.Visible = true;

                TB1.Visible = false;
                txt_hard_subs.Text = txt_parameters.Text;

                int list_int = 0;

                if (listView1.Items.Count == listView3.Items.Count)
                {
                    foreach (ListViewItem item in listView1.Items)
                    {
                        if (listView3.Items[list_int].Text == item.SubItems[1].Text + "\\" + item.Text)
                        {
                            list_int = list_int + 1;
                        }
                    }

                    if (list_int == listView1.Items.Count)
                    {
                        return;
                    }
                }
                else
                {
                    if (listView1.Items.Count > 1000)
                    {
                        var a = MessageBox.Show("Adding " + listView1.Items.Count + " files can take some time. Continue?", "Many files to be parsed", MessageBoxButtons.OKCancel, MessageBoxIcon.Question);
                        if (a == DialogResult.Cancel)
                        {
                            tabControl1.SelectedIndex = 0;

                            return;
                        }
                        listView3.Items.Clear();
                        add_to_tab_3();
                    }
                    else
                    {
                        listView3.Items.Clear();
                        add_to_tab_3();
                        return;
                    }
                }

                listView3.Items.Clear();
                add_to_tab_3();
            }

            if (tabControl1.SelectedIndex == 3)
            {
                lbl_mux_jobs.Visible = false;
                btn_add_tracks.Visible = false;
                btn_mux_job.Visible = false;
                btn_mux_show_jobs.Visible = false;
                lbl_size.Visible = false;
                lbl_tr_n.Visible = false;
                lbl_dur_list.Visible = false;
                lbl_items.Visible = false;
                groupBox15.Visible = false;
                list_tracks.Visible = false;
                groupBox_m3u.Visible = true;
                groupBox9.Visible = false;
                groupBox2.Visible = false;
                chkshut.Visible = true;
                btn_pause.Visible = true;
                lbl_urls_time.Visible = true;
                lbl_search_url.Visible = true;
                txt_search_url.Visible = true;
                lbl_n_urls.Visible = true;
                if (yt_chk == false)
                {
                    yt_chk = true;
                    youtube_dl_ver(); //youtube-dl version                    
                }
                if (txt_path_m3u.Text == "No path selected")
                {
                    txt_path_m3u.Text = System.IO.Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyVideos), "M3u8");
                }
            }
        }

        private void add_to_tab_3()

        {
            listView3.SmallImageList = listView1.SmallImageList;
            foreach (ListViewItem item in listView1.Items)
            {
                this.Cursor = Cursors.WaitCursor;
                ListViewItem elemento = new ListViewItem(item.SubItems[1].Text + "\\" + item.Text, 1);
                //Begin get file icon
                Icon iconForFile = SystemIcons.WinLogo;

                if (!elemento.Text.Contains("\\\\"))
                {
                    if (!imageList2.Images.ContainsKey(System.IO.Path.GetExtension(elemento.Text)))
                    {
                        iconForFile = System.Drawing.Icon.ExtractAssociatedIcon(elemento.Text);
                        this.InvokeEx(f => f.imageList2.Images.Add(System.IO.Path.GetExtension(elemento.Text), iconForFile));
                    }
                }

                if (!elemento.Text.Contains("\\\\"))
                {
                    elemento.ImageKey = System.IO.Path.GetExtension(elemento.Text);
                }
                else
                {
                    elemento.ImageIndex = 0;
                }
                listView3.Items.Add(elemento);
            }

            foreach (ListViewItem item in listView3.Items)
            {
                String is_srt = item.Text.Substring(item.Text.LastIndexOf("."));

                if (is_srt == ".srt")
                {
                    listView3.Items.RemoveAt(item.Index);
                }

                String is_Vobsub = item.Text.Substring(item.Text.LastIndexOf("."));

                if (is_Vobsub == ".idx" || is_Vobsub == ".sub")
                {
                    listView3.Items.RemoveAt(item.Index);
                }

                String is_ass = item.Text.Substring(item.Text.LastIndexOf("."));

                if (is_srt == ".ass")
                {
                    listView3.Items.RemoveAt(item.Index);
                }

                String subs_path = String.Empty;
                String Sub_File_SRT = String.Empty;
                String Sub_File_Vobsub = String.Empty;
                String Sub_File_ASS = String.Empty;

                if (txt_folder_subs.Text == String.Empty)
                {
                    Sub_File_SRT = item.Text.Substring(0, item.Text.LastIndexOf(".")) + ".srt";
                    Sub_File_Vobsub = item.Text.Substring(0, item.Text.LastIndexOf(".")) + ".idx";
                    Sub_File_ASS = item.Text.Substring(0, item.Text.LastIndexOf(".")) + ".ass";
                }
                else
                {
                    String path_sub = txt_folder_subs.Text;
                    Path.GetFileName(item.Text);
                    Sub_File_SRT = path_sub + "\\" + Path.GetFileName(item.Text).Substring(0, Path.GetFileName(item.Text).LastIndexOf(".")) + ".srt";
                    Sub_File_Vobsub = path_sub + "\\" + Path.GetFileName(item.Text).Substring(0, Path.GetFileName(item.Text).LastIndexOf(".")) + ".idx";
                    Sub_File_ASS = path_sub + "\\" + Path.GetFileName(item.Text).Substring(0, Path.GetFileName(item.Text).LastIndexOf(".")) + ".ass";
                }

                if (item.SubItems[0].Text.Contains("No subtitle for this file") == false)
                {
                    if (File.Exists(Sub_File_SRT))
                    {
                        item.SubItems.Add("SRT subtitle available");
                        item.SubItems.Add("und");

                        var a = TextFileEncodingDetector.DetectTextFileEncoding(Sub_File_SRT);
                        if (a != null)
                        {
                            String txt_enc = a.ToString().Replace("System.Text.", "");
                            item.SubItems.Add(txt_enc.Replace("Encoding", ""));
                        }
                        else
                        {
                            item.SubItems.Add("Unknown");
                        }
                        item.SubItems.Add("Yes");
                        item.SubItems.Add("Ready");
                    }

                    if (File.Exists(Sub_File_Vobsub))
                    {
                        item.SubItems.Add("VobSub IDX subtitle available");
                        item.SubItems.Add("und");

                        item.SubItems.Add("-");
                        item.SubItems.Add("Yes");
                        item.SubItems.Add("Ready");
                    }
                    if (File.Exists(Sub_File_ASS))
                    {
                        item.SubItems.Add("ASS subtitle available");
                        item.SubItems.Add("und");

                        var a = TextFileEncodingDetector.DetectTextFileEncoding(Sub_File_ASS);
                        if (a != null)
                        {
                            String txt_enc = a.ToString().Replace("System.Text.", "");
                            item.SubItems.Add(txt_enc.Replace("Encoding", ""));
                        }
                        else
                        {
                            item.SubItems.Add("Unknown");
                        }
                        item.SubItems.Add("Yes");
                        item.SubItems.Add("Ready");
                    }
                }

                if (!File.Exists(Sub_File_Vobsub) && !File.Exists(Sub_File_SRT) && !File.Exists(Sub_File_ASS))
                {
                    item.SubItems.Add("No subtitle for this file, double-click to locate");
                    item.SubItems.Add("-");
                    item.SubItems.Add("-");
                    item.SubItems.Add("-");
                    item.SubItems.Add("No Sub");
                }
            }
            Combo_sub_lang_mux.Text = "";
            this.Cursor = Cursors.Arrow;
        }

        private void ctm2_Opening_1(object sender, CancelEventArgs e)
        {
            if (listView2.SelectedItems.Count == 0)
            {
                e.Cancel = true;
                ct2_a.Enabled = false;
                ct2_v.Enabled = false;
                ct2_s.Enabled = false;
            }
            else
            {
                ct2_a.Enabled = true;
                ct2_v.Enabled = true;
                ct2_s.Enabled = true;
                combo_def_und_lang.Text = "Set language for undefined tracks";
            }
        }

        private void ct2_v_Click(object sender, EventArgs e)
        {
            Boolean has_video = false;
            Boolean stream_found = false;
            foreach (ListViewItem track_item in list_tracks.Items)
            {
                if (track_item.SubItems[2].Text.Contains("Video"))
                {
                    has_video = true;
                    MessageBox.Show("List already contains a video track", "Video track already present", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }
            }

            foreach (ListViewItem item in listView2.SelectedItems)
            {
                for (int i = 1; i < item.SubItems.Count; i++)
                {
                    if (item.SubItems[i].Text.Contains("Video"))
                    {
                        stream_found = true;

                        list_tracks.Items.Add(listView2.SelectedItems[0].Text, 0);
                        list_tracks.Items[list_tracks.Items.Count - 1].SubItems.Add((i - 1).ToString());

                        if (listView2.SelectedItems[0].SubItems[i].Text.Substring(0, 1) == "(")
                        {
                            list_tracks.Items[list_tracks.Items.Count - 1].SubItems.Add(listView2.SelectedItems[0].SubItems[i].Text.Substring(7, listView2.SelectedItems[0].SubItems[i].Text.Length - 7));
                        }
                        else
                        {
                            list_tracks.Items[list_tracks.Items.Count - 1].SubItems.Add(listView2.SelectedItems[0].SubItems[i].Text);
                        }

                        if (listView2.SelectedItems[0].SubItems[i].Text.Substring(0, 1) == "(")
                        {
                            list_tracks.Items[list_tracks.Items.Count - 1].SubItems.Add(listView2.SelectedItems[0].SubItems[i].Text.Substring(1, 3));
                        }
                        else
                        {
                            list_tracks.Items[list_tracks.Items.Count - 1].SubItems.Add(def_lang_und_tracks);
                        }

                        if (has_video == false)
                        {
                            list_tracks.Items[list_tracks.Items.Count - 1].SubItems.Add("Yes");
                        }
                        else
                        {
                            list_tracks.Items[list_tracks.Items.Count - 1].SubItems.Add("No");
                        }

                        list_tracks.Items[list_tracks.Items.Count - 1].SubItems.Add(def_mux_video_enc);
                    }
                    tracks_background();
                }

                foreach (ListViewItem track_item in list_tracks.Items)
                {
                    if (track_item.SubItems[3].Text.Contains("Video"))
                    {
                        list_tracks.Items.RemoveAt(track_item.Index);
                        list_tracks.Items.Insert(0, track_item);
                    }
                }

                if (stream_found == false)
                {
                    MessageBox.Show("File does not contain video streams", "No video found", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }

        private void ct2_a_Click(object sender, EventArgs e)
        {
            Boolean has_audio = false;
            foreach (ListViewItem track_item in list_tracks.Items)
            {
                if (track_item.SubItems[2].Text.Contains("Audio"))
                {
                    has_audio = true;
                }
            }

            foreach (ListViewItem item in listView2.SelectedItems)
            {
                Boolean stream_found = false;
                for (int i = 1; i < item.SubItems.Count; i++)
                {
                    if (item.SubItems[i].Text.Contains("Audio"))
                    {
                        stream_found = true;

                        list_tracks.Items.Add(listView2.SelectedItems[0].Text, 1);
                        list_tracks.Items[list_tracks.Items.Count - 1].SubItems.Add((i - 1).ToString());

                        if (listView2.SelectedItems[0].SubItems[i].Text.Substring(0, 1) == "(")
                        {
                            list_tracks.Items[list_tracks.Items.Count - 1].SubItems.Add(listView2.SelectedItems[0].SubItems[i].Text.Substring(7, listView2.SelectedItems[0].SubItems[i].Text.Length - 7));
                        }
                        else
                        {
                            list_tracks.Items[list_tracks.Items.Count - 1].SubItems.Add(listView2.SelectedItems[0].SubItems[i].Text);
                        }

                        if (listView2.SelectedItems[0].SubItems[i].Text.Substring(0, 1) == "(")
                        {
                            list_tracks.Items[list_tracks.Items.Count - 1].SubItems.Add(listView2.SelectedItems[0].SubItems[i].Text.Substring(1, 3));
                        }
                        else
                        {
                            list_tracks.Items[list_tracks.Items.Count - 1].SubItems.Add(def_lang_und_tracks);
                        }

                        if (has_audio == false)
                        {
                            list_tracks.Items[list_tracks.Items.Count - 1].SubItems.Add("Yes");
                        }
                        else
                        {
                            list_tracks.Items[list_tracks.Items.Count - 1].SubItems.Add("No");
                        }

                        list_tracks.Items[list_tracks.Items.Count - 1].SubItems.Add(def_mux_audio_enc);
                    }
                }

                if (stream_found == false)
                {
                    MessageBox.Show("File does not contain audio streams", "No audio found", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
            tracks_background();
        }

        private void ct2_s_Click(object sender, EventArgs e)
        {
            if (notifyIcon1 != null)
            {
                notifyIcon1.Dispose();
            }

            Boolean has_subs = false;
            foreach (ListViewItem track_item in list_tracks.Items)
            {
                if (track_item.SubItems[2].Text.Contains("Subtitle"))
                {
                    has_subs = true;
                }
            }

            foreach (ListViewItem item in listView2.SelectedItems)
            {
                Boolean stream_found = false;
                for (int i = 1; i < item.SubItems.Count; i++)
                {
                    if (item.SubItems[i].Text.Contains("Subtitle"))
                    {
                        stream_found = true;
                        list_tracks.Items.Add(listView2.SelectedItems[0].Text, 2);
                        list_tracks.Items[list_tracks.Items.Count - 1].SubItems.Add((i - 1).ToString());

                        if (listView2.SelectedItems[0].SubItems[i].Text.Substring(0, 1) == "(")
                        {
                            list_tracks.Items[list_tracks.Items.Count - 1].SubItems.Add(listView2.SelectedItems[0].SubItems[i].Text.Substring(7, listView2.SelectedItems[0].SubItems[i].Text.Length - 7));
                        }
                        else
                        {
                            list_tracks.Items[list_tracks.Items.Count - 1].SubItems.Add(listView2.SelectedItems[0].SubItems[i].Text);
                        }

                        if (listView2.SelectedItems[0].SubItems[i].Text.Substring(0, 1) == "(")
                        {
                            list_tracks.Items[list_tracks.Items.Count - 1].SubItems.Add(listView2.SelectedItems[0].SubItems[i].Text.Substring(1, 3));
                        }
                        else
                        {
                            list_tracks.Items[list_tracks.Items.Count - 1].SubItems.Add(def_lang_und_tracks);
                        }

                        if (has_subs == false)
                        {
                            list_tracks.Items[list_tracks.Items.Count - 1].SubItems.Add("Yes");
                        }
                        else
                        {
                            list_tracks.Items[list_tracks.Items.Count - 1].SubItems.Add("No");
                        }
                        if (item.SubItems[i].Text.Contains("dvd_subtitle") || item.SubItems[i].Text.Contains("hdmv_pgs_subtitle"))

                        {
                            list_tracks.Items[list_tracks.Items.Count - 1].SubItems.Add("copy");
                        }
                        else
                        {
                            list_tracks.Items[list_tracks.Items.Count - 1].SubItems.Add(def_mux_subs_enc);
                        }
                    }

                    foreach (ListViewItem track_item in list_tracks.Items)
                    {
                        if (track_item.SubItems[2].Text.Contains("Subtitle"))
                        {
                            list_tracks.Items.RemoveAt(track_item.Index);
                            list_tracks.Items.Insert(list_tracks.Items.Count, track_item);
                        }
                    }
                }

                if (stream_found == false)
                {
                    MessageBox.Show("No subtitles stream found", "No subtitles found", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
            tracks_background();
        }

        private void btn_mux_Click(object sender, EventArgs e)
        {
            Pg1.Focus();
            cancel_queue = false;
            Pg1.Text = "0" + System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator + "0%";

            foreach (ListViewItem file in list_tracks.Items)
            {
                if (!File.Exists(file.Text))
                {
                    MessageBox.Show("File was not found: " + file.Text, "One file in the track list was not found", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
            }

            if (list_tracks.Items.Count == 0)
            {
                MessageBox.Show("Tracks list is empty", "No files to be processed", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return;
            }

            Boolean video_track_in = false;
            foreach (ListViewItem tracks_item in list_tracks.Items)
            {
                if (tracks_item.SubItems[2].Text.Contains("Video"))
                {
                    video_track_in = true;
                }
            }

            if (video_track_in == false)
            {
                MessageBox.Show("A video track is required for muxing", "No video track found", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            String is_overw = String.Empty;
            if (txt_path_main.Text.Contains(".\\"))
            {
                if (txt_path_main.Text == ".\\")
                {
                    is_overw = Path.GetDirectoryName(list_tracks.Items[0].Text) + "\\" + Path.GetFileNameWithoutExtension(list_tracks.Items[0].Text) + "." + combo_ext.SelectedItem.ToString();
                }
                else
                {
                    is_overw = Path.GetDirectoryName(list_tracks.Items[0].Text) + txt_path_main.Text.Replace(".", String.Empty) + "\\" + Path.GetFileNameWithoutExtension(list_tracks.Items[0].Text) + "." + combo_ext.SelectedItem.ToString();
                }
            }

            if (is_overw == list_tracks.Items[0].Text)
            {
                MessageBox.Show("Overwriting is not supported. Change destination directory on main screen or double-click on the textbox to reset to default", "Overwriting not allowed", MessageBoxButtons.OK, MessageBoxIcon.Error);

                return;
            }

            DateTime time2;
            if (!DateTime.TryParse(ss_time_input.Text, out time2))
            {
                MessageBox.Show("Pre-input seeking selected in Batch processing tab is incorrect. Change it or reset it by double-clicking on it", "Pre-input seeking format error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            //Validated list, start processing
            //Pending duration

            if (dur_ok == false)
            {
                list_pending_dur.Items.Clear();
                foreach (ListViewItem item in listView1.Items)
                {
                    list_pending_dur.Items.Add((ListViewItem)item.Clone());
                }
                BG_Dur.RunWorkerAsync();
                return;
            }

            Disable_Controls();
            txt_remain.Text = "Time remaining: 00h:00m:00s";
            time_n_tasks = 0;
            timer_tasks.Start();
            timer_est_size.Start();

            cancel_queue = false;
            Pg1.Value = 0;

            pic_no_errors.Visible = false;
            pic_recording.Visible = false;
            pic_warnings.Visible = false;

            working = true;

            //Copy list of tracks for thread processing
            ListView list_proc = new ListView();
            foreach (ListViewItem item in list_tracks.Items)
            {
                list_proc.Items.Add((ListViewItem)item.Clone());
            }
            //End of copy list of tracks for thread processing

            Pg1.Maximum = list_proc.Items.Count;

            Double total_duration = 0;
            Double total_prog = 0;

            //Get specific track list video duration
            //Duration
            Boolean has_audio_for_image = false;
            Process probe = new Process();
            probe.StartInfo.FileName = System.IO.Path.Combine(Application.StartupPath, "ffprobe.exe");

            if (list_proc.Items[0].BackColor == Color.LightYellow)
            {
                foreach (ListViewItem item1 in list_proc.Items)
                {
                    if (item1.SubItems[2].Text.Contains("Audio"))
                    {
                        has_audio_for_image = true;
                    }
                }
                if (has_audio_for_image == false)
                {
                    MessageBox.Show("No audio found in the track list to mux with image", "Error muxing with image", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    working = false;
                    Enable_Controls();
                    return;
                }
                else
                {
                    probe.StartInfo.Arguments = "-v error -show_entries format=duration -sexagesimal -of default=noprint_wrappers=1:nokey=1 " + " -i " + '\u0022' + list_proc.Items[1].Text + '\u0022';
                }
            }
            else
            {
                probe.StartInfo.Arguments = "-v error -show_entries format=duration -sexagesimal -of default=noprint_wrappers=1:nokey=1 " + " -i " + '\u0022' + list_proc.Items[0].Text + '\u0022';
            }

            probe.StartInfo.RedirectStandardOutput = true;
            probe.StartInfo.UseShellExecute = false;
            probe.StartInfo.CreateNoWindow = true;
            probe.EnableRaisingEvents = true;
            probe.Start();

            String duracion = probe.StandardOutput.ReadLine();

            probe.WaitForExit();

            if (duracion != null)
            {
                if (duracion.Length >= 7)
                {
                    //total_duration = Convert.ToDouble(duracion.Substring(0, 7));
                    durat_n = TimeSpan.Parse(duracion).TotalSeconds;
                    total_duration = TimeSpan.Parse(duracion).TotalSeconds;
                }
            }
            else
            {
                total_duration = 0;
            }

            //End duration

            //End

            Pg1.Minimum = 0;
            Pg1.Maximum = 100;
            Pg1.Text = "0" + System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator + "0%";
            lbl_speed.Text = String.Empty;
            lbl_elapsed.Text = "Time elapsed: 00h:00m:00s";

            List<string> list_lines = new List<string>();
            String mux_ext = combo_ext.Text;

            String hw_decode = String.Empty;
            if (cb_hwdecode.SelectedItem.ToString() != "none")
            {
                hw_decode = "-hwaccel " + cb_hwdecode.SelectedItem.ToString();
            }

            //Save selected hw decoder

            String path2 = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_hw_dcd.ini";
            String txt_hw_dcd = cb_hwdecode.SelectedItem.ToString();
            if (txt_hw_dcd != "none")
            {
                File.WriteAllText(path2, txt_hw_dcd);
            }
            else
            {
                if (File.Exists(path2)) File.Delete(path2);
            }

            //End save hw decoder

            new System.Threading.Thread(() =>
            {
                System.Threading.Thread.CurrentThread.IsBackground = true;
                /* run your code here */

                String remain_time = "0";

                //this.InvokeEx(f => f.pg_current.Value = 0);
                //this.InvokeEx(f => f.pg_current.Refresh());

                String ffm = System.IO.Path.Combine(Application.StartupPath, "ffmpeg.exe");

                String file = list_proc.Items[0].Text;
                String fullPath = file;
                String destino = "";

                if (txt_path_main.Text.Contains(".\\"))
                {
                    destino = file.Substring(0, fullPath.LastIndexOf('\\')) + txt_path_main.Text.Replace(".", String.Empty);
                }
                else
                {
                    destino = txt_path_main.Text;
                }

                if (!Directory.Exists(destino))
                {
                    Directory.CreateDirectory(destino);
                }

                //Create joint inputs variable
                String inputs = String.Empty;
                foreach (ListViewItem input_item in list_proc.Items)
                {
                    if (input_item.SubItems[2].Text.Contains("Subtitle") && !input_item.SubItems[2].Text.Contains("hdmv_pgs") && !input_item.SubItems[2].Text.Contains("dvd_subtitle"))
                    {
                        inputs = inputs + " -sub_charenc UTF-8" + " -i " + '\u0022' + input_item.Text + '\u0022';
                    }
                    else
                    {
                        if (input_item.BackColor != Color.LightYellow)
                        {
                            inputs = inputs + " -i " + '\u0022' + input_item.Text + '\u0022';
                        }
                        else
                        {
                            String ext_image = Path.GetExtension(list_proc.Items[0].Text);

                            //Attempt to extract frame as image
                            Process proc_img = new System.Diagnostics.Process();
                            String ffm_img = Path.Combine(Application.StartupPath, "ffmpeg.exe");

                            String file_img = Path.GetFullPath(list_proc.Items[0].Text);
                            String fullPath_img = file_img;
                            String AppParam_img = "";

                            if (ext_image != ".jpg" && ext_image != ".jpeg" && ext_image != ".png" && ext_image != ".gif" && ext_image != ".bmp" && ext_image != ".tiff" && ext_image != ".psd")
                            {
                                AppParam_img = " -ss " + ss_time_input.Text + " -i " + "" + '\u0022' + file_img + '\u0022' + " -vframes 1 -f image2" + " -qscale:v 2" + " -vf scale=1280:-2" + " -y " + '\u0022' + destino + "\\" + System.IO.Path.GetFileNameWithoutExtension(file_img) + "." + "jpg" + '\u0022';
                            }
                            else
                            {
                                AppParam_img = " -i " + "" + '\u0022' + file_img + '\u0022' + " -qscale:v 2" + " -vf scale=1280:-2" + " -y " + '\u0022' + destino + "\\" + System.IO.Path.GetFileNameWithoutExtension(file_img) + "." + "jpg" + '\u0022';
                            }
                            proc_img.StartInfo.RedirectStandardOutput = false;
                            proc_img.StartInfo.RedirectStandardError = false;
                            proc_img.StartInfo.UseShellExecute = true;
                            proc_img.StartInfo.CreateNoWindow = false;
                            proc_img.EnableRaisingEvents = false;
                            proc_img.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;

                            proc_img.StartInfo.FileName = ffm_img;
                            proc_img.StartInfo.Arguments = AppParam_img;

                            proc_img.Start();
                            proc_img.WaitForExit();
                            if (proc_img.ExitCode == 0)
                            {
                                String extracted_img = "" + '\u0022' + destino + "\\" + System.IO.Path.GetFileNameWithoutExtension(file_img) + ".jpg" + '\u0022' + "";
                                inputs = inputs + " -i " + extracted_img;
                            }
                            else
                            {
                                MessageBox.Show("Error extracting image from video track.", "Error using as image for audio", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                Enable_Controls();
                                working = false;
                                return;
                            }
                            //End extract frame as image
                        }
                    }
                }
                //End create joint inputs variable

                //Create mapping inputs variable
                String input_map = String.Empty;
                //Add video track, it must be first
                if (list_proc.Items[0].BackColor == Color.LightYellow)
                {
                    //Video track is an still image

                    //Attempt to extract first frame from video track as image

                    input_map = input_map + " -map 0:0" + " -c:v libx264 -r 1 -crf 29 -preset veryfast -x264-params keyint=1 -pix_fmt yuv420p";
                }
                else
                {
                    input_map = input_map + " -map 0:" + list_proc.Items[0].SubItems[1].Text + " -c:v " + list_proc.Items[0].SubItems[5].Text + " -metadata:s:v:0 language=" + list_proc.Items[0].SubItems[3].Text;
                }

                int int_auds = 0;
                int i_subs = 0;

                for (int i = 1; i < list_tracks.Items.Count; i++)

                {
                    //Audio tracks
                    if (list_proc.Items[i].SubItems[2].Text.Contains("Audio"))
                    {
                        String is_default = String.Empty;
                        if (list_proc.Items[i].SubItems[4].Text == "Yes")
                        {
                            is_default = "-disposition:a:" + (int_auds).ToString() + " default";
                        }
                        else
                        {
                            is_default = "-disposition:a:" + (int_auds).ToString() + " 0";
                        }
                        String track_codec = " -c:a copy ";
                        if (list_proc.Items[i].SubItems[5].Text != "copy")
                        {
                            track_codec = " -c:a:" + int_auds + " " + list_proc.Items[i].SubItems[5].Text;
                        }
                        input_map = input_map + " -map " + (i).ToString() + ":" + list_proc.Items[i].SubItems[1].Text + track_codec + " -metadata:s:a:" + (int_auds).ToString() + " language=" + list_proc.Items[i].SubItems[3].Text + " " + is_default;
                        int_auds = int_auds + 1;
                    }
                }

                for (int i = 1; i < list_tracks.Items.Count; i++)

                {
                    //Subtitle tracks
                    if (list_proc.Items[i].SubItems[2].Text.Contains("Subtitle"))
                    {
                        String is_default = String.Empty;
                        if (list_proc.Items[i].SubItems[4].Text == "Yes")
                        {
                            is_default = "-disposition:s:" + (i_subs).ToString() + " default";
                        }
                        else
                        {
                            is_default = "-disposition:s:" + (i_subs).ToString() + " 0";
                        }

                        input_map = input_map + " -map " + (i).ToString() + ":" + list_proc.Items[i].SubItems[1].Text + " -c:s " + list_proc.Items[i].SubItems[5].Text + " -metadata:s:s:" + (i_subs).ToString() + " language=" + list_proc.Items[i].SubItems[3].Text + " " + is_default;

                        i_subs = i_subs + 1;
                    }
                }

                String AppParam = String.Empty;


                if (list_proc.Items[0].BackColor == Color.LightYellow)
                {
                    AppParam = hw_decode + " -loop 1 -r 6 " + inputs + input_map + " -shortest " + "-y " + '\u0022' + destino + "\\" + System.IO.Path.GetFileNameWithoutExtension(file) + "." + mux_ext + '\u0022';
                }
                else
                {
                    AppParam = hw_decode + " " + inputs + input_map + " -y " + '\u0022' + destino + "\\" + System.IO.Path.GetFileNameWithoutExtension(file) + "." + mux_ext + '\u0022';
                }

                if (!Directory.Exists(destino))
                {
                    Directory.CreateDirectory(destino);
                }

                process_glob.StartInfo.FileName = ffm;
                process_glob.StartInfo.Arguments = AppParam;
                valid_prog = false;

                //this.InvokeEx(f => f.pg_current.Value = 0);
                //this.InvokeEx(f => f.pg_current.Refresh());

                process_glob.StartInfo.RedirectStandardOutput = true;
                process_glob.StartInfo.RedirectStandardError = true;
                process_glob.StartInfo.RedirectStandardInput = true;
                process_glob.StartInfo.UseShellExecute = false;
                process_glob.StartInfo.CreateNoWindow = true;
                process_glob.EnableRaisingEvents = true;

                process_glob.Start();

                System.Threading.Thread.Sleep(50);
                combo_prio.Invoke(new MethodInvoker(delegate
                {
                    if (combo_prio.SelectedIndex != 2)
                    {
                        Change_mem_prio();
                    }

                }));

                valid_prog = true;

                String err_txt = "";
                Double interval = 0;

                while (!process_glob.StandardError.EndOfStream)
                {
                    err_txt = process_glob.StandardError.ReadLine();
                    list_lines.Add(err_txt);

                    Decimal est_bitrate = 0;
                    Decimal est_size = 0;

                    if (err_txt.Contains("time=") && err_txt.Contains("time=-") == false)
                    {
                        total_prog = durat_n;
                        int start_time_index = err_txt.IndexOf("time=") + 5;
                        Double sec_prog = TimeSpan.Parse(err_txt.Substring(start_time_index, 8)).TotalSeconds;
                        Double percent = (sec_prog * 100 / durat_n);

                        total_prog = total_prog + (sec_prog - interval);
                        interval = sec_prog;
                        int percent2 = Convert.ToInt32(percent);

                        if (percent2 <= 100)
                        {
                            //this.InvokeEx(f => f.pg_current.Value = percent2);

                            //this.InvokeEx(f => f.//textBox4.Text = (percent2).ToString() + "%");

                            this.InvokeEx(f => f.Pg1.Value = percent2);
                            this.InvokeEx(f => f.Pg1.Refresh());
                            if (Math.Round(percent, 1).ToString().Contains(".") || Math.Round(percent, 1).ToString().Contains(","))
                            {
                                this.InvokeEx(f => f.Pg1.Text = Math.Round(percent, 1).ToString() + "%");
                            }
                            else
                            {
                                this.InvokeEx(f => f.Pg1.Text = Math.Round(percent, 1).ToString() + System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator + "0" + "%");
                            }
                            //this.InvokeEx(f => f.textBox5.Text = (percent2).ToString() + "%");

                            this.InvokeEx(f => TaskbarProgress.SetValue(this.Handle, Pg1.Value, Pg1.Maximum));
                        }

                        //Estimated remaining time

                        remain_time = err_txt.Substring(err_txt.LastIndexOf("speed=") + 6, err_txt.Length - err_txt.LastIndexOf("speed=") - 6);
                        if (time_est_size % 3 == 0) this.InvokeEx(f => f.lbl_speed.Text = "Speed: " + remain_time);
                        remain_time = remain_time.Replace("x", String.Empty);
                        Double timing1 = 0;

                        if (System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator == ",")
                        {
                            timing1 = Math.Round(Double.Parse(remain_time.Replace(".", ",")), 2);
                        }
                        else
                        {
                            timing1 = Math.Round(Double.Parse(remain_time), 2);
                        }
                        Decimal timing = (decimal)timing1;
                        Decimal total_dur_dec = Convert.ToDecimal(interval);
                        Decimal total_prog_dec = Convert.ToDecimal(total_prog);

                        Decimal remain_secs = 0;
                        if (timing > 0)
                        {
                            remain_secs = (decimal)(total_prog_dec - total_dur_dec) / timing;
                        }

                        if (remain_secs > 60)
                        {
                            remain_secs = remain_secs + 60;
                        }
                        String remain_from_secs = "";

                        TimeSpan t = TimeSpan.FromSeconds(Convert.ToDouble(remain_secs));
                        remain_from_secs = string.Format("{0:D2}h:{1:D2}",
                           t.Hours,
                          t.Minutes);

                        if (remain_secs >= 3600)
                        {
                            this.InvokeEx(f => f.txt_remain.Text = "Time remaining: " + remain_from_secs + " min");
                        }

                        if (remain_secs < 3600 && remain_secs >= 600)
                        {
                            this.InvokeEx(f => f.txt_remain.Text = "Time remaining: " + remain_from_secs.Substring(remain_from_secs.LastIndexOf(":") + 1, 2) + " minutes");
                        }
                        if (remain_secs < 600 && remain_secs >= 120)
                        {
                            this.InvokeEx(f => f.txt_remain.Text = "Time remaining: " + remain_from_secs.Substring(remain_from_secs.LastIndexOf(":") + 2, 1) + " minutes");
                        }

                        if (remain_secs <= 59)
                        {
                            this.InvokeEx(f => f.txt_remain.Text = "Time remaining: " + Convert.ToInt16(Math.Abs(remain_secs)) + " seconds");
                        }

                        //End remaining time

                        //Estimated size and bitrate

                        String read_size = String.Empty;
                        if (err_txt.Contains("size=") && (time_est_size % 2 == 0))
                        {
                            int size_index = err_txt.IndexOf("size=") + 5;
                            read_size = err_txt.Substring(size_index, 8);
                            //est_bitrate = (Math.Round(Convert.ToDecimal(read_size) * 8 / Convert.ToDecimal(sec_prog), 0));
                            if (Convert.ToDecimal(sec_prog) != 0)
                            {
                                est_bitrate = (Math.Round(Convert.ToDecimal(read_size) * 8 / Convert.ToDecimal(sec_prog), 0));
                            }
                            else
                            {
                                est_bitrate = 0;
                            }

                            if (Convert.ToDecimal(read_size) > 1 && time_n_tasks > 1)
                            {
                                if (est_bitrate < 9999)
                                {
                                    this.InvokeEx(f => f.lbl_bitrate.Text = "Avg. bitrate: " + est_bitrate + " Kb/s");
                                }
                                else
                                {
                                    this.InvokeEx(f => f.lbl_bitrate.Text = "Avg. bitrate: " + (Math.Round(est_bitrate / 1000, 0)) + " Mb/s");
                                }
                                //Estimated size
                                est_size = Convert.ToDecimal(durat_n) * est_bitrate / 8;

                                if (est_size > 1000000)
                                {
                                    this.InvokeEx(f => f.lbl_est_size.Text = "Estimated size: " + (Math.Round(est_size / 1000000, 1)).ToString() + " GB");
                                }
                                else
                                {
                                    if (est_size > 0) this.InvokeEx(f => f.lbl_est_size.Text = "Estimated size: " + (Math.Round(est_size / 1000, 0)).ToString() + " MB");
                                }
                            }
                        }
                    }
                }
                process_glob.WaitForExit();
                this.InvokeEx(f => f.Pg1.Value = 100);
                this.InvokeEx(f => f.Pg1.Text = "100%");
                this.InvokeEx(f => f.Pg1.Refresh());

                process_glob.StartInfo.Arguments = String.Empty;
                this.InvokeEx(f => f.lbl_speed.Text = String.Empty);
                this.InvokeEx(f => TaskbarProgress.SetState(this.Handle, TaskbarProgress.TaskbarStates.NoProgress));
                this.InvokeEx(f => f.lbl_est_size.Text = String.Empty);
                this.InvokeEx(f => f.lbl_bitrate.Text = String.Empty);


                list_lines.Add("");
                list_lines.Add("---------------------End of " + Path.GetFileName(file) + " log-------------------------------");
                list_lines.Add("");

                working = false;
                //
                if (no_save_logs == false)
                {
                    string[] array_err = list_lines.ToArray();
                    String path = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_batch.log";

                    System.IO.StreamWriter SaveFile = new System.IO.StreamWriter(path);
                    SaveFile.WriteLine("FFmpeg log sesion: " + System.DateTime.Now);
                    SaveFile.WriteLine("-------------------------------");
                    foreach (String item in array_err)
                    {
                        SaveFile.WriteLine(item);
                    }
                    SaveFile.Close();

                    File.AppendAllText(path, "-----------------------");
                    File.AppendAllText(path, Environment.NewLine + "END OF LOG FILE");
                    System.IO.FileInfo fileInfo = new System.IO.FileInfo(path);

                    var bytes = fileInfo.Length;

                    var kilobytes = (double)bytes / 1024;
                    var megabytes = kilobytes / 1024;
                    var gigabytes = megabytes / 1024;

                    //Format size view
                    String size = "";
                    String separator = ".";

                    if (bytes > 1000000000)
                    {
                        if (gigabytes.ToString().Contains("."))
                        {
                            separator = ".";
                        }
                        else
                        {
                            separator = ",";
                        }

                        String gigas = gigabytes.ToString();
                        if (gigas.Length >= 5)
                        {
                            gigas = gigas.Substring(0, gigas.LastIndexOf(separator) + 3);
                            size = (gigas + " GB");
                        }
                        else
                        {
                            size = (gigas + " GB");
                        }
                    }

                    if (bytes >= 1048576 && bytes <= 1000000000)
                    {
                        if (megabytes.ToString().Contains("."))
                        {
                            separator = ".";
                        }
                        else
                        {
                            separator = ",";
                        }
                        String megas = megabytes.ToString();
                        if (megas.Length > 5)
                        {
                            megas = megas.Substring(0, megas.LastIndexOf(separator));
                            size = (megas + " MB");
                        }
                        else
                        {
                            size = (megas + " MB");
                        }
                    }

                    if (bytes >= 1024 && bytes < 1048576)

                    {
                        if (kilobytes.ToString().Contains("."))
                        {
                            separator = ".";
                        }
                        else
                        {
                            separator = ",";
                        }

                        String kbs = kilobytes.ToString();
                        if (kbs.Length >= 5)
                        {
                            kbs = kbs.Substring(0, kbs.LastIndexOf(separator));
                            size = (kbs + " KB");
                        }
                        else
                        {
                            size = (kbs + " KB");
                        }
                    }
                    if (bytes > -1 && bytes < 1024)
                    {
                        String bits = bytes.ToString();
                        size = (bits + " Bytes");
                    }

                    //End Format size view
                    File.AppendAllText(path, Environment.NewLine + "LOG SIZE: " + size);

                    //End save log
                }

                Enable_Controls();
                timer_est_size.Stop();
                time_est_size = 0;

                if (process_glob.ExitCode == 0 && cancel_queue == false)
                {
                    if (chkshut.Checked)
                    {
                        this.InvokeEx(f => f.groupBox2.Enabled = true);
                        foreach (Control ct in groupBox2.Controls)
                        {
                            this.InvokeEx(f => ct.Enabled = false);
                        }
                        auto_shut();
                        return;
                    }

                    //End shutdown check
                    else
                    {
                        if (play_on_end == true) play_end();
                        if (Form.ActiveForm == null)
                        {
                            notifyIcon1.Visible = true;
                            notifyIcon1.BalloonTipText = "FFmpeg Batch multiplexing successfully completed";
                            notifyIcon1.BalloonTipIcon = ToolTipIcon.Info;
                            notifyIcon1.BalloonTipTitle = "Multiplexing complete";
                            notifyIcon1.ShowBalloonTip(0);
                        }

                        if (checkBox3.Checked)
                        {
                            if (Directory.GetFiles(destino).Length != 0)
                            {
                                destino = destino.Replace("\\\\", "\\");
                                Process open_processed = new Process();
                                open_processed.StartInfo.FileName = "explorer.exe";
                                open_processed.StartInfo.Arguments = '\u0022' + destino + '\u0022';
                                open_processed.Start();
                            }
                            else
                            {
                                if (Directory.Exists(destino))
                                {
                                    System.IO.Directory.Delete(destino);
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (process_glob.ExitCode == 0)
                    {
                        this.InvokeEx(f => f.Pg1.Text = "100%");
                        this.InvokeEx(f => MessageBox.Show("Multiplexing aborted", "Aborted", MessageBoxButtons.OK, MessageBoxIcon.Error));
                    }
                    else
                    {
                        this.InvokeEx(f => f.Pg1.Text = "100%");
                        Boolean unsupported = false;
                        foreach (String lin in list_lines)
                        {
                            if (lin.Contains("Could not write header")) unsupported = true;
                        }
                        if (unsupported == true) this.InvokeEx(f => MessageBox.Show("Multiplexing failed: " + Environment.NewLine + Environment.NewLine + "Possibly incompatible container for selected tracks" + Environment.NewLine + Environment.NewLine + "You can check log file on main tab for more error information", "Error multiplexing", MessageBoxButtons.OK, MessageBoxIcon.Error));
                        else this.InvokeEx(f => MessageBox.Show("Multiplexing failed: " + Environment.NewLine + Environment.NewLine + err_txt.TrimStart() + Environment.NewLine + Environment.NewLine + "You can check log file on main tab for more error information", "Error multiplexing", MessageBoxButtons.OK, MessageBoxIcon.Error));
                    }
                }
            }).Start();
        }

        private void ct2_all_Click(object sender, EventArgs e)
        {
            if (list_tracks.Items.Count == 0)
            {
                tracks_empty = true;
            }
            else
            {
                tracks_empty = false;
            }

            foreach (ListViewItem item in listView2.SelectedItems)
            {
                if (item.SubItems[1].Text == "No usable streams found")
                {
                    MessageBox.Show("File does not contain usable streams", "No streams found", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }

                for (int i = 1; i < item.SubItems.Count; i++)
                {
                    //Video
                    Boolean has_video = false;
                    foreach (ListViewItem track_item in list_tracks.Items)
                    {
                        if (track_item.SubItems[2].Text.Contains("Video"))
                        {
                            has_video = true;
                        }
                    }

                    if (item.SubItems[i].Text.Contains("Video") && has_video == false)
                    {
                        list_tracks.Items.Add(listView2.SelectedItems[0].Text, 0);

                        list_tracks.Items[list_tracks.Items.Count - 1].SubItems.Add((i - 1).ToString());

                        if (listView2.SelectedItems[0].SubItems[i].Text.Substring(0, 1) == "(")
                        {
                            list_tracks.Items[list_tracks.Items.Count - 1].SubItems.Add(listView2.SelectedItems[0].SubItems[i].Text.Substring(7, listView2.SelectedItems[0].SubItems[i].Text.Length - 7));
                        }
                        else
                        {
                            list_tracks.Items[list_tracks.Items.Count - 1].SubItems.Add(listView2.SelectedItems[0].SubItems[i].Text);
                        }

                        if (listView2.SelectedItems[0].SubItems[i].Text.Substring(0, 1) == "(")
                        {
                            list_tracks.Items[list_tracks.Items.Count - 1].SubItems.Add(listView2.SelectedItems[0].SubItems[i].Text.Substring(1, 3));
                        }
                        else
                        {
                            list_tracks.Items[list_tracks.Items.Count - 1].SubItems.Add(def_lang_und_tracks);
                        }

                        if (has_video == false)
                        {
                            list_tracks.Items[list_tracks.Items.Count - 1].SubItems.Add("Yes");
                        }
                        else
                        {
                            list_tracks.Items[list_tracks.Items.Count - 1].SubItems.Add("No");
                        }
                        list_tracks.Items[list_tracks.Items.Count - 1].SubItems.Add(def_mux_video_enc);
                    }

                    foreach (ListViewItem track_item in list_tracks.Items)
                    {
                        if (track_item.SubItems[2].Text.Contains("Video"))
                        {
                            list_tracks.Items.RemoveAt(track_item.Index);
                            list_tracks.Items.Insert(0, track_item);
                        }
                    }

                    // Audio
                    Boolean has_audio = false;
                    foreach (ListViewItem track_item in list_tracks.Items)
                    {
                        if (track_item.SubItems[2].Text.Contains("Audio"))
                        {
                            has_audio = true;
                        }
                    }

                    if (item.SubItems[i].Text.Contains("Audio"))
                    {
                        list_tracks.Items.Add(listView2.SelectedItems[0].Text, 1);
                        list_tracks.Items[list_tracks.Items.Count - 1].SubItems.Add((i - 1).ToString());

                        if (listView2.SelectedItems[0].SubItems[i].Text.Substring(0, 1) == "(")
                        {
                            list_tracks.Items[list_tracks.Items.Count - 1].SubItems.Add(listView2.SelectedItems[0].SubItems[i].Text.Substring(7, listView2.SelectedItems[0].SubItems[i].Text.Length - 7));
                        }
                        else
                        {
                            list_tracks.Items[list_tracks.Items.Count - 1].SubItems.Add(listView2.SelectedItems[0].SubItems[i].Text);
                        }

                        if (listView2.SelectedItems[0].SubItems[i].Text.Substring(0, 1) == "(")
                        {
                            list_tracks.Items[list_tracks.Items.Count - 1].SubItems.Add(listView2.SelectedItems[0].SubItems[i].Text.Substring(1, 3));
                        }
                        else
                        {
                            list_tracks.Items[list_tracks.Items.Count - 1].SubItems.Add(def_lang_und_tracks);
                        }

                        if (has_audio == false)
                        {
                            list_tracks.Items[list_tracks.Items.Count - 1].SubItems.Add("Yes");
                        }
                        else
                        {
                            list_tracks.Items[list_tracks.Items.Count - 1].SubItems.Add("No");
                        }
                        list_tracks.Items[list_tracks.Items.Count - 1].SubItems.Add(def_mux_audio_enc);
                    }

                    //Subtitles

                    Boolean has_subs = false;
                    foreach (ListViewItem track_item in list_tracks.Items)
                    {
                        if (track_item.SubItems[2].Text.Contains("Subtitle"))
                        {
                            has_subs = true;
                        }
                    }

                    if (item.SubItems[i].Text.Contains("Subtitle"))
                    {
                        list_tracks.Items.Add(listView2.SelectedItems[0].Text, 2);
                        list_tracks.Items[list_tracks.Items.Count - 1].SubItems.Add((i - 1).ToString());

                        if (listView2.SelectedItems[0].SubItems[i].Text.Substring(0, 1) == "(")
                        {
                            list_tracks.Items[list_tracks.Items.Count - 1].SubItems.Add(listView2.SelectedItems[0].SubItems[i].Text.Substring(7, listView2.SelectedItems[0].SubItems[i].Text.Length - 7));
                        }
                        else
                        {
                            list_tracks.Items[list_tracks.Items.Count - 1].SubItems.Add(listView2.SelectedItems[0].SubItems[i].Text);
                        }

                        if (listView2.SelectedItems[0].SubItems[i].Text.Substring(0, 1) == "(")
                        {
                            list_tracks.Items[list_tracks.Items.Count - 1].SubItems.Add(listView2.SelectedItems[0].SubItems[i].Text.Substring(1, 3));
                        }
                        else if (listView2.SelectedItems[0].SubItems[i].Text.Substring(3, 1) == ")")
                        {
                            list_tracks.Items[list_tracks.Items.Count - 1].SubItems.Add(listView2.SelectedItems[0].SubItems[i].Text.Substring(0, 3));
                        }
                        else
                        {
                            list_tracks.Items[list_tracks.Items.Count - 1].SubItems.Add(def_lang_und_tracks);
                        }

                        if (has_subs == false)
                        {
                            list_tracks.Items[list_tracks.Items.Count - 1].SubItems.Add("Yes");
                        }
                        else
                        {
                            list_tracks.Items[list_tracks.Items.Count - 1].SubItems.Add("No");
                        }
                        if (item.SubItems[i].Text.Contains("dvd_subtitle") || item.SubItems[i].Text.Contains("hdmv_pgs_subtitle"))

                        {
                            list_tracks.Items[list_tracks.Items.Count - 1].SubItems.Add("copy");
                        }
                        else
                        {
                            list_tracks.Items[list_tracks.Items.Count - 1].SubItems.Add(def_mux_subs_enc);
                        }
                    }

                    foreach (ListViewItem track_item in list_tracks.Items)
                    {
                        if (track_item.SubItems[2].Text.Contains("Subtitle"))
                        {
                            list_tracks.Items.RemoveAt(track_item.Index);
                            list_tracks.Items.Insert(list_tracks.Items.Count, track_item);
                        }
                    }
                }
            }
            lbl_tr_n.Text = "Tracks: " + list_tracks.Items.Count.ToString();
            tracks_background();
        }

        private void listView2_DoubleClick(object sender, EventArgs e)
        {
            ct2_all.PerformClick();
        }

        private void list_tracks_KeyUp(object sender, KeyEventArgs e)
        {
            Boolean has_default = false;
            if (e.KeyCode == Keys.Delete)
            {
                foreach (ListViewItem elemento in list_tracks.SelectedItems)
                {
                    list_tracks.Items.Remove(elemento);
                    pic_encode_param.Image = null;
                }
            }
            lbl_tr_n.Text = "Tracks: " + list_tracks.Items.Count.ToString();
            //Review audio track defaults

            foreach (ListViewItem audio_item in list_tracks.Items)
            {
                if (audio_item.SubItems[2].Text.Contains("Audio"))
                {
                    if (audio_item.SubItems[4].Text == "Yes")
                    {
                        has_default = true;
                    }
                }
            }
            if (has_default == false)
            {
                foreach (ListViewItem audio_item in list_tracks.Items)
                {
                    if (audio_item.SubItems[2].Text.Contains("Audio"))
                    {
                        audio_item.SubItems[4].Text = "Yes";
                        return;
                    }
                }
            }
            //End review audio track defaults
        }

        private void ctm3_Opening(object sender, CancelEventArgs e)
        {
            foreach (ToolStripItem ct in ctm3.Items)
            {
                ct.Visible = true;
            }

            if (list_tracks.Items.Count == 0 || list_tracks.SelectedIndices.Count == 0)
            {
                ct3_combo_language.Text = "Item language";
                e.Cancel = true;
            }

            if (list_tracks.SelectedIndices.Count > 1)
            {
                foreach (ToolStripItem ct in ctm3.Items)
                {
                    ct.Visible = false;
                    ct3_del.Visible = true;
                }
            }
            if (list_tracks.SelectedIndices.Count == 1) ct3_combo_language.Text = "Item language";
        }

        private void ct3_combo_language_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (list_tracks.SelectedIndices.Count > 0)
            {
                foreach (ListViewItem item in list_tracks.SelectedItems)
                {
                    item.SubItems[3].Text = ct3_combo_language.SelectedItem.ToString().Substring(ct3_combo_language.SelectedItem.ToString().Length - 4, 3);
                }
                ctm3.Close();
            }
        }

        private void ct3_default_Click(object sender, EventArgs e)
        {
            if (list_tracks.SelectedIndices.Count == 0 || list_tracks.SelectedItems[0].SubItems[3].Text.Contains("Video"))
            {
                return;
            }

            if (list_tracks.SelectedItems[0].SubItems[4].Text == "Yes")
            {
                list_tracks.SelectedItems[0].SubItems[4].Text = "No";
            }
            else
            {
                list_tracks.SelectedItems[0].SubItems[4].Text = "Yes";
            }

            //Review audio defaults
            int default_items = 0;

            for (int i = 0; i < list_tracks.Items.Count; i++)
            {
                if (list_tracks.Items[i].SubItems[2].Text.Contains("Audio"))
                {
                    if (list_tracks.Items[i].SubItems[4].Text == "Yes")
                    {
                        default_items = default_items + 1;
                    }
                }
            }

            if (default_items > 1)
            {
                foreach (ListViewItem audio_item in list_tracks.Items)
                {
                    if (audio_item.SubItems[2].Text.Contains("Audio"))
                    {
                        if (audio_item.Text != list_tracks.SelectedItems[0].Text)
                        {
                            audio_item.SubItems[2].Text = "No";
                        }
                    }
                }
            }

            if (default_items == 0)
            {
                foreach (ListViewItem audio_item in list_tracks.Items)
                {
                    if (audio_item.SubItems[2].Text.Contains("Audio"))
                    {
                        if (audio_item.Text != list_tracks.SelectedItems[0].Text)
                        {
                            audio_item.SubItems[4].Text = "Yes";
                            return;
                        }
                    }
                }
            }

            //End review audio track defaults

            //Begin subtitle defaults

            //Review audio defaults
            int default_subs = 0;
            for (int i = 0; i < list_tracks.Items.Count; i++)
            {
                if (list_tracks.Items[i].SubItems[2].Text.Contains("Subtitle"))
                {
                    if (list_tracks.Items[i].SubItems[4].Text == "Yes")
                    {
                        default_subs = default_subs + 1;
                    }
                }
            }

            if (default_subs > 1)
            {
                foreach (ListViewItem audio_item in list_tracks.Items)
                {
                    if (audio_item.SubItems[2].Text.Contains("Subtitle"))
                    {
                        if (audio_item != list_tracks.SelectedItems[0])
                        {
                            audio_item.SubItems[4].Text = "No";
                        }
                    }
                }
            }
            //End subtitle defaults
        }

        private void ct3_del_Click(object sender, EventArgs e)
        {
            Boolean has_default = false;

            foreach (ListViewItem elemento in list_tracks.SelectedItems)
            {
                list_tracks.Items.Remove(elemento);
                pic_encode_param.Image = null;
            }
            lbl_tr_n.Text = "Tracks: " + list_tracks.Items.Count.ToString();
            //Review audio track defaults

            foreach (ListViewItem audio_item in list_tracks.Items)
            {
                if (audio_item.SubItems[3].Text.Contains("Audio"))
                {
                    if (audio_item.SubItems[5].Text == "Yes")
                    {
                        has_default = true;
                    }
                }
            }

            if (has_default == false)
            {
                foreach (ListViewItem audio_item in list_tracks.Items)
                {
                    if (audio_item.SubItems[3].Text.Contains("Audio"))
                    {
                        audio_item.SubItems[5].Text = "Yes";
                        return;
                    }
                }
            }
            //End review audio track defaults
        }

        private void button23_Click(object sender, EventArgs e)
        {
            Pg1.Focus();
            list_tracks.Items.Clear();
            txt_track_param.Text = String.Empty;
            pic_encode_param.Image = null;
            combo_item_lang_2.SelectedIndex = -1;
            txt_track_format.Text = String.Empty;
            lbl_tr_n.Text = "Tracks: 0";
            txt_mux_type.Text = String.Empty;
        }

        private void list_tracks_DoubleClick(object sender, EventArgs e)
        {
            ct3_default.PerformClick();
        }

        private void ctm3_Closed(object sender, ToolStripDropDownClosedEventArgs e)
        {
        }

        private void ct3_combo_language_Click(object sender, EventArgs e)
        {
        }

        private void list_tracks_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (list_tracks.SelectedIndices.Count > 0)
            {
                txt_track_param.Text = list_tracks.SelectedItems[0].SubItems[5].Text;
                combo_item_lang_2.Text = list_tracks.SelectedItems[0].SubItems[3].Text;

                // -c reminder
                if (list_tracks.SelectedItems[0].SubItems[2].Text.ToLower().Contains("video")) txt_mux_type.Text = "-c:v";
                if (list_tracks.SelectedItems[0].SubItems[2].Text.ToLower().Contains("audio")) txt_mux_type.Text = "-c:a";
                if (list_tracks.SelectedItems[0].SubItems[2].Text.ToLower().Contains("subtitle")) txt_mux_type.Text = "-c:s";

                //Track extension
                string ext_track = list_tracks.SelectedItems[0].SubItems[2].Text.ToLower();

                if (ext_track.Contains("h264")) txt_track_format.Text = "m4v";
                else if (ext_track.Contains("webm")) txt_track_format.Text = "webm";
                else if (ext_track.Contains("rawvideo")) txt_track_format.Text = "avi";
                else if (ext_track.Contains("divx")) txt_track_format.Text = "avi";
                else if (ext_track.Contains("xvid")) txt_track_format.Text = "avi";
                else if (ext_track.Contains("mov")) txt_track_format.Text = "mov";
                else if (ext_track.Contains("aac")) txt_track_format.Text = "aac";
                else if (ext_track.Contains("ac3")) txt_track_format.Text = "ac3";
                else if (ext_track.Contains("mp3")) txt_track_format.Text = "mp3";
                else if (ext_track.Contains("pcm")) txt_track_format.Text = "wav";
                else if (ext_track.Contains("flac")) txt_track_format.Text = "flac";
                else if (ext_track.Contains("truehd")) txt_track_format.Text = "thd";
                else if (ext_track.Contains("dts")) txt_track_format.Text = "dts";
                else if (ext_track.Contains("vp7")) txt_track_format.Text = "webm";
                else if (ext_track.Contains("vp8")) txt_track_format.Text = "webm";
                else if (ext_track.Contains("vp9")) txt_track_format.Text = "webm";
                else if (ext_track.Contains("wma")) txt_track_format.Text = "wma";
                else if (ext_track.Contains("wvc1")) txt_track_format.Text = "wmv";
                else if (ext_track.Contains("vorbis")) txt_track_format.Text = "ogg";
                else if (ext_track.Contains("theora")) txt_track_format.Text = "ogv";
                else if (ext_track.Contains("mjpeg")) txt_track_format.Text = "jpg";
                else if (ext_track.Contains("subrip")) txt_track_format.Text = "srt";
                else txt_track_format.Text = String.Empty;

                //End track extension

                if (list_tracks.SelectedItems[0].SubItems[5].Text == "Image for audio")
                {
                    pic_encode_param.Image = img_streams.Images[4];
                }
                else
                {
                    pic_encode_param.Image = img_streams.Images[list_tracks.SelectedItems[0].ImageIndex];
                }
            }
            else
            {
                txt_track_param.Text = String.Empty;
                combo_item_lang_2.Text = String.Empty;
                pic_encode_param.Image = null;
                txt_mux_type.Text = String.Empty;
                txt_track_format.Text = String.Empty;
            }

            if (list_tracks.SelectedIndices.Count > 1)
            {
                txt_track_format.Text = String.Empty;
                txt_mux_type.Text = String.Empty;
            }
        }

        private void btn_set_track_param_Click(object sender, EventArgs e)
        {
            ct3_encode_default.PerformClick();
        }

        private void txt_track_param_DoubleClick(object sender, EventArgs e)
        {
            if (list_tracks.SelectedIndices.Count > 0)
            {
                if (list_tracks.SelectedItems[0].SubItems[3].Text.Contains("Subtitle"))

                {
                    list_tracks.SelectedItems[0].SubItems[5].Text = "copy";
                }
                else
                {
                    list_tracks.SelectedItems[0].SubItems[5].Text = "copy";
                }
            }
        }

        private void ct3_encode_default_Click(object sender, EventArgs e)
        {
            if (list_tracks.SelectedIndices.Count > 0)
            {
                if (list_tracks.SelectedItems[0].SubItems[2].Text.Contains("Subtitle"))

                {
                    if (list_tracks.SelectedItems[0].SubItems[2].Text.Contains("dvd_subtitle") || (list_tracks.SelectedItems[0].SubItems[3].Text.Contains("hdmv_pgs_subtitle")))

                    {
                        list_tracks.SelectedItems[0].SubItems[5].Text = "copy";
                    }
                    else
                    {
                        def_mux_subs_enc = "copy";
                        list_tracks.SelectedItems[0].SubItems[5].Text = "copy"; ;
                    }
                }
                else
                {
                    list_tracks.SelectedItems[0].SubItems[5].Text = "copy";
                    if (list_tracks.SelectedItems[0].BackColor == Color.LightYellow)
                    {
                        list_tracks.SelectedItems[0].BackColor = Color.White;
                    }

                    def_mux_audio_enc = "copy";
                    def_mux_video_enc = "copy";
                }
                txt_track_param.Text = "copy";
            }
        }

        private void txt_track_param_TextChanged(object sender, EventArgs e)
        {
            if (list_tracks.SelectedIndices.Count > 0)
            {
                if (txt_track_param.Text != String.Empty && list_tracks.SelectedItems[0].SubItems[5].Text != "Image for audio")
                {
                    list_tracks.SelectedItems[0].SubItems[5].Text = txt_track_param.Text;
                }
            }

            if (txt_track_param.Text.Contains("-c:") || txt_track_param.Text.Contains("acodec") || txt_track_param.Text.Contains("acodec") || txt_track_param.Text.Contains("vcodec"))
            {
                MessageBox.Show("Codec type arguments like " + '\u0022' + "-c:v" + '\u0022' + ", " + '\u0022' + "-c:a" + '\u0022' + ",-acodec or -vcodec are not required", "Parameter unncessary", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        private void combo_item_lang_2_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (list_tracks.Items.Count > 0)
            {
                foreach (ListViewItem item in list_tracks.Items)
                {
                    item.SubItems[3].Text = combo_item_lang_2.SelectedItem.ToString().Substring(combo_item_lang_2.SelectedItem.ToString().Length - 4, 3);
                }
            }
        }

        private void listView2_DragEnter(object sender, DragEventArgs e)
        {
            if (e.Data.GetDataPresent(DataFormats.FileDrop, false))
                e.Effect = DragDropEffects.All;
            else
                e.Effect = DragDropEffects.None;
        }

        private void listView2_DragDrop(object sender, DragEventArgs e)
        {
            change_tab_1 = false;
            change_tab_2 = false;

            if (tabControl1.SelectedIndex == 1)
            {
                tabControl1.SelectedIndex = 0;
                change_tab_1 = true;
            }
            if (tabControl1.SelectedIndex == 2)
            {
                tabControl1.SelectedIndex = 0;
                change_tab_2 = true;
            }

            tabControl1.SelectedIndex = 0;

            string[] file_drop = (string[])e.Data.GetData(DataFormats.FileDrop);

            List<string> files2 = new List<string>();

            int num_drop = 0;

            foreach (String dropped in file_drop)
            {
                if (File.Exists(dropped))
                {
                    files2.Add(dropped);
                    num_drop = files2.Count();
                }
                else
                {
                    if (Directory.Exists(dropped))
                    {
                        if (add_subfs == false)
                        {
                            foreach (String file in Directory.GetFiles(dropped))
                            {
                                if (!File.GetAttributes(file).HasFlag(FileAttributes.Hidden))
                                {
                                    files2.Add(file);
                                    num_drop = num_drop + 1;
                                }
                            }
                        }
                        else
                        {
                            try
                            {
                                foreach (string f in Directory.GetFiles(dropped, "*.*", System.IO.SearchOption.AllDirectories))
                                {
                                    if (!File.GetAttributes(f).HasFlag(FileAttributes.Hidden))
                                    {
                                        files2.Add(f);
                                        num_drop = num_drop + 1;
                                    }
                                }
                            }
                            catch (System.Exception excpt)
                            {
                                var a = MessageBox.Show("Error: " + excpt.Message, "Access error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                        }
                    }
                }
            }

            if (num_drop >= 5000)
            {
                var a = MessageBox.Show("Adding " + num_drop + " files could take some time. Continue?", "Adding many files", MessageBoxButtons.OKCancel, MessageBoxIcon.Question);
                if (a == DialogResult.Cancel)
                {
                    return;
                }
            }

            files_to_add = files2;
            canceled_file_adding = false;
            btn_cancel_add.Enabled = true;
            btn_cancel_add.Visible = true;
            btn_cancel_add.Refresh();
            BG_Files.RunWorkerAsync();
        }

        private void listView3_ColumnClick(object sender, ColumnClickEventArgs e)
        {
            if (e.Column == 0)
            {
                if (e.Column == lvwColumnSorter3.SortColumn)
                {
                    // Reverse the current sort direction for this column.
                    if (lvwColumnSorter3.Order == SortOrder.Ascending)
                    {
                        lvwColumnSorter3.Order = SortOrder.Descending;
                    }
                    else
                    {
                        lvwColumnSorter3.Order = SortOrder.Ascending;
                    }
                }
                else
                {
                    // Set the column number that is to be sorted; default to ascending.
                    lvwColumnSorter3.SortColumn = e.Column;
                    lvwColumnSorter3.Order = SortOrder.Ascending;
                }

                // Perform the sort with these new sort options.
                this.listView3.Sort();
            }
        }

        private void Combo_sub_lang_mux_SelectedIndexChanged(object sender, EventArgs e)
        {
            foreach (ListViewItem item in listView3.Items)
            {
                if (item.SubItems[1].Text.Contains("No subtitle for this file") == false)
                {
                    item.SubItems[2].Text = Combo_sub_lang_mux.SelectedItem.ToString().Substring(Combo_sub_lang_mux.SelectedItem.ToString().LastIndexOf("(") + 1, 3);
                }
            }
        }

        private void Combo_def_sub_mux_SelectedIndexChanged(object sender, EventArgs e)
        {
            foreach (ListViewItem item in listView3.Items)
            {
                if (item.SubItems[1].Text.Contains("No subtitle for this file") == false)
                {
                    item.SubItems[4].Text = Combo_def_sub_mux.SelectedItem.ToString();
                }
            }
        }

        private void ct3_default_enc_Click(object sender, EventArgs e)
        {
            if (list_tracks.SelectedIndices.Count > 0)
            {
                if (list_tracks.SelectedItems[0].SubItems[5].Text.Contains("Image for audio"))
                {
                    return;
                }

                if (list_tracks.SelectedItems[0].SubItems[2].Text.Contains("Subtitle"))

                {
                    def_mux_subs_enc = list_tracks.SelectedItems[0].SubItems[5].Text;
                }

                if (list_tracks.SelectedItems[0].SubItems[2].Text.Contains("Audio"))

                {
                    def_mux_audio_enc = list_tracks.SelectedItems[0].SubItems[5].Text;
                }

                if (list_tracks.SelectedItems[0].SubItems[2].Text.Contains("Video"))

                {
                    def_mux_video_enc = list_tracks.SelectedItems[0].SubItems[5].Text;
                }
            }
        }

        private void combo_def_und_lang_Click(object sender, EventArgs e)
        {
        }

        private void combo_def_und_lang_SelectedIndexChanged(object sender, EventArgs e)
        {
            def_lang_und_tracks = combo_def_und_lang.SelectedItem.ToString().Substring(combo_def_und_lang.SelectedItem.ToString().Length - 4, 3);

            ctm2.Close();
        }

        private void button24_Click_1(object sender, EventArgs e)
        {
            folderBrowserDialog1.ShowNewFolderButton = false;

            if (folderBrowserDialog1.ShowDialog() == DialogResult.OK)
            {
                txt_folder_subs.Text = folderBrowserDialog1.SelectedPath;
                txt_folder_subs.BackColor = txt_parameters.BackColor;
                listView3.Items.Clear();
                tabControl1.SelectedIndex = 0;
                tabControl1.SelectedIndex = 2;
            }
        }

        private void ctm4_Opening(object sender, CancelEventArgs e)
        {
            if (listView3.SelectedIndices.Count == 0)
            {
                e.Cancel = true;
                return;
            }
            if (listView3.SelectedItems[0].SubItems[1].Text == "No subtitle for this file, double-click to locate")
            {
                Combo_single_subs_lang.Enabled = false;
                ct4_conv.Enabled = false;
            }
            else
            {
                Combo_single_subs_lang.Enabled = true;
                ct4_conv.Enabled = true;
            }
        }

        private void ct4_browse_Click(object sender, EventArgs e)
        {
            openFileDialog2.ShowDialog();
        }

        private void openFileDialog2_FileOk_1(object sender, CancelEventArgs e)
        {
            listView3.SelectedItems[0].SubItems[1].Text = openFileDialog2.FileName;
            listView3.SelectedItems[0].SubItems[3].Text = "und";

            var a = TextFileEncodingDetector.DetectTextFileEncoding(openFileDialog2.FileName);
            if (a != null)
            {
                String txt_enc = a.ToString().Replace("System.Text.", "");
                listView3.SelectedItems[0].SubItems[3].Text = txt_enc.Replace("Encoding", "");
            }
            else
            {
                listView3.SelectedItems[0].SubItems[3].Text = "Unknown";
            }

            listView3.SelectedItems[0].SubItems[5].Text = "Yes";
            listView3.SelectedItems[0].SubItems[5].Text = "Ready";
        }

        private void listView3_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (working == true)
            {
                listView3.SelectedIndices.Clear();
                return;
            }

            if (listView3.SelectedIndices.Count == 0)
            {
                Combo_sub_lang_mux.Text = "";
                Combo_def_sub_mux.Text = "";
            }
        }

        private void Combo_single_subs_lang_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (listView3.SelectedIndices.Count > 0)
            {
                foreach (ListViewItem item in listView3.SelectedItems)
                {
                    item.SubItems[2].Text = Combo_single_subs_lang.SelectedItem.ToString().Substring(Combo_single_subs_lang.SelectedItem.ToString().Length - 4, 3);
                }
                ctm4.Close();
            }
        }

        private void btn_sub_mux_Click(object sender, EventArgs e)
        {
            cancel_queue = false;
            notifyIcon1.Visible = true;
            Pg1.Text = "0" + System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator + "0%";
            foreach (ListViewItem file in listView3.Items)
            {
                if (!File.Exists(file.Text))
                {
                    MessageBox.Show("File was not found: " + file.Text, "One file in the queue list was not found", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
            }

            foreach (ListViewItem item in listView3.Items)
            {
                if (item.SubItems[1].Text == "No subtitle for this file, double-click to locate")
                {
                    MessageBox.Show("Some items have no subtitle available", "Missing subtitles on some files", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
            }

            if (listView3.Items.Count == 0)
            {
                MessageBox.Show("File list is empty", "List empty", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return;
            }

            String is_overw = txt_output_subs.Text + "\\" + Path.GetFileNameWithoutExtension(listView3.Items[0].Text) + "." + Combo_ext_sub_mux.SelectedItem.ToString();
            if (is_overw == listView3.Items[0].Text && chk_suffix.Checked == false)
            {
                MessageBox.Show("Overwriting is not supported. Change destination directory or enable " + '\u0022' + "Rename output" + '\u0022' + " checkbox.", "Overwriting not allowed", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            if (Combo_ext_sub_mux.SelectedIndex == 1)
            {
                foreach (ListViewItem item in listView3.Items)
                {
                    if (item.SubItems[1].Text.ToLower().Contains("idx"))
                    {
                        MessageBox.Show("VobSub subtitles are not supported in mp4 container", "Container not supported", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        return;
                    }
                }
            }

            //Validate subs encoding
            Boolean non_eng = false;
            Boolean non_utf = false;

            foreach (ListViewItem item in listView3.Items)
            {
                if (item.SubItems[2].Text != "eng")
                {
                    non_eng = true;
                }
                if (item.SubItems[3].Text.Contains("UTF") == false && item.SubItems[3].Text.Contains("Unicode") == false)
                {
                    non_utf = true;
                }
            }

            if (non_utf == true && (Combo_sub_lang_mux.SelectedIndex != 0 || non_eng == true) && chk_burn.CheckState == CheckState.Unchecked)
            {
                var a = MessageBox.Show("Non-UTF subtitles found on the list. Non-english languages may show incorrect characters. Continue?", "Subtitles encoding warning", MessageBoxButtons.OKCancel, MessageBoxIcon.Warning);
                if (a == DialogResult.Cancel)
                {
                    return;
                }
            }

            if (chk_burn.CheckState == CheckState.Checked)
            {
                foreach (ListViewItem item in listView3.Items)
                {
                    if (item.SubItems[1].Text.Contains("[") || item.SubItems[1].Text.Contains("]") || ((item.Text.Contains("[") || item.Text.Contains("]")) && item.SubItems[1].Text.Contains("available")))
                    {
                        MessageBox.Show("Some subtitle file names contain conflicting characters with subtitles filter. Please ensure your subtitle file names do not contain characters like [ ]", "Subtitle name warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        return;
                    }
                }
            }

            //Validated list, start processing

            txt_remain.Text = "Time remaining: 00h:00m:00s";
            cancel_queue = false;
            Pg1.Value = 0;
            //pg_current.Value = 0;
            Disable_Controls();

            time_n_tasks = 0;
            timer_tasks.Start();

            //textBox4.Text = "0%";

            working = true;

            ListView list_proc = new ListView();
            foreach (ListViewItem item in listView3.Items)
            {
                list_proc.Items.Add((ListViewItem)item.Clone());
                item.BackColor = Color.White;
                item.SubItems[5].Text = "Queued";
            }

            Pg1.Maximum = list_proc.Items.Count;
            listView3.SelectedIndices.Clear();

            Double total_duration = 0;
            Double total_prog = 0;

            //Get total duration of files
            //Pending duration

            if (dur_ok == false)
            {
                list_pending_dur.Items.Clear();
                foreach (ListViewItem item in listView1.Items)
                {
                    list_pending_dur.Items.Add((ListViewItem)item.Clone());
                }
                BG_Dur.RunWorkerAsync();
                return;
            }

            total_duration = Convert.ToInt32(lbl_dur_list.Text.Substring(0, 2)) * 3600;
            total_duration = total_duration + Convert.ToInt32(lbl_dur_list.Text.Substring(4, 2)) * 60;
            total_duration = total_duration + Convert.ToInt32(lbl_dur_list.Text.Substring(8, 2));

            Pg1.Minimum = 0;
            Pg1.Maximum = 100;
            Pg1.Text = "0" + System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator + "0%";

            //End get total duration of files

            List<string> list_lines = new List<string>();
            String sub_mux_ext = Combo_ext_sub_mux.SelectedItem.ToString();
            String path_sub = txt_folder_subs.Text;

            String prev_subs_mp4 = String.Empty;
            Boolean mkv_selected = true;

            if (Combo_ext_sub_mux.SelectedIndex == 1)
            {
                prev_subs_mp4 = "-c:s mov_text ";
                mkv_selected = false;
            }
            else
            {
                prev_subs_mp4 = "-c:s copy ";
            }

            if (hard_sub == true)
            {
                prev_subs_mp4 = String.Empty;
            }

            String hw_decode = String.Empty;
            if (cb_hwdecode.SelectedItem.ToString() != "none")
            {
                hw_decode = "-hwaccel " + cb_hwdecode.SelectedItem.ToString();
            }

            //Save selected hw decoder

            String path2 = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_hw_dcd.ini";
            String txt_hw_dcd = cb_hwdecode.SelectedItem.ToString();
            if (txt_hw_dcd != "none")
            {
                File.WriteAllText(path2, txt_hw_dcd);
            }
            else
            {
                if (File.Exists(path2)) File.Delete(path2);
            }

            //End save hw decoder

            new System.Threading.Thread(() =>
            {
                System.Threading.Thread.CurrentThread.IsBackground = true;
                /* run your code here */

                String remain_time = "0";

                //int list_index = 0;
                //foreach (ListViewItem file in list_proc.Items)
                for (int list_index = 0; list_index < list_proc.Items.Count; list_index++)
                {
                    String file = list_proc.Items[list_index].Text;
                    // Get specific tack list video duration
                    Process probe = new Process();
                    probe.StartInfo.FileName = System.IO.Path.Combine(Application.StartupPath, "ffprobe.exe");
                    probe.StartInfo.Arguments = "-v error -show_entries format=duration -sexagesimal -of default=noprint_wrappers=1:nokey=1 " + " -i " + '\u0022' + file + '\u0022';
                    probe.StartInfo.RedirectStandardOutput = true;
                    probe.StartInfo.UseShellExecute = false;
                    probe.StartInfo.CreateNoWindow = true;
                    probe.EnableRaisingEvents = true;
                    probe.Start();

                    String duracion = probe.StandardOutput.ReadLine();

                    probe.WaitForExit();

                    if (duracion != null)
                    {
                        if (duracion.Length >= 7)
                        {
                            durat_n = TimeSpan.Parse(duracion).TotalSeconds;
                        }
                    }
                    else
                    {
                        durat_n = 0;
                    }

                    //End duration

                    //Get number of source file subtitle tracks
                    Process ff_str = new Process();
                    ff_str.StartInfo.FileName = System.IO.Path.Combine(Application.StartupPath, "ffmpeg.exe");
                    ff_str.StartInfo.Arguments = " -i " + '\u0022' + file + '\u0022';
                    ff_str.StartInfo.RedirectStandardOutput = true;
                    ff_str.StartInfo.RedirectStandardError = true;
                    ff_str.StartInfo.UseShellExecute = false;
                    ff_str.StartInfo.CreateNoWindow = true;
                    ff_str.EnableRaisingEvents = true;
                    ff_str.Start();

                    String stream = "";
                    int source_subs = 0;
                    String is_default = String.Empty;

                    while (!ff_str.StandardError.EndOfStream)
                    {
                        stream = ff_str.StandardError.ReadLine();

                        if (stream.Contains("Stream #0:"))
                        {
                            if (stream.Contains("Subtitle"))
                            {
                                source_subs = source_subs + 1;
                                if (stream.Contains("mov_text") && mkv_selected == true)
                                {
                                    MessageBox.Show("Source file contains mov_text subtitles not supported by mkv container. Switch to mp4 container or remove mov_text subtitles from source files.", "MP4 subtitles not supported in MKV container", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    Enable_Controls();
                                    return;
                                }
                                else
                                {
                                    prev_subs_mp4 = "-c:s copy ";
                                }

                                if (list_proc.Items[list_index].SubItems[4].Text == "Yes")
                                {
                                    is_default = is_default + " -disposition:s:" + (source_subs + 1).ToString() + " 0";
                                }
                            }
                        }
                    }

                    //End get number of subtitle tracks

                    if (cancel_queue == true)
                    {
                        working = false;

                        //this.InvokeEx(f => f.Pg1.Value = 0);
                        //this.InvokeEx(f => f.pg_current.Value = 0);
                        this.InvokeEx(f => f.button2.Enabled = true);
                        Enable_Controls();
                        this.InvokeEx(f => TaskbarProgress.SetState(this.Handle, TaskbarProgress.TaskbarStates.NoProgress));
                        MessageBox.Show("Queue processing aborted", "Tasks aborted", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                        return;
                    }

                    String ffm = System.IO.Path.Combine(Application.StartupPath, "ffmpeg.exe");
                    String fullPath = file;
                    String destino = "";

                    if (txt_output_subs.Text == ".\\FFBatch")
                    {
                        destino = file.Substring(0, fullPath.LastIndexOf('\\')) + "\\" + "FFBatch";
                    }
                    else
                    {
                        destino = txt_output_subs.Text;
                    }
                    String link_sub = list_proc.Items[list_index].SubItems[1].Text;

                    if (txt_folder_subs.Text == String.Empty)
                    {
                        if (list_proc.Items[list_index].SubItems[1].Text == "SRT subtitle available")
                        {
                            link_sub = file.Substring(0, file.LastIndexOf(".")) + ".srt";
                        }
                        if (list_proc.Items[list_index].SubItems[1].Text == "VobSub IDX subtitle available")
                        {
                            link_sub = file.Substring(0, file.LastIndexOf(".")) + ".idx";
                        }

                        if (list_proc.Items[list_index].SubItems[1].Text == "ASS subtitle available")
                        {
                            link_sub = file.Substring(0, file.LastIndexOf(".")) + ".ass";
                        }
                    }
                    else
                    {
                        if (list_proc.Items[list_index].SubItems[1].Text == "SRT subtitle available")
                        {
                            link_sub = path_sub + "\\" + Path.GetFileNameWithoutExtension(file) + ".srt";
                        }
                        if (list_proc.Items[list_index].SubItems[1].Text == "VobSub IDX subtitle available")
                        {
                            link_sub = path_sub + "\\" + Path.GetFileNameWithoutExtension(file) + ".idx";
                        }
                        if (list_proc.Items[list_index].SubItems[1].Text == "ASS subtitle available")
                        {
                            link_sub = path_sub + "\\" + Path.GetFileNameWithoutExtension(file) + ".ass";
                        }
                    }
                    if (list_proc.Items[list_index].SubItems[1].Text == "No subtitle for this file, double-click to locate")
                    {
                        link_sub = String.Empty;
                    }

                    if (list_proc.Items[list_index].SubItems[4].Text == "Yes")
                    {
                        is_default = is_default + " -disposition:s:" + (source_subs).ToString() + " default";
                    }

                    String sub_enc = "-c:s copy";

                    if (sub_mux_ext == "mp4")
                    {
                        sub_enc = "-c:s mov_text";
                    }
                    if (mkv_selected == true)
                    {
                        sub_enc = prev_subs_mp4;
                    }
                    add_suffix = "";
                    if (chk_suffix.Checked == true)
                    {
                        add_suffix = "_FFB";
                    }

                    String AppParam = "";
                    if (hard_sub == true)
                    {
                        link_sub = link_sub.Replace("\\", "\\\\\\\\");
                        link_sub = link_sub.Replace(":", "\\\\" + ":");

                        AppParam = hw_decode + " -i " + "" + '\u0022' + file + '\u0022' + " -vf subtitles=" + '\u0022' + link_sub + '\u0022' + " " + txt_hard_subs.Text + " -y " + '\u0022' + destino + "\\" + System.IO.Path.GetFileNameWithoutExtension(file) + add_suffix + "." + sub_mux_ext + '\u0022';
                    }
                    else
                    {
                        AppParam = hw_decode + " -i " + "" + '\u0022' + file + '\u0022' + " -sub_charenc UTF-8 " + "-i " + '\u0022' + link_sub + '\u0022' + " -map 0 -c:v copy -c:a copy " + prev_subs_mp4 + "-map 1:0 " + sub_enc + " " + "-metadata:s:s:" + source_subs + " language=" + list_proc.Items[list_index].SubItems[2].Text + " " + is_default + " -y " + '\u0022' + destino + "\\" + System.IO.Path.GetFileNameWithoutExtension(file) + add_suffix + "." + sub_mux_ext + '\u0022';
                    }

                    if (!Directory.Exists(destino))
                    {
                        try
                        {
                            Directory.CreateDirectory(destino);
                        }
                        catch (System.Exception excpt)
                        {
                            MessageBox.Show("Error: " + excpt.Message, "Error writing to folder", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            this.InvokeEx(f => this.Cursor = Cursors.Arrow);
                            Enable_Controls();
                            return;
                        }
                    }

                    process_glob.StartInfo.FileName = ffm;
                    process_glob.StartInfo.Arguments = AppParam + " -hide_banner";

                    valid_prog = false;
                    this.InvokeEx(f => f.listView3.Items[list_index].SubItems[5].Text = "Processing");
                    //this.InvokeEx(f => f.pg_current.Value = 0);
                    //this.InvokeEx(f => f.pg_current.Refresh());

                    process_glob.StartInfo.RedirectStandardOutput = true;
                    process_glob.StartInfo.RedirectStandardError = true;
                    process_glob.StartInfo.RedirectStandardInput = true;
                    process_glob.StartInfo.UseShellExecute = false;
                    process_glob.StartInfo.CreateNoWindow = true;
                    process_glob.EnableRaisingEvents = true;

                    process_glob.Start();
                    System.Threading.Thread.Sleep(50);
                    combo_prio.Invoke(new MethodInvoker(delegate
                    {
                        if (combo_prio.SelectedIndex != 2)
                        {
                            Change_mem_prio();
                        }

                    }));

                    valid_prog = true;

                    String err_txt = "";
                    Double interval = 0;

                    while (!process_glob.StandardError.EndOfStream)
                    {
                        err_txt = process_glob.StandardError.ReadLine();
                        list_lines.Add(err_txt);

                        if (err_txt.Contains("time=") && err_txt.Contains("time=-") == false)
                        {
                            if (valid_prog == true)
                            {
                                int start_time_index = err_txt.IndexOf("time=") + 5;
                                Double sec_prog = TimeSpan.Parse(err_txt.Substring(start_time_index, 8)).TotalSeconds;
                                Double percent = (sec_prog * 100 / durat_n);

                                total_prog = total_prog + (sec_prog - interval);
                                interval = sec_prog;
                                int percent2 = Convert.ToInt32(percent);

                                Double percent_tot = total_prog * 100 / total_duration;
                                int percent_tot_2 = Convert.ToInt32(percent_tot);

                                if (percent_tot_2 <= 100)
                                {
                                    this.InvokeEx(f => f.Pg1.Value = percent_tot_2);
                                    this.InvokeEx(f => f.Pg1.Refresh());
                                    if (Math.Round(percent_tot, 1).ToString().Contains(".") || Math.Round(percent_tot, 1).ToString().Contains(","))
                                    {
                                        this.InvokeEx(f => f.Pg1.Text = Math.Round(percent_tot, 1).ToString() + "%");
                                    }
                                    else
                                    {
                                        this.InvokeEx(f => f.Pg1.Text = Math.Round(percent_tot, 1).ToString() + System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator + "0" + "%");
                                    }


                                    this.InvokeEx(f => TaskbarProgress.SetValue(this.Handle, percent_tot, Pg1.Maximum));
                                }
                                if (percent2 <= 100)
                                {
                                    int progg = Convert.ToInt16(percent2);

                                    if (Math.Round(percent, 1).ToString().Contains(".") || Math.Round(percent, 1).ToString().Contains(","))
                                    {
                                        this.InvokeEx(f => f.listView3.Items[list_index].SubItems[5].Text = Math.Round(percent, 1).ToString() + "%");
                                    }
                                    else
                                    {
                                        this.InvokeEx(f => f.listView3.Items[list_index].SubItems[5].Text = Math.Round(percent, 1).ToString() + System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator + "0" + "%");
                                    }
                                }
                                //Estimated remaining time

                                remain_time = err_txt.Substring(err_txt.LastIndexOf("speed=") + 6, err_txt.Length - err_txt.LastIndexOf("speed=") - 6);
                                remain_time = remain_time.Replace("x", String.Empty);
                                Double timing1 = 0;

                                if (System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator == ",")
                                {
                                    timing1 = Math.Round(Double.Parse(remain_time.Replace(".", ",")), 2);
                                }
                                else
                                {
                                    timing1 = Math.Round(Double.Parse(remain_time), 2);
                                }
                                Decimal timing = (decimal)timing1;
                                Decimal total_dur_dec = Convert.ToDecimal(total_duration);
                                Decimal total_prog_dec = Convert.ToDecimal(total_prog);

                                Decimal remain_secs = 0;
                                if (timing > 0)
                                {
                                    remain_secs = (decimal)(total_dur_dec - total_prog_dec) / timing;
                                }

                                if (remain_secs > 60)
                                {
                                    remain_secs = remain_secs + 60;
                                }
                                String remain_from_secs = "";

                                TimeSpan t = TimeSpan.FromSeconds(Convert.ToDouble(remain_secs));
                                remain_from_secs = string.Format("{0:D2}h:{1:D2}",
                                   t.Hours,
                                  t.Minutes);

                                if (remain_secs >= 3600)
                                {
                                    this.InvokeEx(f => f.txt_remain.Text = "Time remaining: " + remain_from_secs + " min");
                                }

                                if (remain_secs < 3600 && remain_secs >= 600)
                                {
                                    this.InvokeEx(f => f.txt_remain.Text = "Time remaining: " + remain_from_secs.Substring(remain_from_secs.LastIndexOf(":") + 1, 2) + " minutes");
                                }
                                if (remain_secs < 600 && remain_secs >= 120)
                                {
                                    this.InvokeEx(f => f.txt_remain.Text = "Time remaining: " + remain_from_secs.Substring(remain_from_secs.LastIndexOf(":") + 2, 1) + " minutes");
                                }

                                if (remain_secs <= 59)
                                {
                                    this.InvokeEx(f => f.txt_remain.Text = "Time remaining: " + Convert.ToInt16(remain_secs) + " seconds");
                                }

                                //End remaining time
                            }
                        }
                        //Read output, get progress
                    }
                    process_glob.WaitForExit();
                    process_glob.StartInfo.Arguments = String.Empty;


                    //this.InvokeEx(f => f.pg_current.Value = 100);
                    //this.InvokeEx(f => f.//textBox4.Text = "100%");
                    list_lines.Add("");
                    list_lines.Add("---------------------End of " + Path.GetFileName(file) + " log-------------------------------");
                    list_lines.Add("");

                    //this.InvokeEx(f => f.Pg1.Value = Pg1.Value + 1);
                    //this.InvokeEx(f => f.Pg1.Refresh());

                    Boolean single_error = false;

                    if (process_glob.ExitCode == 0)
                    {
                        this.InvokeEx(f => f.listView3.Items[list_index].SubItems[5].Text = "Success");

                    }
                    else
                    {
                        listView3.Invoke(new MethodInvoker(delegate
                        {
                            if (listView3.Items[list_index].SubItems[1].Text == "No subtitle for this file, double-click to locate")
                            {
                                this.InvokeEx(f => f.listView3.Items[list_index].SubItems[5].Text = "No Sub");
                            }
                            else
                            {
                                this.InvokeEx(f => f.listView3.Items[list_index].SubItems[5].Text = "Error");
                            }
                        }));

                        if (listView3.Items.Count == 1)
                        {
                            single_error = true;
                            this.InvokeEx(f => TaskbarProgress.SetState(this.Handle, TaskbarProgress.TaskbarStates.NoProgress));
                            MessageBox.Show("Error muxing subtitles: " + Environment.NewLine + Environment.NewLine + list_lines[list_lines.Count - 5].ToString() + list_lines[list_lines.Count - 4].ToString(), "Error multiplexing", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            cancel_queue = true;
                        }
                    }

                    //prog = (Pg1.Value * 100 / list_proc.Items.Count);

                    if (list_index == list_proc.Items.Count - 1)
                    {
                        this.InvokeEx(f => TaskbarProgress.SetState(this.Handle, TaskbarProgress.TaskbarStates.NoProgress));
                        this.InvokeEx(f => f.Pg1.Value = 100);
                        this.InvokeEx(f => f.Pg1.Text = "100%");
                        working = false;
                        //Save log
                        if (no_save_logs == false)
                        {
                            string[] array_err = list_lines.ToArray();
                            String path = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_batch.log";

                            System.IO.StreamWriter SaveFile = new System.IO.StreamWriter(path);
                            SaveFile.WriteLine("FFmpeg log sesion: " + System.DateTime.Now);
                            SaveFile.WriteLine("-------------------------------");
                            foreach (String item in array_err)
                            {
                                SaveFile.WriteLine(item);
                            }
                            SaveFile.Close();

                            File.AppendAllText(path, "-----------------------");
                            File.AppendAllText(path, Environment.NewLine + "END OF LOG FILE");
                            System.IO.FileInfo fileInfo = new System.IO.FileInfo(path);

                            var bytes = fileInfo.Length;

                            var kilobytes = (double)bytes / 1024;
                            var megabytes = kilobytes / 1024;
                            var gigabytes = megabytes / 1024;

                            //Format size view
                            String size = "";
                            String separator = ".";

                            if (bytes > 1000000000)
                            {
                                if (gigabytes.ToString().Contains("."))
                                {
                                    separator = ".";
                                }
                                else
                                {
                                    separator = ",";
                                }

                                String gigas = gigabytes.ToString();
                                if (gigas.Length >= 5)
                                {
                                    gigas = gigas.Substring(0, gigas.LastIndexOf(separator) + 3);
                                    size = (gigas + " GB");
                                }
                                else
                                {
                                    size = (gigas + " GB");
                                }
                            }

                            if (bytes >= 1048576 && bytes <= 1000000000)
                            {
                                if (megabytes.ToString().Contains("."))
                                {
                                    separator = ".";
                                }
                                else
                                {
                                    separator = ",";
                                }
                                String megas = megabytes.ToString();
                                if (megas.Length > 5)
                                {
                                    megas = megas.Substring(0, megas.LastIndexOf(separator));
                                    size = (megas + " MB");
                                }
                                else
                                {
                                    size = (megas + " MB");
                                }
                            }

                            if (bytes >= 1024 && bytes < 1048576)

                            {
                                if (kilobytes.ToString().Contains("."))
                                {
                                    separator = ".";
                                }
                                else
                                {
                                    separator = ",";
                                }

                                String kbs = kilobytes.ToString();
                                if (kbs.Length >= 5)
                                {
                                    kbs = kbs.Substring(0, kbs.LastIndexOf(separator));
                                    size = (kbs + " KB");
                                }
                                else
                                {
                                    size = (kbs + " KB");
                                }
                            }
                            if (bytes > -1 && bytes < 1024)
                            {
                                String bits = bytes.ToString();
                                size = (bits + " Bytes");
                            }

                            //End Format size view
                            TimeSpan t = TimeSpan.FromSeconds(time_n_tasks);
                            String tx_elapsed = string.Format("{0:D2}h:{1:D2}m:{2:D2}s",
                                t.Hours,
                                t.Minutes,
                                t.Seconds);
                            File.AppendAllText(path, Environment.NewLine);
                            File.AppendAllText(path, Environment.NewLine + "Total time: " + tx_elapsed);
                            File.AppendAllText(path, Environment.NewLine + "LOG SIZE: " + size);

                            //End save log
                        }
                        //Automatic shutdown check

                        if (chkshut.Checked && cancel_queue == false)
                        {
                            auto_shut();
                            return;
                        }
                        //End shutdown check
                        else
                        {
                            //End shutdown check
                            if (cancel_queue == false)
                            {
                                if (play_on_end == true) play_end();
                                if (Form.ActiveForm == null)
                                {
                                    notifyIcon1.BalloonTipText = "FFmpeg Batch encoding successfully completed";
                                    notifyIcon1.BalloonTipIcon = ToolTipIcon.Info;
                                    notifyIcon1.BalloonTipTitle = "Encoding complete";
                                    notifyIcon1.ShowBalloonTip(0);
                                }
                                if (checkBox3.Checked)
                                {
                                    if (Directory.GetFiles(destino).Length != 0 && single_error == false)
                                    {
                                        Process open_processed = new Process();
                                        open_processed.StartInfo.FileName = "explorer.exe";
                                        open_processed.StartInfo.Arguments = '\u0022' + destino + '\u0022';
                                        open_processed.Start();
                                    }
                                    else
                                    {
                                        if (Directory.Exists(destino) && Directory.GetFiles(destino).Length == 0)
                                        {
                                            System.IO.Directory.Delete(destino);
                                        }
                                    }
                                }
                            }
                            else
                            {
                                if (single_error == false)
                                {
                                    Pg1.Text = "100%";
                                    this.InvokeEx(f => MessageBox.Show("Queue processing aborted", "Aborted", MessageBoxButtons.OK, MessageBoxIcon.Error));
                                }
                            }
                        }
                    }
                }

                Enable_Controls();

                if (sub_mux_ext == "mp4")
                {
                    this.InvokeEx(f => f.Combo_def_sub_mux.Enabled = false);
                }
                else
                {
                    this.InvokeEx(f => f.Combo_def_sub_mux.Enabled = true);
                }
            }).Start();
        }

        private void textBox8_TextChanged(object sender, EventArgs e)
        {
        }

        private void button25_Click(object sender, EventArgs e)
        {
            folderBrowserDialog1.ShowNewFolderButton = true;

            if (folderBrowserDialog1.ShowDialog() == DialogResult.OK)
            {
                txt_output_subs.Text = folderBrowserDialog1.SelectedPath;
                txt_output_subs.BackColor = txt_parameters.BackColor;
            }
        }

        private void textBox8_DoubleClick(object sender, EventArgs e)
        {
            txt_output_subs.Text = ".\\FFBatch";
            txt_output_subs.BackColor = Control.DefaultBackColor;
        }

        private void button26_Click(object sender, EventArgs e)
        {
            btn_clear_list.PerformClick();
        }

        private void Combo_ext_sub_mux_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (Combo_ext_sub_mux.SelectedIndex == 1)
            {
                Combo_def_sub_mux.Enabled = false;
                Combo_def_sub_mux.SelectedIndex = 1;
                foreach (ListViewItem item in listView3.Items)
                {
                    if (item.SubItems[5].Text != "No Sub")
                    {
                        item.SubItems[5].Text = "No";
                    }
                }
            }
            else
            {
                Combo_def_sub_mux.Enabled = true;
                Combo_def_sub_mux.SelectedIndex = 0;
                foreach (ListViewItem item in listView3.Items)
                {
                    if (item.SubItems[5].Text != "No Sub")
                    {
                        item.SubItems[5].Text = "Yes";
                    }
                }
            }
        }

        private void combo_ext_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (combo_ext.SelectedIndex == 0) return;
            if (combo_ext.SelectedIndex == 1)
            {
                if (list_tracks.Items.Count != 0 && list_tracks.Items[0].BackColor == Color.LightYellow)
                {
                    return;
                }
                else
                {
                    if (select_mp4 == false)
                    {
                        MessageBox.Show("Some features may not work in mp4 format. Subtitle text files only supported encoding is mov_text", "MP4 container constraints", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        select_mp4 = true;
                    }

                    //|| combo_ext.SelectedIndex == 2
                }
            }

            if (combo_ext.SelectedIndex == 2 && warn_mux_mov == false)
            {
                MessageBox.Show("Some features may not work in mov format. Subtitle text files only supported encoding is mov_text", "MOV container constraints", MessageBoxButtons.OK, MessageBoxIcon.Information);
                warn_mux_mov = true;
            }

            if (combo_ext.SelectedIndex == 7 && warn_mux_webm == false)
            {
                MessageBox.Show("Some features may not work in webm. Only VP8/9 video and vorbis audio are admitted", "WEBM container constraintss", MessageBoxButtons.OK, MessageBoxIcon.Information);
                warn_mux_webm = true;
            }
        }

        private void listView3_DragDrop(object sender, DragEventArgs e)
        {
            change_tab_1 = false;
            change_tab_2 = false;

            if (tabControl1.SelectedIndex == 1)
            {
                tabControl1.SelectedIndex = 0;
                change_tab_1 = true;
            }
            if (tabControl1.SelectedIndex == 2)
            {
                tabControl1.SelectedIndex = 0;
                change_tab_2 = true;
            }

            tabControl1.SelectedIndex = 0;

            string[] file_drop = (string[])e.Data.GetData(DataFormats.FileDrop);

            List<string> files2 = new List<string>();

            int num_drop = 0;

            foreach (String dropped in file_drop)
            {
                if (File.Exists(dropped))
                {
                    files2.Add(dropped);
                    num_drop = files2.Count();
                }
                else
                {
                    if (Directory.Exists(dropped))
                    {
                        if (add_subfs == false)
                        {
                            foreach (String file in Directory.GetFiles(dropped))
                            {
                                if (!File.GetAttributes(file).HasFlag(FileAttributes.Hidden))
                                {
                                    files2.Add(file);
                                    num_drop = num_drop + 1;
                                }
                            }
                        }
                        else
                        {
                            try
                            {
                                foreach (string f in Directory.GetFiles(dropped, "*.*", System.IO.SearchOption.AllDirectories))
                                {
                                    if (!File.GetAttributes(f).HasFlag(FileAttributes.Hidden))
                                    {
                                        files2.Add(f);
                                        num_drop = num_drop + 1;
                                    }
                                }
                            }
                            catch (System.Exception excpt)
                            {
                                var a = MessageBox.Show("Error: " + excpt.Message, "Access error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                        }
                    }
                }
            }

            if (num_drop >= 5000)
            {
                var a = MessageBox.Show("Adding " + num_drop + " files could take some time. Continue?", "Adding many files", MessageBoxButtons.OKCancel, MessageBoxIcon.Question);
                if (a == DialogResult.Cancel)
                {
                    return;
                }
            }

            files_to_add = files2;
            canceled_file_adding = false;
            btn_cancel_add.Enabled = true;
            btn_cancel_add.Visible = true;
            btn_cancel_add.Refresh();
            BG_Files.RunWorkerAsync();
        }

        private void listView3_DragEnter(object sender, DragEventArgs e)
        {
            if (e.Data.GetDataPresent(DataFormats.FileDrop, false))
                e.Effect = DragDropEffects.All;
            else
                e.Effect = DragDropEffects.None;
        }

        private void listView3_DoubleClick(object sender, EventArgs e)
        {
            if (listView3.SelectedIndices.Count > 0)
            {
                if (listView3.SelectedItems[0].SubItems[1].Text == "No subtitle for this file, double-click to locate")
                {
                    ct4_browse.PerformClick();
                }
            }
        }

        private void ct4_del_Click(object sender, EventArgs e)
        {
            if (listView3.SelectedIndices.Count > 0)
            {
                foreach (ListViewItem item in listView3.SelectedItems)
                {
                    listView3.Items.RemoveAt(item.Index);
                    foreach (ListViewItem item2 in listView1.Items)
                    {
                        if (item2.Text == item.Text)
                        {
                            listView1.Items.RemoveAt(item2.Index);
                        }
                    }
                    foreach (ListViewItem item3 in listView2.Items)
                    {
                        if (item3.Text == item.Text)
                        {
                            listView2.Items.RemoveAt(item3.Index);
                        }
                    }
                }

                lbl_items.Text = listView1.Items.Count + " file(s)";

                Double new_dur = 0;
                Double current_dur = 0;

                for (int i = 0; i < listView1.Items.Count; i++)
                {
                    if (listView1.Items[i].SubItems[3].Text != "N/A" && listView1.Items[i].SubItems[3].Text != "Pending")
                    {
                        current_dur = TimeSpan.Parse(listView1.Items[i].SubItems[3].Text).TotalSeconds;
                        new_dur = new_dur + current_dur;
                    }
                }
                TimeSpan t = TimeSpan.FromSeconds(new_dur);
                String dur = string.Format("{0:D2}h:{1:D2}m:{2:D2}s:{3:D3}ms",
                             (int)t.TotalHours,
                             t.Minutes,
                             t.Seconds,
                             t.Milliseconds);
                lbl_dur_list.Text = dur.Substring(0, 11);
                calc_list_size();
            }
        }

        private void listView3_KeyUp(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete)
            {
                ct4_del.PerformClick();
            }
        }

        private void listView3_Click(object sender, EventArgs e)
        {
            if (working == true)
            {
                listView3.SelectedIndices.Clear();
                return;
            }
        }

        private void ct3_image_aud_Click(object sender, EventArgs e)
        {
            if (list_tracks.SelectedItems[0].SubItems[2].Text.Contains("Video"))
            {
                list_tracks.SelectedItems[0].BackColor = Color.LightYellow;
                list_tracks.SelectedItems[0].SubItems[5].Text = "Image for audio";

                String ext_image = Path.GetExtension(list_tracks.SelectedItems[0].Text);

                if (ext_image != ".jpg" && ext_image != ".jpeg" && ext_image != ".png" && ext_image != ".gif" && ext_image != ".bmp" && ext_image != ".tiff" && ext_image != ".psd")
                {
                    if (Extract_img == false)
                    {
                        if (ss_time_input.Text == "0:00:00")
                        {
                            MessageBox.Show("The first frame will be used as base image. You can select a different time on main screen pre-input seeking.", "Image for audio", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        }

                        Extract_img = true;
                    }
                }
                combo_ext.SelectedIndex = 1;
                pic_encode_param.Image = img_streams.Images[4];
            }
            else
            {
                MessageBox.Show("Selected track does not contain a usable image.", "Image for audio", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }
        }

        private void notifyIcon1_Click(object sender, EventArgs e)
        {
            this.TopMost = true;
            this.TopMost = false;
            this.BringToFront();
            this.Focus();
            notifyIcon1.Visible = false;
        }

        private void txt_pre_input_Click(object sender, EventArgs e)
        {
            txt_pre_input.BackColor = Color.LightYellow;
        }

        private void txt_pre_input_TextChanged(object sender, EventArgs e)
        {
            btn_fix_pre.Enabled = true;
            if (txt_pre_input.Text.Length == 0)
            {
                txt_pre_input.BackColor = txt_parameters.BackColor;
            }
            else
            {
                txt_pre_input.BackColor = Color.LightYellow;
                if (combo_presets.SelectedIndex == 0) btn_save_preset.Enabled = true;
            }
        }

        private void textBox2_Click(object sender, EventArgs e)
        {
            txt_format.BackColor = Color.LightYellow;
        }

        private void button27_Click(object sender, EventArgs e)
        {
            if (list_tracks.SelectedIndices.Count > 0)
            {
                if (list_tracks.SelectedItems[0].SubItems[5].Text.Contains("Image for audio"))
                {
                    return;
                }

                if (list_tracks.SelectedItems[0].SubItems[3].Text.Contains("Subtitle"))

                {
                    def_mux_subs_enc = list_tracks.SelectedItems[0].SubItems[5].Text;
                }

                if (list_tracks.SelectedItems[0].SubItems[3].Text.Contains("Audio"))

                {
                    def_mux_audio_enc = list_tracks.SelectedItems[0].SubItems[5].Text;
                }

                if (list_tracks.SelectedItems[0].SubItems[3].Text.Contains("Video"))

                {
                    def_mux_video_enc = list_tracks.SelectedItems[0].SubItems[5].Text;
                }
            }
        }

        private void txt_pre_input_Leave(object sender, EventArgs e)
        {
            if (txt_pre_input.Text == "")
            {
                txt_pre_input.BackColor = txt_parameters.BackColor;
            }
            else
            {
                txt_pre_input.BackColor = Color.LightYellow;
            }
        }

        private void button14_Click(object sender, EventArgs e)
        {
            Pg1.Focus();
            Pg1.Text = "0" + System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator + "0%";
            if (!File.Exists(Path.Combine(Application.StartupPath, "ffmpeg.exe")))
            {
                MessageBox.Show("FFmpeg executable file was not found. Restart or reinstall application.", "Executable error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            was_started.Text = btn_trim.Text;
            foreach (ListViewItem file in listView1.Items)
            {
                if (!File.Exists(file.SubItems[1].Text + "\\" + file.Text))
                {
                    MessageBox.Show("File was not found: " + file.Text, "One file in the queue list was not found", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
            }

            if (listView1.Items.Count == 0)
            {
                MessageBox.Show("File list is empty", "No files to be processed", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }
            if (txt_parameters.Text == "")
            {
                MessageBox.Show("Parameters field can not be empty", "Parameters error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            if (txt_ini.Text == "0:00:00.000" && txt_fin.Text == "0:00:00.000" && chk_trim2.Checked == false)
            {
                MessageBox.Show("Trim can not be zero", "Trim is zero", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            if (txt_ini.BackColor == Color.Orange || txt_fin.BackColor == Color.Orange)
            {
                MessageBox.Show("Wrong time format. Check time fields", "Wrong time format", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            if (TimeSpan.Parse(txt_ini.Text).TotalSeconds >= TimeSpan.Parse(txt_fin.Text).TotalSeconds && chk_trim2.Checked == false)
            {
                MessageBox.Show("End time is shorter than start time", "Trimming time invalid", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            if (listView1.Items.Count > 1 && chk_trim2.Checked == false)
            {
                var a = MessageBox.Show("Do you wish to apply trimming to all files in queue list?", "Multiple trimmin", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                if (a == DialogResult.No)
                {
                    return;
                }

                avoid_overw();
            }

            if (txt_format.Text == "")
            {
                var a = MessageBox.Show("Format field is empty.", "Format field blank", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

            //Check path is writable
            String destino1 = String.Empty;
            Boolean rel_path = false;
            String element1 = listView1.Items[0].SubItems[1].Text + "\\" + listView1.Items[0].Text;
            if (txt_path_main.Text.Contains(".\\"))
            {
                destino1 = element1.Substring(0, element1.LastIndexOf('\\')) + txt_path_main.Text.Replace(".", String.Empty);
                rel_path = true;
            }
            else
            {
                if (checkBox1.CheckState == CheckState.Checked)
                {
                    String pre_dest = Path.GetDirectoryName(element1);
                    destino1 = Path.Combine(txt_path_main.Text, pre_dest.Substring(3, pre_dest.Length - 3));
                    rel_path = true;
                }
                else
                {
                    destino1 = txt_path_main.Text;
                }
            }

            try
            {
                if (rel_path == true)
                {
                    Directory.CreateDirectory(destino1);
                    System.Threading.Thread.Sleep(10);
                }
                else
                {
                    if (!Directory.Exists(destino1)) Directory.CreateDirectory(destino1);
                    File.WriteAllText(destino1 + "\\" + "FFBatch_test.txt", "FFBatch_test");
                    System.Threading.Thread.Sleep(10);
                    File.Delete(destino1 + "\\" + "FFBatch_test.txt");
                }
            }
            catch (System.Exception excpt)
            {
                MessageBox.Show("Write error: " + excpt.Message, "Error writing to destination folder", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            //End path is writable

            //Pending duration

            if (dur_ok == false)
            {
                list_pending_dur.Items.Clear();
                foreach (ListViewItem item in listView1.Items)
                {
                    list_pending_dur.Items.Add((ListViewItem)item.Clone());
                }
                BG_Dur.RunWorkerAsync();
                return;
            }

            //Check queued items

            if (warn_success_items == true)
            {
                Boolean no_queued = true;
                Boolean has_complete = false;
                foreach (ListViewItem item in listView1.Items)
                {
                    if (item.SubItems[5].Text == "Queued")
                    {
                        no_queued = false;
                    }
                    if (item.SubItems[5].Text == "Success" || item.SubItems[5].Text == "Replaced")
                    {
                        has_complete = true;
                    }
                }

                if (no_queued == true && listView1.Items.Count > 1)
                {
                    var a = MessageBox.Show("There are no items with status " + '\u0022' + "Queued" + '\u0022' + ". All files have been already processed. Do you want to continue?", "No items with queued status", MessageBoxButtons.OKCancel, MessageBoxIcon.Question);
                    if (a == DialogResult.Cancel) return;
                }

                if (no_queued == false && has_complete == true)
                {
                    var a = MessageBox.Show("Some list items were already encoded and are not in " + '\u0022' + "Queued" + '\u0022' + " status. Do you want to continue?", "Some items with no queued status", MessageBoxButtons.OKCancel, MessageBoxIcon.Question);
                    if (a == DialogResult.Cancel) return;
                }
                //End check queued items
            }

            listBox4.Items.Clear();
            Disable_Controls();
            txt_remain.Text = "Time remaining: 00h:00m:00s";

            String ffm = System.IO.Path.Combine(Application.StartupPath, "ffmpeg.exe");

            Pg1.Value = 0;
            Pg1.Maximum = listView1.Items.Count;

            foreach (ListViewItem file in listView1.Items)
            {
                if (TimeSpan.Parse(file.SubItems[3].Text).TotalSeconds < (TimeSpan.Parse(txt_fin.Text).TotalSeconds - TimeSpan.Parse(txt_ini.Text).TotalSeconds))
                {
                    MessageBox.Show("Trimming exceeds file duration", "Trimming outside boundaries", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    foreach (Control p in groupBox1.Controls)
                    {
                        p.Enabled = true;
                    }

                    Enable_Controls();
                    return;
                }

                if (TimeSpan.Parse(file.SubItems[3].Text).TotalSeconds == (TimeSpan.Parse(txt_fin.Text).TotalSeconds - TimeSpan.Parse(txt_ini.Text).TotalSeconds))
                {
                    MessageBox.Show("Trimming lenght is 0", "Trimming is 0", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    foreach (Control p in groupBox1.Controls)
                    {
                        p.Enabled = true;
                    }

                    Enable_Controls();
                    return;
                }

                if (TimeSpan.Parse(file.SubItems[3].Text).TotalSeconds < TimeSpan.Parse(txt_fin.Text).TotalSeconds)
                {
                    MessageBox.Show("Finish time exceeds file duration", "Trimming exceeds duration", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    foreach (Control p in groupBox1.Controls)
                    {
                        p.Enabled = true;
                    }

                    Enable_Controls();
                    return;
                }

                if (TimeSpan.Parse(file.SubItems[3].Text).TotalSeconds < TimeSpan.Parse(txt_ini.Text).TotalSeconds)
                {
                    MessageBox.Show("Start time exceeds file duration", "Trimming exceeds duration", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    foreach (Control p in groupBox1.Controls)
                    {
                        p.Enabled = true;
                    }

                    Enable_Controls();
                    return;
                }
            }

            if (avoid_overwriting == true && txt_path_main.Text.Contains(".\\") == false && txt_path_main.Text.Length < 4 && checkBox1.CheckState != CheckState.Checked)
            {
                avoid_overwriting = false;
                DialogResult a2 = MessageBox.Show("Multiple folders to single output folder may lead to overwriting. You can enable " + '\u0022' + "Recreate source path" + '\u0022' + " to avoid opossible overwritings. Do you want to continue?", "Different input folders to single output folder", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2);
                if (a2 == DialogResult.No) return;
            }

            //Validated list, start processing
            if (listView1.SelectedIndices.Count == 0)
            {
                listView1.Items[0].Selected = true;
                listView1.Items[0].Focused = true;
                listView1.Focus();
            }
            //Try preset
            String sel_test = listView1.SelectedItems[0].SubItems[1].Text + "\\" + listView1.SelectedItems[0].Text;
            this.Cursor = Cursors.WaitCursor;

            String file_prueba = "";

            file_prueba = sel_test;
            String fichero = Path.GetFileName(file_prueba);

            String destino_test = Path.Combine(Path.GetTempPath(), "FFBatch_test");
            if (!Directory.Exists(destino_test))
            {
                try
                {
                    Directory.CreateDirectory(destino_test);
                }
                catch (System.Exception excpt)
                {
                    MessageBox.Show("Error: " + excpt.Message, "Error writing to folder", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    this.Cursor = Cursors.Arrow;
                    return;
                }
            }
            if (chk_try.CheckState == CheckState.Unchecked)
            {
                Process consola_pre = new Process();
                consola_pre.StartInfo.FileName = "ffmpeg.exe";
                consola_pre.StartInfo.Arguments = " -i " + "" + '\u0022' + file_prueba + '\u0022' + "" + " " + "-ss 0 -t 1 " + " -y " + txt_parameters.Text + " " + '\u0022' + destino_test + "\\" + System.IO.Path.GetFileNameWithoutExtension(file_prueba) + "." + txt_format.Text + '\u0022';
                consola_pre.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                consola_pre.Start();
                System.Threading.Thread.Sleep(50);
                combo_prio.Invoke(new MethodInvoker(delegate
                {
                    if (combo_prio.SelectedIndex != 2)
                    {
                        Change_mem_prio();
                    }
                }));

                consola_pre.WaitForExit();

                if (consola_pre.ExitCode != 0)
                {
                    Enable_Controls();
                    this.Cursor = Cursors.Arrow;
                    MessageBox.Show("Encoding test failed on selected file. Try preset for more error information", "Encoding test failed", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    this.Cursor = Cursors.Arrow;

                    if (Directory.GetFiles(destino_test).Length == 0)
                    {
                        System.IO.Directory.Delete(destino_test);
                    }

                    return;
                }
            }
            //END try preset

            for (int i = 0; i < listView1.Items.Count; i++)
            {
                for (int j = i + 1; j < listView1.Items.Count; j++)
                {
                    String elem = listView1.Items[i].SubItems[1].Text + "\\" + listView1.Items[i].Text;
                    String elem2 = listView1.Items[j].SubItems[1].Text + "\\" + listView1.Items[j].Text;
                    if (Path.GetFileNameWithoutExtension(elem) == Path.GetFileNameWithoutExtension(elem2) && (checkBox1.CheckState != CheckState.Checked))
                    {
                        MessageBox.Show("The files: " + Environment.NewLine + Environment.NewLine + Path.GetFileName(listView1.Items[i].Text) + Environment.NewLine + Path.GetFileName(listView1.Items[j].Text) + Environment.NewLine + Environment.NewLine + "Have the same name and first one output will be overwritten. Please remove one of them." + Environment.NewLine + Environment.NewLine + "You can remove invalid no A/V items at Edit menu.", "Same filenames with different extension found", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                        Enable_Controls();
                        this.Cursor = Cursors.Arrow;
                        return;
                    }
                }
            }

            this.Cursor = Cursors.Arrow;
            cancel_queue = false;
            Pg1.Value = 0;
            //pg_current.Value = 0;
            Disable_Controls();
            //textBox4.Text = "0%";

            working = true;
            notifyIcon1.Visible = true;

            ListView list_proc = new ListView();
            foreach (ListViewItem item in listView1.Items)
            {
                list_proc.Items.Add((ListViewItem)item.Clone());
                item.SubItems[5].Text = "Queued";
                item.UseItemStyleForSubItems = true;
                item.BackColor = Color.White;
                item.SubItems[5].BackColor = Color.White;
            }

            Pg1.Maximum = list_proc.Items.Count;
            listView1.SelectedIndices.Clear();

            Double dura2 = 0;
            time_n_tasks = 0;
            timer_tasks.Start();

            List<string> list_lines = new List<string>();
            //End new pre-thread code
            process_glob.StartInfo.Arguments = String.Empty;

            //Begin new thread code for trimming
            new System.Threading.Thread(() =>
            {
                System.Threading.Thread.CurrentThread.IsBackground = true;
                String remain_time = "";

                //foreach (ListViewItem file in list_proc.Items)
                for (int list_index = 0; list_index < listView1.Items.Count; list_index++)
                {
                    String file = list_proc.Items[list_index].SubItems[1].Text + "\\" + list_proc.Items[list_index].Text;

                    if (cancel_queue == true)
                    {
                        working = false;
                        this.InvokeEx(f => TaskbarProgress.SetState(this.Handle, TaskbarProgress.TaskbarStates.NoProgress));
                        this.InvokeEx(f => f.Pg1.Value = 0);
                        //this.InvokeEx(f => f.pg_current.Value = 0);
                        this.InvokeEx(f => f.button2.Enabled = true);
                        Enable_Controls();
                        MessageBox.Show("Queue processing aborted", "Tasks aborted", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                        return;
                    }

                    int prog = (Pg1.Value * 100 / list_proc.Items.Count);
                    this.InvokeEx(f => f.Pg1.Text = (prog.ToString() + "%"));

                    this.InvokeEx(f => dura2 = TimeSpan.Parse(listView1.Items[list_index].SubItems[3].Text).TotalSeconds);

                    String ffm2 = System.IO.Path.Combine(Application.StartupPath, "ffmpeg.exe");
                    String fullPath = file;

                    //Begin Shifting
                    String shifting = "";
                    if (chk_shift.Checked == true)
                    {

                        shifting = " -itsoffset " + Num_Shift.Value.ToString().Replace(",", ".") + " -i " + '\u0022' + file + '\u0022' + " -map 1:v -map 0:a ";

                    }

                    //End Shifting

                    //Change Volume
                    String change_vol = "";
                    if (chk_vol.Checked == true)
                    {
                        change_vol = "-filter:a " + '\u0022' + "volume=" + vol_ch.Value.ToString() + "dB " + '\u0022' + " ";
                    }
                    //End change volume

                    String destino = "";
                    if (txt_path_main.Text.Contains(".\\"))
                    {
                        destino = file.Substring(0, fullPath.LastIndexOf('\\')) + txt_path_main.Text.Replace(".", String.Empty);
                    }
                    else
                    {
                        if (checkBox1.CheckState == CheckState.Checked)
                        {
                            String pre_dest = Path.GetDirectoryName(file);
                            destino = Path.Combine(txt_path_main.Text, pre_dest.Substring(3, pre_dest.Length - 3));
                        }
                        else
                        {
                            destino = txt_path_main.Text;
                        }
                    }

                    add_suffix = "";
                    if (chk_suffix.Checked == true && txt_suffix.Text != String.Empty)
                    {
                        add_suffix = txt_suffix.Text;
                    }

                    String ext_output1 = txt_format.Text;
                    if (txt_format.Text == String.Empty)
                    {
                        ext_output1 = Path.GetExtension(file);
                    }
                    else
                    {
                        ext_output1 = "." + txt_format.Text;
                    }
                    String AppParam = String.Empty;

                    if (chk_trim2.Checked == false)
                    {
                        AppParam = " -i " + "" + '\u0022' + file + '\u0022' + shifting + " " + " -ss " + txt_ini.Text + " -to " + txt_fin.Text + " -y " + txt_parameters.Text + " " + change_vol + '\u0022' + destino + "\\" + System.IO.Path.GetFileNameWithoutExtension(file) + add_suffix + ext_output1 + '\u0022';
                    }
                    else
                    {                     
                        Process tmp = new Process();
                        tmp.StartInfo.FileName = System.IO.Path.Combine(Application.StartupPath, "ffprobe.exe");
                        tmp.StartInfo.Arguments = "-v error -show_entries format=duration -sexagesimal -of default=noprint_wrappers=1:nokey=1 " + " -i " + '\u0022' + file + '\u0022';

                        tmp.StartInfo.RedirectStandardOutput = true;
                        tmp.StartInfo.UseShellExecute = false;
                        tmp.StartInfo.CreateNoWindow = true;
                        tmp.EnableRaisingEvents = true;
                        tmp.Start();

                        String duracion = tmp.StandardOutput.ReadToEnd();
                        tmp.WaitForExit();

                        if (duracion == null) duracion = "0";

                        String trim_end_2 = duracion.Substring(0, duracion.LastIndexOf("0"));                  
                        DateTime init_trim = Convert.ToDateTime(txt_ini.Text);                        
                        DateTime final_trim = Convert.ToDateTime(txt_fin.Text);
                        DateTime dur_date = Convert.ToDateTime(trim_end_2);
                        var trim_to = dur_date.Subtract(final_trim);
                        if (txt_fin.Text == "0:00:00.000" || txt_fin.Text == "00:00:00.000")
                        {
                            AppParam = " -ss " + txt_ini.Text + " -i " + "" + '\u0022' + file + '\u0022' + shifting + " -y " + txt_parameters.Text + " " + change_vol + '\u0022' + destino + "\\" + System.IO.Path.GetFileNameWithoutExtension(file) + add_suffix + ext_output1 + '\u0022';
                        }
                        else
                        {
                            AppParam = " -i " + "" + '\u0022' + file + '\u0022' + shifting + " " + " -ss " + txt_ini.Text + " -to " + trim_to + " -y " + txt_parameters.Text + " " + change_vol + '\u0022' + destino + "\\" + System.IO.Path.GetFileNameWithoutExtension(file) + add_suffix + ext_output1 + '\u0022';
                        }                            
                    }                    

                    if (!Directory.Exists(destino))
                    {
                        Directory.CreateDirectory(destino);
                    }
                    process_glob.StartInfo.FileName = ffm2;
                    process_glob.StartInfo.Arguments = AppParam;
                    process_glob.StartInfo.RedirectStandardOutput = true;
                    process_glob.StartInfo.RedirectStandardInput = true;
                    process_glob.StartInfo.RedirectStandardError = true;
                    process_glob.StartInfo.UseShellExecute = false;
                    process_glob.StartInfo.CreateNoWindow = true;
                    process_glob.EnableRaisingEvents = true;

                    valid_prog = false;
                    this.InvokeEx(f => f.listView1.Items[Pg1.Value].SubItems[5].Text = "Processing");

                    process_glob.Start();
                    System.Threading.Thread.Sleep(50);

                    combo_prio.Invoke(new MethodInvoker(delegate
                    {
                        if (combo_prio.SelectedIndex != 2)
                        {
                            Change_mem_prio();
                        }

                    }));

                    this.InvokeEx(f => validate_duration = listView1.Items[list_index].SubItems[3].Text);
                    if (validate_duration != "N/A" && validate_duration != "0:00:00" && validate_duration != "00:00:00" && validate_duration != "Pending")
                    {
                        valid_prog = true;
                    }
                    String err_txt = "";

                    while (!process_glob.StandardError.EndOfStream)
                    {
                        err_txt = process_glob.StandardError.ReadLine();
                        list_lines.Add(err_txt);

                        if (err_txt.Contains("time=") && err_txt.Contains("time=-") == false)
                        {
                            if (valid_prog == true)
                            {
                                this.InvokeEx(f => durat_n = TimeSpan.Parse(listView1.Items[list_index].SubItems[3].Text).TotalSeconds);
                                durat_n = durat_n - Convert.ToDouble(TimeSpan.Parse(txt_fin.Text).TotalSeconds - Convert.ToDouble(TimeSpan.Parse(txt_ini.Text).TotalSeconds));
                                int start_time_index = err_txt.IndexOf("time=") + 5;
                                Double sec_prog = TimeSpan.Parse(err_txt.Substring(start_time_index, 8)).TotalSeconds;
                                Double percent = (sec_prog * 100 / durat_n);
                                int percent2 = Convert.ToInt32(percent);
                                if (percent2 <= 100)
                                {

                                }
                                //Estimated remaining time

                                remain_time = err_txt.Substring(err_txt.LastIndexOf("speed=") + 6, err_txt.Length - err_txt.LastIndexOf("speed=") - 6);
                                remain_time = remain_time.Replace("x", String.Empty);
                                Double timing1 = 0;

                                if (System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator == ",")
                                {
                                    timing1 = Math.Round(Double.Parse(remain_time.Replace(".", ",")), 2);
                                }
                                else
                                {
                                    timing1 = Math.Round(Double.Parse(remain_time), 2);
                                }
                                Decimal timing = (decimal)timing1;
                                Decimal total_dur_dec = Convert.ToDecimal(durat_n);
                                Decimal total_prog_dec = Convert.ToDecimal(sec_prog);
                                Decimal remain_secs = 0;
                                if (timing > 0)
                                {
                                    remain_secs = (decimal)(total_dur_dec - total_prog_dec) / timing;
                                }

                                if (remain_secs > 60)
                                {
                                    remain_secs = remain_secs + 60;
                                }
                                String remain_from_secs = "";

                                TimeSpan t = TimeSpan.FromSeconds(Convert.ToDouble(remain_secs));
                                remain_from_secs = string.Format("{0:D2}h:{1:D2}",
                                   t.Hours,
                                  t.Minutes);

                                if (remain_secs >= 3600)
                                {
                                    //this.InvokeEx(f => f.txt_remain.Text = "Time remaining: " + remain_from_secs + " min");
                                    this.InvokeEx(f => f.txt_remain.Text = "Time remaining: ");
                                }

                                if (remain_secs < 3600 && remain_secs >= 600)
                                {
                                    //this.InvokeEx(f => f.txt_remain.Text = "Time remaining: " + remain_from_secs.Substring(remain_from_secs.LastIndexOf(":") + 1, 2) + " minutes");
                                    this.InvokeEx(f => f.txt_remain.Text = "Time remaining: ");
                                }
                                if (remain_secs < 600 && remain_secs >= 120)
                                {
                                    //this.InvokeEx(f => f.txt_remain.Text = "Time remaining: " + remain_from_secs.Substring(remain_from_secs.LastIndexOf(":") + 2, 1) + " minutes");
                                    this.InvokeEx(f => f.txt_remain.Text = "Time remaining: ");
                                }

                                if (remain_secs <= 59)
                                {
                                    //this.InvokeEx(f => f.txt_remain.Text = "Time remaining: " + Convert.ToInt16(remain_secs) + " seconds");
                                    this.InvokeEx(f => f.txt_remain.Text = "Time remaining: ");
                                }
                                if (remain_secs <= 0)
                                {
                                    //this.InvokeEx(f => f.txt_remain.Text = "About to finish");
                                    this.InvokeEx(f => f.txt_remain.Text = "Time remaining: ");
                                }

                                //End remaining time
                            }
                        }
                        //Read output, get progress
                    }
                    process_glob.WaitForExit();

                    //this.InvokeEx(f => f.pg_current.Value = 100);
                    //this.InvokeEx(f => f.//textBox4.Text = "100%");
                    list_lines.Add("");
                    list_lines.Add("---------------------End of " + Path.GetFileName(file) + " log-------------------------------");
                    list_lines.Add("");

                    this.InvokeEx(f => f.Pg1.Value = Pg1.Value + 1);
                    this.InvokeEx(f => f.Pg1.Refresh());

                    process_glob.StartInfo.Arguments = String.Empty;

                    if (process_glob.ExitCode == 0)
                    {
                        this.InvokeEx(f => f.listView1.Items[Pg1.Value - 1].SubItems[5].Text = "Success");
                        this.InvokeEx(f => f.listView1.Items[Pg1.Value - 1].EnsureVisible());
                    }
                    else
                    {
                        this.InvokeEx(f => f.listView1.Items[Pg1.Value - 1].SubItems[5].Text = "Error");
                        this.InvokeEx(f => f.listView1.Items[Pg1.Value - 1].BackColor = Color.PaleGoldenrod);
                    }

                    prog = (Pg1.Value * 100 / list_proc.Items.Count);
                    this.InvokeEx(f => TaskbarProgress.SetValue(this.Handle, Pg1.Value, Pg1.Maximum));

                    this.InvokeEx(f => f.Pg1.Text = (prog.ToString() + "%"));

                    if (Pg1.Value == Pg1.Maximum)
                    {
                        this.InvokeEx(f => TaskbarProgress.SetState(this.Handle, TaskbarProgress.TaskbarStates.NoProgress));
                        working = false;
                        //Save log
                        if (no_save_logs == false)
                        {
                            string[] array_err = list_lines.ToArray();
                            String path = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_batch.log";

                            System.IO.StreamWriter SaveFile = new System.IO.StreamWriter(path);
                            SaveFile.WriteLine("FFmpeg log sesion: " + System.DateTime.Now);
                            SaveFile.WriteLine("-------------------------------");
                            foreach (String item in array_err)
                            {
                                SaveFile.WriteLine(item);
                            }
                            SaveFile.Close();

                            File.AppendAllText(path, "-----------------------");
                            File.AppendAllText(path, Environment.NewLine + "END OF LOG FILE");
                            System.IO.FileInfo fileInfo = new System.IO.FileInfo(path);

                            var bytes = fileInfo.Length;

                            var kilobytes = (double)bytes / 1024;
                            var megabytes = kilobytes / 1024;
                            var gigabytes = megabytes / 1024;

                            //Format size view
                            String size = "";
                            String separator = ".";

                            if (bytes > 1000000000)
                            {
                                if (gigabytes.ToString().Contains("."))
                                {
                                    separator = ".";
                                }
                                else
                                {
                                    separator = ",";
                                }

                                String gigas = gigabytes.ToString();
                                if (gigas.Length >= 5)
                                {
                                    gigas = gigas.Substring(0, gigas.LastIndexOf(separator) + 3);
                                    size = (gigas + " GB");
                                }
                                else
                                {
                                    size = (gigas + " GB");
                                }
                            }

                            if (bytes >= 1048576 && bytes <= 1000000000)
                            {
                                if (megabytes.ToString().Contains("."))
                                {
                                    separator = ".";
                                }
                                else
                                {
                                    separator = ",";
                                }
                                String megas = megabytes.ToString();
                                if (megas.Length > 5)
                                {
                                    megas = megas.Substring(0, megas.LastIndexOf(separator));
                                    size = (megas + " MB");
                                }
                                else
                                {
                                    size = (megas + " MB");
                                }
                            }

                            if (bytes >= 1024 && bytes < 1048576)

                            {
                                if (kilobytes.ToString().Contains("."))
                                {
                                    separator = ".";
                                }
                                else
                                {
                                    separator = ",";
                                }

                                String kbs = kilobytes.ToString();
                                if (kbs.Length >= 5)
                                {
                                    kbs = kbs.Substring(0, kbs.LastIndexOf(separator));
                                    size = (kbs + " KB");
                                }
                                else
                                {
                                    size = (kbs + " KB");
                                }
                            }
                            if (bytes > -1 && bytes < 1024)
                            {
                                String bits = bytes.ToString();
                                size = (bits + " Bytes");
                            }

                            //End Format size view
                            File.AppendAllText(path, Environment.NewLine + "LOG SIZE: " + size);

                            //End save log
                        }

                        //Automatic shutdown check
                        if (chkshut.Checked && cancel_queue == false)
                        {
                            try
                            {
                                String borrar_s = destino_test + "\\" + System.IO.Path.GetFileNameWithoutExtension(file_prueba) + "." + txt_format.Text;

                                foreach (string file_s in Directory.GetFiles(destino_test))
                                {
                                    File.Delete(file_s);
                                }
                                System.IO.Directory.Delete(destino_test);
                            }
                            catch { }

                            auto_shut();
                            return;
                        }
                        //End shutdown check
                        else
                        {
                            if (cancel_queue == false)
                            {
                                if (play_on_end == true) play_end();
                                if (Form.ActiveForm == null)
                                {
                                    notifyIcon1.BalloonTipText = "FFmpeg Batch trimming successfully completed";
                                    notifyIcon1.BalloonTipIcon = ToolTipIcon.Info;
                                    notifyIcon1.BalloonTipTitle = "Trimming complete";
                                    notifyIcon1.ShowBalloonTip(1000);
                                }

                                if (checkBox3.Checked)
                                {
                                    if (Directory.GetFiles(destino).Length != 0)
                                    {
                                        Process open_processed = new Process();
                                        open_processed.StartInfo.FileName = "explorer.exe";
                                        open_processed.StartInfo.Arguments = '\u0022' + destino + '\u0022';
                                        open_processed.Start();
                                    }
                                    else
                                    {
                                        if (Directory.Exists(destino))
                                        {
                                            System.IO.Directory.Delete(destino);
                                        }
                                    }
                                }
                            }
                            else
                            {
                                this.InvokeEx(f => TaskbarProgress.SetState(this.Handle, TaskbarProgress.TaskbarStates.NoProgress));
                                this.InvokeEx(f => MessageBox.Show("Queue processing aborted", "Aborted", MessageBoxButtons.OK, MessageBoxIcon.Error));
                            }
                        }
                    }
                }
                Enable_Controls();

                String borrar = destino_test + "\\" + System.IO.Path.GetFileNameWithoutExtension(file_prueba) + "." + txt_format.Text;

                foreach (string file in Directory.GetFiles(destino_test))
                {
                    File.Delete(file);
                }
                System.IO.Directory.Delete(destino_test);
            }).Start();
        }

        private void timer_tasks_Tick(object sender, EventArgs e)
        {
            if (paused == true) return;

            time_n_tasks = time_n_tasks + 1;

            TimeSpan t9 = TimeSpan.FromSeconds(time_n_tasks);
            String tx_elapsed1 = string.Format("{0:D2}h:{1:D2}m:{2:D2}s",
                t9.Hours,
                t9.Minutes,
                t9.Seconds);
            lbl_elapsed.Text = "Time elapsed: " + tx_elapsed1;

            if (total_time == true)
            {
                TimeSpan t = TimeSpan.FromSeconds(time_n_tasks);
                String tx_elapsed = string.Format("{0:D2}h:{1:D2}m:{2:D2}s",
                    t.Hours,
                    t.Minutes,
                    t.Seconds);
                txt_remain.Text = "Time elapsed: " + tx_elapsed;
            }
        }

        private void ss_time_input_TextChanged(object sender, EventArgs e)
        {
            if (ss_time_input.Text == "0:00:00.000")
            {
                ss_time_input.BackColor = groupBox1.BackColor;
                return;
            }

            DateTime time;
            if (!DateTime.TryParse(ss_time_input.Text, out time))
            {
                ss_time_input.BackColor = Color.Orange;
            }
            else
            {
                ss_time_input.BackColor = Color.White;
            }

            if (ss_time_input.Text.Length > 14)
            {
                MessageBox.Show("Wrong format. Please use a 00:00:00.000 time format", "Time format error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
        }

        private void ss_time_input_Leave(object sender, EventArgs e)
        {
            if (ss_time_input.Text == "0:00:00.000")
            {
                ss_time_input.BackColor = Control.DefaultBackColor;
                return;
            }

            DateTime time2;
            if (!DateTime.TryParse(ss_time_input.Text, out time2))
            {
                ss_time_input.BackColor = Color.Orange;
            }
            else
            {
                ss_time_input.BackColor = Color.White;
            }
        }

        private void ss_time_input_DoubleClick(object sender, EventArgs e)
        {
            ss_time_input.Text = "0:00:00.000";
        }

        private void btn_add_tracks_Click(object sender, EventArgs e)
        {
            Pg1.Focus();
            if (listView2.Items.Count == 1)
            {
                listView2.Items[0].Selected = true;
            }
            ct2_all.PerformClick();
            tracks_background();

            if (listView2.Items.Count > 1 && listView2.SelectedIndices.Count == 0)
            {
                MessageBox.Show("No file selected to add available streams", "No file selected", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        private void calc_list_size()
        {
            tot_size = 0;

            foreach (ListViewItem file in listView1.Items)
            {
                String filename = file.SubItems[1].Text + "\\" + file.Text;
                System.IO.FileInfo fileInfo = new System.IO.FileInfo(filename);
                if (File.Exists(filename))
                    tot_size = tot_size + fileInfo.Length;
            }

            var bytes = tot_size;
            var kilobytes = (double)bytes / 1024;
            var megabytes = kilobytes / 1024;
            var gigabytes = megabytes / 1024;

            //Format size view

            //Get separator
            String separator = ".";

            if (bytes > 1000000000)
            {
                if (gigabytes.ToString().Contains("."))
                {
                    separator = ".";
                }
                else
                {
                    separator = ",";
                }

                String gigas = gigabytes.ToString();
                if (gigas.Length >= 5)
                {
                    gigas = gigas.Substring(0, gigas.LastIndexOf(separator) + 3);
                    this.InvokeEx(f => f.lbl_size.Text = gigas + " GB");
                }
                else
                {
                    this.InvokeEx(f => f.lbl_size.Text = gigas + " GB");
                }
            }

            if (bytes >= 1048576 && bytes < 1000000000)
            {
                if (megabytes.ToString().Contains("."))
                {
                    separator = ".";
                }
                else
                {
                    separator = ",";
                }
                String megas = megabytes.ToString();
                if (megas.Length > 5)
                {
                    megas = megas.Substring(0, megas.LastIndexOf(separator));
                    this.InvokeEx(f => f.lbl_size.Text = megas + " MB");
                }
                else
                {
                    this.InvokeEx(f => f.lbl_size.Text = megas + " MB");
                }
            }

            if (bytes >= 1024 && bytes < 1048576)
            {
                if (kilobytes.ToString().Contains("."))
                {
                    separator = ".";
                }
                else
                {
                    separator = ",";
                }
                String kbs = kilobytes.ToString();
                if (kbs.Length >= 5)
                {
                    kbs = kbs.Substring(0, kbs.LastIndexOf(separator));
                    this.InvokeEx(f => f.lbl_size.Text = kbs + " KB");
                }
                else
                {
                    this.InvokeEx(f => f.lbl_size.Text = kbs + " KB");
                }
            }
            if (bytes > -1 && bytes < 1024)
            {
                String bits = bytes.ToString();
                this.InvokeEx(f => f.lbl_size.Text = bits + " Bytes");
            }

            //End Format size view
        }

        private void calc_list_dur()

        {
            //Show total duration
            Double Total_dur = 0;


            foreach (ListViewItem item in listView1.Items)
            {
                String filename = item.SubItems[1].Text + "\\" + item.Text;

                if (item.SubItems[3].Text != "0:00:00" && item.SubItems[3].Text != "N/A" && item.SubItems[3].Text != "Pending" && item.SubItems[3].Text != "00:00:00")
                {
                    Total_dur = Total_dur + TimeSpan.Parse(item.SubItems[3].Text).TotalSeconds;
                }
            }


            TimeSpan t = TimeSpan.FromSeconds(Total_dur);
            String dur = string.Format("{0:D2}h:{1:D2}m:{2:D2}s:{3:D3}ms",
                     (int)t.TotalHours,
                     t.Minutes,
                     t.Seconds,
                     t.Milliseconds);
            lbl_dur_list.Text = dur.Substring(0, 11);

            //End show total duration
        }

        private void btn_capture_Click(object sender, EventArgs e)
        {
            cancel_queue = false;
            notifyIcon1.Visible = true;

            //Try preset

            this.Cursor = Cursors.WaitCursor;

            String destino_test = System.IO.Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyVideos), "FFBatch_Test");
            if (!Directory.Exists(destino_test))
            {
                try
                {
                    Directory.CreateDirectory(destino_test);
                }
                catch { }

            }
            Process consola_pre = new Process();
            consola_pre.StartInfo.FileName = "ffmpeg.exe";
            consola_pre.StartInfo.Arguments = " -f gdigrab " + txt_pre_input.Text + " -i desktop" + " -t 00:00:00.000 " + " -y " + txt_parameters.Text + " " + '\u0022' + destino_test + "\\" + "Rec_Screen_01" + "." + txt_format.Text + '\u0022';
            consola_pre.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
            consola_pre.Start();
            consola_pre.WaitForExit();

            if (consola_pre.ExitCode != 0)
            {
                this.Cursor = Cursors.Arrow;

                MessageBox.Show("Screen capture test failed." + Environment.NewLine + Environment.NewLine + "Try with a screen capture preset and check encoding parameters.", "Recording test failed", MessageBoxButtons.OK, MessageBoxIcon.Error);
                this.Cursor = Cursors.Arrow;
                System.IO.DirectoryInfo di = new DirectoryInfo(destino_test);

                foreach (FileInfo file in di.GetFiles())
                {
                    file.Delete();
                }

                if (Directory.GetFiles(destino_test).Length == 0)
                {
                    System.IO.Directory.Delete(destino_test);
                }
                return;
            }
            else
            {
                this.Cursor = Cursors.Arrow;
            }

            System.IO.DirectoryInfo di2 = new DirectoryInfo(destino_test);

            foreach (FileInfo file in di2.GetFiles())
            {
                file.Delete();
            }

            if (Directory.GetFiles(destino_test).Length == 0)
            {
                System.IO.Directory.Delete(destino_test);
            }

            //END try preset

            //SELECT AUDIO
            abort_capture = true;
            Form frm_audio_input = new Form();
            frm_audio_input.Icon = this.Icon;

            frm_audio_input.Height = 240;
            frm_audio_input.Width = 365;
            frm_audio_input.FormBorderStyle = FormBorderStyle.Fixed3D;
            frm_audio_input.MaximizeBox = false;
            frm_audio_input.MinimizeBox = false;
            frm_audio_input.Text = "Screen capture";

            CB1_o.Items.Clear();
            CB1_o.Parent = frm_audio_input;
            CB1_o.Left = 15;
            CB1_o.Top = 42;
            CB1_o.Height = 225;
            CB1_o.Width = 315;
            CB1_o.DropDownStyle = ComboBoxStyle.DropDownList;
            CB1_o.SelectedIndexChanged += new EventHandler(CB1_o_SelectedIndexChanged);

            TextBox titulo = new TextBox();
            titulo.Parent = frm_audio_input;
            titulo.Top = 10;
            titulo.Left = 15;
            titulo.Width = 315;
            var fuente = new System.Drawing.Font("Microsoft Sans Serif", 10, FontStyle.Regular);

            titulo.Font = fuente;
            titulo.BorderStyle = BorderStyle.Fixed3D;
            titulo.TextAlign = HorizontalAlignment.Left;
            titulo.ReadOnly = true;
            titulo.Text = "Select audio capture device";
            titulo.BorderStyle = BorderStyle.None;
            titulo.Refresh();

            Button boton_ok_audio = new Button();
            boton_ok_audio.Parent = frm_audio_input;
            boton_ok_audio.Left = 15;
            boton_ok_audio.Top = 83;
            boton_ok_audio.Width = 315;
            boton_ok_audio.Height = 68;
            boton_ok_audio.Text = "Start screen capture";
            boton_ok_audio.TabIndex = 0;
            boton_ok_audio.TextAlign = ContentAlignment.BottomCenter;
            boton_ok_audio.Image = btn_capture.Image;
            boton_ok_audio.ImageAlign = ContentAlignment.TopCenter;
            boton_ok_audio.Click += new EventHandler(boton_ok_audio_Click);

            Button boton_cancel_audio = new Button();
            boton_cancel_audio.Parent = frm_audio_input;
            boton_cancel_audio.Left = 191;
            boton_cancel_audio.Top = 159;
            boton_cancel_audio.Width = 140;
            boton_cancel_audio.Height = 28;
            boton_cancel_audio.Text = "Abort capture      ";
            boton_cancel_audio.TextAlign = ContentAlignment.MiddleCenter;
            boton_cancel_audio.ImageList = img_abort;
            boton_cancel_audio.Image = img_abort.Images[0];
            boton_cancel_audio.ImageAlign = ContentAlignment.MiddleRight;
            boton_cancel_audio.Click += new EventHandler(boton_cancel_audio_Click);

            Button boton_refresh_audio = new Button();
            boton_refresh_audio.Parent = frm_audio_input;
            boton_refresh_audio.Left = 15;
            boton_refresh_audio.Top = 159;
            boton_refresh_audio.Width = 140;
            boton_refresh_audio.Height = 27;
            boton_refresh_audio.Text = "   Refresh list";
            boton_refresh_audio.TextAlign = ContentAlignment.MiddleCenter;
            boton_refresh_audio.Image = btn_refresh.Image;
            boton_refresh_audio.ImageAlign = ContentAlignment.MiddleLeft;
            boton_refresh_audio.Click += new EventHandler(boton_refresh_audio_Click);

            Button boton_show_rec = new Button();
            boton_show_rec.Parent = frm_audio_input;
            boton_show_rec.Left = 155;
            boton_show_rec.Top = 159;
            boton_show_rec.Width = 36;
            boton_show_rec.Height = 27;
            boton_show_rec.ImageList = img_abort;
            boton_show_rec.Image = img_abort.Images[1];
            boton_show_rec.ImageAlign = ContentAlignment.MiddleCenter;
            boton_show_rec.Click += new EventHandler(boton_show_rec_Click);

            Process consola = new Process();

            consola.StartInfo.FileName = "ffmpeg.exe";

            frm_audio_input.StartPosition = FormStartPosition.CenterScreen;

            consola.StartInfo.Arguments = " -list_devices true -f dshow -i dummy";

            consola.StartInfo.RedirectStandardOutput = true;
            consola.StartInfo.RedirectStandardError = true;
            consola.StartInfo.UseShellExecute = false;
            consola.StartInfo.CreateNoWindow = true;
            consola.StartInfo.StandardErrorEncoding = Encoding.UTF8;
            consola.EnableRaisingEvents = true;

            consola.Start();

            CB1_o.Items.Add("No audio");
            String out_ff = String.Empty;
            Boolean start_audio_sources = false;
            while (!consola.StandardError.EndOfStream)
            {
                out_ff = consola.StandardError.ReadLine();
                if (out_ff.Contains("DirectShow audio devices"))
                {
                    start_audio_sources = true;
                }

                if (start_audio_sources == true)
                {
                    if (out_ff.Substring(out_ff.Length - 2, 2) != "}" + "\u0022" && out_ff.Contains("DirectShow audio devices") == false && out_ff.Contains("Alternative name") == false && out_ff.Contains("dummy") == false)
                    {
                        //if (out_ff.Contains("Ã³")) out_ff = out_ff.Replace("Ã³", "ó");
                        int trim1 = out_ff.IndexOf("\u0022") + "\u0022".Length;
                        int trim2 = out_ff.LastIndexOf("\u0022");
                        if (trim2 - trim1 > 0) this.InvokeEx(f => CB1_o.Items.Add(out_ff.Substring(trim1, trim2 - trim1)));
                    }
                }
                //}

                //if (out_ff.Substring(out_ff.Length-1,1) == "\u0022")
                //{
                //this.InvokeEx(f => CB1_o.Items.Add(consola.StandardError.ReadLine()));
            }
            consola.StartInfo.Arguments = String.Empty;
            CB1_o.Refresh();
            CB1_o.SelectedIndex = 0;
            if (CB1_o.Items.Count == 1) CB1_o.Enabled = false;

            for (int i = 0; i < CB1_o.Items.Count; i++)
            {
                if (CB1_o.Items[i].ToString() == prev_dev_audio)
                {
                    CB1_o.SelectedIndex = i;
                    break;
                }
            }

            this.Cursor = Cursors.Arrow;
            frm_audio_input.ShowDialog();

            //END AUDIO SELECT
            if (abort_capture == true) return;

            //Validated list, start processing
            recording_scr = true;
            txt_remain.Text = "Time remaining: 00h:00m:00s";

            cancel_queue = false;
            Pg1.Value = 0;
            //pg_current.Value = 0;
            Disable_Controls();
            //textBox4.Text = "0%";

            working = true;

            ListView list_proc = new ListView();
            foreach (ListViewItem item in listView1.Items)
            {
                list_proc.Items.Add(item.Text);
                item.BackColor = Color.White;
            }

            Pg1.Maximum = list_proc.Items.Count;
            listView1.SelectedIndices.Clear();
            lbl_elapsed.Text = "Time elapsed: 00h:00m:00s";
            time_n_tasks = 0;

            new System.Threading.Thread(() =>
            {
                System.Threading.Thread.CurrentThread.IsBackground = true;

                String ffm = System.IO.Path.Combine(Application.StartupPath, "ffmpeg.exe");

                String destino = "";

                if (txt_path_main.Text.Contains("..\\"))
                {
                    destino = System.IO.Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyVideos), txt_path_main.Text.Replace("..\\", String.Empty));
                }
                else
                {
                    destino = txt_path_main.Text;
                }
                capture_count = capture_count + 1;

                if (File.Exists(destino + "\\" + "Rec_Screen_" + capture_count.ToString() + "." + txt_format.Text) == true)
                {
                    MessageBox.Show("File: " + destino + "\\" + "Rec_Screen_" + capture_count.ToString() + "." + txt_format.Text + " exits", "Destination file exists", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    Enable_Controls();
                    working = false;
                    return;
                }

                this.InvokeEx(f => f.btn_abort_all.Enabled = false);
                //Recording countdown
                this.InvokeEx(f => f.lbl_capture.Enabled = true);
                this.InvokeEx(f => f.lbl_capture.Text = "");
                this.InvokeEx(f => f.lbl_capture.Visible = true);

                this.InvokeEx(f => f.lbl_capture.Text = ("Capturing in 3 seconds"));
                this.InvokeEx(f => f.lbl_capture.Refresh());
                Thread.Sleep(1000);
                this.InvokeEx(f => f.lbl_capture.Text = ("Capturing in 2 seconds"));
                this.InvokeEx(f => f.lbl_capture.Refresh());
                Thread.Sleep(1000);
                this.InvokeEx(f => f.lbl_capture.Text = ("Capturing in 1 second"));
                this.InvokeEx(f => f.lbl_capture.Refresh());
                Thread.Sleep(1000);
                this.InvokeEx(f => f.timer_tasks.Start());
                this.InvokeEx(f => f.lbl_capture.Text = "");
                this.InvokeEx(f => f.lbl_capture.Visible = false);
                //End recording countdown
                this.InvokeEx(f => f.btn_abort_all.Enabled = true);
                String pre_input_var = "";
                if (txt_pre_input.Text != "")
                {
                    pre_input_var = txt_pre_input.Text;
                }
                String AppParam = String.Empty;
                if (audio_capture_device == "No audio")
                {
                    AppParam = " -f gdigrab " + pre_input_var + " -i desktop " + txt_parameters.Text + " -y " + '\u0022' + destino + "\\" + "Rec_Screen_" + capture_count.ToString() + "." + txt_format.Text + '\u0022';
                }
                else
                {
                    AppParam = " -f dshow -i audio=" + '\u0022' + audio_capture_device + '\u0022' + " -f gdigrab " + pre_input_var + " -i desktop " + txt_parameters.Text + " -y " + '\u0022' + destino + "\\" + "Rec_Screen_" + capture_count.ToString() + "." + txt_format.Text + '\u0022';
                }

                if (!Directory.Exists(destino))
                {
                    Directory.CreateDirectory(destino);
                }

                process_glob.StartInfo.FileName = ffm;
                process_glob.StartInfo.Arguments = AppParam;

                valid_prog = false;

                process_glob.StartInfo.RedirectStandardOutput = false;
                process_glob.StartInfo.RedirectStandardError = false;
                process_glob.StartInfo.RedirectStandardInput = true;
                process_glob.StartInfo.UseShellExecute = false;
                process_glob.StartInfo.CreateNoWindow = true;
                process_glob.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                this.InvokeEx(f => f.pic_recording.Visible = true);
                process_glob.Start();
                capture_handle = process_glob.Id;
                process_glob.WaitForExit();
                recording_scr = false;
                timer1.Stop();
                this.InvokeEx(f => f.pic_recording.Visible = false);
                Enable_Controls();
                working = false;

                if (process_glob.ExitCode == 1)
                {
                    MessageBox.Show("Invalid parameters for screen capturing.", "Invalid capturing paremeters", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }

                if (process_glob.ExitCode != -1073741510 && process_glob.ExitCode != 1 && process_glob.ExitCode != 0)
                {
                    MessageBox.Show("Screen capturing terminated unexpectedly. File may be truncated.", "Capturing terminated", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }

                timer_tasks.Stop();
                TimeSpan t = TimeSpan.FromSeconds(time_n_tasks);
                String tx_elapsed = string.Format("{0:D2}h:{1:D2}m:{2:D2}s",
                    t.Hours,
                    t.Minutes,
                    t.Seconds);
                this.InvokeEx(f => f.txt_remain.Text = "Time remaining: 00h:00m:00s");

                if (checkBox3.Checked)
                {
                    if (Directory.GetFiles(destino).Length != 0 && process_glob.ExitCode == 0)
                    {
                        Process open_processed = new Process();
                        open_processed.StartInfo.FileName = "explorer.exe";
                        open_processed.StartInfo.Arguments = '\u0022' + destino + '\u0022';
                        open_processed.Start();
                    }
                }
            }).Start();
        }

        private void boton_show_rec_Click(object sender, EventArgs e)
        {
            Process.Start("control", "mmsys.cpl,,1");
        }

        private void boton_refresh_audio_Click(object sender, EventArgs e)
        {
            Process consola = new Process();

            consola.StartInfo.FileName = "ffmpeg.exe";
            consola.StartInfo.Arguments = " -list_devices true -f dshow -i dummy";

            consola.StartInfo.RedirectStandardOutput = true;
            consola.StartInfo.RedirectStandardError = true;
            consola.StartInfo.UseShellExecute = false;
            consola.StartInfo.CreateNoWindow = true;
            consola.StartInfo.StandardErrorEncoding = Encoding.UTF8;
            consola.EnableRaisingEvents = true;

            consola.Start();

            CB1_o.Items.Clear();
            CB1_o.Items.Add("No audio");
            String out_ff = String.Empty;
            Boolean start_audio_sources = false;
            while (!consola.StandardError.EndOfStream)
            {
                out_ff = consola.StandardError.ReadLine();
                if (out_ff.Contains("DirectShow audio devices"))
                {
                    start_audio_sources = true;
                }

                if (start_audio_sources == true)
                {
                    if (out_ff.Substring(out_ff.Length - 2, 2) != "}" + "\u0022" && out_ff.Contains("DirectShow audio devices") == false && out_ff.Contains("Alternative name") == false && out_ff.Contains("dummy") == false)
                    {
                        //if (out_ff.Contains("Ã³")) out_ff = out_ff.Replace("Ã³", "ó");
                        int trim1 = out_ff.IndexOf("\u0022") + "\u0022".Length;
                        int trim2 = out_ff.LastIndexOf("\u0022");
                        if (trim2 - trim1 > 0) this.InvokeEx(f => CB1_o.Items.Add(out_ff.Substring(trim1, trim2 - trim1)));
                    }
                }
                //}

                //if (out_ff.Substring(out_ff.Length-1,1) == "\u0022")
                //{
                //this.InvokeEx(f => CB1_o.Items.Add(consola.StandardError.ReadLine()));
            }
            CB1_o.Refresh();
            CB1_o.SelectedIndex = 0;
            if (CB1_o.Items.Count > 1)
            {
                CB1_o.Enabled = true;
                CB1_o.DroppedDown = true;
            }
            else
            {
                CB1_o.Enabled = false;
            }

            consola.StartInfo.Arguments = String.Empty;
            this.Cursor = Cursors.Arrow;
        }

        private void boton_cancel_path_Click(object sender, EventArgs e)
        {
            ActiveForm.Close();
        }

        private void boton_cancel_audio_Click(object sender, EventArgs e)
        {
            ActiveForm.Close();
        }

        private void chk_burn_CheckedChanged(object sender, EventArgs e)
        {
            if (chk_burn.CheckState == CheckState.Checked)
            {
                hard_sub = true;
                txt_hard_subs.Enabled = true;
                Enable_txt_hard_Subs = true;
                Combo_def_sub_mux.Enabled = false;
                Combo_sub_lang_mux.Enabled = false;
            }
            else
            {
                hard_sub = false;
                txt_hard_subs.Enabled = false;
                Enable_txt_hard_Subs = false;
                Combo_def_sub_mux.Enabled = true;
                Combo_sub_lang_mux.Enabled = true;
            }
        }

        private void txt_fin_TextChanged(object sender, EventArgs e)
        {
            DateTime time;
            if (!DateTime.TryParse(txt_fin.Text, out time))
            {
                txt_fin.BackColor = Color.Orange;
            }
            else
            {
                txt_fin.BackColor = Color.White;
            }

            if (txt_fin.Text.Length > 12)
            {
                MessageBox.Show("Wrong format. Please use a 00:00:00.000 time format", "Time format error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
        }

        private void txt_fin_DoubleClick_1(object sender, EventArgs e)
        {
            if (listView1.SelectedIndices.Count > 0)
            {
                txt_fin.Text = listView1.SelectedItems[0].SubItems[3].Text;
            }
            else
            {
                txt_fin.Text = "0:00:00.000";
            }
        }

        private void txt_ini_TextChanged(object sender, EventArgs e)
        {
            DateTime time;
            if (!DateTime.TryParse(txt_ini.Text, out time))
            {
                txt_ini.BackColor = Color.Orange;
            }
            else
            {
                txt_ini.BackColor = Color.White;
            }

            if (txt_ini.Text.Length > 12)
            {
                MessageBox.Show("Wrong format. Please use a 00:00:00.000 time format", "Time format error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
        }

        private void txt_ini_Leave(object sender, EventArgs e)
        {
            if (txt_ini.Text == "0:00:00.000")
            {
                txt_ini.BackColor = groupBox1.BackColor;
                return;
            }

            DateTime time2;
            if (!DateTime.TryParse(txt_ini.Text, out time2))
            {
                txt_ini.BackColor = Color.Orange;
            }
            else
            {
                txt_ini.BackColor = Color.White;
            }
        }

        private void txt_ini_DoubleClick(object sender, EventArgs e)
        {
            txt_ini.Text = "0:00:00.000";
        }

        private void txt_fin_Leave(object sender, EventArgs e)
        {
            if (txt_fin.Text == "0:00:00.000")
            {
                txt_fin.BackColor = groupBox1.BackColor;
                return;
            }

            DateTime time2;
            if (!DateTime.TryParse(txt_fin.Text, out time2))
            {
                txt_fin.BackColor = Color.Orange;
            }
            else
            {
                txt_fin.BackColor = Color.White;
            }
        }

        private void cti5_Click(object sender, EventArgs e)
        {
            if (listView1.SelectedItems.Count > 0)
            {
                String fullPath = listView1.SelectedItems[0].SubItems[1].Text + "\\" + listView1.SelectedItems[0].Text;
                if (File.Exists(fullPath))
                {
                    if (listView1.SelectedItems[0].SubItems[3].Text != "Pending" && listView1.SelectedItems[0].SubItems[3].Text != "N/A")
                    {
                        txt_fin.Text = listView1.SelectedItems[0].SubItems[3].Text;
                        txt_fin.BackColor = Color.LightYellow;
                        return;
                    }
                }
                else
                {
                    MessageBox.Show("File was not found", "File missing", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }

        private void ct4_conv_Click(object sender, EventArgs e)
        {
            if (listView3.SelectedItems[0].SubItems[1].Text == "VobSub IDX subtitle available")
            {
                MessageBox.Show("VobSub format conversion is not required", "Conversion not required", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            String dest;
            String sub_ext;
            String source_sub;

            if (listView3.SelectedItems[0].SubItems[1].Text == "SRT subtitle available")
            {
                sub_ext = listView3.SelectedItems[0].SubItems[1].Text.Substring(0, 3).ToLower();
                source_sub = Path.Combine(Path.GetDirectoryName(listView3.SelectedItems[0].Text), Path.GetFileNameWithoutExtension(listView3.SelectedItems[0].Text) + "." + sub_ext);
                dest = Path.Combine(Path.GetDirectoryName(listView3.SelectedItems[0].Text), Path.GetFileNameWithoutExtension(listView3.SelectedItems[0].Text) + "_utf8." + sub_ext);
            }
            else if (listView3.SelectedItems[0].SubItems[1].Text == "ASS subtitle available")
            {
                sub_ext = listView3.SelectedItems[0].SubItems[1].Text.Substring(0, 3).ToLower();
                source_sub = Path.Combine(Path.GetDirectoryName(listView3.SelectedItems[0].Text), Path.GetFileNameWithoutExtension(listView3.SelectedItems[0].Text) + "." + sub_ext);
                dest = Path.Combine(Path.GetDirectoryName(listView3.SelectedItems[0].Text), Path.GetFileNameWithoutExtension(listView3.SelectedItems[0].Text) + "_utf8." + sub_ext);
            }
            else
            {
                sub_ext = listView3.SelectedItems[0].SubItems[1].Text;
                source_sub = listView3.SelectedItems[0].SubItems[1].Text;
                dest = Path.Combine(Path.GetDirectoryName(listView3.SelectedItems[0].SubItems[1].Text), Path.GetFileNameWithoutExtension(listView3.SelectedItems[0].SubItems[1].Text) + "_utf8" + Path.GetExtension(listView3.SelectedItems[0].SubItems[1].Text));
            }

            String f1 = File.ReadAllText(source_sub, Encoding.Default);

            File.WriteAllText(Path.Combine(Path.GetDirectoryName(listView3.SelectedItems[0].Text), dest), f1, Encoding.UTF8);
            listView3.SelectedItems[0].SubItems[1].Text = dest;

            var a = TextFileEncodingDetector.DetectTextFileEncoding(dest);
            if (a != null)
            {
                String txt_enc = a.ToString().Replace("System.Text.", "");
                listView3.SelectedItems[0].SubItems[3].Text = txt_enc.Replace("Encoding", "");
            }
            else
            {
                listView3.SelectedItems[0].SubItems[3].Text = "Unknown";
            }
        }

        private void refresh_full()
        {
            List<string> files2 = new List<string>();
            int num_drop = 0;

            foreach (ListViewItem item in listView1.Items)
            {
                String filename = item.SubItems[1].Text + "\\" + item.Text;
                if (File.Exists(filename))
                {
                    files2.Add(filename);
                }
            }
            num_drop = files2.Count();

            files_to_add = files2;
            listView1.Items.Clear();

            canceled_file_adding = false;

            btn_cancel_add.Enabled = true;
            btn_cancel_add.Visible = true;
            btn_cancel_add.Refresh();

            BG_Files.RunWorkerAsync();
        }

        void clean_cols()
        {
            listView1.Invoke(new MethodInvoker(delegate
            {
                foreach (ColumnHeader col in listView1.Columns)
                {
                    if (col.Text == "Width") listView1.Columns.Remove(col);
                    if (col.Text == "< Width") listView1.Columns.Remove(col);
                    if (col.Text == "> Width") listView1.Columns.Remove(col);
                    if (col.Text == "Height") listView1.Columns.Remove(col);
                    if (col.Text == "> Height") listView1.Columns.Remove(col);
                    if (col.Text == "< Height") listView1.Columns.Remove(col);
                    if (col.Text == "Video codec") listView1.Columns.Remove(col);
                    if (col.Text == "> Video codec") listView1.Columns.Remove(col);
                    if (col.Text == "< Video codec") listView1.Columns.Remove(col);
                    if (col.Text == "Audio codec") listView1.Columns.Remove(col);
                    if (col.Text == "> Audio codec") listView1.Columns.Remove(col);
                    if (col.Text == "< Audio codec") listView1.Columns.Remove(col);
                }
            }));
        }

        private void btn_refresh_Click(object sender, EventArgs e)
        {
            Pg1.Focus();
            if (tabControl1.SelectedIndex == 3)
            {
                btn_validate_url.PerformClick();
                return;
            }

            if (listView1.Items.Count == 0)
            {
                return;
            }
            //if (listView1.Columns.Count > 6)
            //{
            //    DialogResult a = MessageBox.Show("Custom columns will be removed after refreshing file list." + Environment.NewLine + Environment.NewLine + "Do you want to continue?", "Custom colums will be cleared", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question);
            //    if (a == DialogResult.No || a == DialogResult.Cancel) return;
            //    else
            //    {
            //        clean_cols();
            //        resize();
            //    }
            //}

            refresh_full();
            calc_list_dur();

            lbl_items.Text = listView1.Items.Count + " file(s)";

            if (tabControl1.SelectedIndex == 0)
            {
                checkBox3.Visible = true;
                combo_ext.Visible = false;
                label19.Visible = false;
                btn_set_mux_def.Visible = false;

                groupBox15.Visible = false;
                label17.Visible = false;
                combo_item_lang_2.Visible = false;
                btn_clean_list.Visible = true;

                label13.Visible = true;
                txt_path_main.Visible = true;
                button21.Visible = true;
                chkshut.Visible = true;
                btn_mux.Visible = false;

                button23.Visible = false;
                pic_encode_param.Visible = false;
                lbl_mux_par.Visible = false;
                txt_track_param.Visible = false;
                btn_set_track_param.Visible = false;
                groupBox1.Visible = true;
                panel1.Visible = true;
                list_tracks.Visible = false;


                return;
            }
            if (tabControl1.SelectedIndex == 1)
            {
                add_to_tab_2();
            }

            if (tabControl1.SelectedIndex == 2)
            {
                btn_set_mux_def.Visible = false;
                btn_set_track_param.Visible = false;

                groupBox15.Visible = true;

                TB1.Visible = false;
                txt_hard_subs.Text = txt_parameters.Text;
                //Check listview1 vs listview2
                int list_int = 0;
                if (listView1.Items.Count == listView3.Items.Count)
                {
                    foreach (ListViewItem item in listView1.Items)
                    {
                        if (listView3.Items[list_int].Text == item.Text)
                        {
                            list_int = list_int + 1;
                        }
                    }
                }
                if (list_int == listView1.Items.Count)
                {
                    return;
                }
                else
                {
                    listView3.Items.Clear();
                }

                listView3.SmallImageList = listView1.SmallImageList;
                foreach (ListViewItem item in listView1.Items)
                {
                    this.Cursor = Cursors.WaitCursor;
                    ListViewItem elemento = new ListViewItem(item.Text, 1);
                    //Begin get file icon
                    Icon iconForFile = SystemIcons.WinLogo;

                    // Check to see if the image collection contains an image
                    // for this extension, using the extension as a key.
                    if (!imageList2.Images.ContainsKey(System.IO.Path.GetExtension(item.Text)))
                    {
                        // If not, add the image to the image list.
                        iconForFile = System.Drawing.Icon.ExtractAssociatedIcon(item.Text);
                        imageList2.Images.Add(System.IO.Path.GetExtension(item.Text), iconForFile);
                    }

                    elemento.ImageKey = System.IO.Path.GetExtension(item.Text);
                    //End get file icon

                    listView3.Items.Add(elemento);
                }

                foreach (ListViewItem item in listView3.Items)
                {
                    String is_srt = item.Text.Substring(item.Text.LastIndexOf("."));

                    if (is_srt == ".srt")
                    {
                        listView3.Items.RemoveAt(item.Index);
                    }

                    String is_Vobsub = item.Text.Substring(item.Text.LastIndexOf("."));

                    if (is_Vobsub == ".idx" || is_Vobsub == ".sub")
                    {
                        listView3.Items.RemoveAt(item.Index);
                    }

                    String is_ass = item.Text.Substring(item.Text.LastIndexOf("."));

                    if (is_srt == ".ass")
                    {
                        listView3.Items.RemoveAt(item.Index);
                    }

                    String subs_path = String.Empty;
                    String Sub_File_SRT = String.Empty;
                    String Sub_File_Vobsub = String.Empty;
                    String Sub_File_ASS = String.Empty;

                    if (txt_folder_subs.Text == String.Empty)
                    {
                        Sub_File_SRT = item.Text.Substring(0, item.Text.LastIndexOf(".")) + ".srt";
                        Sub_File_Vobsub = item.Text.Substring(0, item.Text.LastIndexOf(".")) + ".idx";
                        Sub_File_ASS = item.Text.Substring(0, item.Text.LastIndexOf(".")) + ".ass";
                    }
                    else
                    {
                        String path_sub = txt_folder_subs.Text;
                        Path.GetFileName(item.Text);
                        Sub_File_SRT = path_sub + "\\" + Path.GetFileName(item.Text).Substring(0, Path.GetFileName(item.Text).LastIndexOf(".")) + ".srt";
                        Sub_File_Vobsub = path_sub + "\\" + Path.GetFileName(item.Text).Substring(0, Path.GetFileName(item.Text).LastIndexOf(".")) + ".idx";
                        Sub_File_ASS = path_sub + "\\" + Path.GetFileName(item.Text).Substring(0, Path.GetFileName(item.Text).LastIndexOf(".")) + ".ass";
                    }

                    if (item.SubItems[1].Text.Contains("No subtitle for this file") == false)
                    {
                        if (File.Exists(Sub_File_SRT))
                        {
                            item.SubItems.Add("SRT subtitle available");
                            item.SubItems.Add("und");

                            var a = TextFileEncodingDetector.DetectTextFileEncoding(Sub_File_SRT);
                            if (a != null)
                            {
                                String txt_enc = a.ToString().Replace("System.Text.", "");
                                item.SubItems.Add(txt_enc.Replace("Encoding", ""));
                            }
                            else
                            {
                                item.SubItems.Add("Unknown");
                            }
                            item.SubItems.Add("Yes");
                            item.SubItems.Add("Ready");
                        }

                        if (File.Exists(Sub_File_Vobsub))
                        {
                            item.SubItems.Add("VobSub IDX subtitle available");
                            item.SubItems.Add("und");

                            item.SubItems.Add("-");
                            item.SubItems.Add("Yes");
                            item.SubItems.Add("Ready");
                        }
                        if (File.Exists(Sub_File_ASS))
                        {
                            item.SubItems.Add("ASS subtitle available");
                            item.SubItems.Add("und");

                            var a = TextFileEncodingDetector.DetectTextFileEncoding(Sub_File_ASS);
                            if (a != null)
                            {
                                String txt_enc = a.ToString().Replace("System.Text.", "");
                                item.SubItems.Add(txt_enc.Replace("Encoding", ""));
                            }
                            else
                            {
                                item.SubItems.Add("Unknown");
                            }
                            item.SubItems.Add("Yes");
                            item.SubItems.Add("Ready");
                        }
                    }

                    if (!File.Exists(Sub_File_Vobsub) && !File.Exists(Sub_File_SRT) && !File.Exists(Sub_File_ASS))
                    {
                        item.SubItems.Add("No subtitle for this file, double-click to locate");
                        item.SubItems.Add("-");
                        item.SubItems.Add("-");
                        item.SubItems.Add("-");
                        item.SubItems.Add("No Sub");
                    }
                }
                Combo_sub_lang_mux.Text = "";
                this.Cursor = Cursors.Arrow;
            }
        }

        private void Refresh_lists()
        {
            if (tabControl1.SelectedIndex == 0)
            {
                listView1.BeginUpdate();
                foreach (ListViewItem item in listView1.Items)
                {
                    if (!File.Exists(item.Text))
                    {
                        item.Remove();
                    }
                }
                listView1.EndUpdate();
                return;
            }

            if (tabControl1.SelectedIndex == 1)
            {
                listView2.BeginUpdate();
                foreach (ListViewItem item in listView2.Items)
                {
                    if (!File.Exists(item.Text))
                    {
                        item.Remove();
                    }
                }
                listView2.EndUpdate();
                return;
            }
            if (tabControl1.SelectedIndex == 2)
            {
                listView3.BeginUpdate();
                foreach (ListViewItem item in listView3.Items)
                {
                    if (!File.Exists(item.Text))
                    {
                        item.Remove();
                    }
                }
                listView3.EndUpdate();
                return;
            }
        }

        private void chk_subfolders_CheckedChanged(object sender, EventArgs e)
        {
            if (chk_subfolders.Checked == true)
            {
                add_subfs = true;
            }
            else
            {
                add_subfs = false;
            }

            Boolean prev_state = false;
            if (chk_subfolders.CheckState == CheckState.Checked) prev_state = false;
            if (chk_subfolders.CheckState == CheckState.Unchecked) prev_state = true;

            String path = String.Empty;
            if (is_portable == false)
            {
                path = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_batch.ini";
            }
            else
            {
                path = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_batch_portable.ini";
            }

            int linea = 0;

            foreach (string line in File.ReadLines(path))
            {
                linea = linea + 1;

                if (linea == 7)
                {
                    if (line == "subf_yes")
                    {
                        if (prev_state == false)
                        {
                            btn_save_config.ImageKey = "Save_settings_39.png";
                            toolTip_settings.SetToolTip(this.btn_save_config, "Save current parameters as default.");
                        }
                        else
                        {
                            btn_save_config.ImageKey = "save_pending.png";
                            toolTip_settings.SetToolTip(this.btn_save_config, "Modified settings not saved.");
                        }
                    }

                    if (line == "subf_no")
                    {
                        if (prev_state == true)
                        {
                            btn_save_config.ImageKey = "Save_settings_39.png";
                            toolTip_settings.SetToolTip(this.btn_save_config, "Save current parameters as default.");
                        }
                        else
                        {
                            btn_save_config.ImageKey = "save_pending.png";
                            toolTip_settings.SetToolTip(this.btn_save_config, "Modified settings not saved.");
                        }
                    }
                }
            }
        }

        private void textBox2_Leave(object sender, EventArgs e)
        {
            txt_format.BackColor = txt_parameters.BackColor;
        }

        private void chk_suffix_CheckedChanged(object sender, EventArgs e)
        {
            if (chk_suffix.CheckState == CheckState.Checked)
            {
                txt_suffix.Enabled = true;
                txt_suffix.BackColor = Color.White;
            }
            else
            {
                txt_suffix.Enabled = false;
                txt_suffix.BackColor = SystemColors.InactiveBorder;
            }

            Boolean prev_state = false;
            if (chk_suffix.CheckState == CheckState.Checked) prev_state = false;
            if (chk_suffix.CheckState == CheckState.Unchecked) prev_state = true;

            String path = String.Empty;
            if (is_portable == false)
            {
                path = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_batch.ini";
            }
            else
            {
                path = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_batch_portable.ini";
            }

            int linea = 0;

            foreach (string line in File.ReadLines(path))
            {
                linea = linea + 1;

                if (linea == 4)
                {
                    if (line != "Vn")
                    {
                        if (prev_state == false)
                        {
                            btn_save_config.ImageKey = "Save_settings_39.png";
                            toolTip_settings.SetToolTip(this.btn_save_config, "Save current parameters as default.");
                        }
                        else
                        {
                            btn_save_config.ImageKey = "save_pending.png";
                            toolTip_settings.SetToolTip(this.btn_save_config, "Modified settings not saved.");
                        }
                    }

                    if (line == "Vn")
                    {
                        if (prev_state == true)
                        {
                            btn_save_config.ImageKey = "Save_settings_39.png";
                            toolTip_settings.SetToolTip(this.btn_save_config, "Save current parameters as default.");
                        }
                        else
                        {
                            btn_save_config.ImageKey = "save_pending.png";
                            toolTip_settings.SetToolTip(this.btn_save_config, "Modified settings not saved.");
                        }
                    }
                }
            }
        }

        private void txt_suffix_TextChanged(object sender, EventArgs e)
        {
            if (txt_suffix.Text.Contains("/") || txt_suffix.Text.Contains(":") || txt_suffix.Text.Contains("*") || txt_suffix.Text.Contains("?") || txt_suffix.Text.Contains("¿") || txt_suffix.Text.Contains('\u0022') || txt_suffix.Text.Contains("<") || txt_suffix.Text.Contains(">") || txt_suffix.Text.Contains("|") || txt_suffix.Text.Contains("\\"))
            {
                MessageBox.Show("Invalid characters detected (\\/:*?'\u0022'<>|", "Invalid characters", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                txt_suffix.Text = txt_suffix.Text.Replace("/", "");
                txt_suffix.Text = txt_suffix.Text.Replace(":", "");
                txt_suffix.Text = txt_suffix.Text.Replace("*", "");
                txt_suffix.Text = txt_suffix.Text.Replace("?", "");
                txt_suffix.Text = txt_suffix.Text.Replace("¿", "");
                txt_suffix.Text = txt_suffix.Text.Replace("\u0022", "");
                txt_suffix.Text = txt_suffix.Text.Replace("<", "");
                txt_suffix.Text = txt_suffix.Text.Replace(">", "");
                txt_suffix.Text = txt_suffix.Text.Replace("|", "");
                txt_suffix.Text = txt_suffix.Text.Replace("\\", "");
            }
        }

        private void txt_suffix_Leave(object sender, EventArgs e)
        {
            if (txt_suffix.Text == String.Empty)
            {
                txt_suffix.Text = "_FFB";
            }
        }

        private void btn_cancel_add_Click(object sender, EventArgs e)
        {
            canceled_add = true;
            canceled_file_adding = true;
            btn_cancel_add.Visible = false;
            dur_ok = false;
            groupBox10.Focus();

            if (working == true)
            {
                wc.CancelAsync();
                cancel_cache = true;
            }
            else
            {
                try
                {
                    wc2.CancelAsync();
                }
                catch { }
            }
        }

        private void BG_Dur_DoWork(object sender, DoWorkEventArgs e)
        {
            dur_ok = false;
            canceled_add = false;
            this.InvokeEx(f => f.listView1.BeginUpdate());
            this.InvokeEx(f => f.Disable_Controls());
            this.InvokeEx(f => f.btn_abort_all.Enabled = false);
            this.InvokeEx(f => f.btn_cancel_add.Enabled = true);
            this.InvokeEx(f => f.btn_cancel_add.Visible = true);
            this.InvokeEx(f => f.btn_cancel_add.Refresh());
            this.InvokeEx(f => f.LB_Wait.Visible = true);
            this.InvokeEx(f => f.LB_Wait.Text = "Parsing unknown files");
            this.InvokeEx(f => f.LB_Wait.Refresh());
            this.InvokeEx(f => f.pg_adding.Visible = true);
            this.InvokeEx(f => f.pg_adding.Value = 0);
            this.InvokeEx(f => f.txt_adding_p.Visible = true);
            this.InvokeEx(f => f.txt_adding_p.Refresh());
            this.InvokeEx(f => f.pg_adding.Maximum = list_pending_dur.Items.Count);
            int invalids = 0;

            procs.Clear();

            for (int ii = 0; ii < list_pending_dur.Items.Count; ii++)
            {
                procs.Add("proc_urls_" + ii.ToString(), new Process());
            }

            ParallelOptions par_op = new ParallelOptions();
            CancellationTokenSource cts = new System.Threading.CancellationTokenSource();
            par_op.CancellationToken = cts.Token;
            par_op.MaxDegreeOfParallelism = Convert.ToInt16(n_threads.Value);
            fatal_parallel = false;

            var items_lv = Enumerable.Range(0, list_pending_dur.Items.Count);

            ParallelLoopResult result = new ParallelLoopResult();
            try
            {
                result = Parallel.ForEach(items_lv.AsParallel().AsOrdered(), par_op, (i) =>
                {
                    Task
                        .Factory
                        .StartNew(() =>
                        {
                            this.InvokeEx(f => f.pg_adding.Value = pg_adding.Value + 1);
                            this.InvokeEx(f => f.txt_adding_p.Text = (pg_adding.Value * 100 / list_pending_dur.Items.Count + "%"));
                            this.InvokeEx(f => f.txt_adding_p.Refresh());
                            var tmp = procs["proc_urls_" + i.ToString()];

                            if (canceled_add == false)
                            {
                                if (list_pending_dur.Items[i].SubItems[3].Text == "Pending")
                                {
                                    tmp.StartInfo.FileName = System.IO.Path.Combine(Application.StartupPath, "ffprobe.exe");
                                    tmp.StartInfo.Arguments = "-v error -show_entries format=duration -sexagesimal -of default=noprint_wrappers=1:nokey=1 " + " -i " + '\u0022' + list_pending_dur.Items[i].SubItems[1].Text + "\\" + list_pending_dur.Items[i].Text + '\u0022';

                                    tmp.StartInfo.RedirectStandardOutput = true;
                                    tmp.StartInfo.UseShellExecute = false;
                                    tmp.StartInfo.CreateNoWindow = true;
                                    tmp.EnableRaisingEvents = true;
                                    tmp.Start();

                                    String duracion = tmp.StandardOutput.ReadToEnd();
                                    tmp.WaitForExit();

                                    if (duracion != null)
                                    {
                                        if (duracion.Length >= 7)
                                        {
                                            this.InvokeEx(f => f.listView1.Items[i].SubItems[3].Text = duracion.Substring(0, 7));

                                            if (duracion.Substring(0, 7) == "0:00:00")
                                            {
                                                this.InvokeEx(f => f.listView1.Items[i].BackColor = Color.LightGoldenrodYellow);
                                                invalids = invalids + 1;
                                            }
                                        }
                                        else
                                        {
                                            this.InvokeEx(f => f.listView1.Items[i].SubItems[3].Text = "N/A");
                                            invalids = invalids + 1;
                                            this.InvokeEx(f => f.listView1.Items[i].BackColor = Color.LightGoldenrodYellow);
                                        }
                                    }
                                    else
                                    {
                                        this.InvokeEx(f => f.listView1.Items[i].SubItems[3].Text = "N/A");
                                        invalids = invalids + 1;
                                        this.InvokeEx(f => f.listView1.Items[i].BackColor = Color.LightGoldenrodYellow);
                                    }
                                }
                            }
                            else { cts.Cancel(); }

                        }).Wait();
                    i++;
                });
            }
            catch (Exception exc)
            {
                fatal_parallel_msg = exc.Message;
                fatal_parallel = true;
            }

            if (result.IsCompleted == true) fatal_parallel = false;
            else
            {
                if (cts.IsCancellationRequested == false) fatal_parallel = true;
                else fatal_parallel = false;
            }
            //End parallel
            if (invalids > 0)
            {
                this.InvokeEx(f => this.Cursor = Cursors.Arrow);
                Form7 form_added = new Form7();
                form_added.pic_clean.Image = btn_clean_list.Image;
                form_added.label1.Text = listView1.Items.Count + " file(s)";
                form_added.label2.Text = invalids + " file(s)";

                if (listView1.Items.Count > 10 && listView1.Items.Count < 100)
                {
                    form_added.label4.Left = form_added.label4.Left + 8;
                }

                if (listView1.Items.Count >= 100 && listView1.Items.Count < 1000)
                {
                    form_added.label4.Left = form_added.label4.Left + 18;
                }

                if (listView1.Items.Count >= 1000 && listView1.Items.Count < 10000)
                {
                    form_added.label4.Left = form_added.label4.Left + 27;
                }
                if (listView1.Items.Count > 10000)
                {
                    form_added.label4.Left = form_added.label4.Left + 36;
                }

                if (invalids > 10 && invalids < 100)
                {
                    form_added.label5.Left = form_added.label5.Left + 8;
                }

                if (invalids >= 100 && invalids < 1000)
                {
                    form_added.label5.Left = form_added.label5.Left + 18;
                }

                if (invalids >= 1000 && invalids < 10000)
                {
                    form_added.label5.Left = form_added.label5.Left + 27;
                }
                if (invalids > 10000)
                {
                    form_added.label5.Left = form_added.label5.Left + 36;
                }

                form_added.ShowDialog();
                form_added.Refresh();
            }

            if (canceled_add == false)
            {
                dur_ok = true;
            }
            else
            {
                dur_ok = false;
            }
        }

        private void BG_Dur_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            lbl_items.Text = listView1.Items.Count + " file(s)";
            LB_Wait.Text = "";
            txt_adding_p.Visible = false;
            listView1.EndUpdate();
            Enable_Controls();
            chkshut.Enabled = true;
            btn_pause.Enabled = true;
            btn_cancel_add.Visible = false;
            txt_adding_p.Text = "";
            txt_adding_p.Visible = false;
            lbl_items.Visible = true;
            lbl_dur_list.Visible = true;
            lbl_size.Visible = true;
            pg_adding.Visible = false;
            LB_Wait.Visible = false;
            tabControl1.Enabled = true;

            tried_params.Clear();
            btn_cancel_add.Visible = false;
            if (canceled_add == true)
            {
                MessageBox.Show("File list duration parsing needs to be complete", "Files parsing incomplete", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }
            else
            {
                if (tabControl1.SelectedIndex == 0)
                {
                    if (was_started.Text == button2.Text)
                    {
                        button2.PerformClick();
                    }
                    if (was_started.Text == btn_multiple_presets.Text)
                    {
                        start_multiple();
                    }
                    if (was_started.Text == btn_multi_m.Text)
                    {
                        btn_multi_m.PerformClick();
                    }

                    if (was_started.Text == btn_concat.Text)
                    {
                        btn_concat.PerformClick();
                    }
                    if (was_started.Text == btn_trim.Text)
                    {
                        btn_trim.PerformClick();
                    }
                }
                if (tabControl1.SelectedIndex == 1)
                {
                    btn_mux.PerformClick();
                }
                if (tabControl1.SelectedIndex == 2)
                {
                    btn_sub_mux.PerformClick();
                }
            }
        }

        private void BG_Files_DoWork(object sender, DoWorkEventArgs e)
        {
            if (listView1.Items.Count > 0)
            {
                List<string> files_already = new List<string>();
                listView1.Invoke(new MethodInvoker(delegate
                {
                    foreach (ListViewItem item in listView1.Items) files_already.Add(item.SubItems[1].Text + "\\" + item.Text);
                }));

                files_to_add = files_to_add.Except(files_already).ToList();
            }


            this.InvokeEx(f => f.listView1.SmallImageList = imageList2);

            Disable_Controls();
            this.InvokeEx(f => f.groupBox10.Focus());
            this.InvokeEx(f => f.btn_abort_all.Enabled = false);
            this.InvokeEx(f => f.chkshut.Enabled = false);
            this.InvokeEx(f => f.btn_pause.Enabled = false);
            this.InvokeEx(f => f.tabControl1.Enabled = false);
            this.InvokeEx(f => f.LB_Wait.Visible = true);
            this.InvokeEx(f => f.btn_cancel_add.Enabled = true);

            Type ts = Type.GetTypeFromProgID("Shell.Application");
            dynamic shell = Activator.CreateInstance(ts);

            //Es carpeta

            int i = 0;
            invalids = 0;
            pending_dur = 0;

            this.InvokeEx(f => f.pg_adding.Value = 0);
            this.InvokeEx(f => f.pg_adding.Maximum = files_to_add.Count);
            this.InvokeEx(f => f.txt_adding_p.Visible = true);
            this.InvokeEx(f => f.txt_adding_p.Refresh());
            this.InvokeEx(f => f.lbl_items.Visible = false);
            this.InvokeEx(f => f.lbl_items.Refresh());
            this.InvokeEx(f => f.lbl_dur_list.Visible = false);
            this.InvokeEx(f => f.lbl_dur_list.Refresh());
            this.InvokeEx(f => f.lbl_size.Visible = false);
            this.InvokeEx(f => f.lbl_size.Refresh());

            this.InvokeEx(f => f.pg_adding.Visible = true);
            if (files_to_add.Count > 0) this.InvokeEx(f => f.LB_Wait.Text = "Adding " + files_to_add.Count + " files");
            else this.InvokeEx(f => f.LB_Wait.Text = "Finding duplicates...");
            this.InvokeEx(f => f.LB_Wait.Refresh());

            this.InvokeEx(f => f.txt_adding_p.Text = "");

            this.InvokeEx(f => f.listView1.BeginUpdate());

            ListViewItem[] itemsToAdd = new ListViewItem[files_to_add.Count];
            String[] ext_nodur = new string[] { ".jpg", ".gif", ".bmp", ".png", ".tif", ".psd", ".txt", ".ini", ".zip", ".htm", ".html", ".css", ".js", ".rar", ".doc", ".docx", ".xls", ".xlsx", ".dll", ".exe", ".ico", ".pdf", ".log", ".cat", "mui", ".xml", String.Empty };

            for (int n = 0; n < files_to_add.Count; n++)
            {
                itemsToAdd[n] = new ListViewItem(Path.GetFileName(files_to_add[n]));

                if (canceled_file_adding == false)
                {
                    i = i + 1;
                    if (i <= pg_adding.Maximum)
                    {
                        this.InvokeEx(f => f.pg_adding.Value = i);
                        this.InvokeEx(f => f.txt_adding_p.Text = (i * 100 / files_to_add.Count).ToString() + "%");
                    }
                    else
                    {
                        this.InvokeEx(f => f.pg_adding.Value = pg_adding.Maximum);
                        this.InvokeEx(f => f.txt_adding_p.Text = "100%");
                    }

                    Icon iconForFile = SystemIcons.WinLogo;

                    if (!files_to_add[n].Contains("\\\\"))
                    {
                        if (!imageList2.Images.ContainsKey(System.IO.Path.GetExtension(files_to_add[n])))
                        {
                            iconForFile = System.Drawing.Icon.ExtractAssociatedIcon(files_to_add[n]);
                            this.InvokeEx(f => f.imageList2.Images.Add(System.IO.Path.GetExtension(files_to_add[n]), iconForFile));
                        }
                    }

                    if (!files_to_add[n].Contains("\\\\"))
                    {
                        itemsToAdd[n].ImageKey = System.IO.Path.GetExtension(files_to_add[n]);
                    }
                    else
                    {
                        itemsToAdd[n].ImageIndex = 0;
                    }
                    itemsToAdd[n].SubItems.Add(Path.GetDirectoryName(files_to_add[n]));

                    Boolean no_av = false;
                    String videosLength = String.Empty;

                    Folder rFolder = shell.NameSpace(Path.GetDirectoryName(files_to_add[n]));
                    FolderItem rFiles = rFolder.ParseName(System.IO.Path.GetFileName(files_to_add[n]));
                    String videostype = rFolder.GetDetailsOf(rFiles, 2).Trim();
                    String videoSize = rFolder.GetDetailsOf(rFiles, 1).Trim();
                    itemsToAdd[n].SubItems.Add(videostype);
                    String f_ext = Path.GetExtension(files_to_add[n]).ToLower();
                    foreach (String no_ext in ext_nodur)
                    {
                        if (f_ext == no_ext)
                        {
                            itemsToAdd[n].SubItems.Add("00:00:00");
                            itemsToAdd[n].BackColor = Color.LightGoldenrodYellow;
                            no_av = true;
                            invalids = invalids + 1;
                            break;
                        }
                    }

                    if (no_av == false)
                    {
                        DateTime time;
                        videosLength = rFolder.GetDetailsOf(rFiles, 27).Trim();

                        if ((!DateTime.TryParse(videosLength, out time)))
                        {
                            itemsToAdd[n].SubItems.Add("Pending");
                            pending_dur = pending_dur + 1;
                        }
                        else
                        {
                            itemsToAdd[n].SubItems.Add(videosLength);
                        }
                    }

                    //End testing

                    itemsToAdd[n].SubItems.Add(videoSize);
                    itemsToAdd[n].SubItems.Add("Queued");

                    if (listView1.Columns.Count >= 6)
                    {
                        foreach (ColumnHeader col in listView1.Columns)
                        {
                            String ff_frames_v = "";
                            String ff_frames_a = "";

                            String itfull = itemsToAdd[n].SubItems[1].Text + "\\" + itemsToAdd[n].Text;

                            if (col.Text.Contains("Width"))
                            {
                                i--;
                                Boolean has_streams = false;
                                Boolean has_video = false;

                                String ff_frames = String.Empty;
                                Process get_frames = new Process();
                                get_frames.StartInfo.FileName = System.IO.Path.Combine(Application.StartupPath, "ffprobe.exe");
                                String ffprobe_frames = " -v error -select_streams v:0 -show_entries stream=width,height -of csv=s=x:p=0";
                                get_frames.StartInfo.Arguments = ffprobe_frames + " " + '\u0022' + itfull + '\u0022';
                                get_frames.StartInfo.RedirectStandardOutput = true;
                                get_frames.StartInfo.RedirectStandardError = true;
                                get_frames.StartInfo.UseShellExecute = false;
                                get_frames.StartInfo.CreateNoWindow = true;
                                get_frames.EnableRaisingEvents = true;
                                get_frames.Start();
                                ff_frames = get_frames.StandardOutput.ReadLine();
                                get_frames.WaitForExit();
                                if (get_frames.ExitCode == 0)
                                {
                                    if (ff_frames != null)
                                    {
                                        has_streams = true;
                                        if (ff_frames.Length == 0)
                                        {
                                            ff_frames = "-";
                                        }
                                    }
                                    else
                                    {
                                        ff_frames = "-";
                                    }
                                }
                                else
                                {
                                    ff_frames = "-";
                                }
                                i++;

                                if (ff_frames.Length > 1 && ff_frames.Contains("x") == true)
                                {
                                    itemsToAdd[n].SubItems.Add(ff_frames.Substring(0, ff_frames.IndexOf("x")));
                                    itemsToAdd[n].SubItems.Add(ff_frames.Substring(ff_frames.IndexOf("x") + 1, ff_frames.Length - ff_frames.IndexOf("x") - 1));
                                }
                                else
                                {
                                    itemsToAdd[n].SubItems.Add("-");
                                    itemsToAdd[n].SubItems.Add("-");
                                }
                            }

                            //AVcodec
                            if (col.Text.Contains("Video codec") || col.Text.Contains("Audio codec"))
                            {
                                i--;
                                List<string> lines_ouput = new List<string>();

                                Boolean has_streams = false;
                                Boolean has_video = false;

                                Process ff_str = new Process();
                                ff_str.StartInfo.FileName = System.IO.Path.Combine(Application.StartupPath, "ffmpeg.exe");
                                ff_str.StartInfo.Arguments = " -i " + '\u0022' + itfull + '\u0022' + " -hide_banner";
                                ff_str.StartInfo.RedirectStandardOutput = true;
                                ff_str.StartInfo.RedirectStandardError = true;
                                ff_str.StartInfo.UseShellExecute = false;
                                ff_str.StartInfo.CreateNoWindow = true;
                                ff_str.EnableRaisingEvents = true;
                                ff_str.Start();
                                String stream = "";
                                while (!ff_str.StandardError.EndOfStream)
                                {
                                    stream = ff_str.StandardError.ReadLine();
                                    lines_ouput.Add(stream);
                                }
                                ff_str.WaitForExit();                                
                                foreach (String line in lines_ouput)
                                {
                                    if (line.ToLower().Contains("stream #") && line.ToLower().Contains("video"))
                                    {
                                        int n2 = line.Length - line.IndexOf("Video: ");
                                        int m = line.Length - line.IndexOf(",");
                                        ff_frames_v = line.Substring(line.IndexOf("Video: ") + 7, n2 - m - 7);
                                        ff_frames_v = av_col_v(ff_frames_v);
                                    }

                                    if (line.ToLower().Contains("stream #0:0") && line.ToLower().Contains("audio"))
                                    {
                                        int n5 = line.Length - line.IndexOf("Audio: ");
                                        int m = line.Length - line.IndexOf(",");
                                        ff_frames_a = line.Substring(line.IndexOf("Audio: ") + 7, n5 - m - 7);
                                        ff_frames_a = av_col(ff_frames_a);
                                        
                                    }
                                    else
                                    {
                                        if (line.ToLower().Contains("stream #0:1") && line.ToLower().Contains("audio"))
                                        {
                                            int n6 = line.Length - line.IndexOf("Audio: ");
                                            int m = line.Length - line.IndexOf(",");
                                            ff_frames_a = line.Substring(line.IndexOf("Audio: ") + 7, n6 - m - 7);
                                            ff_frames_a = av_col(ff_frames_a);
                                        }                                        
                                    }
                                }

                                if (col.Text.Contains("Video codec"))
                                {
                                    if (ff_frames_v.Length > 0)
                                    {
                                        itemsToAdd[n].SubItems.Add(ff_frames_v);

                                    }
                                    else
                                    {
                                        itemsToAdd[n].SubItems.Add("-");
                                    }
                                    i++;

                                    //End vcodec
                                }

                                if (col.Text.Contains("Audio codec"))
                                {
                                    if (ff_frames_a.Length > 0)
                                    {
                                        itemsToAdd[n].SubItems.Add(ff_frames_a);

                                    }
                                    else
                                    {
                                        itemsToAdd[n].SubItems.Add("-");
                                    }
                                    i++;
                                    //End vcodec
                                }
                            }                            
                        }
                    }

                }
            }

            if (canceled_file_adding == true)
            {
                this.InvokeEx(f => f.pg_adding.Value = 0);
                this.InvokeEx(f => f.pg_adding.Maximum = i);
                this.InvokeEx(f => f.LB_Wait.Text = "Cancelling...");
                ListViewItem[] itemsToAdd2 = new ListViewItem[i];
                for (int n2 = 0; n2 < i; n2++)
                {
                    this.InvokeEx(f => f.pg_adding.Value = n2);
                    itemsToAdd2[n2] = itemsToAdd[n2];
                }
                this.InvokeEx(f => f.listView1.Items.AddRange(itemsToAdd2));
            }
            else
            {
                this.InvokeEx(f => f.listView1.Items.AddRange(itemsToAdd.ToArray()));
            }
        }

        public string av_col(string key)
        {         
            if (key.Contains("mp3")) key = "mp3";
            if (key.ToLower().Contains("eac3")) key = "EAC3";
            else
            {
                if (key.Contains("ac3")) key = "ac3";
            }            
            if (key.Contains("aac (LC)")) key = "aac (LC)";
            if (key.Contains("aac (HE-AAC)")) key = "aac (HE-AAC)";
            if (key.Contains("pcm_f16le")) key = "pcm_f16le";
            if (key.Contains("pcm_f32le")) key = "pcm_f32le";
            if (key.Contains("pcm_f24le")) key = "pcm_f24le";
            if (key.Contains("pcm_s16le")) key = "pcm_s16le";
            if (key.Contains("pcm_s32le")) key = "pcm_s32le";
            if (key.Contains("pcm_s24le")) key = "pcm_s24le";
            if (key.Contains("pcm_u8")) key = "pcm_u8";
            return key;            
        }

        public string av_col_v(string key)
        {
            if (key.Contains("mpeg4 (Simple Profile) (XVID")) key = "mpeg4 (Simple Profile) (XVID)";
            if (key.Contains("mpeg4 (Advanced Simple Profile) (XVID")) key = "mpeg4 (Advanced Simple Profile) (XVID)";
            if (key.Contains("mpeg4 (XVID")) key = "mpeg4 (XVID)";
            if (key.Contains("mpeg4 (Simple Profile) (DX50")) key = "mpeg4 (Simple Profile) (DX50)";
            if (key.Contains("mpeg4 (Advanced Simple Profile) (DX50")) key = "mpeg4 (Advanced Simple Profile) (DX50)";
            if (key.Contains("mpeg4 (Advanced Coding Profile)")) key = "mpeg4 (Advanced Coding Profile)";
            if (key.Contains("mpeg4 (DX50")) key = "mpeg4 (DX50)";
            if (key.Contains("(avc1 / 0x31637661)")) key = key.Replace("(avc1 / 0x31637661)", String.Empty);
            if (key.Contains("h264 (High)")) key = "h264 (High)";
            if (key.Contains("h264 (Main)")) key = "h264 (Main)";
            return key;
        }

        private void BG_Files_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            calc_list_size();            
            calc_total_dur();            
            String other_file = Path.Combine(Path.GetTempPath(), "FFBatch_test") + "\\" + "Other_instance.fftmp";
            if (File.Exists(other_file))
            {
                try
                {
                    File.Delete(other_file);
                }
                catch { }
            }
                        
            calc_total_dur();
            calc_list_size();

            groupBox10.Focus();
            btn_cancel_add.Enabled = true;
            btn_cancel_add.Visible = true;
            btn_cancel_add.Refresh();

            if (canceled_file_adding == false)
            {
                canceled_add = false;
                if (change_tab_1 == true)
                {
                    change_tab_1 = false;
                    tabControl1.SelectedIndex = 0;
                    tabControl1.SelectedIndex = 1;
                }
            }
            else
            {
                canceled_add = true;

                if (change_tab_1 == true)
                {
                    change_tab_1 = false;
                    tabControl1.SelectedIndex = 0;
                }
            }

            list_global_proc.Items.Clear();
            foreach (ListViewItem item in listView1.Items)
            {
                list_global_proc.Items.Add((ListViewItem)item.Clone());
            }
            
            BG_P_Dur.RunWorkerAsync();
            listView1.EndUpdate();
            btn_undo_filter.Enabled = false;
            Boolean has_vcodec = false;
            //if (listView1.Columns.Count >= 6)
            //{
            //    foreach (ColumnHeader col in listView1.Columns)
            //    {
            //        if (col.Index == 6 && col.Text.Contains("Width"))
            //        {
            //            refresh_resol_col();
            //        }
                    
            //        if (col.Index == 6 && listView1.Columns[6].Text.Contains("Video codec"))
            //        {
            //            refresh_vcodec_col();
            //        }


            //        if (col.Index == 6 && listView1.Columns[6].Text.Contains("Audio codec"))
            //        {
            //            refresh_acodec_col();
            //        }
            //    }
            //}            
        }
        
        private void change_tab()
        {
            if (change_tab_1 == true)
            {
                tabControl1.SelectedIndex = 0;
                tabControl1.SelectedIndex = 1;
            }
            if (change_tab_2 == true)
            {
                tabControl1.SelectedIndex = 0;
                tabControl1.SelectedIndex = 2;
            }
        }

        private void calc_total_dur()
        {
            Double Total_dur = 0;
            foreach (ListViewItem item in listView1.Items)

                if (item.SubItems[3].Text != "0:00:00" && item.SubItems[3].Text != "N/A" && item.SubItems[3].Text != "00:00:00" && item.SubItems[3].Text != "Pending")
                {
                    try
                    {
                        Total_dur = Total_dur + TimeSpan.Parse(item.SubItems[3].Text).TotalSeconds;
                    }
                    catch (System.Exception)
                    {
                        item.SubItems[3].Text = "N/A";
                        item.BackColor = Color.LightGoldenrodYellow;
                    }
                }

            TimeSpan t = TimeSpan.FromSeconds(Total_dur);
            String dur = string.Format("{0:D2}h:{1:D2}m:{2:D2}s:{3:D3}ms",
                     (int)t.TotalHours,
                     t.Minutes,
                     t.Seconds,
                     t.Milliseconds);
            lbl_dur_list.Text = dur.Substring(0, 11);
        }

        private void BG_P_Dur_DoWork(object sender, DoWorkEventArgs e)
        {
            //PAUSE while parsing

            if (working == true)
            {
                paused = true;
                int tab = 0;
                tabControl1.Invoke(new MethodInvoker(delegate
                {
                    tab = tabControl1.SelectedIndex;
                }));

                if (tab == 0)
                {
                    listView1.Invoke(new MethodInvoker(delegate
                    {
                        foreach (ListViewItem item in listView1.Items)
                        {
                            if (working == true && multi_running == false)
                            {
                                process_glob.Suspend();
                            }
                        }
                    }));

                    if (working == true && multi_running == true)
                    {
                        foreach (Process proc in procs.Values)
                        {
                            try
                            {
                                proc.Suspend();
                            }
                            catch
                            {
                            }
                        }
                    }
                }

                if (tab == 1)
                {
                    if (working == true && multi_running == false) process_glob.Suspend();
                }

                if (tab == 2)
                {
                    foreach (ListViewItem item in listView3.Items)
                    {
                        if (working == true) process_glob.Suspend();
                    }
                }

                if (tab == 3)
                {
                    foreach (DataGridViewRow row in dg1.Rows)
                    {
                        if (m3u_running == true && m3u_single_running == true)
                        {
                            process_glob.Suspend();
                        }
                    }

                    if (m3u_running == true && m3u_single_running == false)
                    {
                        foreach (Process proc in procs.Values)
                        {
                            try
                            {
                                proc.Suspend();
                            }
                            catch
                            {
                            }
                        }
                    }
                }

                this.InvokeEx(f => TaskbarProgress.SetState(this.Handle, TaskbarProgress.TaskbarStates.Paused));
            }

            //END PAUSE ENCODING, PENDING RESUME
            tried_params.Clear();
            if (listView1.Items.Count == 0)
            {
                list_not_empty = false;
            }
            else
            {
                list_not_empty = true;
            }

            if (list_not_empty == true)
            {
                pending_dur = 0;
                listView1.Invoke(new MethodInvoker(delegate
                {
                    foreach (ListViewItem item in listView1.Items)
                    {
                        if (item.SubItems[3].Text == "Pending")
                        {
                            pending_dur = pending_dur + 1;
                        }
                    }
                }));
            }

            this.InvokeEx(f => f.pg_adding.Value = 0);
            this.InvokeEx(f => f.LB_Wait.Text = "Parsing " + pending_dur + " files");
            this.InvokeEx(f => f.LB_Wait.Refresh());
            this.InvokeEx(f => f.pg_adding.Maximum = pending_dur);
            Process probe = new Process();

            this.InvokeEx(f => f.listView1.BeginUpdate());

            for (int i = 0; i < listView1.Items.Count; i++)
            {
                if (canceled_add == false)
                {
                    listView1.Invoke(new MethodInvoker(delegate
                    {
                        if (listView1.Items[i].SubItems[3].Text == "Pending")
                        {
                            this.InvokeEx(f => f.pg_adding.Value = pg_adding.Value + 1);
                            this.InvokeEx(f => f.txt_adding_p.Text = (pg_adding.Value * 100 / pending_dur + "%"));
                            this.InvokeEx(f => f.txt_adding_p.Refresh());

                            probe.StartInfo.FileName = System.IO.Path.Combine(Application.StartupPath, "ffprobe.exe");
                            probe.StartInfo.Arguments = "-v error -show_entries format=duration -sexagesimal -of default=noprint_wrappers=1:nokey=1 " + " -i " + '\u0022' + listView1.Items[i].SubItems[1].Text + "\\" +  listView1.Items[i].Text + '\u0022';
                            probe.StartInfo.RedirectStandardOutput = true;
                            probe.StartInfo.UseShellExecute = false;
                            probe.StartInfo.CreateNoWindow = true;
                            probe.EnableRaisingEvents = true;
                            probe.Start();

                            String duracion = probe.StandardOutput.ReadLine();
                            probe.WaitForExit();

                            if (duracion != null)
                            {
                                if (duracion.Length >= 7)
                                {
                                    this.InvokeEx(f => f.listView1.Items[i].SubItems[3].Text = duracion.Substring(0, 7));

                                    if (duracion.Substring(0, 7) == "0:00:00")
                                    {
                                        invalids = invalids + 1;
                                        this.InvokeEx(f => f.listView1.Items[i].BackColor = Color.LightGoldenrodYellow);
                                    }
                                }
                                else
                                {
                                    invalids = invalids + 1;
                                    this.InvokeEx(f => f.listView1.Items[i].SubItems[3].Text = "N/A");
                                    this.InvokeEx(f => f.listView1.Items[i].BackColor = Color.LightGoldenrodYellow);
                                }
                            }
                            else
                            {
                                invalids = invalids + 1;
                                this.InvokeEx(f => f.listView1.Items[i].SubItems[3].Text = "N/A");
                                this.InvokeEx(f => f.listView1.Items[i].BackColor = Color.LightGoldenrodYellow);
                            }
                        }
                    }));
                }
            }
            Boolean is_LV1 = false;
            tabControl1.Invoke(new MethodInvoker(delegate
            {
                if (tabControl1.SelectedIndex == 0) is_LV1 = true;
            }));

            if (canceled_add == false)
            {
                dur_ok = true;
            }
            else
            {
                dur_ok = false;
            }

            this.InvokeEx(f => f.lbl_items.Text = listView1.Items.Count + " file(s)");
            this.InvokeEx(f => f.LB_Wait.Text = "");
            this.InvokeEx(f => f.txt_adding_p.Visible = false);

            this.InvokeEx(f => f.lbl_dur_list.Refresh());

            this.InvokeEx(f => f.listView1.EndUpdate());
            this.InvokeEx(f => f.Enable_Controls());
            this.InvokeEx(f => f.txt_remain.Text = "Time remaining: 00h:00m:00s");
            this.InvokeEx(f => f.chkshut.Enabled = true);
            this.InvokeEx(f => f.btn_pause.Enabled = true);
            this.InvokeEx(f => f.btn_pause.Enabled = true);
            this.InvokeEx(f => f.btn_abort_all.Enabled = true);
            this.InvokeEx(f => f.txt_adding_p.Text = "");
            this.InvokeEx(f => f.txt_adding_p.Visible = false);
            this.InvokeEx(f => f.lbl_items.Visible = true);
            this.InvokeEx(f => f.lbl_dur_list.Visible = true);
            this.InvokeEx(f => f.lbl_size.Visible = true);
            this.InvokeEx(f => f.pg_adding.Visible = false);
            this.InvokeEx(f => f.LB_Wait.Visible = false);

            this.InvokeEx(f => f.tabControl1.Enabled = true);
            this.InvokeEx(f => f.listView1.EndUpdate());
            pop_invalids = false;
            if (invalids > 0 && is_LV1 == true && initial_tab != 2)
            {
                pop_invalids = true;
            }
        }

        private void BG_P_Dur_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            //RESUME

            int tab = 0;
            this.InvokeEx(f => f.btn_cancel_add.Visible = false);

            tabControl1.Invoke(new MethodInvoker(delegate
            {
                tab = tabControl1.SelectedIndex;
            }));

            paused = false;
            if (tab == 0)
            {
                foreach (ListViewItem item in listView1.Items)
                {
                    if (working == true && multi_running == false)
                    {
                        process_glob.Resume();
                    }
                }
                if (working == true && multi_running == true)
                {
                    foreach (Process proc in procs.Values)
                    {
                        try
                        {
                            proc.Resume();
                        }
                        catch
                        {

                        }
                    }
                }
            }

            if (tabControl1.SelectedIndex == 1)
            {
                if (working == true) process_glob.Resume();
            }

            if (tabControl1.SelectedIndex == 2)
            {
                foreach (ListViewItem item in listView3.Items)
                {
                    if (working == true) process_glob.Resume();
                }
            }

            if (tabControl1.SelectedIndex == 3)
            {
                foreach (DataGridViewRow row in dg1.Rows)
                {
                    if (m3u_single_running == true && m3u_running == true)
                    {
                        process_glob.Resume();
                    }
                }

                if (m3u_single_running == false && m3u_running == true)
                {
                    foreach (Process proc in procs.Values)
                    {
                        try
                        {
                            proc.Resume();
                        }
                        catch
                        {
                        }
                    }
                }
            }

            this.InvokeEx(f => TaskbarProgress.SetState(this.Handle, TaskbarProgress.TaskbarStates.Normal));

            //END RESUME
            calc_total_dur();
            this.InvokeEx(f => this.Cursor = Cursors.Arrow);
            if (pop_invalids == true && no_warn_0_dur == false)
            {
                Form7 form_added = new Form7();
                form_added.pic_clean.Image = btn_clean_list.Image;
                form_added.label1.Text = listView1.Items.Count + " file(s)";
                form_added.label2.Text = invalids + " file(s)";

                if (listView1.Items.Count > 10 && listView1.Items.Count < 100)
                {
                    form_added.label4.Left = form_added.label4.Left + 8;
                }

                if (listView1.Items.Count >= 100 && listView1.Items.Count < 1000)
                {
                    form_added.label4.Left = form_added.label4.Left + 18;
                }

                if (listView1.Items.Count >= 1000 && listView1.Items.Count < 10000)
                {
                    form_added.label4.Left = form_added.label4.Left + 27;
                }
                if (listView1.Items.Count > 10000)
                {
                    form_added.label4.Left = form_added.label4.Left + 36;
                }

                if (invalids > 10 && invalids < 100)
                {
                    form_added.label5.Left = form_added.label5.Left + 8;
                }

                if (invalids >= 100 && invalids < 1000)
                {
                    form_added.label5.Left = form_added.label5.Left + 18;
                }

                if (invalids >= 1000 && invalids < 10000)
                {
                    form_added.label5.Left = form_added.label5.Left + 27;
                }
                if (invalids > 10000)
                {
                    form_added.label5.Left = form_added.label5.Left + 36;
                }

                form_added.ShowDialog();
                form_added.Refresh();
                //MessageBox.Show(listView1.Items.Count + " file(s) added to the list." + Environment.NewLine + invalids + " file(s) could not be parsed (duration = 0 or N/A)." + Environment.NewLine + Environment.NewLine + "You can remove these items at Edit menu or button " + '\u0022' + "Remove invalid items" + '\u0022' + ".", "Invalid A/V files detected", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }


            if (change_tab_1 == true)
            {
                if (listView1.Items.Count > 200)
                {
                    var a = MessageBox.Show("Obtaining streams for " + listView1.Items.Count + " files can take a long time. Continue?", "Many files to be parsed", MessageBoxButtons.OKCancel, MessageBoxIcon.Question);
                    if (a == DialogResult.Cancel)
                    {
                        tabControl1.SelectedIndex = 0;
                        return;
                    }
                }
                add_to_tab_2();
            }

            if (change_tab_2 == true)
            {
                tabControl1.SelectedIndex = 0;
                tabControl1.SelectedIndex = 2;
            }

            if (working == true)
            {
                Disable_Controls();
                timer_tasks.Start();
                btn_add_files.Enabled = true;
                btn_add_folders.Enabled = true;
                btn_skip_main.Enabled = true;
                chk_subfolders.Enabled = true;

                if (runnin_n_presets == true)
                {
                    btn_add_files.Enabled = true;
                    btn_add_folders.Enabled = true;
                    btn_skip_main.Enabled = true;
                }

                panel2.Enabled = true;
                chk_delete_source.Enabled = true;
                foreach (Control ct in panel2.Controls)
                {
                    if (ct.Name != chk_delete_source.Name)
                    {
                        this.InvokeEx(f => ct.Enabled = false);
                    }
                }
                total_duration = 0;

                foreach (ListViewItem item in listView1.Items)
                {
                    if (item.SubItems[3].Text != "N/A" && item.SubItems[3].Text != "0:00:00" && item.SubItems[3].Text != "00:00:00" && item.SubItems[3].Text != "Pending")
                    {
                        total_duration = total_duration + TimeSpan.Parse(item.SubItems[3].Text).TotalSeconds - TimeSpan.Parse(ss_time_input.Text).TotalSeconds;
                    }
                    else
                    {
                        total_duration = total_duration + 0;
                    }
                }
            }
            btn_undo_filter.Enabled = false;
        }

        private void add_to_tab_2()
        {
            listView2.Clear();
            listView2.BeginUpdate();
            listView2.Columns.Add("      File", 450);
            listView2.SmallImageList = listView1.SmallImageList;
            foreach (ListViewItem item in listView1.Items)
            {
                //Bad
                this.Cursor = Cursors.WaitCursor;
                ListViewItem elemento = new ListViewItem(item.SubItems[1].Text + "\\" + item.Text, 1);
                //Begin get file icon
                 Icon iconForFile = SystemIcons.WinLogo;

                    if (!elemento.Text.Contains("\\\\"))
                    {
                        if (!imageList2.Images.ContainsKey(System.IO.Path.GetExtension(elemento.Text)))
                        {
                            iconForFile = System.Drawing.Icon.ExtractAssociatedIcon(elemento.Text);
                            this.InvokeEx(f => f.imageList2.Images.Add(System.IO.Path.GetExtension(elemento.Text), iconForFile));
                        }
                    }

                    if (!elemento.Text.Contains("\\\\"))
                    {
                        elemento.ImageKey = System.IO.Path.GetExtension(elemento.Text);
                    }
                    else
                    {
                        elemento.ImageIndex = 0;
                    }

                listView2.Items.Add(elemento);
            }

            foreach (ListViewItem item in listView2.Items)
            {
                Process ff_str = new Process();
                ff_str.StartInfo.FileName = System.IO.Path.Combine(Application.StartupPath, "ffmpeg.exe");
                ff_str.StartInfo.Arguments = " -i " + '\u0022' + item.Text + '\u0022';
                ff_str.StartInfo.RedirectStandardOutput = true;
                ff_str.StartInfo.RedirectStandardError = true;
                ff_str.StartInfo.UseShellExecute = false;
                ff_str.StartInfo.CreateNoWindow = true;
                ff_str.EnableRaisingEvents = true;
                ff_str.Start();
                String stream = "";
                String sub_str = "";
                int c = 0;
                Boolean has_stream = false;
                while (!ff_str.StandardError.EndOfStream)
                {
                    stream = ff_str.StandardError.ReadLine();

                    if (stream.Contains("Stream #0:"))
                    {
                        has_stream = true;
                        c = c + 1;
                        if (listView2.Columns.Count <= c)
                        {
                            listView2.Columns.Add("Stream " + c, 150);
                        }

                        if (stream.Substring(stream.IndexOf("#0:") + 4, 1) == "(")
                        {
                            if (stream.Substring(stream.IndexOf("#0:") + 4, 5) == "(und)" || stream.Substring(stream.IndexOf("#0:") + 4, 5) == "(unk)")
                            {
                                sub_str = stream.Substring(0, stream.LastIndexOf("#0:") + 11);
                                item.SubItems.Add(stream.Substring((stream.LastIndexOf("#0:") + 11), (stream.Length - sub_str.Length)));
                            }
                            else
                            {
                                sub_str = stream.Substring(0, stream.LastIndexOf("#0:") + 4);
                                item.SubItems.Add(stream.Substring((stream.LastIndexOf("#0:") + 4), (stream.Length - sub_str.Length)));
                            }
                        }
                        else
                        {
                            if (stream.Contains("Video"))
                            {
                                sub_str = stream.Substring(0, stream.LastIndexOf("#0:") + 6);
                                item.SubItems.Add(stream.Substring((stream.LastIndexOf("#0:") + 6), (stream.Length - sub_str.Length)));
                            }
                            if (stream.Contains("Audio"))
                            {
                                sub_str = stream.Substring(0, stream.LastIndexOf("#0:") + 6);
                                item.SubItems.Add(stream.Substring((stream.LastIndexOf("#0:") + 6), (stream.Length - sub_str.Length)));
                            }
                            if (stream.Contains("Subtitle"))
                            {
                                sub_str = stream.Substring(0, stream.LastIndexOf("#0:") + 6);
                                item.SubItems.Add(stream.Substring((stream.LastIndexOf("#0:") + 6), (stream.Length - sub_str.Length)));
                            }
                        }
                    }
                }

                ff_str.WaitForExit();
                if (has_stream == false)
                {
                    item.SubItems.Add("No usable streams found");
                }
            }
            listView2.EndUpdate();
            this.Cursor = Cursors.Arrow;

            if (listView2.Items.Count == 1)
            {
                listView2.Items[0].Selected = true;
                ct2_all.PerformClick();
                tracks_background();
            }
        }

        private void avoid_overw()
        {
            avoid_overwriting = false;
            if (listView1.Items.Count < 2) return;
            int i = 0;
            foreach (ListViewItem item in listView1.Items)
            {
                if (Path.GetDirectoryName(item.Text) != Path.GetDirectoryName(listView1.Items[0].SubItems[1].Text + "\\" + listView1.Items[0].Text))
                {
                    avoid_overwriting = true;
                    return;
                }
                i = i + 1;
            }
        }

        private void button19_Click_1(object sender, EventArgs e)
        {
            Pg1.Focus();
            dg1.Rows.Clear();
            lbl_urls_time.Text = "";
        }

        private void open_file_m3u_FileOk(object sender, CancelEventArgs e)
        {
            FileInfo fl = new FileInfo(open_file_m3u.FileName);
            if (fl.Length > 10485760)
            {
                MessageBox.Show("File size is too big.", "File error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            dg1.Rows.Clear();
            Array.Clear(lines_txt_m3u, 0, lines_txt_m3u.Length);
            stop_validating_url = false;
            opening_youtubes = false;
            String[] lines = File.ReadAllLines(open_file_m3u.FileName);
            lines_txt_m3u = lines;            
            dg1.SuspendLayout();            
            BG_pre_validate_url_txt.RunWorkerAsync();
        }

        private void post_file_url()
        {            
            if (adding_youtube == false)
            {
                //String[] lines = File.ReadAllLines(open_file_m3u.FileName);
                
                if (lines_txt_m3u.Length > 4000)
                {
                    MessageBox.Show("The download list supports up to 2000 links.", "Maximum list lenght reached", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }

                List<Image> images = new List<Image>();
                Boolean has_img = false;
                Boolean has_m3u = false;

                for (int i = 0; i <= lines_txt_m3u.Count() - 1; i++)
                {
                    if (lines_txt_m3u[i].ToLower().Contains("youtu.be") || lines_txt_m3u[i].ToLower().Contains("youtube.com"))
                    {
                        adding_youtube = true;

                    }
                    else
                    {
                        has_m3u = true;
                    }
                    if (adding_youtube == true && has_m3u == true)
                    {
                        MessageBox.Show("File list contains a mix of Youtube and other types of links. Please select only lists with either YouTube links or other type of URLs.", "Mixed url types not supported", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        return;
                    }
                }
                
                for (int i = 0; i <= lines_txt_m3u.Count() - 1; i++)
                {
                    String out_file = String.Empty;
                    lines_txt_m3u[i] = lines_txt_m3u[i].Trim();
                    if (lines_txt_m3u[i] == String.Empty) continue;

                    if (lines_txt_m3u[i].ToLower().Contains("youtu.be") || lines_txt_m3u[i].ToLower().Contains("youtube.com"))
                    {
                        adding_youtube = true;
                        break;
                    }

                    PictureBox pic = new PictureBox();
                    int l = 0;
                    String img_m3u = String.Empty;

                    if (lines_txt_m3u[i].Contains("tvg-logo=") && has_img == false)
                    {
                        l = lines_txt_m3u[i].Substring(0, lines_txt_m3u[i].IndexOf("tvg-logo=")).Length;
                        img_m3u = lines_txt_m3u[i].Substring(l + 10, lines_txt_m3u[i].Length - l - 10);
                        img_m3u = img_m3u.Substring(0, img_m3u.IndexOf('\u0022'));

                        try
                        {
                            pic.Load(img_m3u);
                            images.Add(pic.Image);
                            has_img = true;
                            continue;
                        }
                        catch
                        {
                            images.Clear();
                            has_img = false;
                            continue;
                        }
                    }
                    else
                    {

                    }

                    if (!lines_txt_m3u[i].ToString().Contains("#EXTM3U") && !lines_txt_m3u[i].ToString().Contains("#EXTINF") && (lines_txt_m3u[i].Substring(0, 4).ToLower() == "http" || lines_txt_m3u[i].Substring(0, 5).ToLower() == "https"))
                    {
                        if (i >= 0)
                        {
                            out_file = Path.GetFileNameWithoutExtension(lines_txt_m3u[i]);
                            if (has_img == true)
                            {
                                dg1.Rows.Add(images[0], lines_txt_m3u[i], "", "", out_file, "");
                                dg_thumbs[dg1.RowCount - 1] = images[0];
                                has_img = false;
                                images.Clear();
                            }
                            else
                            {
                                dg1.Rows.Add(pic_noimg.Image, lines_txt_m3u[i], "", "", out_file, "");
                                dg_thumbs[dg1.RowCount - 1] = pic_noimg.Image;
                            }

                        }
                    }
                }
            }

            if (adding_youtube == true)
            {
                //String[] lines_txt_m3u = File.ReadAlllines_txt_m3u(open_file_m3u.FileName);
                if (lines_txt_m3u.Length > 1000)
                {
                    MessageBox.Show("The download list supports up to 1000 links.", "Maximum list lenght reached", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }

                for (int i = 0; i <= lines_txt_m3u.Count() - 1; i++)
                {
                    String out_file = String.Empty;

                    lines_txt_m3u[i] = lines_txt_m3u[i].Trim();
                    if (lines_txt_m3u[i] == "") continue;

                    if (lines_txt_m3u[i].ToLower().Contains("youtu.be") || lines_txt_m3u[i].ToLower().Contains("youtube.com"))
                    {
                        if (i >= 0)
                        {
                            out_file = Path.GetFileNameWithoutExtension(lines_txt_m3u[i]);
                            dg1.Rows.Add(pic_noimg.Image, lines_txt_m3u[i], "", "", out_file, "");
                        }
                    }
                }
            }
            
            foreach (DataGridViewRow row in dg1.Rows)
            {
                row.ReadOnly = true;                
            }
            foreach (Control ct in groupBox_m3u.Controls)
            {
                ct.Enabled = false;
            }
            btn_cancel_validate.Enabled = true;
            Boolean has_playlist = false;
            foreach (DataGridViewRow row in dg1.Rows)
            {
                if (row.Cells[1].Value.ToString().ToLower().Contains("playlist"))
                {
                    has_playlist = true;
                    break;
                }
            }
                        
            clean_imgs();                       
            
            if (adding_youtube == false)
            {
                BG_Validate_URLs.RunWorkerAsync();
            }

            else
            {
                if (has_playlist == true)
                {
                    foreach (DataGridViewRow row in dg1.Rows)
                    {
                        row.ReadOnly = false;                        
                    }
                    foreach (Control ct in groupBox_m3u.Controls)
                    {
                        ct.Enabled = true;
                    }
                    
                    BG_Validate_PLSS.RunWorkerAsync();
                }
                else
                {
                    BG_Validate_URLs_YT.RunWorkerAsync();
                }
            }
        }

        private void clean_imgs()
        {
            for (int i = 0; i == 1000; i++) dg_thumbs[i] = null;
        }            

        private void button31_Click(object sender, EventArgs e)
        {
            Pg1.Focus();
            adding_youtube = false;
            open_file_m3u.Filter = "URL lists | *.m3u; *.m3u8; *.txt| All files (*.*) | *.*";
            open_file_m3u.ShowDialog();
        }

        private void Validate_added_row()
        {

            dg1.Rows[dg1.RowCount - 1].Cells[5].Value = "Validating URL";

            if (dg1.Rows[dg1.RowCount - 1].Cells[1].Value == null)
            {
                dg1.Rows[dg1.RowCount - 1].Cells[5].Value = String.Empty;
                dg1.Rows[dg1.RowCount - 1].Cells[4].Value = String.Empty;
                dg1.Rows[dg1.RowCount - 1].Cells[3].Value = String.Empty;
                dg1.Rows[dg1.RowCount - 1].Cells[2].Value = String.Empty;
                dg1.Rows[dg1.RowCount - 1].DefaultCellStyle.BackColor = dg1.DefaultCellStyle.BackColor;
                return;
            }

            if (dg1.Rows[dg1.RowCount - 1].Cells[1].Value.ToString().Contains("http") == false)
            {
                dg1.Rows[dg1.RowCount - 1].Cells[5].Value = "Error";
                dg1.Rows[dg1.RowCount - 1].DefaultCellStyle.BackColor = Color.LightGoldenrodYellow;
                return;
            }

            dg1.Refresh();

            Process probe = new Process();
            probe.StartInfo.FileName = System.IO.Path.Combine(Application.StartupPath, "ffprobe.exe");
            probe.StartInfo.Arguments = "-v error -show_entries format=duration -sexagesimal -of default=noprint_wrappers=1:nokey=1 -timeout 10000000" + " -i " + '\u0022' + dg1.Rows[dg1.RowCount - 1].Cells[1].Value.ToString() + '\u0022';
            probe.StartInfo.RedirectStandardOutput = true;
            probe.StartInfo.UseShellExecute = false;
            probe.StartInfo.CreateNoWindow = true;
            probe.EnableRaisingEvents = true;

            probe.Start();

            String duracion = probe.StandardOutput.ReadLine();

            probe.WaitForExit(10000);

            if (duracion == null)
            {
                dg1.Rows[dg1.RowCount - 1].Cells[5].Value = "Error";                
                dg1.Rows[dg1.RowCount - 1].Cells[5].Style.BackColor = Color.LightGoldenrodYellow;
                return;
            }

            if (duracion != null)
            {
                if (duracion.Length >= 7)
                {
                    dg1.Rows[dg1.RowCount - 1].Cells[2].Value = duracion.Substring(0, 7);
                    dg1.Rows[dg1.RowCount - 1].Cells[3].Value = duracion.Substring(0, 7);
                    dg1.Rows[dg1.RowCount - 1].Cells[4].Value = Path.GetFileNameWithoutExtension(dg1.Rows[dg1.RowCount - 1].Cells[1].Value.ToString()) + "_FF" + (dg1.RowCount).ToString();
                    dg1.Rows[dg1.RowCount - 1].Cells[5].Value = "Ready";
                    dg1.Rows[dg1.RowCount - 1].DefaultCellStyle.BackColor = dg1.DefaultCellStyle.BackColor;

                    if (duracion.Substring(0, 7) == "0:00:00")
                    {
                        dg1.Rows[dg1.RowCount - 1].DefaultCellStyle.BackColor = dg1.DefaultCellStyle.BackColor;
                        dg1.Rows[dg1.RowCount - 1].Cells[5].Value = "Ready";
                    }
                }

                if (duracion == "N/A")
                {
                    dg1.Rows[dg1.RowCount - 1].Cells[2].Value = "N/A";
                    dg1.Rows[dg1.RowCount - 1].Cells[3].Value = "\u221E";
                    dg1.Rows[dg1.RowCount - 1].Cells[4].Value = Path.GetFileNameWithoutExtension(dg1.Rows[dg1.RowCount - 1].Cells[1].Value.ToString()) + "_FF" + (dg1.RowCount - 1).ToString();
                    dg1.Rows[dg1.RowCount - 1].DefaultCellStyle.BackColor = dg1.DefaultCellStyle.BackColor;
                    dg1.Rows[dg1.RowCount - 1].Cells[5].Value = "Ready";
                }
            }
            urls_duration();
        }       

        private void Validate_added_row_YT_PL()
        {
            if (!File.Exists(System.IO.Path.Combine(Application.StartupPath, "youtube-dl.exe")))
            {
                MessageBox.Show("Youtube-dl was not found", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                release_datagrid();
                return;
            }
                this.Enabled = false;
            List<string> list_lines = new List<string>();
            Form11 frm_prog = new Form11();

            new System.Threading.Thread(() =>
            {
                System.Threading.Thread.CurrentThread.IsBackground = true;
                frm_prog.ShowDialog();
                frm_prog.Refresh();

            }).Start();

            Task t2 = Task.Run(() =>
            {
            Process probe = new Process();
            probe.StartInfo.FileName = System.IO.Path.Combine(Application.StartupPath, "youtube-dl.exe");
            probe.StartInfo.WorkingDirectory = Application.StartupPath;
            probe.StartInfo.Arguments = "--flat-playlist --dump-json " + pl_url;
            probe.StartInfo.RedirectStandardOutput = true;
            probe.StartInfo.UseShellExecute = false;
            probe.StartInfo.StandardOutputEncoding = Encoding.UTF8;
            probe.StartInfo.CreateNoWindow = true;
            probe.EnableRaisingEvents = true;

            probe.Start();

                while (!probe.StandardOutput.EndOfStream)
                {
                    if (frm_prog.abort_validate == false)
                    {
                        list_lines.Add(probe.StandardOutput.ReadLine());
                    }
                    else
                    {
                        probe.StandardOutput.ReadToEnd();
                    }
                }
                probe.WaitForExit();
                try
                {
                    frm_prog.Invoke(new MethodInvoker(delegate
                    {
                        frm_prog.Dispose();
                    }));
                }
                catch { }
            });
            
            t2.Wait();
            
            if (frm_prog.abort_validate == false)
            {
                if (list_lines.Count > 1000)
            {
                MessageBox.Show("The download list supports up to 1000 links.", "Maximum list lenght reached", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                release_datagrid();
                this.Enabled = true;
                return;
            }
            
                foreach (String lin in list_lines)
                {
                    if (lin != null && lin != "") dg1.Rows.Add(pic_noimg.Image, "https://www.youtube.com/watch?v=" + lin.Substring(lin.IndexOf('\u0022' + "url" + '\u0022' + ": " + '\u0022') + 8, 11), "-", "-", "", "");
                }                
                this.Focus();
           
                //this.Enabled = false;
                BG_Validate_URLs_YT.RunWorkerAsync();
            }
            else
            {
                this.Enabled = true;
                release_datagrid();
                this.Focus();
            }
        }

        private void cell_zoom()
        {            
         dg1.Invoke(new MethodInvoker(delegate
            {
            for (int i = 0; i < dg1.Columns.Count; i++)
                if (dg1.Columns[i] is DataGridViewImageColumn)
                {
                    ((DataGridViewImageColumn)dg1.Columns[i]).ImageLayout = DataGridViewImageCellLayout.Zoom;
                    dg1.Refresh();
                    break;
                }
                dg1.Refresh();
            }));
        }

        private void Validate_added_row_YT()
        {
            Boolean one_ok = false;

            dg1.Rows[dg1.RowCount - 1].Cells[5].Value = "Validating URL";

            if (dg1.Rows[dg1.RowCount - 1].Cells[1].Value == null)
            {
                dg1.Rows[dg1.RowCount - 1].Cells[5].Value = String.Empty;
                dg1.Rows[dg1.RowCount - 1].Cells[4].Value = String.Empty;
                dg1.Rows[dg1.RowCount - 1].Cells[3].Value = String.Empty;
                dg1.Rows[dg1.RowCount - 1].Cells[2].Value = String.Empty;
                dg1.Rows[dg1.RowCount - 1].DefaultCellStyle.BackColor = dg1.DefaultCellStyle.BackColor;
                return;
            }

            if (dg1.Rows[dg1.RowCount - 1].Cells[1].Value.ToString().Contains("http") == false)
            {
                dg1.Rows[dg1.RowCount - 1].Cells[5].Value = "Error";
                dg1.Rows[dg1.RowCount - 1].DefaultCellStyle.BackColor = Color.LightGoldenrodYellow;
                return;
            }

            dg1.Refresh();
            cell_zoom();

            Process probe = new Process();
            probe.StartInfo.FileName = System.IO.Path.Combine(Application.StartupPath, "youtube-dl.exe");
            if (!File.Exists(System.IO.Path.Combine(Application.StartupPath, "youtube-dl.exe")))
                {
                MessageBox.Show("Youtube-dl was not found", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                release_datagrid();
                return;
            }
            probe.StartInfo.WorkingDirectory = Application.StartupPath;
            probe.StartInfo.Arguments = "--get-duration --get-title --get-thumbnail " + dg1.Rows[dg1.RowCount - 1].Cells[1].Value.ToString();
            probe.StartInfo.RedirectStandardOutput = true;
            probe.StartInfo.UseShellExecute = false;
            probe.StartInfo.CreateNoWindow = true;
            probe.EnableRaisingEvents = true;
            probe.Start();

            String filename = "";
            String out_thumb = "";
            String duracion = "";

            while (!probe.StandardOutput.EndOfStream)
            {
                filename = probe.StandardOutput.ReadLine();
                out_thumb = probe.StandardOutput.ReadLine();
                duracion = probe.StandardOutput.ReadLine();
            }
            
            PictureBox pic = new PictureBox();

            if (out_thumb.Contains("http"))
            {
                try
                {
                    new System.Threading.Thread(() =>
                    {
                        System.Threading.Thread.CurrentThread.IsBackground = true;
                        pic.Load(out_thumb);
                        dg_thumbs[dg1.RowCount - 1] = pic.Image;
                        dg1.Invoke(new MethodInvoker(delegate
                        {                            
                            dg1.Rows[dg1.RowCount - 1].Cells[0].Value = pic.Image;                         
                        }));                        

                    }).Start();
                }
                catch
                {
                    dg_thumbs[dg1.RowCount - 1] = pic_noimg.Image;
                }
            }
            else
            {
                dg_thumbs[dg1.RowCount - 1] = pic_noimg.Image;
            }
            cell_stretch();

            probe.WaitForExit(10000);
            probe.StartInfo.Arguments = "";

            if (duracion == null || duracion == string.Empty)
            {
                dg1.Invoke(new MethodInvoker(delegate
                {
                    dg1.Rows[dg1.RowCount - 1].DefaultCellStyle.BackColor = Color.LightGoldenrodYellow;
                    dg1.Rows[dg1.RowCount - 1].Cells[2].Value = "";
                    dg1.Rows[dg1.RowCount - 1].Cells[3].Value = "";
                    dg1.Rows[dg1.RowCount - 1].DefaultCellStyle.BackColor = dg1.DefaultCellStyle.BackColor;
                    dg1.Rows[dg1.RowCount - 1].Cells[5].Value = "Error";
                    this.InvokeEx(f => f.dg1.Rows[dg1.RowCount - 1].Cells[5].Style.BackColor = Color.LightGoldenrodYellow);
                    
                }));
            }

            if (duracion != null && filename != "")
            {
                dg1.Invoke(new MethodInvoker(delegate
                {
                    if (duracion == "0")
                    {
                        dg1.Rows[dg1.RowCount - 1].Cells[2].Value = duracion;
                        dg1.Rows[dg1.RowCount - 1].Cells[3].Value = "Live";
                    }
                    else
                    {
                        if (duracion.Length < 6) duracion = "00:" + duracion;
                        dg1.Rows[dg1.RowCount - 1].Cells[2].Value = duracion;
                        dg1.Rows[dg1.RowCount - 1].Cells[3].Value = duracion;
                    }
                    dg1.Rows[dg1.RowCount - 1].Cells[4].Value = filename;
                    dg1.Rows[dg1.RowCount - 1].DefaultCellStyle.BackColor = dg1.DefaultCellStyle.BackColor;
                    one_ok = true;
                    dg1.Rows[dg1.RowCount - 1].Cells[5].Value = "Ready";
                    this.InvokeEx(f => f.dg1.Rows[dg1.RowCount - 1].Cells[5].Style.BackColor = Color.LightGreen);
                }));
            }

            if (dg1.RowCount > 1)
            {
                dg1.ClearSelection();
                dg1.Rows[dg1.RowCount - 1].Cells[1].Selected = true;
                dg1.CurrentCell = dg1.Rows[dg1.RowCount - 1].Cells[1];
            }
            urls_duration();
            if (one_ok == true)
            {
                chk_m3u_params.Left = 14;
                chk_output_server.Enabled = false;
                chk_m3u_params.Text = "Youtube-dl params";
            }
            this.Enabled = true; release_datagrid();
        }

        private void BG_Validate_URLs_DoWork(object sender, DoWorkEventArgs e)
        {
            this.InvokeEx(f => this.Enabled = false);
            cell_zoom();

            dg1.ReadOnly = false;
            m3u_params_checked = chk_m3u_params.Checked;
            output_server_checked = chk_output_server.Checked;
            groupBox_m3u.Invoke(new MethodInvoker(delegate
            {
                foreach (Control ct in groupBox_m3u.Controls)
                {
                    ct.Enabled = true;
                }
            }));

            chk_m3u_params.Invoke(new MethodInvoker(delegate
            {
                if (chk_m3u_params.CheckState == CheckState.Checked)
                {
                    txt_m3u_params.Enabled = true;
                }
                else
                {
                    txt_m3u_params.Enabled = false;
                }
            }));

            chk_output_server.Invoke(new MethodInvoker(delegate
            {
                if (chk_output_server.CheckState == CheckState.Checked)
                {
                    txt_output_server.Enabled = true;
                }
                else
                {
                    txt_output_server.Enabled = false;
                }
            }));

            foreach (DataGridViewRow row in dg1.Rows)
            {
                this.InvokeEx(f => row.ReadOnly = false);
            }

            foreach (Control ct in groupBox_m3u.Controls)
            {
                this.InvokeEx(f => ct.Enabled = false);
            }

            this.InvokeEx(f => f.btn_cancel_validate.Enabled = true);

            procs.Clear();
            for (int ii = 0; ii < dg1.RowCount; ii++)
            {
                procs.Add("proc_urls_" + ii.ToString(), new Process());
            }
            clean_imgs();

            int prog = 0;

            Form9 form_prog2 = new Form9();
            form_prog2.abort_validate = false;

            ParallelOptions par_op = new ParallelOptions();
            System.Threading.CancellationTokenSource cts = new System.Threading.CancellationTokenSource();
            par_op.CancellationToken = cts.Token;
            par_op.MaxDegreeOfParallelism = (int)n_downs.Value;

            new System.Threading.Thread(() =>
            {
                System.Threading.Thread.CurrentThread.IsBackground = true;
                form_prog2.StartPosition = FormStartPosition.CenterScreen;
                form_prog2.progressBar1.Style = ProgressBarStyle.Continuous;
                form_prog2.progressBar1.Maximum = dg1.RowCount + 1;
                form_prog2.progressBar1.Value = 1;
                form_prog2.Refresh();
                form_prog2.label1.Text = "Validating m3u8 links, please wait...";
                form_prog2.lab_count.Text = "1/" + dg1.RowCount;
                form_prog2.lab_count.Refresh();
                form_prog2.Refresh();
                form_prog2.ShowDialog();
                form_prog2.Refresh();

            }).Start();

            var workItems = Enumerable.Range(0, dg1.RowCount);
            int errors = 0;
            fatal_parallel = false;

            ParallelLoopResult result = new ParallelLoopResult();
            try
            {
                result = Parallel.ForEach(workItems.AsParallel().AsOrdered(), par_op, (i) =>
                {
                    if (form_prog2.abort_validate == true)
                    {
                        cancelados_paralelos = true;
                        cts.Cancel();
                    }
                    if (cts.IsCancellationRequested == true) form_prog2.abort_validate = true;

                    if (dg1.Rows[i].Cells[1].Value == null) form_prog2.abort_validate = true;

                    if (stop_validating_url == true) form_prog2.abort_validate = true;


                    if (dg1.Rows[i].Cells[5].Value.ToString() == "Ready" || dg1.Rows[i].Cells[5].Value.ToString() == "Processing" || dg1.Rows[i].Cells[5].Value.ToString() == "Success")
                    {
                        prog = prog + 1;
                        try
                        {
                            form_prog2.Invoke(new MethodInvoker(delegate
                            {
                                if (form_prog2.progressBar1.Value < form_prog2.progressBar1.Maximum)
                                {
                                    form_prog2.progressBar1.Value = form_prog2.progressBar1.Value + 1;
                                    this.InvokeEx(f => TaskbarProgress.SetValue(this.Handle, form_prog2.progressBar1.Value, form_prog2.progressBar1.Maximum));
                                }
                                form_prog2.progressBar1.Refresh();
                                form_prog2.lab_count.Text = (prog).ToString() + "/" + dg1.Rows.Count;
                                form_prog2.lab_count.Refresh();

                            }));
                        }
                        catch { }
                        return;
                    }

                    this.InvokeEx(f => f.dg1.Rows[i].Cells[5].Value = "Validating URL");
                    this.InvokeEx(f => f.dg1.Refresh());
                    var tmp = procs["proc_urls_" + i.ToString()];

                    tmp.StartInfo.FileName = System.IO.Path.Combine(Application.StartupPath, "ffprobe.exe");
                    //tmp.StartInfo.Arguments = "-i " + dg1.Rows[i].Cells[1].Value.ToString() + " -timeout 9000000";
                    tmp.StartInfo.Arguments = "-v error -show_entries format=duration -sexagesimal -of default=noprint_wrappers=1:nokey=1 -timeout 10000000" + " -i " + '\u0022' + dg1.Rows[i].Cells[1].Value.ToString() + '\u0022';
                    tmp.StartInfo.RedirectStandardOutput = true;
                    tmp.StartInfo.RedirectStandardError = true;
                    tmp.StartInfo.UseShellExecute = false;
                    tmp.StartInfo.CreateNoWindow = true;
                    tmp.EnableRaisingEvents = true;

                    String duracion = String.Empty;
                    String std_out = String.Empty;

                    if (cts.IsCancellationRequested == false)
                    {
                        tmp.Start();

                        //Check
                        duracion = tmp.StandardOutput.ReadLine();
                        tmp.WaitForExit(10000);

                        if (duracion == null) duracion = "N/A";
                        else
                        {                            
                            if (duracion.Length >= 7)
                            {
                                duracion.Substring(0, 7);
                                TimeSpan time = new TimeSpan();
                                if (!TimeSpan.TryParse(duracion, out time))
                                {
                                    duracion = "N/A";
                                }
                            }
                        }
                        tmp.StartInfo.Arguments = String.Empty;
                    }
                    else return;

                    prog = prog + 1;

                    form_prog2.Invoke(new MethodInvoker(delegate
                    {

                        if (form_prog2.progressBar1.Value < form_prog2.progressBar1.Maximum)
                        {
                            form_prog2.progressBar1.Value = form_prog2.progressBar1.Value + 1;
                            this.InvokeEx(f => TaskbarProgress.SetValue(this.Handle, form_prog2.progressBar1.Value, form_prog2.progressBar1.Maximum));
                        }
                        form_prog2.progressBar1.Refresh();
                        form_prog2.lab_count.Text = (prog).ToString() + "/" + dg1.Rows.Count;
                        form_prog2.lab_count.Refresh();

                    }));

                    if (duracion == null || duracion == string.Empty)
                    {
                        this.InvokeEx(f => f.dg1.Rows[i].Cells[5].Value = "Error");
                        this.InvokeEx(f => f.dg1.Rows[i].Cells[5].Style.BackColor = Color.LightGoldenrodYellow);
                        errors = errors + 1;
                        
                    }

                    if (duracion != null && cts.IsCancellationRequested == false)
                    {
                        if (duracion.Length >= 7)
                        {
                            this.InvokeEx(f => f.dg1.Rows[i].Cells[2].Value = duracion.Substring(0, 7));
                            this.InvokeEx(f => f.dg1.Rows[i].Cells[3].Value = duracion.Substring(0, 7));
                            this.InvokeEx(f => f.dg1.Rows[i].Cells[4].Value = dg1.Rows[i].Cells[4].Value.ToString() + "_FF" + (i + 1).ToString());
                            this.InvokeEx(f => f.dg1.Rows[i].Cells[5].Value = "Ready");
                            this.InvokeEx(f => f.dg1.Rows[i].DefaultCellStyle.BackColor = dg1.DefaultCellStyle.BackColor);
                            this.InvokeEx(f => f.dg1.Rows[i].Cells[5].Style.BackColor = Color.LightGreen);

                            if (duracion.Substring(0, 7) == "0:00:00")
                            {
                                this.InvokeEx(f => f.dg1.Rows[i].DefaultCellStyle.BackColor = dg1.DefaultCellStyle.BackColor);
                                this.InvokeEx(f => f.dg1.Rows[i].Cells[5].Value = "Ready");
                                Total_dur_urls = Total_dur_urls + TimeSpan.Parse(dg1.Rows[i].Cells[3].Value.ToString()).TotalSeconds;
                                this.InvokeEx(f => f.dg1.Rows[i].Cells[5].Style.BackColor = Color.LightGreen);

                            }
                        }

                        if (duracion == "N/A")
                        {
                            this.InvokeEx(f => f.dg1.Rows[i].Cells[2].Value = "N/A");
                            this.InvokeEx(f => f.dg1.Rows[i].Cells[3].Value = "\u221E");
                            this.InvokeEx(f => f.dg1.Rows[i].Cells[4].Value = dg1.Rows[i].Cells[4].Value.ToString() + "_FF" + (i + 1).ToString());
                            this.InvokeEx(f => f.dg1.Rows[i].DefaultCellStyle.BackColor = dg1.DefaultCellStyle.BackColor);
                            this.InvokeEx(f => f.dg1.Rows[i].Cells[5].Value = "Ready");
                            try
                            {
                                Total_dur_urls = Total_dur_urls + TimeSpan.Parse(dg1.Rows[i].Cells[3].Value.ToString()).TotalSeconds;
                            }
                            catch { }
                        }

                        form_prog2.Invoke(new MethodInvoker(delegate
                        {
                            if (errors > 0 && form_prog2.abort_validate == false)
                            {
                                form_prog2.lab_err.Text = "Errors: " + errors.ToString();
                                form_prog2.lab_err.Refresh();
                                form_prog2.pictureBox1.Visible = true;
                                form_prog2.pictureBox1.Refresh();
                            }
                        }));
                    }
                    else
                    {
                        this.InvokeEx(f => f.dg1.Rows[i].Cells[5].Value = "");
                    }
                    //MessageBox.Show(prog.ToString());
                });

                try
                {
                    form_prog2.Invoke(new MethodInvoker(delegate
                    { form_prog2.Close(); }));
                }
                catch
                {
                    try
                    {
                        form_prog2.Invoke(new MethodInvoker(delegate
                        { form_prog2.Close(); }));
                    }
                    catch { }
                    form_prog2.abort_validate = true;
                }
            }
            catch (Exception exc)
            {
                fatal_parallel_msg = exc.Message;
                fatal_parallel = true;

                try
                {
                    form_prog2.Invoke(new MethodInvoker(delegate
                    { form_prog2.Close(); }));
                }
                catch { 
                    form_prog2.abort_validate = true;
                }
            }
            if (result.IsCompleted == true) fatal_parallel = false;
            else
            {
                if (cts.IsCancellationRequested == false) fatal_parallel = true;
                else fatal_parallel = false;
            }            
        }

        private void BG_Validate_URLs_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            this.Enabled = true;
            chk_m3u_params.Text = "M3U Parameters";
            chk_m3u_params.Left = 22;
            chk_m3u_params.Checked = m3u_params_checked;
            chk_output_server.Checked = output_server_checked;
            if (m3u_params_checked == false) txt_m3u_params.Enabled = false;
            if (output_server_checked == false) txt_output_server.Enabled = false;
            for (int i = Application.OpenForms.Count - 1; i >= 0; i--)
            {
                if (Application.OpenForms[i].Name == "Form9")
                    try { Application.OpenForms[i].Close(); } catch { }
            }

            foreach (DataGridViewRow row in dg1.Rows)
            {
                row.Cells[0].Value = dg_thumbs[row.Index];
                if (row.Cells[3].Value == null) continue;
                if (row.Cells[3].Value.ToString() != "" && row.Cells[3].Value.ToString() != "-" && row.Cells[3].Value.ToString() != "N/A" && row.Cells[3].Value.ToString() != "\u221E")
                {
                    Total_dur_urls = Total_dur_urls + TimeSpan.Parse(row.Cells[3].Value.ToString()).TotalSeconds;
                }
            }

            TimeSpan t = TimeSpan.FromSeconds(Total_dur_urls);
            String dur = string.Format("{0:D2}h:{1:D2}m:{2:D2}s:{3:D3}ms",
                 (int)t.TotalHours,
                 t.Minutes,
                 t.Seconds,
                 t.Milliseconds);

            this.InvokeEx(f => f.lbl_urls_time.Visible = true);
            this.InvokeEx(f => f.lbl_urls_time.Text = dur.Substring(0, 11));
            if (dur.Substring(0, 11) == "00h:00m:00s")
            { this.InvokeEx(f => f.lbl_urls_time.Text = ""); }
            cell_stretch();
            urls_duration();
            this.InvokeEx(f => TaskbarProgress.SetState(this.Handle, TaskbarProgress.TaskbarStates.NoProgress));
        }

        private void chk_m3u_params_CheckedChanged(object sender, EventArgs e)
        {
            if (chk_m3u_params.CheckState == CheckState.Checked)
            {
                txt_m3u_params.Enabled = true;
            }
            else
            {
                txt_m3u_params.Enabled = false;
            }
        }

        private void button16_Click_1(object sender, EventArgs e)
        {
            if (folderBrowser_m3u.ShowDialog() == DialogResult.OK)
            {
                if (folderBrowser_m3u.SelectedPath != txt_path_m3u.Text) btn_save_path_url.Enabled = true;
                txt_path_m3u.Text = folderBrowser_m3u.SelectedPath;
                txt_path_m3u.BackColor = Color.White;

                try
                {
                    File.WriteAllText(folderBrowser_m3u.SelectedPath + "\\" + "FFBatch_test.txt", "FFBatch_test");
                    System.Threading.Thread.Sleep(10);
                    File.Delete(folderBrowser_m3u.SelectedPath + "\\" + "FFBatch_test.txt");
                }
                catch (System.Exception excpt)
                {
                    MessageBox.Show("Access error. Path may not be writable: " + Environment.NewLine + excpt.Message, "Access denied to folder", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    this.InvokeEx(f => this.Cursor = Cursors.Arrow);
                    return;
                }
            }
        }

        private void ct_validate_url_Click(object sender, EventArgs e)
        {
            dg1.EndEdit();
            dg1.ClearSelection();

            for (int i = 1; i < dg1.RowCount; i++)

            {
                if (dg1.Rows[i].Cells[5].Value.ToString() == "Error" || dg1.Rows[i].Cells[5].Value.ToString() == "Failed")

                {
                    dg1.Rows.RemoveAt(i);
                    i--;
                }
            }

            if (dg1.Rows[0].Cells[1] != null && dg1.Rows[0].Cells[5].Value.ToString() == "Error")
            {
                dg1.Rows.RemoveAt(0);
                return;
            }
            dg1.Refresh();
        }

        private void ct_del_m3u_Click(object sender, EventArgs e)
        {
            dg1.EndEdit();
            dg1.ClearSelection();

            for (int i = 1; i < dg1.RowCount; i++)

            {
                if (dg1.RowCount == 1 && dg1.Rows[0].Cells[1].Value == null)
                {
                    dg1.Rows.Clear();
                    return;
                }

                if (dg1.Rows[i].Cells[1].Value == null)

                {
                    dg1.Rows.RemoveAt(i);
                    i--;
                }
            }
        }

        private void ct_paste_m3u_Click(object sender, EventArgs e)
        {
            check_internet(); if (internet_up == false) return;

            if (has_you_row() == true)
            {
                MessageBox.Show("Mixing of YouTube and other types of URLs on the list is not supported.", "Mixed URL types", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            if (Clipboard.GetText() != String.Empty && Clipboard.GetText().ToLower().Contains("http"))
            {
                dg1.Rows.Add(pic_noimg.Image,Clipboard.GetText(), "", "", "", "");
                foreach (DataGridViewRow row in dg1.Rows)
                {
                    row.ReadOnly = true;
                    
                }
                foreach (Control ct in groupBox_m3u.Controls)
                {
                    ct.Enabled = false;
                }
                Validate_added_row();
                foreach (DataGridViewRow row in dg1.Rows)
                {
                    row.ReadOnly = false;
                    
                }
                foreach (Control ct in groupBox_m3u.Controls)
                {
                    ct.Enabled = true;
                }

                if (chk_m3u_params.CheckState == CheckState.Checked)
                {
                    txt_m3u_params.Enabled = true;
                }
                else
                {
                    txt_m3u_params.Enabled = false;
                }

                if (chk_output_server.CheckState == CheckState.Checked)
                {
                    txt_output_server.Enabled = true;
                }
                else
                {
                    txt_output_server.Enabled = false;
                }
            }
        }

        private void release_datagrid()
        {
            this.InvokeEx(f => this.Enabled = true);

            dg1.Invoke(new MethodInvoker(delegate
            {
                ((DataGridViewImageColumn)dg1.Columns[0]).ImageLayout = DataGridViewImageCellLayout.Stretch;
            }));

            this.Invoke(new MethodInvoker(delegate
            {
                dg1.ReadOnly = false;

                foreach (Control ct in groupBox_m3u.Controls)
                {
                    ct.Enabled = true;
                }

                if (chk_m3u_params.CheckState == CheckState.Checked)
                {
                    txt_m3u_params.Enabled = true;
                }
                else
                {
                    txt_m3u_params.Enabled = false;
                }

                if (chk_output_server.CheckState == CheckState.Checked)
                {
                    txt_output_server.Enabled = true;
                }
                else
                {
                    txt_output_server.Enabled = false;
                }

                foreach (DataGridViewRow row in dg1.Rows)
                {
                    row.ReadOnly = false;                    
                }                

            }));
        }
        

        private void get_mixed_urls()
        {
            Boolean has_youtube = false;
            Boolean has_m3u = false;
            foreach (DataGridViewRow row in dg1.Rows)
            {
                if (row.Cells[1].Value.ToString().ToLower().Contains("youtu.be") || row.Cells[1].Value.ToString().ToLower().Contains("youtube.com"))
                {
                    has_youtube = true;
                }
                else
                {
                    has_m3u = true;
                }
            }
            if (has_m3u == true && has_youtube == true)
            {
                mixed_urls = true;
                MessageBox.Show("There are mixed url types on the list. Please include either YouTube links or other types like m3u8", "Mixed url types not supported", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            else mixed_urls = false;
        }

        private Boolean url_repeat()
        {
            Boolean remove_dups = false;
            Boolean dups = false;

            for (int i = 0; i < dg1.RowCount - 1; i++) //compare data
            {
                var Row = dg1.Rows[i];
                string abc = Row.Cells[4].Value.ToString();
                

                for (int j = i + 1; j < dg1.RowCount; j++)
                {
                    var Row2 = dg1.Rows[j];
                    string def = Row2.Cells[4].Value.ToString();
                    if (abc == def)
                    {
                        dups = true;
                        if (remove_dups == false)
                        {
                            DialogResult a = MessageBox.Show("The URL ouput name is duplicated: " + Environment.NewLine + Environment.NewLine + '\u0022' + abc + '\u0022' + Environment.NewLine + Environment.NewLine + "Do you want to remove all duplicates and continue?", "Duplicated output found", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question);
                            if (a == DialogResult.Yes)
                            {
                                remove_dups = true;
                            }
                            else
                            {
                                remove_dups = false;
                                return true;
                            }
                        }
                        if (remove_dups == true)
                        {
                            Row.Cells[4].Value = Row2.Cells[4].Value;
                            dg1.Rows.Remove(Row2);
                            j--;                                                 
                        }
                    }
                }
            }
            if (dups == true && remove_dups == false) return true;
            else return false;

        }

            private void btn_start_m3u_Click(object sender, EventArgs e)
        {
            cancel_queue = false;
            notifyIcon1.Visible = true;
            if (m3u_single_running == true) return;
            Pg1.Text = "0" + System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator + "0%";
            foreach (DataGridViewRow row in dg1.Rows)
            {
                if (row.Cells[5].Value.ToString() == "Error" || row.Cells[5].Value.ToString() == "Unknown")
                {
                    MessageBox.Show("There are errors on the list. Please validate urls.", "Errors found", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
            }

            if (dg1.RowCount == 0)
            {
                MessageBox.Show("Download list is empty", "No files to be processed", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            if (txt_m3u_params.Text == String.Empty)
            {
                MessageBox.Show("Capture parameters field can not be empty", "Parameters error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            if (txt_path_m3u.Text == "No path selected" && chk_output_server.CheckState == CheckState.Unchecked)
            {
                MessageBox.Show("Please select an output folder", "Ouput folder not configured", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }
            String output_server = String.Empty;

            if (chk_output_server.CheckState == CheckState.Checked && txt_output_server.Text == String.Empty)
            {
                MessageBox.Show("Output to streaming is enabled but field is empty", "Output url is blank", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return;
            }
            else
            {
                output_server = txt_output_server.Text;
            }

            get_mixed_urls();
            if (mixed_urls == true) return;

            if (!dg1.Rows[0].Cells[1].Value.ToString().ToLower().Contains("youtu.be") && !dg1.Rows[0].Cells[1].Value.ToString().ToLower().Contains("youtube.com"))
            {
                foreach (DataGridViewRow row in dg1.Rows)
                {
                    if (row.Cells[5].Value.ToString() == "Ready" && row.Cells[2].Value.ToString() != "N/A")
                    {
                        if (TimeSpan.Parse(row.Cells[3].Value.ToString()).TotalSeconds > TimeSpan.Parse(row.Cells[2].Value.ToString()).TotalSeconds)
                        {
                            MessageBox.Show("Capture time for item " + row.Cells[4].Value.ToString() + " exceeds source duration", "Incorrect capture duration", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            return;
                        }
                    }
                }
            }
            foreach (DataGridViewRow row in dg1.Rows)
            {
                if (row.Cells[4].Value.ToString().Contains("/") || row.Cells[4].Value.ToString().Contains(":") || row.Cells[4].Value.ToString().Contains("*") || row.Cells[4].Value.ToString().Contains("?") || row.Cells[4].Value.ToString().Contains("¿") || row.Cells[4].Value.ToString().Contains('\u0022') || row.Cells[4].Value.ToString().Contains("<") || row.Cells[4].Value.ToString().Contains(">") || row.Cells[4].Value.ToString().Contains("|") || row.Cells[4].Value.ToString().Contains("\\"))
                {
                    row.Cells[4].Value = row.Cells[4].Value.ToString().Replace("/", "");
                    row.Cells[4].Value = row.Cells[4].Value.ToString().Replace(":", "");
                    row.Cells[4].Value = row.Cells[4].Value.ToString().Replace("*", "");
                    row.Cells[4].Value = row.Cells[4].Value.ToString().Replace("?", "");
                    row.Cells[4].Value = row.Cells[4].Value.ToString().Replace("¿", "");
                    row.Cells[4].Value = row.Cells[4].Value.ToString().Replace("\u0022", "");
                    row.Cells[4].Value = row.Cells[4].Value.ToString().Replace("<", "");
                    row.Cells[4].Value = row.Cells[4].Value.ToString().Replace(">", "");
                    row.Cells[4].Value = row.Cells[4].Value.ToString().Replace("|", "");
                    row.Cells[4].Value = row.Cells[4].Value.ToString().Replace("\\", "");
                }
            }

            //Pending validation
            Boolean pre_validate = false;

            foreach (DataGridViewRow row in dg1.Rows)
            {
                if (row.Cells[5].Value.ToString() == String.Empty)
                {
                    pre_validate = true;
                }
            }
            if (pre_validate == true)
            {
                var a = MessageBox.Show("You need to validate URLs before processing. Click OK to validate, or cancel to abort", "Validation pending", MessageBoxButtons.OKCancel, MessageBoxIcon.Question);
                if (a == DialogResult.OK)
                {
                    was_started.Text = btn_start_m3u.Text;
                    btn_validate_url.PerformClick();
                    return;
                }
                else
                {
                    return;
                }
            }
            if (url_repeat() == true) return;

            foreach (DataGridViewRow row in dg1.Rows)
            {
                row.Cells[5].Style.BackColor = Color.White;
                if (row.Cells[3].Value.ToString() == "\u221E")
                {
                    MessageBox.Show("Processing will not continue after items with undefined duration (infinite). Start all URLs instead", "items with undefinde duration in sequential mode", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }
            }

            String destino_test = Path.Combine(txt_path_m3u.Text, "FFBatch_test");
            String file_prueba = dg1.Rows[0].Cells[1].Value.ToString();
            String file_output = dg1.Rows[0].Cells[5].Value.ToString() + "." + combo_ext_m3u.SelectedItem.ToString();
            String fichero = Path.GetFileName(file_prueba);
            
            if (chk_try.CheckState == CheckState.Unchecked)
            { //Try preset

                if (!file_prueba.ToLower().Contains("youtu.be") && !file_prueba.ToLower().Contains("youtube.com"))
                {

                    Form11 frm_prog = new Form11();
                    new System.Threading.Thread(() =>
                    {
                        System.Threading.Thread.CurrentThread.IsBackground = true;
                        frm_prog.label1.Text = "Trying selected preset...";
                        frm_prog.label1.Refresh();
                        frm_prog.ShowDialog();
                        frm_prog.Refresh();

                    }).Start();

                    if (!Directory.Exists(destino_test))
                    {
                        try
                        {
                            Directory.CreateDirectory(destino_test);
                        }
                        catch (System.Exception excpt)
                        {
                            MessageBox.Show("Error writing test file: " + excpt.Message, "Error writing to folder", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            this.Cursor = Cursors.Arrow;
                            return;
                        }
                    }

                    Process consola_pre = new Process();

                    consola_pre.StartInfo.FileName = "ffmpeg.exe";
                    consola_pre.StartInfo.Arguments = " -i " + file_prueba + " -t 0.25 " + txt_m3u_params.Text + " -y " + '\u0022' + destino_test + "\\" + file_output + '\u0022';
                    consola_pre.StartInfo.CreateNoWindow = true;
                    consola_pre.StartInfo.RedirectStandardError = true;
                    consola_pre.StartInfo.RedirectStandardOutput = true;
                    consola_pre.StartInfo.UseShellExecute = false;
                    consola_pre.Start();
                    frm_prog.procId = consola_pre.Id;
                    String err_txt_1 = "";

                    while (!consola_pre.StandardError.EndOfStream)
                    {
                        err_txt_1 = consola_pre.StandardError.ReadLine();
                        this.InvokeEx(f => f.listBox4.Items.Add(err_txt_1));
                        this.InvokeEx(f => f.listBox4.Refresh());
                    }

                    consola_pre.WaitForExit(6000);
                    consola_pre.StartInfo.Arguments = String.Empty;

                    if (consola_pre.StartInfo.Arguments != String.Empty)
                    {
                        consola_pre.Kill();
                        try
                        {
                            frm_prog.Invoke(new MethodInvoker(delegate
                            {
                                frm_prog.Dispose();
                            }));
                        }
                        catch { }
                        MessageBox.Show("Timeout trying to process url", "Url timeout", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        return;
                    }
                 
                    if (consola_pre.ExitCode != 0)
                    {                        
                        try {
                            frm_prog.Invoke(new MethodInvoker(delegate
                            {
                                frm_prog.Dispose();
                            })); 
                        } catch { }
                        listBox4.TopIndex = listBox4.Items.Count - 1;
                        listBox4.Refresh();                        
                        this.Cursor = Cursors.Arrow;
                        if (File.Exists(Path.Combine(destino_test, file_output)))
                        {
                            File.Delete(Path.Combine(destino_test, file_output));
                        }

                        if (Directory.GetFiles(destino_test).Length == 0)
                        {
                            System.IO.Directory.Delete(destino_test);
                        }
                        if (frm_prog.abort_validate == false)
                        {
                            MessageBox.Show("Encoding test failed on selected item. Check FFmpeg output for more information. You may need to select a different format or parameters.", "Encoding test failed", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            return;
                        }
                    }
                    else
                    {
                        this.Cursor = Cursors.Arrow;

                        frm_prog.Invoke(new MethodInvoker(delegate
                        {
                            frm_prog.pic.Visible = false;
                            frm_prog.pic_ok.Visible = true;
                            frm_prog.pic_ok.Refresh();
                        }));
                        Thread.Sleep(175);
                        try
                        {
                            frm_prog.Invoke(new MethodInvoker(delegate
                            {
                                frm_prog.Dispose();
                            }));
                        } 
                        catch { }
                        if (File.Exists(Path.Combine(destino_test, file_output)))
                        {
                            File.Delete(Path.Combine(destino_test, file_output));
                        }

                        if (Directory.GetFiles(destino_test).Length == 0)
                        {
                            System.IO.Directory.Delete(destino_test);
                        }
                    }
                }
                else
                {
                    this.Cursor = Cursors.Arrow;
                    try
                    {
                        if (File.Exists(Path.Combine(destino_test, file_output)))
                        {
                            File.Delete(Path.Combine(destino_test, file_output));
                        }

                        if (Directory.GetFiles(destino_test).Length == 0)
                        {
                            System.IO.Directory.Delete(destino_test);
                        }
                    }
                    catch { }

                }
                //END try preset
            }

            //Mixed youtubes
            int has_lives = 0;
            int has_no_lives = 0;
                        
                foreach (DataGridViewRow row in dg1.Rows)
                {
                if (row.Cells[1].Value.ToString().ToLower().Contains("youtu.be") || row.Cells[1].Value.ToString().ToLower().Contains("youtube.com"))
                {
                    if (row.Cells[3].Value.ToString() == "Live") has_lives++;
                    else has_no_lives++;
                }
                }
            
            if (has_no_lives > 0 && has_lives > 0)
            {
                MessageBox.Show("A mix of YouTube video links and live events is not supported. Please add only video or live streaming links.", "Mixed URL types not supported", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }            

            //End mixed youtubes

            //Start pre-processing
            cancel_queue = false;
            Pg1.Value = 0;
            //pg_current.Value = 0;
            Disable_Controls();
            //textBox4.Text = "0%";

            working = true;
            m3u_single_running = true;
            cancelados_paralelos = false;
            aborted_url = false;
            errors_enc = 0;
            pic_no_errors.Visible = false;
            pic_warnings.Visible = false;
            pic_recording.Visible = false;

            //Disable Datagrid edition
            foreach (DataGridViewRow row in dg1.Rows)
            {
                row.ReadOnly = true;
                row.DefaultCellStyle.BackColor = Color.White;
                row.Cells[5].Value = "Ready";
            }

            DataGridView list_proc = new DataGridView();
            foreach (DataGridViewColumn col in dg1.Columns)
            {
                list_proc.Columns.Add((DataGridViewColumn)col.Clone());
            }

            foreach (DataGridViewRow row in dg1.Rows)
            {
                list_proc.Rows.Add(row.Cells[0].Value, row.Cells[1].Value.ToString(), row.Cells[2].Value.ToString(), row.Cells[3].Value.ToString(), row.Cells[4].Value.ToString(), row.Cells[5].Value.ToString());
            }

            //Get total duration of files

            Pg1.Maximum = dg1.RowCount;

            Double total_prog = 0;
            int i_dur = 0;

            Double row_duration = 0;
            total_multi_duration = 0;
            
                foreach (DataGridViewRow row in dg1.Rows)
                {
                row.Cells[5].Value = "Ready";

                DateTime time2;
                if (DateTime.TryParse(row.Cells[3].Value.ToString(), out time2))

                {
                    total_duration = total_duration + TimeSpan.Parse(row.Cells[3].Value.ToString()).TotalSeconds;
                    total_multi_duration = total_multi_duration + TimeSpan.Parse(row.Cells[3].Value.ToString()).TotalSeconds;
                }
                else
                {
                    //total_duration = total_duration + 0;
                }

                i_dur = i_dur + 1;
            }

            Pg1.Minimum = 0;
            Pg1.Maximum = 100;
            Pg1.Text = "0" + System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator + "0%";
            String remain_time = "0";
            //End get total duration of files

            List<string> list_lines = new List<string>();
            process_glob.StartInfo.Arguments = String.Empty;

            time_n_tasks = 0;
            timer_tasks.Start();
            timer_est_size.Start();

            if (dg1.Rows[0].Cells[1].Value.ToString().ToLower().Contains("youtu.be") || dg1.Rows[0].Cells[1].Value.ToString().ToLower().Contains("youtube.com"))
            {                
                timer2.Start();
            }

            String m3u_params = txt_m3u_params.Text;

            if (chk_m3u_params.CheckState == CheckState.Unchecked) m3u_params = "";
            String m3u_output_ext = combo_ext_m3u.SelectedItem.ToString();
            m3u_running = true;
            String format_out = combo_ext_m3u.SelectedItem.ToString();
            String down_speed = "";
            if (chk_down_limit.Checked == true) down_speed = "-r " + Convert.ToInt32(n_down_speed.Value).ToString() + "M";
            String embed_subs = "";
            if (chk_yout_subs.Checked == true) embed_subs = "--embed-subs --all-subs";
            String embed_meta = "";
            if (chk_embed_meta.Checked == true) embed_meta = "--add-metadata";
            String write_subs = "";
            if (chk_save_subtitles.Checked == true) embed_meta = "--write-sub";
            String convert_subs = "";
            if (chk_convert_srt.Checked == true) embed_meta = "--convert-subs=srt";
            stopped_recording = false;

            new System.Threading.Thread(() =>
            {
            System.Threading.Thread.CurrentThread.IsBackground = true;

            Disable_Controls();
            Boolean quit = false;

            for (int list_index = 0; list_index < dg1.RowCount; list_index++)
            {
                System.Threading.Thread.Sleep(50); //Allow kill process to send cancel_queue

                String file = list_proc.Rows[list_index].Cells[1].Value.ToString();

                //cancel queue REVIEW
                if (cancel_queue == true)
                {
                    working = false;
                    m3u_running = false;
                    m3u_single_running = false;
                    timer2.Stop();
                    timer_tasks.Stop();
                    timer_est_size.Stop();
                    cancelados_paralelos = false;
                    aborted_url = false;
                    release_datagrid();

                    this.InvokeEx(f => f.lbl_dw_speed.Text = "");
                    Enable_Controls();
                    this.InvokeEx(f => TaskbarProgress.SetState(this.Handle, TaskbarProgress.TaskbarStates.NoProgress));

                    MessageBox.Show("Queue processing aborted", "Tasks aborted", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);

                    return;
                }
                //End cancel queue

                //Skip current
                if (skip_current_url == true)
                {
                    skip_current_url = false;

                    continue;
                }

                //End skip current

                String url_capture_time = String.Empty;
                DateTime time2;
                if (DateTime.TryParse(list_proc.Rows[list_index].Cells[3].Value.ToString(), out time2))

                {
                    if (TimeSpan.Parse(list_proc.Rows[list_index].Cells[3].Value.ToString()).TotalSeconds > 0)
                    {
                        row_duration = TimeSpan.Parse(list_proc.Rows[list_index].Cells[3].Value.ToString()).TotalSeconds;
                        url_capture_time = " -t " + row_duration.ToString();
                    }
                    else
                    {
                        url_capture_time = String.Empty;
                    }
                }

                String ffm = System.IO.Path.Combine(Application.StartupPath, "ffmpeg.exe");
                String fullPath = file;
                String destino = txt_path_m3u.Text;

                String pre_input_var = "";
                if (txt_pre_input.Text != "")
                {
                    pre_input_var = txt_pre_input.Text;
                }

                String pre_ss = "";
                if (TimeSpan.Parse(ss_time_input.Text).TotalSeconds != 0)
                {
                    pre_ss = " -ss " + ss_time_input.Text;
                }

                add_suffix = "";

                if (chk_suffix.Checked == true && txt_suffix.Text != String.Empty)
                {
                    add_suffix = txt_suffix.Text;
                }

                String ext_output1 = txt_format.Text;
                if (txt_format.Text == String.Empty)
                {
                    ext_output1 = Path.GetExtension(file);
                }
                else
                {
                    ext_output1 = "." + txt_format.Text;
                }

                String AppParam = String.Empty;

                if (chk_output_server.CheckState == CheckState.Checked)
                {
                    AppParam = pre_input_var + " " + pre_ss + " -i " + "" + file + " -y " + m3u_params + url_capture_time + " " + output_server;
                }
                else
                {
                    AppParam = pre_input_var + " " + pre_ss + " -i " + "" + file + " -y " + m3u_params + url_capture_time + " " + '\u0022' + Path.Combine(destino, list_proc.Rows[list_index].Cells[4].Value.ToString() + "." + m3u_output_ext);
                }

                if (!Directory.Exists(destino))
                {
                    try
                    {
                        Directory.CreateDirectory(destino);
                    }
                    catch (System.Exception excpt)
                    {
                        MessageBox.Show("Error writing output folder: " + excpt.Message, "Error writing to folder", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        this.Cursor = Cursors.Arrow;
                        return;
                    }
                }

                if (file_prueba.ToLower().Contains("youtu.be") || file_prueba.ToLower().Contains("youtube.com"))
                {
                    process_glob.StartInfo.FileName = System.IO.Path.Combine(Application.StartupPath, "youtube-dl.exe");
                    if (m3u_params.Contains("-f ")) process_glob.StartInfo.Arguments = Clear_cache + " " + m3u_params + " " + down_speed + " " + embed_subs + " " + embed_meta + " " + write_subs + " " + convert_subs + " -o " + '\u0022' + destino + "\\" + dg1.Rows[list_index].Cells[4].Value.ToString() + "." + format_out + '\u0022' + " " + file;
                    else process_glob.StartInfo.Arguments = Clear_cache + " -f " + format_out + " " + m3u_params + " " + down_speed + " " + embed_subs + " " + embed_meta + " -o " + '\u0022' + destino + "\\" + dg1.Rows[list_index].Cells[4].Value.ToString() + "." + format_out + '\u0022' + " " + file;

                    process_glob.StartInfo.WorkingDirectory = Application.StartupPath;
                    this.InvokeEx(f => f.Pg1.Maximum = 100 * dg1.Rows.Count);
                    //MessageBox.Show(process_glob.StartInfo.FileName + " " + process_glob.StartInfo.Arguments);
                }
                else
                {
                    process_glob.StartInfo.FileName = ffm;
                    process_glob.StartInfo.Arguments = AppParam;
                }


                if (dg1.Rows[list_index].Cells[3].Value.ToString() == "Live")
                {
                    this.InvokeEx(f => f.dg1.Rows[list_index].Cells[5].Value = "Recording");
                        try
                        {
                            File.Delete(destino + "\\" + dg1.Rows[list_index].Cells[4].Value.ToString() + "." + format_out);
                        }
                        catch { }
                }
                else this.InvokeEx(f => f.dg1.Rows[list_index].Cells[5].Value = "Processing");                

                    if (!File.Exists(System.IO.Path.Combine(Application.StartupPath, "youtube-dl.exe")))
                    {
                        quit = true;
                        cancel_queue = true;
                        working = false;
                        m3u_running = false;
                        m3u_single_running = false;
                        timer2.Stop();
                        timer_tasks.Stop();
                        timer_est_size.Stop();
                        cancelados_paralelos = false;
                        aborted_url = false;
                        release_datagrid();

                        this.InvokeEx(f => f.lbl_dw_speed.Text = "");
                        Enable_Controls();
                        this.InvokeEx(f => TaskbarProgress.SetState(this.Handle, TaskbarProgress.TaskbarStates.NoProgress));
                        MessageBox.Show("Youtube-dl was not found", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        return;
                        
                    }

                    if (dg1.Rows[list_index].Cells[3].Value.ToString() == "Live")
                    {
                        process_glob.StartInfo.RedirectStandardOutput = false;
                        process_glob.StartInfo.RedirectStandardError = false;                        
                        this.InvokeEx(f => f.pic_recording.Visible = true);
                        this.InvokeEx(f => f.Pg1.Style = ProgressBarStyle.Marquee);
                        this.InvokeEx(f => f.Pg1.MarqueeAnimationSpeed = 50);

                    }
                    else
                    {
                        this.InvokeEx(f => f.Pg1.Style = ProgressBarStyle.Continuous);
                        process_glob.StartInfo.RedirectStandardOutput = true;
                        process_glob.StartInfo.RedirectStandardError = true;                    
                        process_glob.EnableRaisingEvents = true;
                        this.InvokeEx(f => f.pic_recording.Visible = false);
                    }

                    process_glob.StartInfo.CreateNoWindow = true;
                    process_glob.StartInfo.UseShellExecute = false;
                    process_glob.StartInfo.RedirectStandardInput = true;

                    if (quit == false) process_glob.Start();

                    System.Threading.Thread.Sleep(0);

                    combo_prio.Invoke(new MethodInvoker(delegate
                    {
                        if (combo_prio.SelectedIndex != 2)
                        {
                            Change_mem_prio();
                        }

                    }));

                    this.InvokeEx(f => validate_duration = dg1.Rows[list_index].Cells[3].Value.ToString());

                    DateTime time3;
                    if (DateTime.TryParse(list_proc.Rows[list_index].Cells[3].Value.ToString(), out time3))
                    {
                        if (TimeSpan.Parse(list_proc.Rows[list_index].Cells[3].Value.ToString()).TotalSeconds != 0)
                        {
                            valid_prog = true;
                        }
                    }
                    else
                    {
                        valid_prog = false;
                    }

                    String err_txt = "";
                    String tr_speed = "";
                    Double interval = 0;
                    Decimal est_bitrate = 0;
                    Decimal est_size = 0;
                    Double sec_prog = 0;
                    

                    if (!file.ToLower().Contains("youtu.be") && !file.ToLower().Contains("youtube.com"))
                    {
                        while (!process_glob.StandardError.EndOfStream)
                        {
                            err_txt = process_glob.StandardError.ReadLine();
                            list_lines.Add(err_txt);

                            if (err_txt.Contains("time=") && err_txt.Contains("time=-") == false)
                            {
                                if (valid_prog == true)
                                {
                                    this.InvokeEx(f => durat_n = row_duration);
                                    int start_time_index = err_txt.IndexOf("time=") + 5;
                                    sec_prog = TimeSpan.Parse(err_txt.Substring(start_time_index, 8)).TotalSeconds;
                                    Double percent = (sec_prog * 100 / durat_n);

                                    total_prog = total_prog + (sec_prog - interval);
                                    interval = sec_prog;
                                    int percent2 = Convert.ToInt32(percent);

                                    Double percent_tot = (total_prog * 100 / total_duration);
                                    int percent_tot_2 = Convert.ToInt32(percent_tot);

                                    if (percent_tot_2 <= 100)
                                    {
                                        this.InvokeEx(f => f.Pg1.Value = percent_tot_2);
                                        this.InvokeEx(f => f.Pg1.Refresh());
                                        if (Math.Round(percent_tot, 1).ToString().Contains(".") || Math.Round(percent_tot, 1).ToString().Contains(","))
                                        {
                                            this.InvokeEx(f => f.Pg1.Text = Math.Round(percent_tot, 1).ToString() + "%");
                                        }
                                        else
                                        {
                                            this.InvokeEx(f => f.Pg1.Text = Math.Round(percent_tot, 1).ToString() + System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator + "0" + "%");
                                        }
                                        this.InvokeEx(f => TaskbarProgress.SetValue(this.Handle, percent_tot, Pg1.Maximum));

                                    }
                                    if (percent2 <= 100)
                                    {
                                        //this.InvokeEx(f => pg_lv.Value = Convert.ToInt16(percent2));
                                        if (Math.Round(percent, 1).ToString().Contains(".") || Math.Round(percent, 1).ToString().Contains(","))
                                        {
                                            this.InvokeEx(f => f.dg1.Rows[list_index].Cells[5].Value = Math.Round(percent, 1).ToString() + "%");
                                            //  this.InvokeEx(f => pg_lv.Text = Math.Round(percent, 1).ToString() + "%");
                                            //  this.InvokeEx(f => pg_lv.Refresh());
                                        }
                                        //this.InvokeEx(f => pg_lv.Refresh());
                                    }

                                    //Estimated remaining time

                                    remain_time = err_txt.Substring(err_txt.LastIndexOf("speed=") + 6, err_txt.Length - err_txt.LastIndexOf("speed=") - 6);
                                    remain_time = remain_time.Replace("x", String.Empty);
                                    Double timing1 = 0;

                                    if (System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator == ",")
                                    {
                                        timing1 = Math.Round(Double.Parse(remain_time.Replace(".", ",")), 2);
                                    }
                                    else
                                    {
                                        timing1 = Math.Round(Double.Parse(remain_time), 2);
                                    }

                                    Decimal timing = (decimal)timing1;
                                    Decimal total_dur_dec = Convert.ToDecimal(total_duration);
                                    Decimal total_prog_dec = Convert.ToDecimal(total_prog);
                                    Decimal remain_secs = 0;
                                    if (timing > 0)
                                    {
                                        remain_secs = (decimal)(total_dur_dec - total_prog_dec) / timing;
                                    }

                                    if (remain_secs > 60)
                                    {
                                        remain_secs = remain_secs + 60;
                                    }

                                    String remain_from_secs = "";

                                    TimeSpan t = TimeSpan.FromSeconds(Convert.ToDouble(remain_secs));
                                    remain_from_secs = string.Format("{0:D2}h:{1:D2}",
                                       t.Hours,
                                      t.Minutes);

                                    if (remain_secs >= 43200)
                                    {
                                        this.InvokeEx(f => f.txt_remain.Text = "Time remaining: " + Math.Round(remain_secs / 3600).ToString() + " hours");
                                    }

                                    if (remain_secs >= 3600 && remain_secs < 43200)
                                    {
                                        this.InvokeEx(f => f.txt_remain.Text = "Time remaining: " + remain_from_secs + " min");
                                    }

                                    if (remain_secs < 3600 && remain_secs >= 600)
                                    {
                                        this.InvokeEx(f => f.txt_remain.Text = "Time remaining: " + remain_from_secs.Substring(remain_from_secs.LastIndexOf(":") + 1, 2) + " minutes");
                                    }
                                    if (remain_secs < 600 && remain_secs >= 120)
                                    {
                                        this.InvokeEx(f => f.txt_remain.Text = "Time remaining: " + remain_from_secs.Substring(remain_from_secs.LastIndexOf(":") + 2, 1) + " minutes");
                                    }

                                    if (remain_secs <= 59)
                                    {
                                        this.InvokeEx(f => f.txt_remain.Text = "Time remaining: " + Convert.ToInt16(remain_secs) + " seconds");
                                    }

                                    //End remaining time
                                }
                            }

                            //Estimated size and bitrate

                            String read_size = String.Empty;
                            if (err_txt.Contains("size=") && (time_est_size % 3 == 0))
                            {
                                int size_index = err_txt.IndexOf("size=") + 5;
                                read_size = err_txt.Substring(size_index, 8);
                                try
                                {
                                    est_bitrate = Math.Round(Convert.ToDecimal(read_size) * 8 / Convert.ToDecimal(sec_prog), 0);

                                    if (Convert.ToDecimal(read_size) > 1 && time_n_tasks > 1)
                                    {
                                        if (est_bitrate < 9999)
                                        {
                                            this.InvokeEx(f => f.lbl_bitrate.Text = "Avg. bitrate: " + est_bitrate + " Kb/s");
                                        }
                                        else
                                        {
                                            this.InvokeEx(f => f.lbl_bitrate.Text = "Avg. bitrate: " + (Math.Round(est_bitrate / 1000, 0)) + " Mb/s");
                                        }
                                        //Estimated size
                                        est_size = Convert.ToDecimal(durat_n) * est_bitrate / 8;

                                        if (est_size > 1000000)
                                        {
                                            this.InvokeEx(f => f.lbl_est_size.Text = "Estimated size: " + (Math.Round(est_size / 1000000, 1)).ToString() + " GB");
                                        }
                                        else
                                        {
                                            this.InvokeEx(f => f.lbl_est_size.Text = "Estimated size: " + (Math.Round(est_size / 1000, 0)).ToString() + " MB");
                                        }
                                    }
                                }
                                catch { }

                                this.InvokeEx(f => f.lbl_est_size.Refresh());
                            }

                            //Read output, get progress
                            this.InvokeEx(f => f.listBox4.Items.Add(err_txt));
                            this.InvokeEx(f => f.listBox4.TopIndex = listBox4.Items.Count - 1);
                        }
                    }
                    else
                    {                       
                        if (dg1.Rows[list_index].Cells[3].Value.ToString() != "Live")
                        {
                            
                        while (!process_glob.StandardOutput.EndOfStream)
                        {
                            err_txt = process_glob.StandardOutput.ReadLine();
                            list_lines.Add(err_txt);
                            if (err_txt.Contains("%"))
                            {
                                Double prog_y = Double.Parse(err_txt.Substring(err_txt.IndexOf("%") - 4, 4));
                                prog_y = prog_y / 10;
                                int progress = Convert.ToInt32(prog_y);

                                //if (progress > pg_lv.Maximum) progress = pg_lv.Maximum;
                                //this.InvokeEx(f => pg_lv.Value = progress);
                                //this.InvokeEx(f => pg_lv.Text = progress.ToString() + "%");
                                this.InvokeEx(f => dg1.Rows[list_index].Cells[5].Value = progress.ToString() + "%");
                                //this.InvokeEx(f => pg_lv.Refresh());
                            }

                            if (Convert.ToInt32(start_total_time) >= 2 && Convert.ToInt32(start_total_time % 2) == 0)
                            {
                                if (err_txt.ToLower().Contains("mib/s")) tr_speed = "Transfer rate: " + err_txt.Substring(err_txt.IndexOf("at ") + 3, 5) + " MB/s";
                                if (err_txt.ToLower().Contains("kib/s")) tr_speed = "Transfer rate: " + err_txt.Substring(err_txt.IndexOf("at ") + 3, 5) + " KB/s";
                                this.InvokeEx(f => f.lbl_dw_speed.Text = tr_speed);
                            }

                            //Read output, get progress
                            this.InvokeEx(f => f.listBox4.Items.Add(err_txt));
                            this.InvokeEx(f => f.listBox4.TopIndex = listBox4.Items.Count - 1);
                            }
                        }
                        else
                        {                            
                            this.InvokeEx(f => f.Pg1.Text = "Recording");
                            this.InvokeEx(f => f.Pg1.Refresh());
                        }
                    }

                    List<string> er = new List<string>();
                    String msg_er = String.Empty;

                    if (dg1.Rows[list_index].Cells[3].Value.ToString() != "Live")
                    {
                        while (!process_glob.StandardError.EndOfStream)
                        {
                            er.Add(process_glob.StandardError.ReadLine().Replace("youtube-dl.exe:", ""));
                        }
                    }

                    if (er.Count > 0)
                    {
                        foreach (String st in er)
                        {
                            if (st.ToLower().Contains("usage: youtube-dl") == false)
                            {
                                msg_er = msg_er + st;
                            }
                        }
                    }
                    if (list_index == 0 && msg_er != String.Empty)
                    {
                        this.InvokeEx(f => f.pic_recording.Visible = false);
                        if (msg_er.ToLower().Contains("warning")) MessageBox.Show(msg_er, "Warning message", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        else
                        {
                            MessageBox.Show(msg_er, "Error message", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            quit = true;
                            working = false;
                            m3u_running = false;
                            m3u_single_running = false;
                            timer2.Stop();
                            timer_tasks.Stop();
                            timer_est_size.Stop();
                            cancelados_paralelos = false;
                            aborted_url = false;
                            release_datagrid();
                            this.InvokeEx(f => f.lbl_dw_speed.Text = "");                            
                            this.InvokeEx(f => f.dg1.Rows[list_index].DefaultCellStyle.BackColor = Color.PaleGoldenrod);
                            this.InvokeEx(f => f.Pg1.Style = ProgressBarStyle.Continuous);
                            this.InvokeEx(f => f.pic_recording.Visible = false);
                            Enable_Controls();
                            this.InvokeEx(f => TaskbarProgress.SetState(this.Handle, TaskbarProgress.TaskbarStates.NoProgress));
                            return;
                        }
                    }
                    process_glob.WaitForExit();
                    process_glob.StartInfo.Arguments = String.Empty;

                    timer_est_size.Stop();
                    time_est_size = 0;

                    this.InvokeEx(f => f.lbl_est_size.Text = String.Empty);
                    this.InvokeEx(f => f.lbl_bitrate.Text = String.Empty);
                    
                    list_lines.Add("");
                    list_lines.Add("---------End of " + Path.GetFileName(file) + " log---------");
                    list_lines.Add("");

                    if (process_glob.ExitCode == 0)

                    {
                        if (skipped == false && aborted_url == false)
                        {
                            this.InvokeEx(f => f.dg1.Rows[list_index].Cells[5].Value = "Success");
                            //this.InvokeEx(f => f.dg1.Rows[list_index].Cells[5].Style.BackColor = Color.PaleGreen);
                        }
                        else
                        {
                            this.InvokeEx(f => f.dg1.Rows[list_index].Cells[5].Value = "Skipped");
                            this.InvokeEx(f => f.dg1.Rows[list_index].Cells[5].Style.BackColor = Color.Beige);
                            total_prog = total_prog + durat_n - sec_prog;
                            skipped = false;
                        }
                        if (aborted_url == true)
                        {
                            this.InvokeEx(f => f.dg1.Rows[list_index].Cells[5].Value = "Aborted");
                            //this.InvokeEx(f => f.dg1.Rows[list_index].Cells[5].Style.BackColor = Color.PaleGoldenrod);
                            aborted_url = false;
                        }
                        if (stopped_recording == true)
                        {
                            this.InvokeEx(f => f.dg1.Rows[list_index].Cells[5].Value = "Stopped");                            
                            this.InvokeEx(f => f.dg1.Rows[list_index].Cells[5].Style.BackColor = Color.White);
                        }
                    }
                    else
                    {
                        if (skipped == true)
                        {
                            this.InvokeEx(f => f.dg1.Rows[list_index].Cells[5].Value = "Skipped");
                            this.InvokeEx(f => f.dg1.Rows[list_index].Cells[5].Style.BackColor = Color.Beige);
                            total_prog = total_prog + durat_n - sec_prog;
                            skipped = false;
                        }
                        else
                        {
                            this.InvokeEx(f => f.dg1.Rows[list_index].Cells[5].Value = "Failed");
                            errors_enc = errors_enc + 1;
                            //this.InvokeEx(f => f.dg1.Rows[list_index].Cells[5].Style.BackColor = Color.PaleGoldenrod);
                        }
                    }

                    if (list_index + 1 == list_proc.RowCount - 1 || quit == true)
                    {
                        this.InvokeEx(f => f.Pg1.Style = ProgressBarStyle.Continuous);
                        this.InvokeEx(f => f.pic_recording.Visible = false);
                        this.InvokeEx(f => TaskbarProgress.SetState(this.Handle, TaskbarProgress.TaskbarStates.NoProgress));
                        this.InvokeEx(f => f.Pg1.Value = Pg1.Maximum);
                        this.InvokeEx(f => f.Pg1.Text = "100%");
                        timer2.Stop();
                        this.InvokeEx(f => f.lbl_dw_speed.Text = "");

                        m3u_single_running = false;
                        working = false;
                        m3u_running = false;
                        cancelados_paralelos = false;
                        release_datagrid();
                        //Save log
                        if (no_save_logs == false)
                        {
                            string[] array_err = list_lines.ToArray();

                            String path = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_batch.log";

                            System.IO.StreamWriter SaveFile = new System.IO.StreamWriter(path);
                            SaveFile.WriteLine("Batch log sesion: " + System.DateTime.Now);
                            SaveFile.WriteLine("-----------------------");
                            foreach (String item in array_err)
                            {
                                SaveFile.WriteLine(item);
                            }
                            if (er.Count > 0) SaveFile.WriteLine(msg_er);
                            SaveFile.Close();

                            File.AppendAllText(path, "-----------------------");
                            File.AppendAllText(path, Environment.NewLine + "END OF LOG FILE");
                            System.IO.FileInfo fileInfo = new System.IO.FileInfo(path);

                            var bytes = fileInfo.Length;

                            var kilobytes = (double)bytes / 1024;
                            var megabytes = kilobytes / 1024;
                            var gigabytes = megabytes / 1024;

                            //Format size view
                            String size = "";
                            String separator = ".";

                            if (bytes > 1000000000)
                            {
                                if (gigabytes.ToString().Contains("."))
                                {
                                    separator = ".";
                                }
                                else
                                {
                                    separator = ",";
                                }

                                String gigas = gigabytes.ToString();
                                if (gigas.Length >= 5)
                                {
                                    gigas = gigas.Substring(0, gigas.LastIndexOf(separator) + 3);
                                    size = (gigas + " GB");
                                }
                                else
                                {
                                    size = (gigas + " GB");
                                }
                            }

                            if (bytes >= 1048576 && bytes <= 1000000000)
                            {
                                if (megabytes.ToString().Contains("."))
                                {
                                    separator = ".";
                                }
                                else
                                {
                                    separator = ",";
                                }
                                String megas = megabytes.ToString();
                                if (megas.Length > 5)
                                {
                                    megas = megas.Substring(0, megas.LastIndexOf(separator));
                                    size = (megas + " MB");
                                }
                                else
                                {
                                    size = (megas + " MB");
                                }
                            }

                            if (bytes >= 1024 && bytes < 1048576)

                            {
                                if (kilobytes.ToString().Contains("."))
                                {
                                    separator = ".";
                                }
                                else
                                {
                                    separator = ",";
                                }

                                String kbs = kilobytes.ToString();
                                if (kbs.Length >= 5)
                                {
                                    kbs = kbs.Substring(0, kbs.LastIndexOf(separator));
                                    size = (kbs + " KB");
                                }
                                else
                                {
                                    size = (kbs + " KB");
                                }
                            }
                            if (bytes > -1 && bytes < 1024)
                            {
                                String bits = bytes.ToString();
                                size = (bits + " Bytes");
                            }

                            //End Format size view
                            File.AppendAllText(path, Environment.NewLine + "LOG SIZE: " + size);

                            //End save log
                        }
                        this.Invoke(new MethodInvoker(delegate
                        {
                        
                        if (errors_enc == 0) pic_no_errors.Visible = true;
                        else
                        {
                            pic_no_errors.Visible = false;
                                pic_recording.Visible = false;
                                toolT002.SetToolTip(this.pic_warnings, "There were " + errors_enc.ToString() + " error(s) during last session");
                            pic_warnings.Visible = true;
                        }
                        }));

                        //Automatic shutdown check
                        if (chkshut.Checked && cancel_queue == false)
                        {
                            auto_shut();
                            return;
                        }
                        //End shutdown check
                        else
                        {

                            if (cancel_queue == false)
                            {
                                if (Form.ActiveForm == null)
                                {
                                    notifyIcon1.BalloonTipText = "FFmpeg Batch URL capture successfully completed";
                                    notifyIcon1.BalloonTipIcon = ToolTipIcon.Info;
                                    notifyIcon1.BalloonTipTitle = "URL capture complete";
                                    notifyIcon1.ShowBalloonTip(0);
                                    if (play_on_end == true && er.Count == 0) play_end();
                                    if (er.Count > 0)
                                    {
                                        String warnings = "";
                                        foreach (String st in er) warnings = warnings + st;
                                        MessageBox.Show("There were warning messages during queue download: " + Environment.NewLine + Environment.NewLine + warnings + Environment.NewLine + Environment.NewLine + "Check main log for more details.", "Warning messages found", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                    }
                                }

                                if (checkBox3.Checked)
                                {
                                    if (Directory.GetFiles(destino).Length != 0)
                                    {
                                        Process open_processed = new Process();
                                        open_processed.StartInfo.FileName = "explorer.exe";
                                        open_processed.StartInfo.Arguments = '\u0022' + destino + '\u0022';
                                        open_processed.Start();
                                    }
                                    else
                                    {
                                        if (Directory.Exists(destino))
                                        {
                                            System.IO.Directory.Delete(destino);
                                        }
                                    }
                                }
                            }
                            else
                            {
                                this.InvokeEx(f => TaskbarProgress.SetState(this.Handle, TaskbarProgress.TaskbarStates.NoProgress));
                                m3u_single_running = false;
                                cancelados_paralelos = false;
                                this.InvokeEx(f => f.Pg1.Value = Pg1.Maximum);
                                this.InvokeEx(f => f.Pg1.Text = "100%");
                                this.InvokeEx(f => f.lbl_dw_speed.Text = "");
                                if (quit == false && stopped_recording == false) this.InvokeEx(f => MessageBox.Show("Queue processing aborted", "Aborted", MessageBoxButtons.OK, MessageBoxIcon.Error));
                                //if (stopped_recording == true) this.InvokeEx(f => MessageBox.Show("Queue processing aborted", "Stopped", MessageBoxButtons.OK, MessageBoxIcon.Error));

                            }
                        }
                    }
                }

                Enable_Controls();
                String borrar = destino_test + "\\" + System.IO.Path.GetFileNameWithoutExtension(file_prueba) + "." + txt_format.Text;

            }).Start();
        }

        public string UppercaseFirst(string text)
        {
            // Check for empty string.
            if (string.IsNullOrEmpty(text))
            {
                return string.Empty;
            }

            // Return char and concat substring.
            return char.ToUpper(text[0]) + text.Substring(1);
        }

        private void dg1_KeyUp(object sender, KeyEventArgs e)
        {
            if (m3u_running == true || m3u_single_running == true) return;
            if (e.KeyCode == Keys.Delete)
            {
                foreach (DataGridViewCell cell in dg1.SelectedCells)
                {
                    try
                    {
                        if (dg1.Rows[cell.RowIndex].Cells[0].Selected == true || dg1.Rows[cell.RowIndex].Cells[1].Selected == true)
                        {
                            foreach (DataGridViewCell cell2 in dg1.Rows[cell.RowIndex].Cells)
                            {
                                cell2.Selected = false;
                            }

                            dg1.Rows.RemoveAt(cell.RowIndex);
                        }
                    }
                    catch (Exception ex)
                    {
                        //MessageBox.Show("Item could not be removed. " + Environment.NewLine + Environment.NewLine + ex.Message);
                    }
                }
            }
        }

        private void btn_validate_url_Click_1(object sender, EventArgs e)
        {
            if (dg1.Rows.Count == 0) return;
            check_internet();
            if (internet_up == false) return;
            Boolean all_ready = true;                     
              
                foreach (DataGridViewRow row in dg1.Rows)
                {
                    if (row.Cells[5].Value.ToString() == "Ready" == false && row.Cells[5].Value.ToString() == "Success" == false)
                    {
                        row.Cells[0].Value = pic_noimg.Image;
                        row.Cells[5].Value = "";
                        row.Cells[5].Style.BackColor = row.DefaultCellStyle.BackColor;
                    }
                }
                dg1.Refresh();
         
            cell_zoom();

            dg1.Refresh();
            stop_validating_url = false;
            
            foreach (DataGridViewRow row in dg1.Rows)
            {
                row.ReadOnly = true;
            }

            foreach (Control ct in groupBox_m3u.Controls)
            {
                ct.Enabled = false;
            }

            btn_cancel_validate.Enabled = true;

            if (dg1.Rows[0].Cells[1].Value.ToString().ToLower().Contains("youtu.be") || dg1.Rows[0].Cells[1].Value.ToString().ToLower().Contains("youtube.com"))
            {
                BG_Validate_URLs_YT.RunWorkerAsync();
            }
            else
            {
                opening_youtubes = false;
                BG_Validate_URLs.RunWorkerAsync();
            }
        }

        private void combo_ext_m3u_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (dg1.Rows.Count == 0)
            {
                if (combo_ext_m3u.SelectedIndex == 0)
                {
                    txt_m3u_params.Text = "-bsf:a aac_adtstoasc -c copy";
                }

                if (combo_ext_m3u.SelectedIndex == 1)
                {
                    txt_m3u_params.Text = "-fflags +genpts";
                }
            }
            else
            {
                if (dg1.Rows[0].Cells[1].Value.ToString().ToLower().Contains("youtu.be") && !dg1.Rows[0].Cells[1].Value.ToString().ToLower().Contains("youtube.com"))
                {
                    if (combo_ext_m3u.SelectedIndex == 0)
                    {
                        txt_m3u_params.Text = "-bsf:a aac_adtstoasc -c copy";
                    }

                    if (combo_ext_m3u.SelectedIndex == 1)
                    {
                        txt_m3u_params.Text = "-fflags +genpts";
                    }
                }
            }
        }

        private void Pre_validate_urls()
        {
            foreach (DataGridViewRow row in dg1.Rows)
            {
                row.ReadOnly = true;                
            }

            foreach (Control ct in groupBox_m3u.Controls)
            {
                ct.Enabled = false;
            }
            btn_stop_m3u8.Enabled = true;
            BG_Validate_URLs.RunWorkerAsync();
        }

        private void btn_stop_m3u8_Click(object sender, EventArgs e)
        {
            if (dg1.SelectedCells.Count != 1) return;
            String type = "";
            
            if (working == true && m3u_single_running == true)
            {
                if (dg1.Rows[dg1.SelectedCells[0].RowIndex].Cells[1].Value.ToString().ToLower().Contains("youtu.be") || dg1.Rows[dg1.SelectedCells[0].RowIndex].Cells[1].Value.ToString().ToLower().Contains("youtube.com"))
                {
                    type = "youtube-dl";
                }
                else
                {
                    type = "ffmpeg";
                }
                    Process[] localByName = Process.GetProcessesByName(type);
                    foreach (Process p in localByName)
                    {
                        if (p.Id == process_glob.Id)
                        {
                            try { p.Kill(); }
                            catch { }
                        }
                    }               
                skipped = true;
            }
        }

        private void btn_cancel_validate_Click(object sender, EventArgs e)
        {
            stop_validating_url = true;
            if (checking_url_m3u == true)
            {
                try { process_glob.Kill(); } catch { }
                return;
            }
            System.Threading.Thread.Sleep(100);
            Process[] localByName0 = Process.GetProcessesByName("youtube-dl");
            foreach (Process p0 in localByName0)
            {
                p0.Kill();
            }
            System.Threading.Thread.Sleep(100);

            Process[] localByName22 = Process.GetProcessesByName("youtube-dl");
            foreach (Process p3 in localByName22)
            {
                p3.Kill();
            }

            System.Threading.Thread.Sleep(100);
            Process[] localByName = Process.GetProcessesByName("ffprobe");
            foreach (Process p in localByName)
            {
                try { p.Kill(); } catch { }
            }
            System.Threading.Thread.Sleep(100);

            Process[] localByName2 = Process.GetProcessesByName("ffprobe");
            foreach (Process p2 in localByName2)
            {
                try { p2.Kill(); } catch { }
            }            
        }

        private void chk_output_server_CheckedChanged(object sender, EventArgs e)
        {
            if (chk_output_server.CheckState == CheckState.Checked)
            {
                txt_output_server.Enabled = true;
                txt_path_m3u.Enabled = false;
                btn_browse_path_m3u.Enabled = false;
            }
            else
            {
                txt_output_server.Enabled = false;
                txt_path_m3u.Enabled = true;
                btn_browse_path_m3u.Enabled = true;
            }
        }

        private void ctm_m3u_Opening(object sender, CancelEventArgs e)
        {
            if (Clipboard.ContainsText() == false)
            {
                ct_paste_m3u.Enabled = false;
                ct_paste_youtube.Enabled = false;
            }

            else
            {
                if (Clipboard.GetText().ToLower().Contains("youtu.be") == true || Clipboard.GetText().ToLower().Contains("youtube.com") == true)
                {
                    ct_paste_youtube.Enabled = true;
                    ct_paste_m3u.Enabled = false;
                }
                else
                {
                    ct_paste_youtube.Enabled = false;
                    if (Clipboard.GetText().ToLower().Contains("http") == true) ct_paste_m3u.Enabled = true;
                    else
                    {
                        ct_paste_m3u.Enabled = false;
                    }
                }
            }
            
            if (dg1.RowCount == 0)
            {
                ct_del_m3u.Enabled = false;
                ct_validate_url.Enabled = false;
                ct_remove_url.Enabled = false;
            }
            else
            {
                ct_del_m3u.Enabled = true;
                ct_validate_url.Enabled = true;
            }
            if (dg1.SelectedCells.Count > 0)
            {
                ct_play_vlc.Enabled = true;
                ct_show_urls.Enabled = true;               
                ct_remove_url.Enabled = true;                
            }
            else
            {
                ct_show_urls.Enabled = false;
                ct_play_vlc.Enabled = false;
                ct_remove_url.Enabled = false;
            }

            if (m3u_running == true)
            {
                ct_paste_m3u.Enabled = false;
                ct_paste_youtube.Enabled = false;
                ct_del_m3u.Enabled = false;
                ct_validate_url.Enabled = false;
                ct_show_urls.Enabled = false;
                ct_play_vlc.Enabled = false;
                ctm_stop_url.Enabled = false;
                ct_remove_url.Enabled = false;
                
                if (dg1.SelectedCells.Count == 1 && dg1.Rows[dg1.SelectedCells[0].RowIndex].Cells[5].Value.ToString() != "Ready" && dg1.Rows[dg1.SelectedCells[0].RowIndex].Cells[5].Value.ToString() != "Success" && dg1.Rows[dg1.SelectedCells[0].RowIndex].Cells[5].Value.ToString() != "Failed")
                {
                    ctm_stop_url.Enabled = true;                    
                    ctm_stop_url.Text = "Stop capturing " + '\u0022' + dg1.Rows[dg1.SelectedCells[0].RowIndex].Cells[4].Value.ToString() + '\u0022';                    
                }
            }
        }

        private void ct_play_vlc_Click(object sender, EventArgs e)
        {
            if (dg1.SelectedCells.Count > 0)
            {
                try
                {
                    Process vlc_proc = new Process();
                    vlc_proc.StartInfo.FileName = "vlc.exe";
                    vlc_proc.StartInfo.Arguments = dg1.Rows[dg1.SelectedCells[0].RowIndex].Cells[1].Value.ToString();
                    vlc_proc.Start();
                }
                catch (System.Exception exctp)
                {
                    MessageBox.Show("Error trying to play URL with VLC: " + exctp.Message, "Error with vlc", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                }
            }
        }

        private void dg1_DragEnter(object sender, DragEventArgs e)
        {
            if (e.Data.GetDataPresent(DataFormats.FileDrop, false))
                e.Effect = DragDropEffects.All;
            else
                e.Effect = DragDropEffects.None;
        }

        private void dg1_DragDrop(object sender, DragEventArgs e)
        {
            string[] file_drop = (string[])e.Data.GetData(DataFormats.FileDrop);
            if (file_drop.Count() > 1)
            {
                MessageBox.Show("Please drop only one file.", "Multiple files dropped", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return;
            }

            long length = new System.IO.FileInfo(file_drop[0]).Length;

            if (length > 1048576)
            {
                MessageBox.Show("Dropped file is too big. Only text files under 1 MB are supported.", "File too big", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            dg1.Rows.Clear();
            stop_validating_url = false;

            String[] lines = File.ReadAllLines(file_drop[0]);

            for (int i = 0; i < lines.Count(); i++)
            {
                String out_file = String.Empty;

                if (lines[i].ToString().Length > 4 && lines[i].Substring(0, 4).ToLower() == "http")
                {
                    if (i > 0)

                    {
                        if (lines[i - 1].ToString().Substring(0, 7) == "#EXTINF")
                        {
                            out_file = lines[i - 1].Substring(lines[i - 1].LastIndexOf(",") + 1, lines[i - 1].Length - lines[i - 1].LastIndexOf(",") - 1);

                            dg1.Rows.Add(lines[i], "", "", out_file, "");
                        }
                        else
                        {
                            out_file = Path.GetFileNameWithoutExtension(lines[i]);
                            dg1.Rows.Add(lines[i], "", "", out_file, "");
                        }
                    }
                }
            }
            
            foreach (DataGridViewRow row in dg1.Rows)
            {
                row.ReadOnly = true;                
            }
            foreach (Control ct in groupBox_m3u.Controls)
            {
                ct.Enabled = false;
            }
            btn_cancel_validate.Enabled = true;

            BG_Validate_URLs.RunWorkerAsync();
        }

        private void txt_search_url_TextChanged(object sender, EventArgs e)
        {
            foreach (DataGridViewRow row in dg1.Rows)
            {
                if (row.Cells[1].Value.ToString().ToLower().Contains(txt_search_url.Text.ToLower()) || row.Cells[4].Value.ToString().ToLower().Contains(txt_search_url.Text.ToLower()))
                {
                    dg1.ClearSelection();
                    dg1.Rows[row.Index].Cells[1].Selected = true;
                    dg1.CurrentCell = dg1.Rows[row.Index].Cells[1];
                    break;
                }
                else
                {
                    dg1.ClearSelection();
                    dg1.Rows[0].Cells[1].Selected = true;
                    dg1.CurrentCell = dg1.Rows[0].Cells[1];
                }
            }
        }

        private void btn_clean_errors_Click(object sender, EventArgs e)
        {
            btn_clean_list.PerformClick();
        }

        private void timer_urls_Tick(object sender, EventArgs e)
        {
            MessageBox.Show("Ticked");
            if (probe_urls.StartInfo.Arguments != String.Empty)
            {
                probe_urls.Kill();
            }
        }

        private void btn_url_info_Click(object sender, EventArgs e)
        {
            checking_url_m3u = false;
            if (dg1.SelectedCells.Count == 0) return;
            if (dg1.Rows[dg1.SelectedCells[0].RowIndex].Cells[1].Value.ToString().ToLower().Contains("youtu.be") || dg1.Rows[dg1.SelectedCells[0].RowIndex].Cells[1].Value.ToString().ToLower().Contains("youtube.com"))
            {
                Form8 frm8_streams = new Form8();
                //frm8_streams.thumb_url_streams = dg1_thumbs[dg1.SelectedCells[0].RowIndex];
                if (dg1.SelectedCells.Count != 1) return;
                else
                {
                    frm8_streams.url_dg_item = dg1.Rows[dg1.SelectedCells[0].RowIndex].Cells[1].Value.ToString();
                    frm8_streams.pic_yout.Image = dg_thumbs[dg1.SelectedCells[0].RowIndex];
                    frm8_streams.ShowDialog();
                    if (frm8_streams.format_ID != "")
                    {
                        chk_m3u_params.Checked = true;
                        if (txt_m3u_params.Text == "-bsf:a aac_adtstoasc -c copy" || txt_m3u_params.Text == "-fflags +genpts" || txt_m3u_params.Text.Contains("-f ")) txt_m3u_params.Text = "";
                        txt_m3u_params.Text = "-f " + frm8_streams.format_ID + " " + txt_m3u_params.Text;
                    }
                }
                return;
            }                        
            
            form5.lv1_item = dg1.Rows[dg1.SelectedCells[0].RowIndex].Cells[1].Value.ToString();            
            form5.ShowDialog();            
        }

        private void ct_show_urls_Click(object sender, EventArgs e)
        {
            btn_url_info.PerformClick();
        }

        private void btn_n_urls_Click(object sender, EventArgs e)
        {
            cancelados_paralelos = false;
            notifyIcon1.Visible = true;
            if (m3u_running == true || m3u_single_running == true) return;
            Pg1.Text = "0" + System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator + "0%";
            foreach (DataGridViewRow row in dg1.Rows)
            {
                if (row.Cells[5].Value.ToString() == "Error" || row.Cells[5].Value.ToString() == "Unknown")
                {
                    MessageBox.Show("There are errors on the list. Please validate urls.", "Errors found", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
            }

            if (dg1.RowCount == 0)
            {
                MessageBox.Show("Download list is empty", "No files to be processed", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            if (txt_m3u_params.Text == String.Empty && chk_m3u_params.Text.ToLower().Contains("youtube"))
            {
                MessageBox.Show("Capture parameters field for m3u can not be empty", "Parameters error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            if (txt_path_m3u.Text == "No path selected" && chk_output_server.CheckState == CheckState.Unchecked)
            {
                MessageBox.Show("Please select an output folder", "Ouput folder not configured", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }
            output_server_m = "";
            if (chk_output_server.CheckState == CheckState.Checked && txt_output_server.Text == String.Empty)
            {
                MessageBox.Show("Output to streaming is enabled but field is empty", "Output url is blank", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return;
            }
            else
            {
                output_server_m = txt_output_server.Text;
            }
            
            get_mixed_urls(); //Mixed youtubes  
            if (mixed_urls == true) return;                     

            // Live youtubes
            Boolean has_lives = false;
            foreach (DataGridViewRow row in dg1.Rows)
            {
                if (row.Cells[1].Value.ToString().ToLower().Contains("youtu.be") || row.Cells[1].Value.ToString().ToLower().Contains("youtube.com"))
                {
                    if (row.Cells[3].Value.ToString() == "Live") has_lives = true;
                    break;
                }
            }

            if (has_lives == true)
            {
                MessageBox.Show("Live streaming YouTube links are only supported in Sequential download.", "Live YouTube links not supported", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            //End live youtubes

            foreach (DataGridViewRow row in dg1.Rows)
            {
                if (row.Cells[5].Value.ToString() == "Ready" && row.Cells[2].Value.ToString() != "N/A")
                {
                    if (TimeSpan.Parse(row.Cells[3].Value.ToString()).TotalSeconds > TimeSpan.Parse(row.Cells[2].Value.ToString()).TotalSeconds)
                    {
                        MessageBox.Show("Capture time for item " + row.Cells[4].Value.ToString() + " exceeds source duration", "Incorrect capture duration", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        return;
                    }
                }
            }
            foreach (DataGridViewRow row in dg1.Rows)
            {
                if (row.Cells[4].Value.ToString().Contains("/") || row.Cells[4].Value.ToString().Contains(":") || row.Cells[4].Value.ToString().Contains("*") || row.Cells[4].Value.ToString().Contains("?") || row.Cells[4].Value.ToString().Contains("¿") || row.Cells[4].Value.ToString().Contains('\u0022') || row.Cells[4].Value.ToString().Contains("<") || row.Cells[4].Value.ToString().Contains(">") || row.Cells[4].Value.ToString().Contains("|") || row.Cells[4].Value.ToString().Contains("\\"))
                {
                    row.Cells[4].Value = row.Cells[4].Value.ToString().Replace("/", "");
                    row.Cells[4].Value = row.Cells[4].Value.ToString().Replace(":", "");
                    row.Cells[4].Value = row.Cells[4].Value.ToString().Replace("*", "");
                    row.Cells[4].Value = row.Cells[4].Value.ToString().Replace("?", "");
                    row.Cells[4].Value = row.Cells[4].Value.ToString().Replace("¿", "");
                    row.Cells[4].Value = row.Cells[4].Value.ToString().Replace("\u0022", "");
                    row.Cells[4].Value = row.Cells[4].Value.ToString().Replace("<", "");
                    row.Cells[4].Value = row.Cells[4].Value.ToString().Replace(">", "");
                    row.Cells[4].Value = row.Cells[4].Value.ToString().Replace("|", "");
                    row.Cells[4].Value = row.Cells[4].Value.ToString().Replace("\\", "");
                }
            }

            //Pending validation
            Boolean pre_validate = false;

            foreach (DataGridViewRow row in dg1.Rows)
            {
                if (row.Cells[5].Value.ToString() == String.Empty)
                {
                    pre_validate = true;
                }
            }
            if (pre_validate == true)
            {
                var a = MessageBox.Show("You need to validate URLs before processing. Click OK to validate, or cancel to abort", "Validation pending", MessageBoxButtons.OKCancel, MessageBoxIcon.Question);
                if (a == DialogResult.OK)
                {
                    was_started.Text = btn_start_m3u.Text;
                    btn_validate_url.PerformClick();
                    return;
                }
                else
                {
                    return;
                }
            }
            
            if (url_repeat() == true) return;

            multi_dest = "";
            multi_dest = dg1.Rows[0].Cells[1].Value.ToString();
            String file_output = dg1.Rows[0].Cells[5].Value.ToString() + "." + combo_ext_m3u.SelectedItem.ToString();
            String fichero = Path.GetFileName(multi_dest);

            String destino_test = Path.Combine(txt_path_m3u.Text, "FFBatch_test");

            if (!multi_dest.ToLower().Contains("youtu.be") && !multi_dest.ToLower().Contains("youtube.com"))
            {
                this.Cursor = Cursors.WaitCursor;

                if (!Directory.Exists(destino_test))
                {
                    try
                    {
                        Directory.CreateDirectory(destino_test);
                    }
                    catch (System.Exception excpt)
                    {
                        MessageBox.Show("Error writing test file: " + excpt.Message, "Error writing to folder", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        this.Cursor = Cursors.Arrow;
                        return;
                    }
                }

                if (chk_try.CheckState == CheckState.Unchecked)
            { 
                //Try preset
                        
                    Form11 frm_prog = new Form11();

                    new System.Threading.Thread(() =>
                    {
                        System.Threading.Thread.CurrentThread.IsBackground = true;
                        frm_prog.label1.Text = "Trying selected preset...";
                        frm_prog.label1.Refresh();
                        frm_prog.ShowDialog();
                        frm_prog.Refresh();

                    }).Start();


                Process consola_pre = new Process();

                consola_pre.StartInfo.FileName = "ffmpeg.exe";
                consola_pre.StartInfo.Arguments = " -i " + multi_dest + " -t 0.5 " + txt_m3u_params.Text + " -y " + '\u0022' + destino_test + "\\" + file_output + '\u0022';
                consola_pre.StartInfo.CreateNoWindow = true;
                consola_pre.StartInfo.RedirectStandardError = true;
                consola_pre.StartInfo.RedirectStandardOutput = true;
                consola_pre.StartInfo.UseShellExecute = false;

                consola_pre.Start();
                frm_prog.procId = consola_pre.Id;
                String err_txt_1 = "";

                while (!consola_pre.StandardError.EndOfStream)
                {
                    err_txt_1 = consola_pre.StandardError.ReadLine();
                    this.InvokeEx(f => f.listBox4.Items.Add(err_txt_1));
                    this.InvokeEx(f => f.listBox4.Refresh());
                }

                consola_pre.WaitForExit(7000);

                consola_pre.StartInfo.Arguments = String.Empty;

                if (consola_pre.StartInfo.Arguments != String.Empty)
                {
                    consola_pre.Kill();
                        try
                        {
                            frm_prog.Invoke(new MethodInvoker(delegate
                            {
                                frm_prog.Dispose();
                            }));
                        }
                        catch { }

                        MessageBox.Show("URL response time out.", "Url timeout", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
                if (consola_pre.ExitCode != 0)
                {
                    this.Cursor = Cursors.Arrow;
                        try
                        {
                            frm_prog.Invoke(new MethodInvoker(delegate
                            {
                                frm_prog.Dispose();
                            }));
                        }
                        catch { }

                        listBox4.TopIndex = listBox4.Items.Count - 1;
                        listBox4.Refresh();
                    
                    this.Cursor = Cursors.Arrow;
                    if (File.Exists(Path.Combine(destino_test, file_output)))
                    {
                        File.Delete(Path.Combine(destino_test, file_output));
                    }

                    if (Directory.GetFiles(destino_test).Length == 0)
                    {
                        System.IO.Directory.Delete(destino_test);
                    }
                        if (frm_prog.abort_validate == false)
                        {
                            MessageBox.Show("Encoding test failed on selected item. Check FFmpeg output for more information. You may need to set different capture parameters.", "Encoding test failed", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            return;
                        }
                    }
                    else
                    {
                        frm_prog.Invoke(new MethodInvoker(delegate
                        {
                            frm_prog.pic.Visible = false;
                            frm_prog.pic_ok.Visible = true;
                            frm_prog.pic_ok.Refresh();
                        }));
                        Thread.Sleep(175);
                        try
                        {
                            frm_prog.Invoke(new MethodInvoker(delegate
                            {
                                frm_prog.Dispose();
                            }));
                        }
                        catch { }

                        this.Cursor = Cursors.Arrow;
                    if (File.Exists(Path.Combine(destino_test, file_output)))
                    {
                        File.Delete(Path.Combine(destino_test, file_output));
                    }

                    if (Directory.GetFiles(destino_test).Length == 0)
                    {
                        System.IO.Directory.Delete(destino_test);
                    }
                }
            }
                //END try preset
         }
            else
            {
                if (!File.Exists(System.IO.Path.Combine(Application.StartupPath, "youtube-dl.exe")))
                {
                    this.Cursor = Cursors.Arrow;
                    release_datagrid();
                    MessageBox.Show("Youtube-dl was not found", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
            }
            this.Cursor = Cursors.Arrow;


            //Start pre-processing
            cancel_queue = false;
            Pg1.Value = 0;
            //pg_current.Value = 0;
            Disable_Controls();
            //textBox4.Text = "0%";

            working = true;
            m3u_single_running = false;            
            txt_remain.Text = "";

            //Disable Datagrid edition

            foreach (DataGridViewRow row in dg1.Rows)
            {
                row.ReadOnly = true;
                row.DefaultCellStyle.BackColor = Color.White;
                row.Cells[5].Value = "Ready";
                row.Cells[5].Style.BackColor = Color.White;
            }            

            DataGridView list_proc = new DataGridView();
            foreach (DataGridViewColumn col in dg1.Columns)
            {
                list_proc.Columns.Add((DataGridViewColumn)col.Clone());
            }

            foreach (DataGridViewRow row in dg1.Rows)
            {
                list_proc.Rows.Add(row.Cells[1].Value.ToString(), row.Cells[2].Value.ToString(), row.Cells[3].Value.ToString(), row.Cells[4].Value.ToString(), row.Cells[5].Value.ToString());
            }

            Pg1.Minimum = 0;
            Pg1.Maximum = 100;
            Pg1.Text = "0" + System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator + "0%";
            //String remain_time = "0";

            //Total duration

            total_multi_duration = 0;
            foreach (DataGridViewRow row in dg1.Rows)
            {
                DateTime time2;
                if (DateTime.TryParse(row.Cells[3].Value.ToString(), out time2))

                {
                    total_multi_duration = total_multi_duration + TimeSpan.Parse((row.Cells[3].Value.ToString())).TotalSeconds;
                }

            }
            //End total duration
            
            procs.Clear();
            multi_logs.Clear();
            for (int ii = 0; ii < dg1.RowCount; ii++)
            {
                procs.Add("proc_urls_" + ii.ToString(), new Process());
                multi_logs.Add("log_n_" + ii.ToString(), "");
            }

            show_total_prog_m = false;
            foreach (DataGridViewRow row in dg1.Rows)
            {
                TimeSpan time = new TimeSpan();
                if (TimeSpan.TryParse(row.Cells[3].Value.ToString(), out time))
                {
                    show_total_prog_m = true;
                }
                else
                {
                    show_total_prog_m = false;
                    break;
                }
            }
            if (show_total_prog_m == true)
            {
                Pg1.Value = 0;
                Pg1.Maximum = dg1.RowCount * 100;
            }

            m3u_params_m = txt_m3u_params.Text;
            if (chk_m3u_params.CheckState == CheckState.Unchecked) m3u_params_m = "";
            m3u_output_ext_m = combo_ext_m3u.SelectedItem.ToString();
                        
            format_out_m = m3u_output_ext_m;
            down_speed_m = ""; embed_subs_m = ""; embed_meta_m = ""; write_subs_m = "";  convert_subs_m = "";

            if (chk_down_limit.Checked == true) down_speed_m = "-r " + Convert.ToInt32(n_down_speed.Value).ToString() + "M";
            if (chk_yout_subs.Checked == true) embed_subs_m = "--embed-subs --all-subs";
            if (chk_embed_meta.Checked == true) embed_meta_m = "--add-metadata";
            if (chk_save_subtitles.Checked == true) embed_meta_m = "--write-sub";
            if (chk_convert_srt.Checked == true) embed_meta_m = "--convert-subs=srt";

            time_n_tasks = 0;
            timer_tasks.Start();
            timer2.Start();

            m3u_running = true;
            aborted_url = false;
            pic_no_errors.Visible = false;
            pic_warnings.Visible = false;
            pic_recording.Visible = false;
            errors_enc = 0;
            try
            {
                BG_Multi_Down.RunWorkerAsync();
            }
            catch
            {
                MessageBox.Show("Queue is in progress, please abort to restart queue.");
            }
        }

        private void ctm_stop_url_Click(object sender, EventArgs e)
        {
            if (dg1.SelectedCells.Count == 1 && dg1.Rows[dg1.SelectedCells[0].RowIndex].Cells[5].Value.ToString() != "Success" && dg1.Rows[dg1.SelectedCells[0].RowIndex].Cells[5].Value.ToString() != "Ready")
            {
                if (m3u_single_running == false)
                {
                    if (dg1.Rows[dg1.SelectedCells[0].RowIndex].Cells[1].Value.ToString().ToLower().Contains("youtu.be") || dg1.Rows[dg1.SelectedCells[0].RowIndex].Cells[1].Value.ToString().ToLower().Contains("youtube.com"))
                    {                       
                            Process[] localByName = Process.GetProcessesByName("youtube-dl");
                            foreach (Process p in localByName)
                            {
                                if (p.Id == procs["proc_urls_" + dg1.Rows[dg1.SelectedCells[0].RowIndex].Index.ToString()].Id)
                                {
                                    try { p.Kill(); }
                                    catch { }
                                }
                            }                       
                    }
                    else
                    {
                        StreamWriter write_q = procs["proc_urls_" + dg1.Rows[dg1.SelectedCells[0].RowIndex].Index.ToString()].StandardInput;
                        write_q.Write("q");
                        aborted_url = true;
                    }
                }
                else
                {
                    if (dg1.Rows[dg1.SelectedCells[0].RowIndex].Cells[1].Value.ToString().ToLower().Contains("youtu.be") || dg1.Rows[dg1.SelectedCells[0].RowIndex].Cells[1].Value.ToString().ToLower().Contains("youtube.com"))
                    {
                        if (dg1.Rows[dg1.SelectedCells[0].RowIndex].Cells[5].Value.ToString() == "Recording")
                        {
                            //Live YouTube abort                           
                            timer2.Stop();
                            aborted_url = false;
                            stopped_recording = true;
                            Pg1.MarqueeAnimationSpeed = 15;
                            Pg1.Text = "Stopping stream recording, please wait...";
                            Pg1.Refresh();
                            Send_CTRLC(process_glob);
                        }
                        else
                        {
                            Process[] localByName = Process.GetProcessesByName("youtube-dl");
                            foreach (Process p in localByName)
                            {
                                if (p.Id == process_glob.Id)
                                {
                                    try { p.Kill(); }
                                    catch { }
                                    break;
                                }
                            }
                        }
                    }
                    else
                    {
                        StreamWriter write_q = process_glob.StandardInput;
                        write_q.Write("q");
                        aborted_url = true;
                    }
                }
            }
        }

        private void check_decoders()
        {
            if (cb_hwdecode.SelectedItem.ToString() != "none")

            {
                hw_decode_glob = cb_hwdecode.SelectedItem.ToString();
            }
        }

        private void BG_Try_preset_DoWork(object sender, DoWorkEventArgs e)
        {
            if (chk_try.CheckState == CheckState.Checked)
            {
                tried_ok = true;
                return;
            }
            else tried_ok = false;

            this.InvokeEx(f => this.Enabled = false);
            Form11 frm_prog = new Form11();

            new System.Threading.Thread(() =>
            {
                System.Threading.Thread.CurrentThread.IsBackground = true;
                frm_prog.label1.Text = "Trying selected preset...";
                frm_prog.label1.Refresh();
                frm_prog.ShowDialog();
                frm_prog.Refresh();

            }).Start();

            this.InvokeEx(f => this.Cursor = Cursors.WaitCursor);
            ListBox LB1_o = new ListBox();
            Process consola_pre = new Process();
            String file_prueba = "";
            String sel_test = "";            
            this.InvokeEx(f => sel_test = listView1.Items[0].SubItems[1].Text + "\\" + listView1.Items[0].Text);
            file_prueba = sel_test;
            String destino_test = Path.GetTempPath() + "\\" + "FFBatch_test";            
            Boolean bad_chars = false;
            Boolean unsupported = false;
            String second_path = "";

            if (txt_format.Text == "nul")
            {
                String[] split = txt_parameters.Text.Split(' ');
                for (int i = 0; i < split.Length; i++)
                {
                    if (split[i].Contains("\\") == true)
                    {
                        String pre_path = split[i].Replace("%fp", Path.GetDirectoryName(sel_test)).Replace("%fn", Path.GetFileNameWithoutExtension(sel_test)).Replace("%", "_");
                        second_path = Path.GetDirectoryName(pre_path.Replace('\u0022', ' '));                        

                        if (!Directory.Exists(second_path))
                        {
                            try
                            {
                                Directory.CreateDirectory(second_path);
                            }
                            catch
                            {

                            }
                        }
                    }
                }
            }

            Task tt = Task.Run(() =>
            {
                String fichero = Path.GetFileName(file_prueba);

                if (!Directory.Exists(destino_test))
                {
                    try
                    {
                        Directory.CreateDirectory(destino_test);
                    }
                    catch (System.Exception excpt)
                    {
                        MessageBox.Show("Error: " + excpt.Message, "Error writing to folder", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        this.InvokeEx(f => this.Cursor = Cursors.Arrow);
                        return;
                    }
                }
                
                String ext_output = txt_format.Text;
                if (txt_format.Text == String.Empty)
                {
                    ext_output = Path.GetExtension(file_prueba);
                }
                else
                {
                    ext_output = "." + txt_format.Text;
                }
                if (txt_format.Text == "nul") ext_output = "nul";

                textbox_params = txt_parameters.Text;
                String file_prueba2 = file_prueba;

                while (textbox_params.Contains("%fn"))
                {
                    if (textbox_params.Contains("%fn"))
                    {
                        textbox_params = textbox_params.Replace("%fn", Path.GetFileNameWithoutExtension(file_prueba));
                    }
                }
                
                while (textbox_params.Contains("%fp"))
                {
                    if (textbox_params.Contains("%fp"))
                    {
                        textbox_params = textbox_params.Replace("%fp", Path.GetDirectoryName(file_prueba));
                    }
                }
                
                while (textbox_params.Contains("%fd"))
                {
                    if (textbox_params.Contains("%fd"))
                    {
                        var path = Path.GetFullPath(file_prueba);
                        var dirName = Path.GetFileName(Path.GetDirectoryName(path));
                        textbox_params = textbox_params.Replace("%fd", dirName);
                    }
                }

                while (textbox_params.Contains("%1"))
                {
                    if (textbox_params.Contains("%1"))
                    {
                        if (file_prueba2.Contains("[") || file_prueba2.Contains("]"))
                        {
                            MessageBox.Show("Input file name contains characters [ ]. Please remove them from input file name to avoid errors with -vf filter", "Conflicting characters in file name", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            Enable_Controls();
                            this.InvokeEx(f => this.Cursor = Cursors.Arrow);
                            tried_ok = false;
                            bad_chars = true;
                            return;
                        }
                        file_prueba2 = file_prueba2.Replace("\\", "\\\\\\\\");
                        file_prueba2 = file_prueba2.Replace(":", "\\\\" + ":");
                        textbox_params = textbox_params.Replace("%1", file_prueba2);
                    }
                }

                while (textbox_params.Contains("%2"))
                {
                    if (textbox_params.Contains("%2"))
                    {
                        file_prueba2 = file_prueba2.Replace("\\", "\\\\\\\\");
                        file_prueba2 = file_prueba2.Replace(":", "\\\\" + ":");
                        textbox_params = textbox_params.Replace("%2", Path.Combine(System.IO.Path.GetDirectoryName(file_prueba2), Path.GetFileNameWithoutExtension(file_prueba2)));                    }
                }

                consola_pre.StartInfo.FileName = "ffmpeg.exe";
                consola_pre.StartInfo.Arguments = hw_decode_glob + " -i " + "" + '\u0022' + file_prueba + '\u0022' + "" + " -y " + textbox_params + " -t 0.2 " + '\u0022' + destino_test + "\\" + System.IO.Path.GetFileNameWithoutExtension(file_prueba) + ext_output + '\u0022' + " -loglevel warning -stats";
                if (ext_output == "nul") consola_pre.StartInfo.Arguments = hw_decode_glob + " -loglevel warning -stats" + " -i " + "" + '\u0022' + file_prueba + '\u0022' + " " +  textbox_params;
                
                consola_pre.StartInfo.RedirectStandardOutput = true;
                consola_pre.StartInfo.RedirectStandardError = true;
                consola_pre.StartInfo.UseShellExecute = false;
                consola_pre.StartInfo.CreateNoWindow = true;
                consola_pre.EnableRaisingEvents = true;
                consola_pre.Start();
                frm_prog.procId = consola_pre.Id;
                
                while (!consola_pre.StandardError.EndOfStream)
                {
                    this.InvokeEx(f => LB1_o.Items.Add(consola_pre.StandardError.ReadLine()));
                    this.InvokeEx(f => LB1_o.TopIndex = LB1_o.Items.Count - 1);
                    this.InvokeEx(f => LB1_o.Refresh());
                }
                
                consola_pre.WaitForExit();
                consola_pre.StartInfo.Arguments = String.Empty;
                this.InvokeEx(f => this.Enabled = true);               

            });

            if (!tt.Wait(1000) && consola_pre.StartInfo.Arguments != String.Empty)
            {
                this.InvokeEx(f => this.Enabled = true);
                frm_prog.Invoke(new MethodInvoker(delegate
                {
                    frm_prog.pic.Visible = false;
                    frm_prog.pic_ok.Visible = true;
                    frm_prog.pic_ok.Refresh();
                }));
                Thread.Sleep(175);
                try
                {
                    frm_prog.Invoke(new MethodInvoker(delegate
                    {
                        frm_prog.Dispose();
                    }));
                }
                catch { }
                try { consola_pre.Kill(); } catch { }
                tried_ok = true;
                this.InvokeEx(f => f.btn_try_pr.Image = img_try.Images[1]);
                this.InvokeEx(f => this.Cursor = Cursors.Arrow);

                if (Directory.Exists(destino_test) && Directory.GetFiles(destino_test).Length > 0)
                {
                    foreach (String file in Directory.GetFiles(destino_test))
                    {
                        try
                        {
                            File.Delete(file);
                        }
                        catch
                        {
                        }
                    }
                }

                if (Directory.GetFiles(destino_test).Length == 0)
                {
                    System.IO.Directory.Delete(destino_test);
                }
                LB1_o.Items.Clear();
                tried_params.Add(txt_parameters.Text);
                return;
            }

            if (bad_chars == false)
            {
                if (consola_pre.ExitCode != 0)
                {
                    if (frm_prog.abort_validate == false)
                    {
                        if (Directory.Exists(destino_test) && Directory.GetFiles(destino_test).Length > 0)
                        {
                            foreach (String file in Directory.GetFiles(destino_test))
                            {
                                try
                                {
                                    File.Delete(file);
                                }
                                catch
                                {
                                }
                            }
                        }

                        if (Directory.GetFiles(destino_test).Length == 0)
                        {
                            System.IO.Directory.Delete(destino_test);
                        }

                        this.InvokeEx(f => this.Cursor = Cursors.Arrow);
                        foreach (String lin in LB1_o.Items)
                        {
                            if (lin.Contains("not load the requested plugin") || lin.Contains("Cannot load nvcuda.dll"))
                            {
                                unsupported = true;
                            }
                        }
                        tried_ok = false;
                        try
                        {
                            frm_prog.Invoke(new MethodInvoker(delegate
                            {
                                frm_prog.Dispose();
                            }));
                        }
                        catch { }
                        this.InvokeEx(f => f.btn_try_pr.Image = img_try.Images[2]);
                        int n_lines = LB1_o.Items.Count;
                        if (unsupported == true)
                        {
                            this.InvokeEx(f => this.Cursor = Cursors.Arrow);
                            this.InvokeEx(f => this.Enabled = true);
                            this.InvokeEx(f => this.TopLevel = true);
                            
                              MessageBox.Show("Encoding test failed on selected file: " + Environment.NewLine + Environment.NewLine + "Possibly unsupported encoder" + Environment.NewLine + LB1_o.Items[LB1_o.Items.Count - 1].ToString() + Environment.NewLine + Environment.NewLine + "Try preset for more error information", "Encoding test failed", MessageBoxButtons.OK, MessageBoxIcon.Error);                                                        
                        }
                        else
                        {
                            this.InvokeEx(f => this.Cursor = Cursors.Arrow);
                            this.InvokeEx(f => this.Enabled = true);
                            this.InvokeEx(f => this.TopLevel = true);

                            if (n_lines >= 4)
                            {
                                MessageBox.Show("Encoding test failed on selected file: " + Environment.NewLine + Environment.NewLine + LB1_o.Items[LB1_o.Items.Count - 4].ToString() + Environment.NewLine + LB1_o.Items[LB1_o.Items.Count - 3].ToString() + Environment.NewLine + LB1_o.Items[LB1_o.Items.Count - 2].ToString() + Environment.NewLine + LB1_o.Items[LB1_o.Items.Count - 1].ToString() + Environment.NewLine + Environment.NewLine + "Try preset for more error information", "Encoding test failed", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            }
                            if (n_lines == 3)
                            {
                                MessageBox.Show("Encoding test failed on selected file: " + Environment.NewLine + Environment.NewLine + LB1_o.Items[LB1_o.Items.Count - 3].ToString() + Environment.NewLine + LB1_o.Items[LB1_o.Items.Count - 2].ToString() + Environment.NewLine + LB1_o.Items[LB1_o.Items.Count - 1].ToString() + Environment.NewLine + Environment.NewLine + "Try preset for more error information", "Encoding test failed", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            }
                            if (n_lines == 2)
                            {
                                MessageBox.Show("Encoding test failed on selected file: " + Environment.NewLine + Environment.NewLine + LB1_o.Items[LB1_o.Items.Count - 2].ToString() + Environment.NewLine + LB1_o.Items[LB1_o.Items.Count - 1].ToString() + Environment.NewLine + Environment.NewLine + "Try preset for more error information", "Encoding test failed", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            }
                            if (n_lines == 1)
                            {
                                MessageBox.Show("Encoding test failed on selected file: " + Environment.NewLine + Environment.NewLine + LB1_o.Items[LB1_o.Items.Count - 1].ToString() + Environment.NewLine + Environment.NewLine + "Try preset for more error information", "Encoding test failed", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            }
                        }
                        
                        return;
                    }
                }
                else
                {
                    try
                    {
                        frm_prog.Invoke(new MethodInvoker(delegate
                    {
                        frm_prog.pic.Visible = false;
                        frm_prog.pic_ok.Visible = true;
                        frm_prog.pic_ok.Refresh();
                    }));
                    }
                    catch { }
                    System.Threading.Thread.Sleep(175);
                    try
                    {
                        frm_prog.Invoke(new MethodInvoker(delegate
                        {
                            frm_prog.Dispose();
                        }));
                    }
                    catch { }
                    if (Directory.Exists(destino_test) && Directory.GetFiles(destino_test).Length > 0)
                    {
                        foreach (String file in Directory.GetFiles(destino_test))
                        {
                            try
                            {
                                File.Delete(file);
                            }
                            catch
                            {
                            }
                        }
                    }

                    if (Directory.Exists(destino_test) && Directory.GetFiles(destino_test).Length == 0)
                    {
                        System.IO.Directory.Delete(destino_test);
                    }
                    tried_params.Add(txt_parameters.Text);
                    tried_ok = true;
                }
            }
            //END try preset
            this.InvokeEx(f => this.Cursor = Cursors.Arrow);

            if (Directory.Exists(destino_test))
            {
                if (Directory.GetFiles(destino_test).Length == 0)
                {
                    System.IO.Directory.Delete(destino_test);
                }
            }
            LB1_o.Items.Clear();
            consola_pre.Dispose();
        }

        private void BG_Try_preset_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {            
            String file_prueba = "";
            String sel_test = listView1.SelectedItems[0].SubItems[1].Text + "\\" + listView1.SelectedItems[0].Text;
            file_prueba = sel_test;
            String destino = Path.Combine(Path.GetTempPath(), "FFBatch_test");
            String borrar = destino + "\\" + System.IO.Path.GetFileNameWithoutExtension(file_prueba) + "." + txt_format.Text;

            if (File.Exists(borrar))
            {
                try
                {
                    File.Delete(borrar);
                }
                catch
                {
                }
            }

            if (Directory.Exists(destino) == true)
            {
                try
                {
                    if (Directory.GetFiles(destino).Length == 0)
                    {
                        System.IO.Directory.Delete(destino);
                    }
                }
                catch { }
            }

            //Re-route to pressed button
            if (tried_ok == true)
            {
                if (was_started.Text == button2.Text)
                {
                    button2.PerformClick();
                }

                if (was_started.Text == btn_multi_m.Text)
                {
                    btn_multi_m.PerformClick();
                }
                if (was_started.Text == btn_concat.Text)
                {
                    btn_concat.PerformClick();
                }
                if (was_started.Text == btn_trim.Text)
                {
                    btn_trim.PerformClick();
                }
            }
        }

        private void frm_output2_FormClosing(object sender, System.EventArgs e)
        {
            this.InvokeEx(f => f.btn_try_pr.Enabled = true);
            this.InvokeEx(f => this.Enabled = true);
        }

        private void BG_Try_button_DoWork(object sender, DoWorkEventArgs e)
        {
            Boolean failed = false;
            String sel_test = "";
            this.InvokeEx(f => f.btn_try_pr.Image = img_try.Images[0]);
            this.InvokeEx(f => sel_test = listView1.SelectedItems[0].SubItems[1].Text + "\\" + listView1.SelectedItems[0].Text);
            this.InvokeEx(f => this.Cursor = Cursors.WaitCursor);
            this.InvokeEx(f => f.btn_try_pr.Enabled = false);

            frm_output2.Name = "Try with con FFmpeg";
            frm_output2.Icon = this.Icon;

            frm_output2.Height = 575;
            frm_output2.Width = 977;
            frm_output2.FormBorderStyle = FormBorderStyle.Fixed3D;
            frm_output2.MaximizeBox = false;
            frm_output2.MinimizeBox = false;

            var fuente_list = new System.Drawing.Font("Microsoft Sans Serif", 8, FontStyle.Regular);

            LB1_o_try.Items.Clear();
            LB1_o_try.Parent = frm_output2;
            LB1_o_try.Left = 20;
            LB1_o_try.Top = 65;
            LB1_o_try.Height = 425;
            LB1_o_try.Width = 920;
            LB1_o_try.Font = fuente_list;
            LB1_o_try.Click += new EventHandler(LB1_o_Click);

            TextBox titulo = new TextBox();
            titulo.Parent = frm_output2;
            titulo.Top = 15;
            titulo.Left = 20;
            titulo.Width = 921;
            titulo.TabIndex = 0;
            var fuente = new System.Drawing.Font("Microsoft Sans Serif", 11, FontStyle.Bold);

            titulo.Font = fuente;
            titulo.BorderStyle = BorderStyle.Fixed3D;
            titulo.TextAlign = HorizontalAlignment.Center;
            titulo.ReadOnly = true;

            titulo.Text = "Processing with FFmpeg";

            Button boton_ok_ff = new Button();
            boton_ok_ff.Parent = frm_output2;
            boton_ok_ff.Left = 480;
            boton_ok_ff.Top = 495;
            boton_ok_ff.Width = 461;
            boton_ok_ff.Height = 27;
            boton_ok_ff.Text = "Processing file, please wait...";
            boton_ok_ff.Click += new EventHandler(boton_ok_ff_Click);

            Button boton_copy_ff = new Button();
            boton_copy_ff.Parent = frm_output2;
            boton_copy_ff.Left = 20;
            boton_copy_ff.Top = 495;
            boton_copy_ff.Width = 461;
            boton_copy_ff.Height = 27;
            boton_copy_ff.Text = "Copy to clipboard";
            boton_copy_ff.Click += new EventHandler(boton_copy_ff_Click);

            Process consola = new Process();
            String file_prueba = "";
            file_prueba = sel_test;
            String destino = Path.GetTempPath() + "\\" + "FFBatch_test";
            Boolean timed_out = false;
            frm_output2.FormClosing += frm_output2_FormClosing;

            Task tt = Task.Run(() =>
            {
                consola.StartInfo.FileName = "ffmpeg.exe";

                String fichero = Path.GetFileName(file_prueba);
                TextBox titulo2 = new TextBox();
                titulo2.Parent = frm_output2;
                titulo2.Top = 42;
                titulo2.Left = 47;
                titulo2.Width = 867;

                var fuente2 = new System.Drawing.Font("Microsoft Sans Serif", 10, FontStyle.Regular);

                titulo2.Font = fuente2;
                titulo2.BorderStyle = BorderStyle.None;
                titulo2.TextAlign = HorizontalAlignment.Center;
                titulo2.ReadOnly = true;

                titulo2.Text = (fichero);

                frm_output2.StartPosition = FormStartPosition.CenterScreen;

                if (!Directory.Exists(destino))
                {
                    try
                    {
                        Directory.CreateDirectory(destino);
                    }
                    catch (System.Exception excpt)
                    {
                        MessageBox.Show("Error: " + excpt.Message, "Error writing to folder", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        return;
                    }
                }

                String ext_output = txt_format.Text;
                if (txt_format.Text == String.Empty)
                {
                    ext_output = Path.GetExtension(file_prueba);
                }
                else
                {
                    ext_output = "." + txt_format.Text;
                }
                if (txt_format.Text == "nul") ext_output = "nul";
                textbox_params = txt_parameters.Text;
                String file_prueba2 = file_prueba;

                while (textbox_params.Contains("%fn"))
                {
                    if (textbox_params.Contains("%fn"))
                    {
                        textbox_params = textbox_params.Replace("%fn", Path.GetFileNameWithoutExtension(file_prueba));
                    }
                }

                while (textbox_params.Contains("%fp"))
                {
                    if (textbox_params.Contains("%fp"))
                    {
                        textbox_params = textbox_params.Replace("%fp", Path.GetDirectoryName(file_prueba));
                    }
                }

                while (textbox_params.Contains("%fd"))
                {
                    if (textbox_params.Contains("%fd"))
                    {
                        var path = Path.GetFullPath(file_prueba);
                        var dirName = Path.GetFileName(Path.GetDirectoryName(path));
                        textbox_params = textbox_params.Replace("%fd", dirName);
                    }
                }

                while (textbox_params.Contains("%1"))
                {
                    if (textbox_params.Contains("%1"))
                    {                        
                        file_prueba2 = file_prueba2.Replace("\\", "\\\\\\\\");
                        file_prueba2 = file_prueba2.Replace(":", "\\\\" + ":");
                        textbox_params = textbox_params.Replace("%1", file_prueba2);
                    }
                }

                while (textbox_params.Contains("%2"))
                {
                    if (textbox_params.Contains("%2"))
                    {
                        file_prueba2 = file_prueba2.Replace("\\", "\\\\\\\\");
                        file_prueba2 = file_prueba2.Replace(":", "\\\\" + ":");
                        textbox_params = textbox_params.Replace("%2", Path.Combine(System.IO.Path.GetDirectoryName(file_prueba2), Path.GetFileNameWithoutExtension(file_prueba2)));
                    }
                }

                String second_path = "";
                if (textbox_params == "nul")
                {
                    String[] split = txt_parameters.Text.Split(' ');
                    for (int i = 0; i < split.Length; i++)
                    {
                        if (split[i].Contains("\\") == true)
                        {
                            String pre_path = split[i].Replace("%fp", Path.GetDirectoryName(file_prueba2)).Replace("%fn", Path.GetFileNameWithoutExtension(file_prueba2)).Replace("%", "_");
                            second_path = Path.GetDirectoryName(pre_path.Replace('\u0022', ' '));

                            if (!Directory.Exists(second_path))
                            {
                                try
                                {
                                    Directory.CreateDirectory(second_path);
                                }
                                catch
                                {

                                }
                            }
                        }
                    }
                }

                consola.StartInfo.Arguments = hw_decode_glob + " -i " + "" + '\u0022' + file_prueba + '\u0022' + " -t 0.2" + " -y " + textbox_params + " " + '\u0022' + destino + "\\" + System.IO.Path.GetFileNameWithoutExtension(file_prueba) + ext_output + '\u0022' + " -loglevel warning -stats";
                if (ext_output == "nul") consola.StartInfo.Arguments = hw_decode_glob + " -loglevel warning -stats" +  " -i " +  '\u0022' + file_prueba + '\u0022' + " -y " + textbox_params;
                consola.StartInfo.RedirectStandardOutput = true;
                consola.StartInfo.RedirectStandardError = true;
                consola.StartInfo.UseShellExecute = false;
                consola.StartInfo.CreateNoWindow = true;
                consola.EnableRaisingEvents = true;                
                consola.Start();
                this.InvokeEx(f => boton_ok_ff.Text = "Close window");

                while (!consola.StandardError.EndOfStream)
                {
                    this.InvokeEx(f => LB1_o_try.Items.Add(consola.StandardError.ReadLine()));
                    this.InvokeEx(f => LB1_o_try.TopIndex = LB1_o_try.Items.Count - 1);
                    this.InvokeEx(f => LB1_o_try.Refresh());
                }

                //consola.WaitForExit();
                consola.StartInfo.Arguments = String.Empty;

                if (consola.ExitCode == 0)
                {
                    this.InvokeEx(f => f.btn_try_pr.Image = img_try.Images[1]);
                    this.InvokeEx(f => f.btn_try_pr.Enabled = true);
                    consola.StartInfo.Arguments = String.Empty;
                    LB1_o_try.Items.Add("");
                    LB1_o_try.Items.Add("FFMPEG TEST SUCCESSFUL.");
                    LB1_o_try.TopIndex = LB1_o_try.Items.Count - 1;
                    LB1_o_try.BackColor = Color.LightGreen;
                    LB1_o_try.SetSelected(LB1_o_try.Items.Count - 1, true);
                    this.InvokeEx(f => this.Cursor = Cursors.Arrow);
                    this.InvokeEx(f => this.Enabled = true);

                    //frm_output2.ShowDialog();

                    String borrar1 = destino + "\\" + System.IO.Path.GetFileNameWithoutExtension(file_prueba) + "." + txt_format.Text;

                    if (File.Exists(borrar1))
                    {
                        File.Delete(borrar1);
                    }
                    if (Directory.Exists(destino))
                    {
                        if (Directory.GetFiles(destino).Length == 0)
                        {
                            System.IO.Directory.Delete(destino);
                        }
                    }

                    return;
                }
                else
                {
                    this.InvokeEx(f => this.Enabled = false);
                    consola.StartInfo.Arguments = String.Empty;
                    if (timed_out == false)
                    {
                        this.InvokeEx(f => f.btn_try_pr.Image = img_try.Images[2]);
                        this.InvokeEx(f => LB1_o_try.Items.Add(""));
                        this.InvokeEx(f => LB1_o_try.Items.Add("Encoding test failed. CHECK OUTPUT ABOVE"));
                        this.InvokeEx(f => LB1_o_try.TopIndex = LB1_o_try.Items.Count - 1);
                        this.InvokeEx(f => LB1_o_try.BackColor = Color.LightSalmon);
                        this.InvokeEx(f => LB1_o_try.SetSelected(LB1_o_try.Items.Count - 1, true));
                        this.InvokeEx(f => this.Cursor = Cursors.Arrow);
                        if (failed == false)
                        {
                            frm_output2.ShowDialog();
                        }
                        String borrar2 = destino + "\\" + System.IO.Path.GetFileNameWithoutExtension(file_prueba) + "." + txt_format.Text;

                        if (File.Exists(borrar2))
                        {
                            File.Delete(borrar2);
                        }
                        if (Directory.Exists(destino))
                        {
                            if (Directory.GetFiles(destino).Length == 0)
                            {
                                System.IO.Directory.Delete(destino);
                            }

                            return;
                        }
                    }
                }
            });

            if (!tt.Wait(6000) && consola.StartInfo.Arguments != String.Empty)
            {
                failed = true;
                timed_out = true;
                consola.Kill();
                LB1_o_try.Items.Add("");
                LB1_o_try.Items.Add("FFMPEG TEST SUCCESSFUL.");
                LB1_o_try.TopIndex = LB1_o_try.Items.Count - 1;
                LB1_o_try.BackColor = Color.LightGreen;
                this.InvokeEx(f => LB1_o_try.SetSelected(LB1_o_try.Items.Count - 1, true));
                this.InvokeEx(f => this.Cursor = Cursors.Arrow);
                this.InvokeEx(f => f.btn_try_pr.Image = img_try.Images[1]);
                this.InvokeEx(f => f.btn_try_pr.Enabled = true);
                this.InvokeEx(f => this.Enabled = true);
                //frm_output2.ShowDialog();
                this.InvokeEx(f => frm_output2.Refresh());

            }

            String borrar = destino + "\\" + System.IO.Path.GetFileNameWithoutExtension(file_prueba) + "." + txt_format.Text;

            if (File.Exists(borrar))
            {
                try
                {
                    File.Delete(borrar);
                }
                catch { }
            }
            if (Directory.Exists(destino))
            {
                if (Directory.GetFiles(destino).Length == 0)
                {
                    System.IO.Directory.Delete(destino);
                }
            }
        }

        private void cti6_Click(object sender, EventArgs e)
        {
            if (listView1.SelectedIndices.Count == 1 && listView1.Items[listView1.SelectedIndices[0]].SubItems[5].Text != "Success" && listView1.Items[listView1.SelectedIndices[0]].SubItems[5].Text != "Queued" && listView1.Items[listView1.SelectedIndices[0]].SubItems[5].Text != "Aborted")
            {
                if (multi_running == false)
                {
                    StreamWriter write_q = process_glob.StandardInput;
                    write_q.Write("q");
                    aborted_url = true;
                    listView1.Items[listView1.SelectedIndices[0]].SubItems[5].Text = "Aborting";
                    skipped = true;
                    return;
                }
                else
                {
                    StreamWriter write_q = procs["proc_urls_" + listView1.Items[listView1.SelectedIndices[0]].Index.ToString()].StandardInput;
                    write_q.Write("q");
                    aborted_url = true;
                    listView1.Items[listView1.SelectedIndices[0]].SubItems[5].Text = "Aborting";
                    return;
                }
            }
        }

        private void combo_prio_SelectedIndexChanged(object sender, EventArgs e)
        {            
            btn_save_prio.Enabled = true;
            if (just_started == true) btn_save_prio.Enabled = false;
            just_started = false;
            //mem_prio.SelectedItem = combo_prio.SelectedItem;

            if (combo_prio.SelectedIndex == current_prio)
            {
                btn_save_prio.Enabled = false;
            }
            else
            {
                btn_save_prio.Enabled = true;
            }

            if (working == true)
            {
                System.Threading.Thread.Sleep(50);
                Change_mem_prio();
            }
            if (btn_save_prio.Enabled == false)
            {
                current_save_prio = false;
            }
            else
            {
                current_save_prio = true;
            }
        }

        private void Change_mem_prio()
        {
            if (working == true) System.Threading.Thread.Sleep(1000);
            int tab = 0;
            tabControl1.Invoke(new MethodInvoker(delegate
            {
                tab = tabControl1.SelectedIndex;
            }));

            if (tab == 1 || tab == 2)
            {
                if (working == true)
                {
                    try
                    {
                        if (combo_prio.SelectedIndex == 0) process_glob.PriorityClass = ProcessPriorityClass.High;
                        if (combo_prio.SelectedIndex == 1) process_glob.PriorityClass = ProcessPriorityClass.AboveNormal;
                        if (combo_prio.SelectedIndex == 2) process_glob.PriorityClass = ProcessPriorityClass.Normal;
                        if (combo_prio.SelectedIndex == 3) process_glob.PriorityClass = ProcessPriorityClass.BelowNormal;
                        if (combo_prio.SelectedIndex == 4) process_glob.PriorityClass = ProcessPriorityClass.Idle;
                    }
                    catch
                    {

                    }
                }
            }

            if (tab == 0)
            {

                if (working == true && multi_running == false)
                {
                    try
                    {
                        if (combo_prio.SelectedIndex == 0) process_glob.PriorityClass = ProcessPriorityClass.High;
                        if (combo_prio.SelectedIndex == 1) process_glob.PriorityClass = ProcessPriorityClass.AboveNormal;
                        if (combo_prio.SelectedIndex == 2) process_glob.PriorityClass = ProcessPriorityClass.Normal;
                        if (combo_prio.SelectedIndex == 3) process_glob.PriorityClass = ProcessPriorityClass.BelowNormal;
                        if (combo_prio.SelectedIndex == 4) process_glob.PriorityClass = ProcessPriorityClass.Idle;
                    }
                    catch
                    {

                    }
                }

                if (working == true && multi_running == true)
                {
                    foreach (Process proc in procs.Values)
                    {
                        try
                        {
                            if (combo_prio.SelectedIndex == 0 && multi_running == false) process_glob.PriorityClass = ProcessPriorityClass.High;
                            if (combo_prio.SelectedIndex == 1 && multi_running == false) process_glob.PriorityClass = ProcessPriorityClass.AboveNormal;
                            if (combo_prio.SelectedIndex == 2) proc.PriorityClass = ProcessPriorityClass.Normal;
                            if (combo_prio.SelectedIndex == 3) proc.PriorityClass = ProcessPriorityClass.BelowNormal;
                            if (combo_prio.SelectedIndex == 4) proc.PriorityClass = ProcessPriorityClass.Idle;
                        }
                        catch
                        {
                            //this.InvokeEx(f => MessageBox.Show("Process priority could not be changed, you may have to change it manually.", "Priority not changed", MessageBoxButtons.OK, MessageBoxIcon.Warning));
                        }
                    }
                }
            }

            if (tab == 3)
            {
                if (working == true && m3u_single_running == true)
                {
                    try
                    {
                        if (combo_prio.SelectedIndex == 0) process_glob.PriorityClass = ProcessPriorityClass.High;
                        if (combo_prio.SelectedIndex == 1) process_glob.PriorityClass = ProcessPriorityClass.AboveNormal;
                        if (combo_prio.SelectedIndex == 2) process_glob.PriorityClass = ProcessPriorityClass.Normal;
                        if (combo_prio.SelectedIndex == 3) process_glob.PriorityClass = ProcessPriorityClass.BelowNormal;
                        if (combo_prio.SelectedIndex == 4) process_glob.PriorityClass = ProcessPriorityClass.Idle;
                    }
                    catch
                    {

                    }
                }
                if (working == true && m3u_running == true)
                {
                    foreach (Process proc in procs.Values)
                    {
                        try
                        {
                            if (combo_prio.SelectedIndex == 0 && multi_running == false) process_glob.PriorityClass = ProcessPriorityClass.High;
                            if (combo_prio.SelectedIndex == 1 && multi_running == false) process_glob.PriorityClass = ProcessPriorityClass.AboveNormal;
                            if (combo_prio.SelectedIndex == 2) proc.PriorityClass = ProcessPriorityClass.Normal;
                            if (combo_prio.SelectedIndex == 3) proc.PriorityClass = ProcessPriorityClass.BelowNormal;
                            if (combo_prio.SelectedIndex == 4) proc.PriorityClass = ProcessPriorityClass.Idle;
                        }
                        catch  { }
                    }
                }
            }
        }

        private void btn_reset_path_Click(object sender, EventArgs e)
        {
            Pg1.Focus();
            txt_path_main.Text = ".\\FFBatch";
            txt_path_mux.Text = ".\\FFBatch";
            txt_path_main.BackColor = groupBox1.BackColor;
            txt_path_mux.BackColor = groupBox1.BackColor;
            //btn_reset_path.BackColor = groupBox1.BackColor;
            String path_s = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_path.ini";
            if (File.Exists(path_s))
            {
                File.Delete(path_s);
                btn_save_path.Enabled = true;
            }
            else
            {
                btn_save_path.Enabled = false;
            }
        }

        public class WebClientWithTimeout : WebClient
        {
            protected override WebRequest GetWebRequest(Uri address)
            {
                WebRequest wr = base.GetWebRequest(address);
                wr.Timeout = 5000; // timeout in milliseconds (ms)
                return wr;
            }
        }

        private void btn_update_Click(object sender, EventArgs e)
        {
            Pg1.Focus();
            lbl_updates.Text = String.Empty;
            String current_ver = btn_update.Text;
            btn_update.Refresh();
            String content1 = String.Empty;
            String content2 = String.Empty;

            try
            {
                WebClient client = new WebClientWithTimeout();
                Stream stream = client.OpenRead(down_ver);
                StreamReader reader = new StreamReader(stream);
                String content = reader.ReadToEnd();
                content1 = content;
         
            }
            
                catch
                {

                try
                {
                    //Backup server
                    WebClient client = new WebClientWithTimeout();
                    Stream stream = client.OpenRead(down_ver2);
                    StreamReader reader = new StreamReader(stream);
                    String content = reader.ReadToEnd();
                    content2 = content;
                }
                catch
                {
                    this.InvokeEx(f => f.lbl_updates.Text = "Update connection error");
                    this.InvokeEx(f => f.btn_update.Text = current_ver);
                    return;
                }
            }
        

            try
            {
                if (Convert.ToInt16(content1.Replace(".", String.Empty).Substring(0, 3)) > Convert.ToInt16(Application.ProductVersion.Replace(".", String.Empty)))
                {
                    var a = MessageBox.Show("A new version is available: " + content1.Substring(0, 5) + Environment.NewLine + content1.Substring(6, content1.Length - 6) + Environment.NewLine + Environment.NewLine + "Do you want to download it?", "New version found", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                    if (a == DialogResult.Yes)
                    {
                        Process.Start("https://sourceforge.net/p/ffmpeg-batch/wiki");
                    }
                }
                else
                {
                    MessageBox.Show("You are using the latest version.", "Application is up to date", MessageBoxButtons.OK);
                }
            }
            catch (Exception excpt)
            {
                MessageBox.Show("There was an error checking for updates." + Environment.NewLine + Environment.NewLine + excpt.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

            btn_update.Text = current_ver;

        }

        private void check_sort_dur()
        {
            //Sort by duration
            String f_sort_dur = String.Empty;
            if (is_portable == false)
            {
                f_sort_dur = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_sort_dur.ini";
            }
            else
            {
                f_sort_dur = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_sort_dur_portable.ini";
            }

            if (!File.Exists(f_sort_dur))
            {
                File.WriteAllText(f_sort_dur, "No");
                tip_sort_dur = false;
                sort_multi_dur = false;
            }
            else
            {
                tip_sort_dur = true;
                String sort_l = File.ReadAllText(f_sort_dur);
                if (sort_l == "No")
                {
                    sort_multi_dur = false;
                }

                if (sort_l == "Yes")
                {
                    sort_multi_dur = true;
                }
            }

            //End Sort by duration
        }

        private void btn_multi_m_Click(object sender, EventArgs e)

        {
            Pg1.Focus();
            Pg1.Text = "0" + System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator + "0%";
            if (!File.Exists(Path.Combine(Application.StartupPath, "ffmpeg.exe")))
            {
                MessageBox.Show("FFmpeg executable file was not found. Restart or reinstall application.", "Executable error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            was_started.Text = btn_multi_m.Text;
            if (listView1.Items.Count == 1)
            {
                button2.PerformClick();
                return;
            }

            cancelados_paralelos = false;

            foreach (ListViewItem file in listView1.Items)
            {
                if (!File.Exists(file.SubItems[1].Text + "\\" + file.Text))
                {
                    MessageBox.Show("File was not found: " + file.Text, "One file in the queue list was not found", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
            }
            if (listView1.Items.Count == 0)
            {
                MessageBox.Show("File list is empty", "No files to be processed", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }
            //if (textBox1.Text == "")
            //{
            //    MessageBox.Show("Parameters field can not be empty", "Parameters error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            //    return;
            //}

            if (ss_time_input.Text != "0:00:00")
            {
                foreach (ListViewItem item in listView1.Items)
                {
                    if (item.SubItems[3].Text != "N/A" && item.SubItems[3].Text != "0:00:00" && item.SubItems[3].Text != "00:00:00" && item.SubItems[3].Text != "Pending")
                    {
                        if (TimeSpan.Parse(item.SubItems[3].Text).TotalSeconds <= TimeSpan.Parse(ss_time_input.Text).TotalSeconds)
                        {
                            MessageBox.Show("Pre-input seeking exceeds duration of file: " + '\u0022' + Path.GetFileName(item.Text) + '\u0022', "Pre-input seeking error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            return;
                        }
                    }
                }
            }

            if (dur_ok == false)
            {
                list_pending_dur.Clear();
                foreach (ListViewItem item in listView1.Items)
                {
                    list_pending_dur.Items.Add((ListViewItem)item.Clone());
                }
                BG_Dur.RunWorkerAsync();
                return;
            }

            avoid_overw();


            //Check path is writable
            String destino1 = String.Empty;
            Boolean rel_path = false;
            String lv1 = listView1.Items[0].SubItems[1].Text + "\\" + listView1.Items[0].Text;
            if (txt_path_main.Text.Contains(".\\"))
            {
                destino1 = lv1.Substring(0, lv1.LastIndexOf('\\')) + txt_path_main.Text.Replace(".", String.Empty);
                rel_path = true;
            }
            else
            {
                if (checkBox1.CheckState == CheckState.Checked)
                {
                    String pre_dest = Path.GetDirectoryName(lv1);
                    destino1 = Path.Combine(txt_path_main.Text, pre_dest.Substring(3, pre_dest.Length - 3));
                    rel_path = true;
                }
                else
                {
                    destino1 = txt_path_main.Text;
                }
            }

            try
            {
                if (rel_path == true)
                {
                    Directory.CreateDirectory(destino1);
                    System.Threading.Thread.Sleep(10);
                }
                else
                {
                    if (!Directory.Exists(destino1)) Directory.CreateDirectory(destino1);
                    File.WriteAllText(destino1 + "\\" + "FFBatch_test.txt", "FFBatch_test");
                    System.Threading.Thread.Sleep(10);
                    File.Delete(destino1 + "\\" + "FFBatch_test.txt");
                }
            }
            catch (System.Exception excpt)
            {
                MessageBox.Show("Write error: " + excpt.Message, "Error writing to destination folder", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            //End path is writable


            //Sort by duration

            check_sort_dur();

            String f_sort_dur = String.Empty;
            if (is_portable == false)
            {
                f_sort_dur = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_sort_dur.ini";
            }
            else
            {
                f_sort_dur = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_sort_dur_portable.ini";
            }

            if (File.Exists(f_sort_dur))
            {
                try
                {
                    if (File.ReadAllText(f_sort_dur) == "Yes")
                    {
                        lvwColumnSorter_Full.SortColumn = 3;
                        lvwColumnSorter_Full.Order = SortOrder.Descending;
                        this.listView1.Sort();
                    }
                }
                catch
                {

                }
            }

            if (tip_sort_dur == false)
            {
                var a = MessageBox.Show("Sorting file list by descending duration can reduce total multi-file encoding time. You can change this setting on the filelist context menu." + Environment.NewLine + Environment.NewLine + "Sort list before start?", "Sort file list tip", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                if (a == DialogResult.Yes)
                {
                    lvwColumnSorter_Full.SortColumn = 3;
                    lvwColumnSorter_Full.Order = SortOrder.Descending;
                    this.listView1.Sort();
                    File.WriteAllText(f_sort_dur, "Yes");
                }
                else
                {
                    File.WriteAllText(f_sort_dur, "No");
                }
                tip_sort_dur = true;
            }

            //Validated list, start processing

            if (fade_v_in.Checked == true || fade_v_out.Checked == true || fade_a_in.Checked == true || fade_a_out.Checked == true)
            {
                MessageBox.Show("Fade in/out is only supported in Sequential processing", "Fading enabled", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return;
            }

            txt_remain.Text = "";
            txt_remain.Refresh();
            total_time = true;
            n_th_suffix = String.Empty;
            n_th_source_ext = String.Empty;

            if (listView1.SelectedIndices.Count == 0)
            {
                listView1.Items[0].Selected = true;
                listView1.Items[0].Focused = true;
                listView1.Focus();
            }

            //Save selected hw decoder

            String path2 = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_hw_dcd.ini";
            String txt_hw_dcd = cb_hwdecode.SelectedItem.ToString();
            if (txt_hw_dcd != "none")
            {
                File.WriteAllText(path2, txt_hw_dcd);
            }
            else
            {
                if (File.Exists(path2)) File.Delete(path2);
            }

            //End save hw decoder


            //Try preset
            foreach (String item in tried_params)
            {
                if (item == (txt_parameters.Text))
                {
                    tried_ok = true;
                }
            }

            if (tried_ok == false)
            {
                try
                {
                    BG_Try_preset.RunWorkerAsync();
                }
                catch
                {
                    tried_ok = true;
                }
                return;
            }
            tried_ok = false;

            //Remove test file/folder
            String file_prueba = "";
            String sel_test = listView1.SelectedItems[0].SubItems[1].Text + "\\" + listView1.SelectedItems[0].Text;
            file_prueba = sel_test;
            String destino = Path.GetTempPath() + "\\" + "FFBatch_test";
            String borrar = destino + "\\" + System.IO.Path.GetFileNameWithoutExtension(file_prueba) + "." + txt_format.Text;

            if (File.Exists(borrar))
            {
                try
                {
                    File.Delete(borrar);
                }
                catch { }
            }

            if (Directory.Exists(destino) == true)
            {
                if (Directory.GetFiles(destino).Length == 0)
                {
                    try
                    {
                        System.IO.Directory.Delete(destino);
                    }
                    catch { }
                }
            }

            //END Remove test file/folder

            //END try preset


            //Save selected theads

            String path = String.Empty;
            if (is_portable == false)
            {
                path = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_nthreads.ini";
            }
            else
            {
                path = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_nthreads_portable.ini";
            }

            String txt_threads = String.Empty;
            txt_threads = n_threads.Value.ToString();
            File.WriteAllText(path, txt_threads);
            //End save selected threads

            //Pending duration


            if (avoid_overwriting == true && txt_path_main.Text.Contains(".\\") == false && txt_path_main.Text.Length < 4 && checkBox1.CheckState != CheckState.Checked)
            {
                avoid_overwriting = false;
                DialogResult a2 = MessageBox.Show("Multiple folders to single output folder may lead to overwriting. You can enable " + '\u0022' + "Recreate source path" + '\u0022' + " to avoid opossible overwritings." + Environment.NewLine + Environment.NewLine + "Do you want to continue?", "Different input folders to single output folder", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2);
                if (a2 == DialogResult.No) return;
            }

            list_global_proc.Clear();

            //Check queued items

            if (warn_success_items == true)
            {
                //Boolean all_complete = true;
                Boolean has_complete = false;
                foreach (ListViewItem item in listView1.Items)
                {
                    if (item.SubItems[5].Text == "Success" || item.SubItems[5].Text == "Replaced")
                    {
                        has_complete = true;
                        break;

                    }
                }
                
                if (has_complete == true)
                {
                    DialogResult a = MessageBox.Show("Some list items were already encoded and are not in " + '\u0022' + "Queued" + '\u0022' + " status, so they may be overwritten. Reset items to Queue status to avoid this warning." + Environment.NewLine + Environment.NewLine + "Do you want to continue anyway?", "Some items with no queued status", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2);
                    if (a == DialogResult.Cancel || a == DialogResult.No) return;
                }
            }
            //End check queued items

            foreach (ListViewItem item in listView1.Items)
            {
                list_global_proc.Items.Add((ListViewItem)item.Clone());
                item.SubItems[5].Text = "Queued";
                item.UseItemStyleForSubItems = true;
                item.BackColor = Color.White;
                item.SubItems[5].BackColor = Color.White;
            }
            listView1.Refresh();
            //Verify names will not cause overwrite
            if (txt_format.Text != String.Empty)
            {
                if (dups_lv1() == true) return;
            }

            String is_overw = txt_path_main.Text + "\\" + Path.GetFileNameWithoutExtension(listView1.Items[0].SubItems[1].Text + "\\" + listView1.Items[0].Text) + "." + txt_format.Text;

            if (is_overw == listView1.Items[0].SubItems[1].Text + "\\" + listView1.Items[0].Text && chk_suffix.Checked == false)
            {
                if (chk_overw.CheckState == CheckState.Unchecked)
                {
                    MessageBox.Show("Overwriting is not enabled. Change destination directory or enable " + '\u0022' + "Rename output" + '\u0022' + " checkbox.", "Overwriting not allowed", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }

                if (chk_overw.CheckState == CheckState.Checked)
                {
                    var a = MessageBox.Show("Overwriting is enabled. Source files will be overwritten. Are you sure?", "Overwriting confirmation", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                    if (a == DialogResult.No)
                    {
                        return;
                    }
                }
            }

            if (txt_parameters.Text.Contains("libx264") || txt_parameters.Text.Contains("libx265") || txt_parameters.Text.Contains("jpeg2000") || txt_parameters.Text.Contains("libtheora") || txt_parameters.Text.Contains("libxvid") || txt_parameters.Text.Contains("mpeg2") || txt_parameters.Text.Contains("webp") || txt_parameters.Text.Contains("mpeg4") || txt_parameters.Text.Contains("libvpx"))
            {
                if (txt_parameters.Text.Contains("libx264") || txt_parameters.Text.Contains("libx265") || txt_parameters.Text.Contains("jpeg2000") || txt_parameters.Text.Contains("libtheora") || txt_parameters.Text.Contains("libxvid") || txt_parameters.Text.Contains("mpeg2") || txt_parameters.Text.Contains("webp") || txt_parameters.Text.Contains("mpeg4") || txt_parameters.Text.Contains("libvpx"))
                {
                    var a = MessageBox.Show("Video encoding tasks are already multi-thread, thus sequential single file processing is recommended. Continue anyway?", "Confirm video multi-file processing", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                    if (a == DialogResult.No)
                        return;
                }
            }


            cancel_queue = false;
            cancelados_paralelos = false;

            working = true;
            listBox4.Items.Clear();
            groupBox10.Focus();

            //Total duration

            total_multi_duration = 0;
            foreach (ListViewItem item in listView1.Items)
            {
                DateTime time2;
                if (DateTime.TryParse(item.SubItems[3].Text, out time2))

                {
                    total_multi_duration = total_multi_duration + TimeSpan.Parse(item.SubItems[3].Text).TotalSeconds;
                }

            }
            //End total duration
            LB_Wait.Text = String.Empty;
            LB_Wait.Visible = false;
            pg_adding.Visible = false;
            txt_adding_p.Text = String.Empty;
            multi_dest = destino;

            notifyIcon1.Visible = true;
            Pg1.Value = 0;
            Pg1.Maximum = list_global_proc.Items.Count * 100;
            Pg1.Text = "";
            lbl_elapsed.Text = "Time elapsed: 00h:00m:00s";

            start_total_time = 0;
            time_n_tasks = 0;
            timer_tasks.Start();
            timer1.Start();
            multi_running = true;

            listView1.Items[0].Selected = true;
            pic_no_errors.Visible = false;
            pic_warnings.Visible = false;
            pic_recording.Visible = false;
            errors_enc = 0;
            BG_Multi_M.RunWorkerAsync();

        }

        private void textBox2_KeyUp(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                button2.PerformClick();
            }
        }

        private void ct3_save_track_Click(object sender, EventArgs e)
        {
            btn_extract.PerformClick();
        }

        private void btn_save_path_Click(object sender, EventArgs e)
        {
            String path = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_path.ini";
            String path_to_save = String.Empty;
            path_to_save = txt_path_main.Text;
            File.WriteAllText(path, path_to_save);
            btn_save_path.Enabled = false;
        }

        private void btn_save_prio_Click(object sender, EventArgs e)
        {
            btn_save_prio.Enabled = false;
            String path = String.Empty;
            if (is_portable == false)
            {
                path = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_priority.ini";
            }
            else
            {
                path = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_priority_portable.ini";
            }

            String path_to_prio = String.Empty;

            if (combo_prio.SelectedIndex != 2)
            {
                path_to_prio = combo_prio.SelectedIndex.ToString();
                File.WriteAllText(path, path_to_prio);
            }
            else
            {
                if (File.Exists(path))
                {
                    File.Delete(path);
                }
            }
            Pg1.Focus();
        }

        private void btn_del_track_Click(object sender, EventArgs e)
        {
            Pg1.Focus();
            if (list_tracks.SelectedIndices.Count > 0)
            {
                Boolean has_default = false;

                foreach (ListViewItem elemento in list_tracks.SelectedItems)
                {
                    list_tracks.Items.Remove(elemento);
                    pic_encode_param.Image = null;
                }

                //Review audio track defaults

                foreach (ListViewItem audio_item in list_tracks.Items)
                {
                    if (audio_item.SubItems[3].Text.Contains("Audio"))
                    {
                        if (audio_item.SubItems[5].Text == "Yes")
                        {
                            has_default = true;
                        }
                    }
                }

                if (has_default == false)
                {
                    foreach (ListViewItem audio_item in list_tracks.Items)
                    {
                        if (audio_item.SubItems[3].Text.Contains("Audio"))
                        {
                            audio_item.SubItems[5].Text = "Yes";
                            return;
                        }
                    }
                }
                //End review audio track defaults
                lbl_tr_n.Text = "Tracks: " + list_tracks.Items.Count.ToString();
            }
            else
            {
                MessageBox.Show("No track was selected to be removed.", "No track selected", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            }
        }

        private void btn_default_track_Click(object sender, EventArgs e)
        {
            Pg1.Focus();
            if (list_tracks.SelectedIndices.Count == 1)
            {
                if (list_tracks.SelectedIndices.Count == 0 || list_tracks.SelectedItems[0].SubItems[3].Text.Contains("Video"))
                {
                    return;
                }

                if (list_tracks.SelectedItems[0].SubItems[4].Text == "Yes")
                {
                    list_tracks.SelectedItems[0].SubItems[4].Text = "No";
                }
                else
                {
                    list_tracks.SelectedItems[0].SubItems[4].Text = "Yes";
                }

                //Review audio defaults
                int default_items = 0;

                for (int i = 0; i < list_tracks.Items.Count; i++)
                {
                    if (list_tracks.Items[i].SubItems[3].Text.Contains("Audio"))
                    {
                        if (list_tracks.Items[i].SubItems[4].Text == "Yes")
                        {
                            default_items = default_items + 1;
                        }
                    }
                }

                if (default_items > 1)
                {
                    foreach (ListViewItem audio_item in list_tracks.Items)
                    {
                        if (audio_item.SubItems[3].Text.Contains("Audio"))
                        {
                            if (audio_item.Text != list_tracks.SelectedItems[0].Text)
                            {
                                audio_item.SubItems[4].Text = "No";
                            }
                        }
                    }
                }

                if (default_items == 0)
                {
                    foreach (ListViewItem audio_item in list_tracks.Items)
                    {
                        if (audio_item.SubItems[3].Text.Contains("Audio"))
                        {
                            if (audio_item.Text != list_tracks.SelectedItems[0].Text)
                            {
                                audio_item.SubItems[4].Text = "Yes";
                                return;
                            }
                        }
                    }
                }

                //End review audio track defaults

                //Begin subtitle defaults

                //Review audio defaults
                int default_subs = 0;
                for (int i = 0; i < list_tracks.Items.Count; i++)
                {
                    if (list_tracks.Items[i].SubItems[3].Text.Contains("Subtitle"))
                    {
                        if (list_tracks.Items[i].SubItems[4].Text == "Yes")
                        {
                            default_subs = default_subs + 1;
                        }
                    }
                }

                if (default_subs > 1)
                {
                    foreach (ListViewItem audio_item in list_tracks.Items)
                    {
                        if (audio_item.SubItems[3].Text.Contains("Subtitle"))
                        {
                            if (audio_item != list_tracks.SelectedItems[0])
                            {
                                audio_item.SubItems[4].Text = "No";
                            }
                        }
                    }
                }

                //End subtitle defaults
            }
            else
            {
                MessageBox.Show("Please select just one track to change its default status", "No track selected", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            }
        }

        private void tracks_background()
        {
            check_jobs();
            foreach (ListViewItem item in list_tracks.Items)
            {
                if (item.SubItems[2].Text.ToLower().Contains("video"))
                {
                    item.BackColor = Color.PapayaWhip;
                }

                if (item.SubItems[2].Text.ToLower().Contains("audio"))
                {
                    item.BackColor = Color.AliceBlue;
                }
                if (item.SubItems[2].Text.ToLower().Contains("subtitle"))
                {
                    item.BackColor = Color.LightGoldenrodYellow;
                }
            }
            //Duplicates
            if (tracks_empty == true) return;

            for (int i = 0; i < list_tracks.Items.Count; i++)
            {
                for (int j = i + 1; j < list_tracks.Items.Count; j++)
                {
                    if (list_tracks.Items[i].Text == list_tracks.Items[j].Text && list_tracks.Items[i].SubItems[1].Text == list_tracks.Items[j].SubItems[1].Text)
                    {
                        //MessageBox.Show("Duplicated");
                        list_tracks.Items.RemoveAt(j);
                    }
                }
            }
            //End Duplicates
            lbl_tr_n.Text = "Tracks: " + list_tracks.Items.Count.ToString();            
        }
        private void check_jobs()
        {
            if (frm_mux_jobs.dg_pr.RowCount > 0)
            {
                this.InvokeEx(f => f.lbl_mux_jobs.Text = "Jobs: " + frm_mux_jobs.dg_pr.RowCount);
            }
            else
            {
                this.InvokeEx(f => f.lbl_mux_jobs.Text = String.Empty);
                this.InvokeEx(f => f.btn_mux_show_jobs.Enabled = false);
            }
        }

        private void btn_pause_Click(object sender, EventArgs e)
        {
            Pg1.Focus();
            if (working == false) return;
            if (tabControl1.SelectedIndex == 3)
                if (dg1.Rows[0].Cells[5].Value.ToString() == "Recording") return;

            if (btn_pause.Image != pic_resume.Image)
            {
                paused = true;

                if (tabControl1.SelectedIndex == 0)
                {
                    foreach (ListViewItem item in listView1.Items)
                    {
                        if (working == true && multi_running == false)
                        {
                            process_glob.Suspend();
                        }
                    }

                    if (working == true && multi_running == true)
                    {
                        foreach (Process proc in procs.Values)
                        {
                            try
                            {
                                proc.Suspend();
                            }
                            catch
                            {

                            }
                        }
                    }
                }

                if (tabControl1.SelectedIndex == 1)
                {
                    if (working == true && multi_running == false) process_glob.Suspend();
                }

                if (tabControl1.SelectedIndex == 2)
                {
                    foreach (ListViewItem item in listView3.Items)
                    {
                        if (working == true) process_glob.Suspend();
                    }
                }

                if (tabControl1.SelectedIndex == 3)
                {
                    foreach (DataGridViewRow row in dg1.Rows)
                    {
                        if (m3u_running == true && m3u_single_running == true)
                        {
                            process_glob.Suspend();
                        }
                    }

                    if (m3u_running == true && m3u_single_running == false)
                    {
                        foreach (Process proc in procs.Values)
                        {
                            try
                            {
                                proc.Suspend();
                            }
                            catch
                            {
                            }
                        }
                    }
                }
                this.InvokeEx(f => TaskbarProgress.SetState(this.Handle, TaskbarProgress.TaskbarStates.Paused));
                this.InvokeEx(f => f.btn_abort_all.Enabled = false);
                this.InvokeEx(f => f.btn_abort_all.Enabled = false);
                this.InvokeEx(f => f.btn_skip_main.Enabled = false);

                this.InvokeEx(f => f.btn_stop_m3u8.Enabled = false);
                this.InvokeEx(f => f.btn_pause.Image = pic_resume.Image);
                //this.InvokeEx(f => f.btn_pause.Text = "Resume encoding");
                MessageBox.Show("Encoding is now paused.", "Encoding paused", MessageBoxButtons.OK);
            }
            else
            {
                this.InvokeEx(f => TaskbarProgress.SetState(this.Handle, TaskbarProgress.TaskbarStates.Paused));

                paused = false;
                if (tabControl1.SelectedIndex == 0)
                {
                    if (working == true && multi_running == false)
                    {
                        foreach (ProcessThread thr in process_glob.Threads)
                        {
                            process_glob.Resume();
                        }
                    }

                    if (working == true && multi_running == true)
                    {
                        foreach (Process proc in procs.Values)
                        {
                            try
                            {
                                proc.Resume();
                            }
                            catch
                            {
                            }
                        }
                    }
                }

                if (tabControl1.SelectedIndex == 1)
                {
                    if (working == true) process_glob.Resume();
                }

                if (tabControl1.SelectedIndex == 2)
                {
                    foreach (ListViewItem item in listView3.Items)
                    {
                        if (working == true) process_glob.Resume();
                    }
                }

                if (tabControl1.SelectedIndex == 3)
                {
                    foreach (DataGridViewRow row in dg1.Rows)
                    {
                        if (m3u_single_running == true && m3u_running == true)
                        {
                            process_glob.Resume();
                        }
                    }

                    if (m3u_single_running == false && m3u_running == true)
                    {
                        foreach (Process proc in procs.Values)
                        {
                            try
                            {
                                proc.Resume();
                            }
                            catch
                            {
                            }
                        }
                    }
                }

                this.InvokeEx(f => TaskbarProgress.SetState(this.Handle, TaskbarProgress.TaskbarStates.Normal));
                this.InvokeEx(f => f.btn_abort_all.Enabled = true);
                this.InvokeEx(f => f.btn_skip_main.Enabled = true);
                this.InvokeEx(f => f.btn_stop_m3u8.Enabled = true);
                this.InvokeEx(f => f.btn_skip_main.Enabled = true);
                this.InvokeEx(f => f.btn_pause.Image = pic_pause.Image);                
            }
        }

        private void button16_Click_3(object sender, EventArgs e)
        {
            folderBrowserDialog1.ShowNewFolderButton = true;

            if (folderBrowserDialog1.ShowDialog() == DialogResult.OK)
            {
                txt_path_main.Text = folderBrowserDialog1.SelectedPath;
                txt_path_main.BackColor = txt_parameters.BackColor;
                txt_path_mux.Text = folderBrowserDialog1.SelectedPath;
                txt_path_mux.BackColor = txt_parameters.BackColor;
            }
        }

        private void textBox9_DoubleClick(object sender, EventArgs e)
        {
            txt_path_main.Text = ".\\FFBatch";
            txt_path_main.BackColor = Control.DefaultBackColor;
            txt_path_mux.Text = ".\\FFBatch";
            txt_path_mux.BackColor = Control.DefaultBackColor;
        }

        private void timer_est_size_Tick(object sender, EventArgs e)
        {
            time_est_size = time_est_size + 1;
        }

        private void textBox1_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter) e.SuppressKeyPress = true;
        }

        private void btn_skip_main_Click(object sender, EventArgs e)
        {
            Pg1.Focus();
            if (working == true)
            {
                StreamWriter write_q = process_glob.StandardInput;
                write_q.Write("q");
                aborted_url = true;
                skipped = true;
            }
        }

        private void timer2_Tick(object sender, EventArgs e)
        {
            Double weight = 0;
            Double dg_multi_prog = 0;
            start_total_time = start_total_time + 0.5;

            foreach (DataGridViewRow row in dg1.Rows)
            {
                try
                {
                    weight = TimeSpan.Parse(row.Cells[3].Value.ToString()).TotalSeconds / total_multi_duration;
                    if (row.Cells[5].Value.ToString().Contains("%") == true && cancelados_paralelos == false)
                    {
                        dg_multi_prog = dg_multi_prog + (Convert.ToDouble(row.Cells[5].Value.ToString().Replace("%", "")) * weight) * dg1.Rows.Count;
                    }
                }
                catch { }

                if (row.Cells[5].Value.ToString() == "Success" || row.Cells[5].Value.ToString() == "Failed" || row.Cells[5].Value.ToString() == "Aborted" || row.Cells[5].Value.ToString() == "Aborting" || row.Cells[5].Value.ToString() == "Skipped")
                {
                    dg_multi_prog = dg_multi_prog + (100 * weight * dg1.Rows.Count);

                }
            }

            if (time_n_tasks > 1)
            {
                if (dg1.Rows[0].Cells[1].Value.ToString().ToLower().Contains("youtu.be") || dg1.Rows[0].Cells[1].Value.ToString().ToLower().Contains("youtube.com"))
                {
                    try
                    {
                        if (Convert.ToInt32(dg_multi_prog) > Pg1.Maximum) Pg1.Value = Pg1.Maximum;
                        else Pg1.Value = Convert.ToInt32(dg_multi_prog);
                        Pg1.Text = Convert.ToInt32(dg_multi_prog / dg1.Rows.Count).ToString() + "%";
                        this.InvokeEx(f => TaskbarProgress.SetValue(this.Handle, Pg1.Value, Pg1.Maximum));
                    }
                    catch { }
                }
            }
            else
            {
                Pg1.Value = 0;
                Pg1.Text = "0" + System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator + "0%";
            }
            //MessageBox.Show("Second: " + dg_multi_prog.ToString());

            if (Pg1.Value / dg1.Rows.Count > 0 && start_total_time > 4)
            {
                Double remain_secs = time_n_tasks * 100 / (Pg1.Value / dg1.Rows.Count) - start_total_time;
                String remain_string = String.Empty;

                TimeSpan t = TimeSpan.FromSeconds(remain_secs);
                remain_string = string.Format("{0:D2}h:{1:D2}",
                t.Hours,
                t.Minutes);

                if (remain_secs >= 43200)
                {
                    txt_remain.Text = "Time remaining: " + Math.Round(remain_secs / 3600).ToString() + " hours";
                }

                if (remain_secs >= 3600 && remain_secs < 43200)
                {
                    txt_remain.Text = "Time remaining: " + remain_string + " min";
                }

                if (remain_secs < 3600 && remain_secs >= 600)
                {
                    txt_remain.Text = "Time remaining: " + remain_string.Substring(remain_string.LastIndexOf(":") + 1, 2) + " minutes";
                }
                if (remain_secs < 600 && remain_secs >= 120)
                {
                    txt_remain.Text = "Time remaining: " + remain_string.Substring(remain_string.LastIndexOf(":") + 2, 1) + " minutes";
                }

                if (remain_secs < 120 && remain_secs > 59)
                {
                    txt_remain.Text = "Time remaining: " + "About 1 minute";
                }

                if (remain_secs <= 59)
                {
                    txt_remain.Text = "Time remaining: < 1 minute";
                }
                if (remain_secs <= 0)
                {
                    txt_remain.Text = "Time remaining: Almost done";
                }
                txt_remain.Refresh();
            }
            else
            {
                txt_remain.Text = "Time remaining: Calculating...";
                txt_remain.Refresh();
            }            
        }

        private void btn_extract_Click(object sender, EventArgs e)
        {
            Pg1.Focus();
            cancel_queue = false;
            Pg1.Text = "0" + System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator + "0%";
            if (list_tracks.SelectedIndices.Count > 1)
            {
                MessageBox.Show("Please select only one track to be saved", "Multiple tracks selected", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            foreach (ListViewItem file in list_tracks.Items)
            {
                if (!File.Exists(file.Text))
                {
                    MessageBox.Show("File was not found: " + file.Text, "One file in the track list was not found", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
            }

            if (list_tracks.Items.Count == 0)
            {
                MessageBox.Show("Tracks list is empty", "No files to be processed", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return;
            }

            if (list_tracks.SelectedItems.Count == 0)
            {
                MessageBox.Show("No track was selected", "No track selected", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return;
            }

            if (txt_track_format.Text == String.Empty && list_tracks.SelectedItems.Count > 0)
            {
                MessageBox.Show("Track extension is empty. Please select a track format", "No track format selected", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return;
            }

            String is_overw = txt_path_main.Text + "\\" + Path.GetFileNameWithoutExtension(list_tracks.Items[0].Text) + "." + txt_track_format;

            if (is_overw == list_tracks.Items[0].Text)
            {
                MessageBox.Show("You can't overwrite the main file with a saved track. Please select a different extension for saved track", "Overwriting not allowed", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            DateTime time2;
            if (!DateTime.TryParse(ss_time_input.Text, out time2))
            {
                MessageBox.Show("Pre-input seeking selected in Batch processing tab is incorrect. Change it or reset it by double-clicking on it", "Pre-input seeking format error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            //Validated list, start processing
            //Pending duration

            if (dur_ok == false)
            {
                list_pending_dur.Items.Clear();
                foreach (ListViewItem item in listView1.Items)
                {
                    list_pending_dur.Items.Add((ListViewItem)item.Clone());
                }
                BG_Dur.RunWorkerAsync();
                return;
            }

            Disable_Controls();
            txt_remain.Text = "Time remaining: 00h:00m:00s";
            time_n_tasks = 0;
            lbl_elapsed.Text = "Time elapsed: 00h:00m:00s";
            timer_tasks.Start();

            cancel_queue = false;
            Pg1.Value = 0;
            //pg_current.Value = 0;
            //textBox4.Text = "0%";

            working = true;

            //Copy list of tracks for thread processing
            ListView list_proc = new ListView();
            foreach (ListViewItem item in list_tracks.SelectedItems)
            {
                list_proc.Items.Add((ListViewItem)item.Clone());
            }
            //End of copy list of tracks for thread processing

            Pg1.Maximum = list_proc.Items.Count;

            Double total_duration = 0;
            Double total_prog = 0;

            //Duration
            Process probe = new Process();
            probe.StartInfo.FileName = System.IO.Path.Combine(Application.StartupPath, "ffprobe.exe");
            probe.StartInfo.Arguments = "-v error -show_entries format=duration -sexagesimal -of default=noprint_wrappers=1:nokey=1 " + " -i " + '\u0022' + list_proc.Items[0].Text + '\u0022';
            probe.StartInfo.RedirectStandardOutput = true;
            probe.StartInfo.UseShellExecute = false;
            probe.StartInfo.CreateNoWindow = true;
            probe.EnableRaisingEvents = true;
            probe.Start();

            String duracion = probe.StandardOutput.ReadLine();

            probe.WaitForExit();

            if (duracion != null)
            {
                if (duracion.Length >= 7)
                {
                    durat_n = TimeSpan.Parse(duracion).TotalSeconds;
                    total_duration = TimeSpan.Parse(duracion).TotalSeconds;
                }
            }
            else
            {
                total_duration = 0;
            }

            //End duration

            //End

            Pg1.Minimum = 0;
            Pg1.Maximum = 100;
            Pg1.Text = "0" + System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator + "0%";
            lbl_speed.Text = String.Empty;

            List<string> list_lines = new List<string>();
            String mux_ext = txt_track_format.Text;
            
            pic_no_errors.Visible = false;
            pic_recording.Visible = false;
            pic_warnings.Visible = false;
            
            time_est_size = 0;
            timer_est_size.Start();

            new System.Threading.Thread(() =>
            {
                System.Threading.Thread.CurrentThread.IsBackground = true;
            
                String remain_time = "0";

                String ffm = System.IO.Path.Combine(Application.StartupPath, "ffmpeg.exe");

                String file = list_proc.Items[0].Text;
                String fullPath = file;

                String destino = "";

                if (txt_path_main.Text.Contains(".\\"))
                {
                    destino = file.Substring(0, fullPath.LastIndexOf('\\')) + txt_path_main.Text.Replace(".", String.Empty); ;
                }
                else
                {
                    destino = txt_path_main.Text;
                }

                if (!Directory.Exists(destino))
                {
                    try
                    {
                        Directory.CreateDirectory(destino);
                    }
                    catch (System.Exception excpt)
                    {
                        MessageBox.Show("Error: " + excpt.Message, "Error writing to folder", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        this.Cursor = Cursors.Arrow;
                        Enable_Controls();
                        working = false;
                        return;
                    }
                }

                //Create joint inputs variable
                String inputs = String.Empty;
                foreach (ListViewItem input_item in list_proc.Items)
                {
                    String stream_type = String.Empty;
                    if (input_item.SubItems[2].Text.ToLower().Contains("subtitle"))
                    {
                        stream_type = "s";
                    }

                    if (input_item.SubItems[2].Text.ToLower().Contains("audio"))
                    {
                        stream_type = "a";
                    }
                    if (input_item.SubItems[2].Text.ToLower().Contains("video"))
                    {
                        stream_type = "v";
                    }
                    //{
                    //inputs = inputs + " -sub_charenc UTF-8" + " -i " + '\u0022' + input_item.Text + '\u0022';
                    //}
                    inputs = " -i " + '\u0022' + input_item.Text + '\u0022' + " -map 0:" + input_item.SubItems[1].Text + " -c:" + stream_type + " " + txt_track_param.Text + " ";
                }
                //End create joint inputs variable

                String AppParam = inputs + "-y " + '\u0022' + destino + "\\" + System.IO.Path.GetFileNameWithoutExtension(file) + "." + mux_ext + '\u0022';

                if (!Directory.Exists(destino))
                {
                    Directory.CreateDirectory(destino);
                }

                process_glob.StartInfo.FileName = ffm;
                process_glob.StartInfo.Arguments = AppParam;
                valid_prog = false;

                //this.InvokeEx(f => f.pg_current.Value = 0);
                //this.InvokeEx(f => f.pg_current.Refresh());

                process_glob.StartInfo.RedirectStandardOutput = true;
                process_glob.StartInfo.RedirectStandardError = true;
                process_glob.StartInfo.RedirectStandardInput = true;
                process_glob.StartInfo.UseShellExecute = false;
                process_glob.StartInfo.CreateNoWindow = true;
                process_glob.EnableRaisingEvents = true;
                process_glob.Start();
                System.Threading.Thread.Sleep(50);
                combo_prio.Invoke(new MethodInvoker(delegate
                {
                    if (combo_prio.SelectedIndex != 2)
                    {
                        Change_mem_prio();
                    }

                }));

                if (total_duration > 0)
                {
                    valid_prog = true;
                }
                else
                {
                    valid_prog = false;
                }

                String err_txt = "";
                Double interval = 0;
                Decimal est_bitrate = 0;
                Decimal est_size = 0;
                Double sec_prog = 0;

                while (!process_glob.StandardError.EndOfStream)
                {
                    err_txt = process_glob.StandardError.ReadLine();
                    list_lines.Add(err_txt);

                    if (valid_prog == true)
                    {
                        if (err_txt.Contains("time=") && err_txt.Contains("time=-") == false)
                        {
                            total_prog = durat_n;
                            int start_time_index = err_txt.IndexOf("time=") + 5;
                            sec_prog = TimeSpan.Parse(err_txt.Substring(start_time_index, 8)).TotalSeconds;
                            Double percent = (sec_prog * 100 / durat_n);

                            total_prog = total_prog + (sec_prog - interval);
                            interval = sec_prog;
                            int percent2 = Convert.ToInt32(percent);

                            if (percent2 <= 100)
                            {
                                //this.InvokeEx(f => f.pg_current.Value = percent2);
                                //this.InvokeEx(f => f.//textBox4.Text = (percent2).ToString() + "%");

                                this.InvokeEx(f => f.Pg1.Value = percent2);
                                this.InvokeEx(f => f.Pg1.Refresh());
                                this.InvokeEx(f => TaskbarProgress.SetValue(this.Handle, percent2, Pg1.Maximum));
                                if (Math.Round(percent, 1).ToString().Contains(".") || Math.Round(percent, 1).ToString().Contains(","))
                                {
                                    this.InvokeEx(f => f.Pg1.Text = Math.Round(percent, 1).ToString() + "%");
                                }
                                else
                                {
                                    this.InvokeEx(f => f.Pg1.Text = Math.Round(percent, 1).ToString() + System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator + "0" + "%");
                                }
                                //this.InvokeEx(f => f.textBox5.Text = (percent2).ToString() + "%");
                            }

                            //Estimated remaining time

                            remain_time = err_txt.Substring(err_txt.LastIndexOf("speed=") + 6, err_txt.Length - err_txt.LastIndexOf("speed=") - 6);
                            if (time_est_size % 3 == 0) this.InvokeEx(f => f.lbl_speed.Text = "Speed: " + remain_time);
                            remain_time = remain_time.Replace("x", String.Empty);
                            Double timing1 = 0;

                            if (System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator == ",")
                            {
                                timing1 = Math.Round(Double.Parse(remain_time.Replace(".", ",")), 2);
                            }
                            else
                            {
                                timing1 = Math.Round(Double.Parse(remain_time), 2);
                            }
                            Decimal timing = (decimal)timing1;
                            Decimal total_dur_dec = Convert.ToDecimal(interval);
                            Decimal total_prog_dec = Convert.ToDecimal(total_prog);

                            Decimal remain_secs = 0;
                            if (timing > 0)
                            {
                                remain_secs = (decimal)(total_prog_dec - total_dur_dec) / timing;
                            }

                            if (remain_secs > 60)
                            {
                                remain_secs = remain_secs + 60;
                            }
                            String remain_from_secs = "";

                            TimeSpan t = TimeSpan.FromSeconds(Convert.ToDouble(remain_secs));
                            remain_from_secs = string.Format("{0:D2}h:{1:D2}",
                               t.Hours,
                              t.Minutes);

                            if (remain_secs >= 3600)
                            {
                                this.InvokeEx(f => f.txt_remain.Text = "Time remaining: " + remain_from_secs + " min");
                            }

                            if (remain_secs < 3600 && remain_secs >= 600)
                            {
                                this.InvokeEx(f => f.txt_remain.Text = "Time remaining: " + remain_from_secs.Substring(remain_from_secs.LastIndexOf(":") + 1, 2) + " minutes");
                            }
                            if (remain_secs < 600 && remain_secs >= 120)
                            {
                                this.InvokeEx(f => f.txt_remain.Text = "Time remaining: " + remain_from_secs.Substring(remain_from_secs.LastIndexOf(":") + 2, 1) + " minutes");
                            }

                            if (remain_secs <= 59)
                            {
                                this.InvokeEx(f => f.txt_remain.Text = "Time remaining: " + Convert.ToInt16(remain_secs) + " seconds");
                            }

                            //End remaining time
                        }
                    }

                    //Estimated size and bitrate

                    String read_size = String.Empty;
                    if (err_txt.Contains("size=") && (time_est_size % 3 == 0))
                    {
                        int size_index = err_txt.IndexOf("size=") + 5;
                        read_size = err_txt.Substring(size_index, 8);
                        try
                        {
                            est_bitrate = (Math.Round(Convert.ToDecimal(read_size) * 8 / Convert.ToDecimal(sec_prog), 0));
                        }
                        catch
                        {
                        }

                        try
                        {
                            if (Convert.ToDecimal(read_size) > 1 && time_n_tasks > 1)
                            {
                                if (est_bitrate < 9999)
                                {
                                    this.InvokeEx(f => f.lbl_bitrate.Text = "Avg. bitrate: " + est_bitrate + " Kb/s");
                                }
                                else
                                {
                                    this.InvokeEx(f => f.lbl_bitrate.Text = "Avg. bitrate: " + (Math.Round(est_bitrate / 1000, 0)) + " Mb/s");
                                }
                                //Estimated size
                                est_size = Convert.ToDecimal(durat_n) * est_bitrate / 8;

                                if (est_size > 1000000)
                                {
                                    this.InvokeEx(f => f.lbl_est_size.Text = "Estimated size: " + (Math.Round(est_size / 1000000, 1)).ToString() + " GB");
                                }
                                else
                                {
                                    this.InvokeEx(f => f.lbl_est_size.Text = "Estimated size: " + (Math.Round(est_size / 1000, 0)).ToString() + " MB");
                                }
                            }
                        }
                        catch
                        {
                        }

                        this.InvokeEx(f => f.lbl_est_size.Refresh());
                    }
                }
                process_glob.WaitForExit();
                process_glob.StartInfo.Arguments = String.Empty;
                timer_est_size.Stop();
                time_est_size = 0;
                this.InvokeEx(f => lbl_speed.Text = String.Empty);
                this.InvokeEx(f => f.lbl_est_size.Text = String.Empty);
                this.InvokeEx(f => f.lbl_bitrate.Text = String.Empty);

                //this.InvokeEx(f => f.pg_current.Value = 100);
                //this.InvokeEx(f => f.//textBox4.Text = "100%");
                list_lines.Add("");
                list_lines.Add("---------------------End of " + Path.GetFileName(file) + " log-------------------------------");
                list_lines.Add("");

                this.InvokeEx(f => f.Pg1.Value = 100);
                this.InvokeEx(f => f.Pg1.Text = "100%");
                working = false;
                //Save log
                if (no_save_logs == false)
                {
                    string[] array_err = list_lines.ToArray();
                    String path = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_batch.log";

                    System.IO.StreamWriter SaveFile = new System.IO.StreamWriter(path);
                    SaveFile.WriteLine("FFmpeg log sesion: " + System.DateTime.Now);
                    SaveFile.WriteLine("-------------------------------");
                    foreach (String item in array_err)
                    {
                        SaveFile.WriteLine(item);
                    }
                    SaveFile.Close();

                    File.AppendAllText(path, "-----------------------");
                    File.AppendAllText(path, Environment.NewLine + "END OF LOG FILE");
                    System.IO.FileInfo fileInfo = new System.IO.FileInfo(path);

                    var bytes = fileInfo.Length;

                    var kilobytes = (double)bytes / 1024;
                    var megabytes = kilobytes / 1024;
                    var gigabytes = megabytes / 1024;

                    //Format size view
                    String size = "";
                    String separator = ".";

                    if (bytes > 1000000000)
                    {
                        if (gigabytes.ToString().Contains("."))
                        {
                            separator = ".";
                        }
                        else
                        {
                            separator = ",";
                        }

                        String gigas = gigabytes.ToString();
                        if (gigas.Length >= 5)
                        {
                            gigas = gigas.Substring(0, gigas.LastIndexOf(separator) + 3);
                            size = (gigas + " GB");
                        }
                        else
                        {
                            size = (gigas + " GB");
                        }
                    }

                    if (bytes >= 1048576 && bytes <= 1000000000)
                    {
                        if (megabytes.ToString().Contains("."))
                        {
                            separator = ".";
                        }
                        else
                        {
                            separator = ",";
                        }
                        String megas = megabytes.ToString();
                        if (megas.Length > 5)
                        {
                            megas = megas.Substring(0, megas.LastIndexOf(separator));
                            size = (megas + " MB");
                        }
                        else
                        {
                            size = (megas + " MB");
                        }
                    }

                    if (bytes >= 1024 && bytes < 1048576)

                    {
                        if (kilobytes.ToString().Contains("."))
                        {
                            separator = ".";
                        }
                        else
                        {
                            separator = ",";
                        }

                        String kbs = kilobytes.ToString();
                        if (kbs.Length >= 5)
                        {
                            kbs = kbs.Substring(0, kbs.LastIndexOf(separator));
                            size = (kbs + " KB");
                        }
                        else
                        {
                            size = (kbs + " KB");
                        }
                    }
                    if (bytes > -1 && bytes < 1024)
                    {
                        String bits = bytes.ToString();
                        size = (bits + " Bytes");
                    }

                    //End Format size view
                    File.AppendAllText(path, Environment.NewLine + "LOG SIZE: " + size);

                    //End save log
                }

                Enable_Controls();
                this.InvokeEx(f => TaskbarProgress.SetState(this.Handle, TaskbarProgress.TaskbarStates.NoProgress));

                if (process_glob.ExitCode == 0 && cancel_queue == false)
                {
                    if (chkshut.Checked)
                    {
                        this.InvokeEx(f => f.groupBox2.Enabled = true);
                        foreach (Control ct in groupBox2.Controls)
                        {
                            this.InvokeEx(f => ct.Enabled = false);
                        }
                        auto_shut();
                        return;
                    }

                    //End shutdown check
                    else
                    {
                        if (play_on_end == true) play_end();
                        if (Form.ActiveForm == null)
                        {
                            notifyIcon1.Visible = true;
                            notifyIcon1.BalloonTipText = "FFmpeg Batch stream saving succesfully completed";
                            notifyIcon1.BalloonTipIcon = ToolTipIcon.Info;
                            notifyIcon1.BalloonTipTitle = "Stream saving completed";
                            notifyIcon1.ShowBalloonTip(0);                            
                        }

                        if (checkBox3.Checked)
                        {
                            if (Directory.GetFiles(destino).Length != 0)
                            {
                                Process open_processed = new Process();
                                open_processed.StartInfo.FileName = "explorer.exe";
                                open_processed.StartInfo.Arguments = '\u0022' + destino + '\u0022';
                                open_processed.Start();
                            }
                            else
                            {
                                if (Directory.Exists(destino))
                                {
                                    System.IO.Directory.Delete(destino);
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (process_glob.ExitCode == 0)
                    {
                        this.InvokeEx(f => f.Pg1.Text = "100%");
                        this.InvokeEx(f => MessageBox.Show("Stream saving aborted", "Aborted", MessageBoxButtons.OK, MessageBoxIcon.Error));
                    }
                    else
                    {
                        this.InvokeEx(f => f.Pg1.Text = "100%");
                        Boolean unsupported = false;
                        foreach (String lin in list_lines)
                        {
                            if (lin.Contains("Could not write header")) unsupported = true;
                        }
                        if (unsupported == true) this.InvokeEx(f => MessageBox.Show("An error ocurred: " + Environment.NewLine + Environment.NewLine + "Possibly incompatible container for selected track" + Environment.NewLine + Environment.NewLine + "You can check log file on main tab for more error information", "Error saving track", MessageBoxButtons.OK, MessageBoxIcon.Error));
                        else this.InvokeEx(f => MessageBox.Show("An error ocurred: " + Environment.NewLine + Environment.NewLine + err_txt.TrimStart() + Environment.NewLine + Environment.NewLine + "You can check log file on main tab for more error information", "Error saving track", MessageBoxButtons.OK, MessageBoxIcon.Error));
                    }
                }
            }).Start();
        }

        private void btn_help_Click(object sender, EventArgs e)
        {
            String ffm = System.IO.Path.Combine(Application.StartupPath, "FFmpeg_Batch_Quick_Guide.pdf");
            if (!File.Exists(ffm))
            {
                MessageBox.Show("File was not found. You may have to reinstall application.", "File not found", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            else
            {
                Process.Start(ffm);
            }
        }

        private void CB1_o_SelectedIndexChanged(object sender, EventArgs e)
        {
            audio_capture_device = CB1_o.SelectedItem.ToString();
            //throw new NotImplementedException();
        }

        private void boton_ok_path_Click(object sender, EventArgs e)
        {
            if (path_txt.Text == String.Empty)
            {
                MessageBox.Show("Path field is empty");
                return;
            }
            if (path_txt.Text.Substring(0, 1) == "\\")
            {
                MessageBox.Show("Please do not start with \\ characters");
                return;
            }

            if (path_txt.Text.Contains("¿") || path_txt.Text.Contains("?") || path_txt.Text.Contains(":") || path_txt.Text.Contains(".") || path_txt.Text.Contains("/") || path_txt.Text.Contains(">") || path_txt.Text.Contains(">") || path_txt.Text.Contains(",") || path_txt.Text.Contains("{") || path_txt.Text.Contains("}") || path_txt.Text.Contains("&") || path_txt.Text.Contains("%"))
            {
                MessageBox.Show("Invalid characters detected. Dots are not a valid character in this field");
                return;
            }

            txt_path_main.Text = ".\\" + path_txt.Text;
            txt_path_mux.Text = txt_path_main.Text;
            txt_path_main.BackColor = groupBox1.BackColor;
            //btn_reset_path.BackColor = groupBox1.BackColor;
            path_txt.Text = String.Empty;
            btn_save_path.Enabled = true;
            ActiveForm.Close();
        }

        private void path_txt_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                if (path_txt.Text == String.Empty)
                {
                    return;
                }
                if (path_txt.Text.Substring(0, 1) == "\\")
                {
                    MessageBox.Show("Please do not start with \\ characters");
                    return;
                }

                if (path_txt.Text.Contains("¿") || path_txt.Text.Contains("?") || path_txt.Text.Contains(":") || path_txt.Text.Contains(".") || path_txt.Text.Contains("/") || path_txt.Text.Contains(">") || path_txt.Text.Contains(">") || path_txt.Text.Contains(",") || path_txt.Text.Contains("{") || path_txt.Text.Contains("}") || path_txt.Text.Contains("&") || path_txt.Text.Contains("%"))
                {
                    MessageBox.Show("Invalid characters detected. Dots are not a valid character in this field");
                    return;
                }

                txt_path_main.Text = ".\\" + path_txt.Text;
                txt_path_mux.Text = txt_path_main.Text;
                txt_path_main.BackColor = groupBox1.BackColor;
                //btn_reset_path.BackColor = groupBox1.BackColor;
                path_txt.Text = String.Empty;
                btn_save_path.Enabled = true;
                ActiveForm.Close();
            }
        }

        private void boton_ok_audio_Click(object sender, EventArgs e)
        {
            prev_dev_audio = CB1_o.SelectedItem.ToString();
            ActiveForm.Close();
            abort_capture = false;

            //throw new NotImplementedException();
        }

        private void btn_wizard_Click(object sender, EventArgs e)
        {
            Pg1.Focus();
            String ffm = System.IO.Path.Combine(Application.StartupPath, "AeroWizard.dll");
            if (!File.Exists(ffm))
            {
                MessageBox.Show("AeroWizard.dll was not found in application path. Reinstalling the application should fix it.", "Required file not found", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }
            if (tabControl1.SelectedIndex != 0) tabControl1.SelectedIndex = 0;


            AeroWizard1 wizard1 = new AeroWizard1();
            wizard1.StartPosition = FormStartPosition.CenterScreen;

            if (listView1.Items.Count > 0)
            {
                if (listView1.SelectedIndices.Count == 1)
                {
                    wizard1.lv1_item = listView1.SelectedItems[0].SubItems[1].Text + "\\" + listView1.SelectedItems[0].Text;
                }
                else
                {
                    wizard1.lv1_item = listView1.Items[0].SubItems[1].Text + "\\" + listView1.Items[0].Text;
                }
            }
            wizard1.ShowDialog();
            if (wizard1.no_two == true) return;
            if (wizard1.wiz_two_pass == true)
            {
                this.Cursor = Cursors.WaitCursor;
                menu_two_pass_wizard.PerformClick();
                this.Cursor = Cursors.Arrow;
                return;
            }
            if (wizard1.w_images == true)
            {
                this.Cursor = Cursors.WaitCursor;
                menu_extract_images.PerformClick();
                this.Cursor = Cursors.Arrow;
                return;
            }

            if (wizard1.w_split == true)
            {
                this.Cursor = Cursors.WaitCursor;
                menu_split.PerformClick();
                this.Cursor = Cursors.Arrow;
                return;
            }
            if (wizard1.no_silence == true) return;
            if (wizard1.wiz_silence == true)
            {
                this.Cursor = Cursors.WaitCursor;
                this.Cursor = Cursors.Arrow;
                detect_silence();
                return;
            }

            if (wizard1.wiz_params != String.Empty)
            {
                combo_presets.Text = "New unsaved preset";
                txt_parameters.Text = wizard1.wiz_params;
                txt_format.Text = wizard1.wiz_ext;
            }
            if (wizard1.wiz_preset != String.Empty && wizard1.wiz_save_preset == true)
            {
                combo_presets.SelectedIndex = combo_presets.Items.Count - 1;
                txt_parameters.Text = wizard1.wiz_params;
                txt_format.Text = wizard1.wiz_ext;
                combo_presets.Text = wizard1.wiz_preset;
                btn_save_preset.PerformClick();
            }
        }

        private void txt_mux_type_Enter(object sender, EventArgs e)
        {
            txt_mux_type.Enabled = false;
            txt_mux_type.Enabled = true;
        }

        private void combo_def_und_lang_DropDown(object sender, EventArgs e)
        {
            combo_def_und_lang.SelectedIndex = 0;
        }

        private void ct3_combo_language_DropDown(object sender, EventArgs e)
        {
            ct3_combo_language.SelectedIndex = 0;
        }

        private void Combo_single_subs_lang_DropDown(object sender, EventArgs e)
        {
            Combo_single_subs_lang.SelectedIndex = 0;
        }

        private void BG_refresh_dur_DoWork(object sender, DoWorkEventArgs e)
        {
            canceled_file_adding = false;
            this.InvokeEx(f => f.listView1.BeginUpdate());
            this.InvokeEx(f => f.Disable_Controls());
            this.InvokeEx(f => f.btn_abort_all.Enabled = false);
            this.InvokeEx(f => f.groupBox10.Focus());
            this.InvokeEx(f => f.btn_cancel_add.Enabled = true);
            this.InvokeEx(f => f.btn_cancel_add.Visible = true);
            this.InvokeEx(f => f.btn_cancel_add.Refresh());
            this.InvokeEx(f => f.LB_Wait.Visible = true);
            this.InvokeEx(f => f.LB_Wait.Text = "Refreshing duration");
            this.InvokeEx(f => f.LB_Wait.Refresh());
            this.InvokeEx(f => f.pg_adding.Visible = true);
            this.InvokeEx(f => f.pg_adding.Value = 0);
            this.InvokeEx(f => f.txt_adding_p.Visible = true);
            this.InvokeEx(f => f.txt_adding_p.Refresh());
            this.InvokeEx(f => f.pg_adding.Maximum = listView1.Items.Count);

            Process probe = new Process();

            for (int i = 0; i < list_global_proc.Items.Count; i++)
            {
                if (canceled_file_adding == true) continue;

                this.InvokeEx(f => f.pg_adding.Value = pg_adding.Value + 1);
                this.InvokeEx(f => f.txt_adding_p.Text = (pg_adding.Value * 100 / list_global_proc.Items.Count + "%"));
                this.InvokeEx(f => f.txt_adding_p.Refresh());

                if (list_global_proc.Items[i].SubItems[3].Text == "Pending" || list_global_proc.Items[i].SubItems[3].Text == "N/A")
                {
                    probe.StartInfo.FileName = System.IO.Path.Combine(Application.StartupPath, "ffprobe.exe");
                    probe.StartInfo.Arguments = "-v error -show_entries format=duration -sexagesimal -of default=noprint_wrappers=1:nokey=1 " + " -i " + '\u0022' + list_global_proc.Items[i].Text + '\u0022';
                    probe.StartInfo.RedirectStandardOutput = true;
                    probe.StartInfo.UseShellExecute = false;
                    probe.StartInfo.CreateNoWindow = true;
                    probe.EnableRaisingEvents = true;
                    probe.Start();

                    String duracion = probe.StandardOutput.ReadLine();
                    probe.WaitForExit();

                    if (duracion != null)
                    {
                        if (duracion.Length >= 7)
                        {
                            this.InvokeEx(f => f.listView1.Items[i].SubItems[3].Text = duracion.Substring(0, 7));

                            if (duracion.Substring(0, 7) == "0:00:00")
                            {
                                this.InvokeEx(f => f.listView1.Items[i].BackColor = Color.LightGoldenrodYellow);
                            }
                        }
                        else
                        {
                            this.InvokeEx(f => f.listView1.Items[i].SubItems[3].Text = "N/A");
                            this.InvokeEx(f => f.listView1.Items[i].BackColor = Color.LightGoldenrodYellow);
                        }
                    }
                    else
                    {
                        this.InvokeEx(f => f.listView1.Items[i].SubItems[3].Text = "N/A");
                        this.InvokeEx(f => f.listView1.Items[i].BackColor = Color.LightGoldenrodYellow);
                    }
                }
            }

            this.InvokeEx(f => f.lbl_items.Text = listView1.Items.Count + " file(s)");
            this.InvokeEx(f => f.LB_Wait.Text = "");
            this.InvokeEx(f => f.txt_adding_p.Visible = false);
            this.InvokeEx(f => f.listView1.EndUpdate());
            this.InvokeEx(f => f.Enable_Controls());
            this.InvokeEx(f => f.chkshut.Enabled = true);
            this.InvokeEx(f => f.btn_pause.Enabled = true);
            this.InvokeEx(f => f.btn_cancel_add.Visible = false);
            this.InvokeEx(f => f.txt_adding_p.Text = "");
            this.InvokeEx(f => f.txt_adding_p.Visible = false);
            this.InvokeEx(f => f.lbl_items.Visible = true);
            this.InvokeEx(f => f.lbl_dur_list.Visible = true);
            this.InvokeEx(f => f.lbl_size.Visible = true);
            this.InvokeEx(f => f.pg_adding.Visible = false);
            this.InvokeEx(f => f.LB_Wait.Visible = false);
            this.InvokeEx(f => f.tabControl1.Enabled = true);
        }

        private void btn_edit_config_Click(object sender, EventArgs e)
        {
            Pg1.Focus();
            menu_settings.PerformClick();
        }

        private void combo_shut_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (combo_shut.SelectedIndex < 3) shut_type = combo_shut.SelectedItem.ToString();
            else
            {
                Form13 frm_run = new Form13();
                frm_run.ShowDialog();
                if (frm_run.cancel == false)
                {
                    run_command = frm_run.app_path;
                    run_command_args = frm_run.txt_args.Text;
                }
                else
                {
                    run_command = String.Empty;
                    run_command_args = frm_run.txt_args.Text;
                    combo_shut.SelectedIndex = 0;
                    chkshut.Checked = false;
                }
            }
            
        }

        private void fade_v_in_CheckedChanged(object sender, EventArgs e)
        {
            if (fade_v_in.CheckState == CheckState.Checked)
            {
                num_v_in.Enabled = true;
                combo_vin_col.Enabled = true;
                if (txt_parameters.Text.Contains("-c:v copy") || txt_parameters.Text.Contains("-vcodec copy") || txt_parameters.Text.Contains("-c copy"))
                {
                    MessageBox.Show("Fade in filter is not compatible with video stream copy");
                }
            }
            else
            {
                num_v_in.Enabled = false;
                combo_vin_col.Enabled = false;
            }
        }

        private void fade_v_out_CheckedChanged(object sender, EventArgs e)
        {
            if (fade_v_out.CheckState == CheckState.Checked)
            {
                num_v_out.Enabled = true;
                combo_vout_color.Enabled = true;
                if (txt_parameters.Text.Contains("-c:v copy") || txt_parameters.Text.Contains("-vcodec copy") || txt_parameters.Text.Contains("-c copy"))
                {
                    MessageBox.Show("Fade out filter is not compatible with video stream copy");
                }
                if (txt_parameters.Text.Contains("-vf") || txt_parameters.Text.Contains("-filter:v"))
                {
                    MessageBox.Show("Fade out filter is not compatible with other -vf video filters");
                }
            }
            else
            {
                num_v_out.Enabled = false;
                combo_vout_color.Enabled = false;
            }
        }

        private void fade_a_in_CheckedChanged(object sender, EventArgs e)
        {
            if (fade_a_in.CheckState == CheckState.Checked)
            {
                num_a_in.Enabled = true;
                if (txt_parameters.Text.Contains("-c:a copy") || txt_parameters.Text.Contains("-acodec copy") || txt_parameters.Text.Contains("-c copy"))
                {
                    MessageBox.Show("Fade in audio filter is not compatible with audio stream copy");
                }
            }
            else
            {
                num_a_in.Enabled = false;
            }
        }

        private void fade_a_out_CheckedChanged(object sender, EventArgs e)
        {
            if (fade_a_out.CheckState == CheckState.Checked)
            {
                num_a_out.Enabled = true;
                if (txt_parameters.Text.Contains("-c:a copy") || txt_parameters.Text.Contains("-acodec copy") || txt_parameters.Text.Contains("-c copy"))
                {
                    MessageBox.Show("Fade out audio filter is not compatible with audio stream copy");
                }
                if (txt_parameters.Text.Contains("-af") || txt_parameters.Text.Contains("-filter:a"))
                {
                    MessageBox.Show("Fade out audio filter is not compatible with other -af audio filters");
                }
            }
            else
            {
                num_a_out.Enabled = false;
            }
        }

        private void multiple_presets_Click(object sender, EventArgs e)
        {
            Pg1.Focus();
            if (!File.Exists(Path.Combine(Application.StartupPath, "ffmpeg.exe")))
            {
                MessageBox.Show("FFmpeg executable file was not found. Restart or reinstall application.", "Executable error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            String ffm = Path.Combine(Application.StartupPath, "AeroWizard.dll");
            if (!File.Exists(ffm))
            {
                MessageBox.Show("AeroWizard.dll was not found in application path. Reinstalling the application should fix it.", "Required file not found", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            if (listView1.Items.Count == 0)
            {
                MessageBox.Show("File list is empty", "No files to be processed", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            foreach (ListViewItem file2 in listView1.Items)
            {
                if (!File.Exists(file2.SubItems[1].Text + "\\" + file2.Text))
                {
                    MessageBox.Show("File was not found: " + file2.Text, "One file in the queue list was not found", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
            }
            String element = listView1.Items[0].SubItems[1].Text + "\\" + listView1.Items[0].Text;
            String is_overw = txt_path_main.Text + "\\" + Path.GetFileNameWithoutExtension(element) + "." + txt_format.Text;

            if (is_overw == element && chk_suffix.Checked == false)
            {
                MessageBox.Show("Overwriting is not supported. Change destination directory or enable " + '\u0022' + "Rename output" + '\u0022' + " checkbox.", "Overwriting not allowed", MessageBoxButtons.OK, MessageBoxIcon.Error);

                return;
            }
            DateTime time2;
            if (!DateTime.TryParse(ss_time_input.Text, out time2))
            {
                MessageBox.Show("Pre-input seeking format is incorrect. Change it or reset it by double-clicking on it", "Pre-input seeking format error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            if (ss_time_input.Text != "0:00:00")
            {
                foreach (ListViewItem item in listView1.Items)
                {
                    if (item.SubItems[3].Text != "N/A" && item.SubItems[3].Text != "0:00:00" && item.SubItems[3].Text != "00:00:00" && item.SubItems[3].Text != "Pending")
                    {
                        if (TimeSpan.Parse(item.SubItems[3].Text).TotalSeconds <= TimeSpan.Parse(ss_time_input.Text).TotalSeconds)
                        {
                            MessageBox.Show("Pre-input seeking exceeds duration of file: " + '\u0022' + Path.GetFileName(item.Text) + '\u0022', "Pre-input seeking error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            return;
                        }
                    }
                }
            }

            DateTime time;
            if (!DateTime.TryParse(ss_time_input.Text, out time))
            {
                MessageBox.Show("Pre-input seeking format is incorrect. Change it or reset it by double-clicking on it", "Pre-input seeking format error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            avoid_overw();

            //Check path is writable
            String destino1 = String.Empty;
            Boolean rel_path = false;
            if (txt_path_main.Text.Contains(".\\"))
            {
                destino1 = element.Substring(0, element.LastIndexOf('\\')) + txt_path_main.Text.Replace(".", String.Empty);
                rel_path = true;
            }
            else
            {
                if (checkBox1.CheckState == CheckState.Checked)
                {
                    String pre_dest = Path.GetDirectoryName(element);
                    destino1 = Path.Combine(txt_path_main.Text, pre_dest.Substring(3, pre_dest.Length - 3));
                    rel_path = true;
                }
                else
                {
                    destino1 = txt_path_main.Text;
                }
            }

            try
            {
                if (rel_path == true)
                {
                    Directory.CreateDirectory(destino1);
                    System.Threading.Thread.Sleep(25);
                }
                else
                {
                    File.WriteAllText(destino1 + "\\" + "FFBatch_test.txt", "FFBatch_test");
                    System.Threading.Thread.Sleep(25);
                    File.Delete(destino1 + "\\" + "FFBatch_test.txt");
                }
            }
            catch (System.Exception excpt)
            {
                MessageBox.Show("Write error: " + excpt.Message, "Error writing to destination folder", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }
            //End path is writable
            if (avoid_overwriting == true && txt_path_main.Text.Contains(".\\") == false && txt_path_main.Text.Length < 4 && checkBox1.CheckState != CheckState.Checked)
            {
                avoid_overwriting = false;
                DialogResult a2 = MessageBox.Show("Multiple folders to single output folder may lead to overwriting. You can enable " + '\u0022' + "Recreate source path" + '\u0022' + " to avoid opossible overwritings." + Environment.NewLine + Environment.NewLine + "Do you want to continue?", "Different input folders to single output folder", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2);
                if (a2 == DialogResult.No) return;
            }

            //pg_adding.Visible = true;
            //pg_adding.Value = 0;
            //pg_adding.Maximum = listView1.Items.Count;
            //LB_Wait.Visible = true;
            //txt_adding_p.Visible = true;

            //Avoid_overw overwritings
            if (dups_lv1() == true) return;

            //if (checkBox1.CheckState == CheckState.Checked)
            //{
            //    pg_adding.Maximum = listView1.Items.Count;
            //    for (int i = 0; i < listView1.Items.Count; i++)
            //    {
            //        LB_Wait.Text = "Matching file names";
            //        txt_adding_p.Text = (i * 100 / listView1.Items.Count).ToString() + "%";
            //        pg_adding.Value = i;
            //        LB_Wait.Refresh();
            //        txt_adding_p.Refresh();
            //        pg_adding.Refresh();

            //        for (int j = i + 1; j < listView1.Items.Count; j++)
            //        {
            //            if (Path.GetDirectoryName(listView1.Items[i].Text) + "\\" + Path.GetFileNameWithoutExtension(listView1.Items[i].Text) == Path.GetDirectoryName(listView1.Items[j].Text) + "\\" + Path.GetFileNameWithoutExtension(listView1.Items[j].Text))
            //            {
            //                LB_Wait.Text = String.Empty;
            //                LB_Wait.Text = String.Empty;
            //                pg_adding.Visible = false;
            //                txt_adding_p.Text = String.Empty;

            //                MessageBox.Show("The files: " + Environment.NewLine + Environment.NewLine + '\u0022' + Path.GetFileName(listView1.Items[i].Text) + '\u0022' + Environment.NewLine + '\u0022' + Path.GetFileName(listView1.Items[j].Text) + '\u0022' + Environment.NewLine + Environment.NewLine + "Have the same name and first one output will be overwritten. Please remove one of them." + Environment.NewLine + Environment.NewLine + "You can remove invalid no A/V items at Edit menu.", "Same filenames with different extension found", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            //                return;
            //            }
            //        }
            //    }
            //}
            //else
            //{
            //    for (int i = 0; i < listView1.Items.Count; i++)
            //    {
            //        for (int j = i + 1; j < listView1.Items.Count; j++)
            //        {
            //            if (Path.GetFileNameWithoutExtension(listView1.Items[i].Text) == Path.GetFileNameWithoutExtension(listView1.Items[j].Text))
            //            {
            //                LB_Wait.Text = String.Empty;
            //                LB_Wait.Text = String.Empty;
            //                pg_adding.Visible = false;
            //                txt_adding_p.Text = String.Empty;

            //                MessageBox.Show("The files: " + Environment.NewLine + Environment.NewLine + '\u0022' + Path.GetFileName(listView1.Items[i].Text) + '\u0022' + Environment.NewLine + '\u0022' + Path.GetFileName(listView1.Items[j].Text) + '\u0022' + Environment.NewLine + Environment.NewLine + "Have the same name and first one output will be overwritten. Please remove one of them." + Environment.NewLine + Environment.NewLine + "You can remove invalid no A/V items at Edit menu.", "Same filenames with different extension found", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            //                return;
            //            }
            //        }
            //    }
            //}

            //LB_Wait.Text = String.Empty;
            //LB_Wait.Visible = false;
            //pg_adding.Visible = false;
            //txt_adding_p.Text = String.Empty;

            //Wizard
            AeroWizard2 wizard2 = new AeroWizard2();
            wizard2.StartPosition = FormStartPosition.CenterScreen;
            wizard2.pr1_string = multi_pr1;
            wizard2.pr1_string_ext = multi_pr1_ext;
            wizard2.pr2_string = multi_pr2;
            wizard2.pr2_string_ext = multi_pr2_ext;
            wizard2.pr3_string = multi_pr3;
            wizard2.pr3_string_ext = multi_pr3_ext;
            wizard2.ShowDialog();
            Pg1.Text = "0" + System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator + "0%";
            if (wizard2.cancelled_w == true) return;
            n_multi_presets = wizard2.n_presets_w;
            multi_pr1 = wizard2.pr1_string;
            multi_pr1_ext = wizard2.pr1_string_ext;
            multi_pr2 = wizard2.pr2_string;
            multi_pr2_ext = wizard2.pr2_string_ext;
            multi_pr3 = wizard2.pr3_string;
            multi_pr3_ext = wizard2.pr3_string_ext;
            ren_multi = wizard2.rename_w;
            start_multiple();
        }


        private void BG_Try_multi_DoWork(object sender, DoWorkEventArgs e)
        {
            tried_ok = false;
            this.InvokeEx(f => this.Cursor = Cursors.WaitCursor);
            ListBox LB1_o = new ListBox();
            Process consola_pre = new Process();
            String file_prueba = "";
            String sel_test = "";
            this.InvokeEx(f => sel_test = listView1.SelectedItems[0].SubItems[1].Text + "\\" + listView1.SelectedItems[0].Text);
            file_prueba = sel_test;
            String destino_test = Path.GetTempPath() + "\\" + "FFBatch_test";
            Boolean bad_chars = false;
            Boolean unsupported = false;

            Task tt = Task.Run(() =>
            {
                String fichero = Path.GetFileName(file_prueba);

                if (!Directory.Exists(destino_test))
                {
                    try
                    {
                        Directory.CreateDirectory(destino_test);
                    }
                    catch (System.Exception excpt)
                    {
                        MessageBox.Show("Error: " + excpt.Message, "Error writing to folder", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        this.InvokeEx(f => this.Cursor = Cursors.Arrow);
                        return;
                    }
                }

                String ext_output = "." + multi_pr1_ext;
                textbox_params = multi_pr1;
                String file_prueba2 = file_prueba;

                if (textbox_params.Contains("%fn"))
                {
                    textbox_params = textbox_params.Replace("%fn", Path.GetFileNameWithoutExtension(file_prueba));
                }
                if (textbox_params.Contains("%fp"))
                {
                    textbox_params = textbox_params.Replace("%fp", Path.GetDirectoryName(file_prueba));
                }
                if (textbox_params.Contains("%fd"))
                {
                    var path = Path.GetFullPath(file_prueba);
                    var dirName = Path.GetFileName(Path.GetDirectoryName(path));
                    textbox_params = textbox_params.Replace("%fd", dirName);
                }

                if (textbox_params.Contains("%1"))
                {
                    if (file_prueba2.Contains("[") || file_prueba2.Contains("]"))
                    {
                        MessageBox.Show("Input file name contains characters [ ]. Please remove them from input file name to avoid errors with -vf filter", "Conflicting characters in file name", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        Enable_Controls();
                        this.InvokeEx(f => this.Cursor = Cursors.Arrow);
                        tried_ok = false;
                        bad_chars = true;
                        return;
                    }
                    file_prueba2 = file_prueba2.Replace("\\", "\\\\\\\\");
                    file_prueba2 = file_prueba2.Replace(":", "\\\\" + ":");
                    textbox_params = textbox_params.Replace("%1", file_prueba2);
                }

                consola_pre.StartInfo.FileName = "ffmpeg.exe";
                consola_pre.StartInfo.Arguments = hw_decode_glob + " -i " + "" + '\u0022' + file_prueba + '\u0022' + "" + " -y " + textbox_params + " " + '\u0022' + destino_test + "\\" + System.IO.Path.GetFileNameWithoutExtension(file_prueba) + ext_output + '\u0022';

                consola_pre.StartInfo.RedirectStandardOutput = true;
                consola_pre.StartInfo.RedirectStandardError = true;
                consola_pre.StartInfo.UseShellExecute = false;
                consola_pre.StartInfo.CreateNoWindow = true;
                consola_pre.EnableRaisingEvents = true;
                consola_pre.Start();

                while (!consola_pre.StandardError.EndOfStream)
                {
                    this.InvokeEx(f => LB1_o.Items.Add(consola_pre.StandardError.ReadLine()));
                    this.InvokeEx(f => LB1_o.TopIndex = LB1_o.Items.Count - 1);
                    this.InvokeEx(f => LB1_o.Refresh());
                }

                consola_pre.WaitForExit();
                consola_pre.StartInfo.Arguments = String.Empty;
            });

            if (!tt.Wait(675) && consola_pre.StartInfo.Arguments != String.Empty)
            {
                consola_pre.Kill();
                tried_ok = true;
                this.InvokeEx(f => this.Cursor = Cursors.Arrow);

                if (Directory.Exists(destino_test) && Directory.GetFiles(destino_test).Length > 0)
                {
                    foreach (String file in Directory.GetFiles(destino_test))
                    {
                        try
                        {
                            File.Delete(file);
                        }
                        catch
                        {
                        }
                    }
                }

                if (Directory.GetFiles(destino_test).Length == 0)
                {
                    System.IO.Directory.Delete(destino_test);
                }
                //tried_params.Add(multi_pr1);
                LB1_o.Items.Clear();
                return;
            }

            if (bad_chars == false)
            {
                if (consola_pre.ExitCode != 0)
                {
                    if (Directory.Exists(destino_test) && Directory.GetFiles(destino_test).Length > 0)
                    {
                        foreach (String file in Directory.GetFiles(destino_test))
                        {
                            try
                            {
                                File.Delete(file);
                            }
                            catch
                            {
                            }
                        }
                    }

                    if (Directory.GetFiles(destino_test).Length == 0)
                    {
                        System.IO.Directory.Delete(destino_test);
                    }

                    this.InvokeEx(f => this.Cursor = Cursors.Arrow);
                    foreach (String lin in LB1_o.Items)
                    {
                        if (lin.Contains("not load the requested plugin") || lin.Contains("Cannot load nvcuda.dll"))
                        {
                            unsupported = true;
                        }
                    }
                    if (unsupported == true) MessageBox.Show("Encoding test failed on selected file using preset 1: " + Environment.NewLine + Environment.NewLine + "Possibly unsupported encoder" + Environment.NewLine + Environment.NewLine + LB1_o.Items[LB1_o.Items.Count - 1].ToString() + Environment.NewLine + Environment.NewLine + "Try preset for more error information", "Encoding test failed", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    else MessageBox.Show("Encoding test failed on selected file using preset 1: " + Environment.NewLine + Environment.NewLine + LB1_o.Items[LB1_o.Items.Count - 1].ToString() + Environment.NewLine + Environment.NewLine + "Try preset for more error information", "Encoding test failed", MessageBoxButtons.OK, MessageBoxIcon.Error);

                    tried_ok = false;
                    return;
                }
                else
                {
                    System.Threading.Thread.Sleep(50);
                    if (Directory.Exists(destino_test) && Directory.GetFiles(destino_test).Length > 0)
                    {
                        foreach (String file in Directory.GetFiles(destino_test))
                        {
                            try
                            {
                                File.Delete(file);
                            }
                            catch
                            {
                            }
                        }
                    }

                    if (Directory.Exists(destino_test) && Directory.GetFiles(destino_test).Length == 0)
                    {
                        System.IO.Directory.Delete(destino_test);
                    }
                    //tried_params.Add(multi_pr1);
                    tried_ok = true;
                }
            }
            //END try preset

            LB1_o.Items.Clear();
            consola_pre.Dispose();
        }

        private void BG_Try_multi_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            String file_prueba = "";
            String sel_test = listView1.SelectedItems[0].SubItems[1].Text + "\\" + listView1.SelectedItems[0].Text;
            file_prueba = sel_test;
            String destino = Path.Combine(Path.GetTempPath(), "\\" + "FFBatch_test");
            String borrar = destino + "\\" + System.IO.Path.GetFileNameWithoutExtension(file_prueba) + "." + txt_format.Text;

            if (File.Exists(borrar))
            {
                try
                {
                    File.Delete(borrar);
                }
                catch
                {
                }
            }

            if (Directory.Exists(destino) == true)
            {
                if (Directory.GetFiles(destino).Length == 0)
                {
                    try
                    {
                        System.IO.Directory.Delete(destino);
                    }
                    catch { }
                }
            }
            if (tried_ok == true) bg_try_multi_2.RunWorkerAsync();
            else this.InvokeEx(f => this.Cursor = Cursors.Arrow);
        }

        private void bg_try_multi_2_DoWork(object sender, DoWorkEventArgs e)
        {
            tried_ok = false;
            this.InvokeEx(f => this.Cursor = Cursors.WaitCursor);
            ListBox LB1_o = new ListBox();
            Process consola_pre = new Process();
            String file_prueba = "";
            String sel_test = "";
            this.InvokeEx(f => sel_test = listView1.SelectedItems[0].SubItems[1].Text + "\\" + listView1.SelectedItems[0].Text);
            file_prueba = sel_test;
            String destino_test = Path.Combine(Path.GetTempPath(), "\\" + "FFBatch_test");
            Boolean bad_chars = false;
            Boolean unsupported = false;

            Task tt = Task.Run(() =>
            {
                String fichero = Path.GetFileName(file_prueba);

                if (!Directory.Exists(destino_test))
                {
                    try
                    {
                        Directory.CreateDirectory(destino_test);
                    }
                    catch (System.Exception excpt)
                    {
                        MessageBox.Show("Error: " + excpt.Message, "Error writing to folder", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        this.InvokeEx(f => this.Cursor = Cursors.Arrow);
                        return;
                    }
                }

                String ext_output = "." + multi_pr2_ext;

                textbox_params = multi_pr2;
                String file_prueba2 = file_prueba;

                if (textbox_params.Contains("%fn"))
                {
                    textbox_params = textbox_params.Replace("%fn", Path.GetFileNameWithoutExtension(file_prueba));
                }
                if (textbox_params.Contains("%fp"))
                {
                    textbox_params = textbox_params.Replace("%fp", Path.GetDirectoryName(file_prueba));
                }
                if (textbox_params.Contains("%fd"))
                {
                    var path2 = Path.GetFullPath(file_prueba);
                    var dirName = Path.GetFileName(Path.GetDirectoryName(path2));
                    textbox_params = textbox_params.Replace("%fd", dirName);
                }

                if (textbox_params.Contains("%1"))
                {
                    if (file_prueba2.Contains("[") || file_prueba2.Contains("]"))
                    {
                        MessageBox.Show("Input file name contains characters [ ]. Please remove them from input file name to avoid errors with -vf filter", "Conflicting characters in file name", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        Enable_Controls();
                        this.InvokeEx(f => this.Cursor = Cursors.Arrow);
                        tried_ok = false;
                        bad_chars = true;
                        return;
                    }
                    file_prueba2 = file_prueba2.Replace("\\", "\\\\\\\\");
                    file_prueba2 = file_prueba2.Replace(":", "\\\\" + ":");
                    textbox_params = textbox_params.Replace("%1", file_prueba2);
                }

                consola_pre.StartInfo.FileName = "ffmpeg.exe";
                consola_pre.StartInfo.Arguments = hw_decode_glob + " -i " + "" + '\u0022' + file_prueba + '\u0022' + "" + " -y " + textbox_params + " " + '\u0022' + destino_test + "\\" + System.IO.Path.GetFileNameWithoutExtension(file_prueba) + ext_output + '\u0022';
                consola_pre.StartInfo.RedirectStandardOutput = true;
                consola_pre.StartInfo.RedirectStandardError = true;
                consola_pre.StartInfo.UseShellExecute = false;
                consola_pre.StartInfo.CreateNoWindow = true;
                consola_pre.EnableRaisingEvents = true;
                consola_pre.Start();

                while (!consola_pre.StandardError.EndOfStream)
                {
                    this.InvokeEx(f => LB1_o.Items.Add(consola_pre.StandardError.ReadLine()));
                    this.InvokeEx(f => LB1_o.TopIndex = LB1_o.Items.Count - 1);
                    this.InvokeEx(f => LB1_o.Refresh());
                }

                consola_pre.WaitForExit();
                consola_pre.StartInfo.Arguments = String.Empty;
            });

            if (!tt.Wait(675) && consola_pre.StartInfo.Arguments != String.Empty)
            {
                consola_pre.Kill();
                tried_ok = true;

                if (Directory.Exists(destino_test) && Directory.GetFiles(destino_test).Length > 0)
                {
                    foreach (String file in Directory.GetFiles(destino_test))
                    {
                        try
                        {
                            File.Delete(file);
                        }
                        catch
                        {
                        }
                    }
                }

                if (Directory.GetFiles(destino_test).Length == 0)
                {
                    System.IO.Directory.Delete(destino_test);
                }

                tried_params.Add(multi_pr2);
                LB1_o.Items.Clear();
                return;
            }

            if (bad_chars == false)
            {
                if (consola_pre.ExitCode != 0)
                {
                    if (Directory.Exists(destino_test) && Directory.GetFiles(destino_test).Length > 0)
                    {
                        foreach (String file in Directory.GetFiles(destino_test))
                        {
                            try
                            {
                                File.Delete(file);
                            }
                            catch
                            {
                            }
                        }
                    }

                    if (Directory.GetFiles(destino_test).Length == 0)
                    {
                        System.IO.Directory.Delete(destino_test);
                    }

                    foreach (String lin in LB1_o.Items)
                    {
                        if (lin.Contains("not load the requested plugin") || lin.Contains("Cannot load nvcuda.dll"))
                        {
                            unsupported = true;
                        }
                    }
                    if (unsupported == true) MessageBox.Show("Encoding test failed on selected file using preset 2: " + Environment.NewLine + Environment.NewLine + "Possibly unsupported encoder" + Environment.NewLine + Environment.NewLine + LB1_o.Items[LB1_o.Items.Count - 1].ToString() + Environment.NewLine + Environment.NewLine + "Try preset for more error information", "Encoding test failed", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    else MessageBox.Show("Encoding test failed on selected file using preset 2: " + Environment.NewLine + Environment.NewLine + LB1_o.Items[LB1_o.Items.Count - 1].ToString() + Environment.NewLine + Environment.NewLine + "Try preset for more error information", "Encoding test failed", MessageBoxButtons.OK, MessageBoxIcon.Error);

                    this.InvokeEx(f => this.Cursor = Cursors.Arrow);
                    tried_ok = false;
                    return;
                }
                else
                {
                    System.Threading.Thread.Sleep(50);
                    if (Directory.Exists(destino_test) && Directory.GetFiles(destino_test).Length > 0)
                    {
                        foreach (String file in Directory.GetFiles(destino_test))
                        {
                            try
                            {
                                File.Delete(file);
                            }
                            catch
                            {
                            }
                        }
                    }

                    if (Directory.Exists(destino_test) && Directory.GetFiles(destino_test).Length == 0)
                    {
                        System.IO.Directory.Delete(destino_test);
                    }
                    tried_params.Add(multi_pr2);
                    tried_ok = true;
                }
            }
            //END try preset

            if (Directory.Exists(destino_test))
            {
                if (Directory.GetFiles(destino_test).Length == 0)
                {
                    System.IO.Directory.Delete(destino_test);
                }
            }
            LB1_o.Items.Clear();
            consola_pre.Dispose();
        }

        private void bg_try_multi_2_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            this.Cursor = Cursors.Arrow;
            String file_prueba = "";
            String sel_test = listView1.SelectedItems[0].SubItems[1].Text + "\\" + listView1.SelectedItems[0].Text;
            file_prueba = sel_test;
            String destino = Path.GetTempPath() + "\\" + "FFBatch_test";
            String borrar = destino + "\\" + System.IO.Path.GetFileNameWithoutExtension(file_prueba) + "." + txt_format.Text;

            if (File.Exists(borrar))
            {
                try
                {
                    File.Delete(borrar);
                }
                catch
                {
                }
            }

            if (Directory.Exists(destino) == true)
            {
                if (Directory.GetFiles(destino).Length == 0)
                {
                    System.IO.Directory.Delete(destino);
                }
            }
            if (tried_ok == true && n_multi_presets == 3) bg_multi_3.RunWorkerAsync();
            if (tried_ok == true && n_multi_presets == 2)
            {
                this.InvokeEx(f => this.Cursor = Cursors.Arrow);
                start_multiple();
            }
            else this.InvokeEx(f => this.Cursor = Cursors.Arrow);
        }

        private void bg_multi_3_DoWork(object sender, DoWorkEventArgs e)
        {
            tried_ok = false;
            this.InvokeEx(f => this.Cursor = Cursors.WaitCursor);
            ListBox LB1_o = new ListBox();
            Process consola_pre = new Process();
            String file_prueba = "";
            String sel_test = "";
            this.InvokeEx(f => sel_test = listView1.SelectedItems[0].SubItems[1].Text + "\\" + listView1.SelectedItems[0].Text);
            file_prueba = sel_test;
            String destino_test = Path.Combine(Path.GetTempPath(), "\\" + "FFBatch_test");
            Boolean bad_chars = false;
            Boolean unsupported = false;

            Task tt = Task.Run(() =>
            {
                String fichero = Path.GetFileName(file_prueba);

                if (!Directory.Exists(destino_test))
                {
                    try
                    {
                        Directory.CreateDirectory(destino_test);
                    }
                    catch (System.Exception excpt)
                    {
                        MessageBox.Show("Error: " + excpt.Message, "Error writing to folder", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        this.InvokeEx(f => this.Cursor = Cursors.Arrow);
                        return;
                    }
                }

                String ext_output = "." + multi_pr3_ext;

                textbox_params = multi_pr3;
                String file_prueba2 = file_prueba;

                if (textbox_params.Contains("%fn"))
                {
                    textbox_params = textbox_params.Replace("%fn", Path.GetFileNameWithoutExtension(file_prueba));
                }
                if (textbox_params.Contains("%fp"))
                {
                    textbox_params = textbox_params.Replace("%fp", Path.GetDirectoryName(file_prueba));
                }
                if (textbox_params.Contains("%fd"))
                {
                    var path = Path.GetFullPath(file_prueba);
                    var dirName = Path.GetFileName(Path.GetDirectoryName(path));
                    textbox_params = textbox_params.Replace("%fd", dirName);
                }

                if (textbox_params.Contains("%1"))
                {
                    if (file_prueba2.Contains("[") || file_prueba2.Contains("]"))
                    {
                        MessageBox.Show("Input file name contains characters [ ]. Please remove them from input file name to avoid errors with -vf filter", "Conflicting characters in file name", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        Enable_Controls();
                        this.InvokeEx(f => this.Cursor = Cursors.Arrow);
                        tried_ok = false;
                        bad_chars = true;
                        return;
                    }
                    file_prueba2 = file_prueba2.Replace("\\", "\\\\\\\\");
                    file_prueba2 = file_prueba2.Replace(":", "\\\\" + ":");
                    textbox_params = textbox_params.Replace("%1", file_prueba2);
                }

                consola_pre.StartInfo.FileName = "ffmpeg.exe";
                consola_pre.StartInfo.Arguments = hw_decode_glob + " -i " + "" + '\u0022' + file_prueba + '\u0022' + "" + " -y " + textbox_params + " " + '\u0022' + destino_test + "\\" + System.IO.Path.GetFileNameWithoutExtension(file_prueba) + ext_output + '\u0022';
                consola_pre.StartInfo.RedirectStandardOutput = true;
                consola_pre.StartInfo.RedirectStandardError = true;
                consola_pre.StartInfo.UseShellExecute = false;
                consola_pre.StartInfo.CreateNoWindow = true;
                consola_pre.EnableRaisingEvents = true;
                consola_pre.Start();

                while (!consola_pre.StandardError.EndOfStream)
                {
                    this.InvokeEx(f => LB1_o.Items.Add(consola_pre.StandardError.ReadLine()));
                    this.InvokeEx(f => LB1_o.TopIndex = LB1_o.Items.Count - 1);
                    this.InvokeEx(f => LB1_o.Refresh());
                }

                consola_pre.WaitForExit();
                consola_pre.StartInfo.Arguments = String.Empty;
            });

            if (!tt.Wait(675) && consola_pre.StartInfo.Arguments != String.Empty)
            {
                consola_pre.Kill();
                tried_ok = true;
                this.InvokeEx(f => this.Cursor = Cursors.Arrow);

                if (Directory.Exists(destino_test) && Directory.GetFiles(destino_test).Length > 0)
                {
                    foreach (String file in Directory.GetFiles(destino_test))
                    {
                        try
                        {
                            File.Delete(file);
                        }
                        catch
                        {
                        }
                    }
                }

                if (Directory.GetFiles(destino_test).Length == 0)
                {
                    System.IO.Directory.Delete(destino_test);
                }

                LB1_o.Items.Clear();
                return;
            }

            if (bad_chars == false)
            {
                if (consola_pre.ExitCode != 0)
                {
                    if (Directory.Exists(destino_test) && Directory.GetFiles(destino_test).Length > 0)
                    {
                        foreach (String file in Directory.GetFiles(destino_test))
                        {
                            try
                            {
                                File.Delete(file);
                            }
                            catch
                            {
                            }
                        }
                    }

                    if (Directory.GetFiles(destino_test).Length == 0)
                    {
                        System.IO.Directory.Delete(destino_test);
                    }

                    this.InvokeEx(f => this.Cursor = Cursors.Arrow);
                    foreach (String lin in LB1_o.Items)
                    {
                        if (lin.Contains("not load the requested plugin") || lin.Contains("Cannot load nvcuda.dll"))
                        {
                            unsupported = true;
                        }
                    }
                    if (unsupported == true) MessageBox.Show("Encoding test failed on selected file using preset 3: " + Environment.NewLine + Environment.NewLine + "Possibly unsupported encoder" + Environment.NewLine + Environment.NewLine + LB1_o.Items[LB1_o.Items.Count - 1].ToString() + Environment.NewLine + Environment.NewLine + "Try preset for more error information", "Encoding test failed", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    else MessageBox.Show("Encoding test failed on selected file using preset 3: " + Environment.NewLine + Environment.NewLine + LB1_o.Items[LB1_o.Items.Count - 1].ToString() + Environment.NewLine + Environment.NewLine + "Try preset for more error information", "Encoding test failed", MessageBoxButtons.OK, MessageBoxIcon.Error);

                    tried_ok = false;
                    return;
                }
                else
                {
                    System.Threading.Thread.Sleep(50);
                    if (Directory.Exists(destino_test) && Directory.GetFiles(destino_test).Length > 0)
                    {
                        foreach (String file in Directory.GetFiles(destino_test))
                        {
                            try
                            {
                                File.Delete(file);
                            }
                            catch
                            {
                            }
                        }
                    }

                    if (Directory.Exists(destino_test) && Directory.GetFiles(destino_test).Length == 0)
                    {
                        System.IO.Directory.Delete(destino_test);
                    }

                    tried_ok = true;
                }
            }
            //END try preset

            if (Directory.Exists(destino_test))
            {
                if (Directory.GetFiles(destino_test).Length == 0)
                {
                    System.IO.Directory.Delete(destino_test);
                }
            }
            LB1_o.Items.Clear();
            consola_pre.Dispose();
        }

        private void bg_multi_3_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            String file_prueba = "";
            String sel_test = listView1.SelectedItems[0].SubItems[1].Text + "\\" + listView1.SelectedItems[0].Text;
            file_prueba = sel_test;
            String destino = Path.Combine(Path.GetTempPath(), "\\" + "FFBatch_test");
            String borrar = destino + "\\" + System.IO.Path.GetFileNameWithoutExtension(file_prueba) + "." + txt_format.Text;

            if (File.Exists(borrar))
            {
                try
                {
                    File.Delete(borrar);
                }
                catch
                {
                }
            }

            if (Directory.Exists(destino) == true)
            {
                if (Directory.GetFiles(destino).Length == 0)
                {
                    System.IO.Directory.Delete(destino);
                }
            }
            if (tried_ok == true) start_multiple();
            else this.InvokeEx(f => this.Cursor = Cursors.Arrow);
        }

        private void btn_concat_Click(object sender, EventArgs e)
        {
            Pg1.Focus();
            Pg1.Text = "0" + System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator + "0%";
            if (!File.Exists(Path.Combine(Application.StartupPath, "ffmpeg.exe")))
            {
                MessageBox.Show("FFmpeg executable file was not found. Restart or reinstall application.", "Executable error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }
            if (!File.Exists(Path.Combine(Application.StartupPath, "ffprobe.exe")))
            {
                MessageBox.Show("FFprobe executable file was not found. Restart or reinstall application.", "Executable error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }
            was_started.Text = btn_concat.Text;
            foreach (ListViewItem file in listView1.Items)
            {
                if (!File.Exists(file.SubItems[1].Text + "\\" + file.Text))
                {
                    MessageBox.Show("File was not found: " + file.Text, "One file in the queue list was not found", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
            }

            if (listView1.Items.Count < 2)
            {
                MessageBox.Show("You need to add at least two files to concatenate.", "Add files to queue list", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }
            if (txt_parameters.Text == "" && check_concat.CheckState == CheckState.Unchecked)
            {
                MessageBox.Show("Parameters field can not be empty", "Parameters error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            if (txt_format.Text == "")
            {
                MessageBox.Show("Format field can not be empty, please add a file format extension", "Parameters error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            if (chk_shift.Checked == true)
            {
                MessageBox.Show("Shifting audio is not available for concatenation", "Shifting audio not allowed", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            if (chkshut.Checked)
            {
                TB1.Visible = true;
                TB1.Text = "Automatic shutdown disabled for concatenating.";
            }

            //Check path is writable
            String destino1 = String.Empty;
            Boolean rel_path = false;
            String element = listView1.Items[0].SubItems[1].Text + "\\" + listView1.Items[0].Text;
            if (txt_path_main.Text.Contains(".\\"))
            {
                destino1 = element.Substring(0, element.LastIndexOf('\\')) + txt_path_main.Text.Replace(".", String.Empty);
                rel_path = true;
            }
            else
            {
                if (checkBox1.CheckState == CheckState.Checked)
                {
                    String pre_dest = Path.GetDirectoryName(element);
                    destino1 = Path.Combine(txt_path_main.Text, pre_dest.Substring(3, pre_dest.Length - 3));
                    rel_path = true;
                }
                else
                {
                    destino1 = txt_path_main.Text;
                }
            }

            try
            {
                if (rel_path == true)
                {
                    Directory.CreateDirectory(destino1);
                    System.Threading.Thread.Sleep(10);
                }
                else
                {
                    if (!Directory.Exists(destino1)) Directory.CreateDirectory(destino1);
                    File.WriteAllText(destino1 + "\\" + "FFBatch_test.txt", "FFBatch_test");
                    System.Threading.Thread.Sleep(10);
                    File.Delete(destino1 + "\\" + "FFBatch_test.txt");
                }
            }
            catch (System.Exception excpt)
            {
                MessageBox.Show("Write error: " + excpt.Message, "Error writing to destination folder", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            //End path is writable

            //Pending duration

            if (dur_ok == false)
            {
                list_pending_dur.Items.Clear();
                foreach (ListViewItem item in listView1.Items)
                {
                    list_pending_dur.Items.Add((ListViewItem)item.Clone());
                }
                BG_Dur.RunWorkerAsync();
                return;
            }
            String img = listView1.Items[0].Text.Substring(listView1.Items[0].Text.LastIndexOf(".") + 1, 3);
            String img_aud = String.Empty;
            if (img == "jpg" || img == "jpeg" || img == "png" || img == "gif")
            {
                DialogResult a = MessageBox.Show("Images were found on file list. Do you want to join image files to video?", "Image detected for concatenation", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question);
                    if (a == DialogResult.Yes) images_v = true;
                if (a == DialogResult.No) return;
                if (a == DialogResult.Cancel) return;
            }            
            if (images_v == true)
            {
                Form18 frm18 = new Form18();
                frm18.ShowDialog();
                if (frm18.canceled == false)
                {
                    images_time = frm18.numericUpDown1.Value.ToString();
                    if (frm18.txt_audio_path.Enabled == true) img_aud = frm18.txt_audio_path.Text;
                }
                else images_v = false;
            }
            
            Disable_Controls();
            txt_remain.Text = "Time remaining: 00h:00m:00s";
            time_n_tasks = 0;
            timer_tasks.Start();
            cancel_queue = false;
            Pg1.Value = 0;
            //pg_current.Value = 0;
            Pg1.Text = "0" + System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator + "0%";
            notifyIcon1.Visible = true;

            working = true;

            String ffm = System.IO.Path.Combine(Application.StartupPath, "ffmpeg.exe");

            Pg1.Value = 0;

            String primero_lista = element;

            String destino = "";
            if (txt_path_main.Text.Contains(".\\"))
            {
                destino = primero_lista.Substring(0, primero_lista.LastIndexOf('\\')) + txt_path_main.Text.Replace(".", String.Empty); ;
            }
            else
            {
                destino = txt_path_main.Text;
            }

            if (!Directory.Exists(destino))
            {
                try
                {
                    Directory.CreateDirectory(destino);
                }
                catch (System.Exception excpt)
                {
                    MessageBox.Show("Error: " + excpt.Message, "Error writing to folder", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    this.Cursor = Cursors.Arrow;
                    Enable_Controls();
                    working = false;
                    return;
                }
            }

            var lista_concat = new String[listView1.Items.Count];
            int i = 0;
            ListView list_proc = new ListView();
            foreach (ListViewItem item in listView1.Items)
            {
                list_proc.Items.Add((ListViewItem)item.Clone());
                item.SubItems[5].Text = "Queued";
                item.UseItemStyleForSubItems = true;
                item.BackColor = Color.White;
                item.SubItems[5].BackColor = Color.White;
            }

            listView1.SelectedIndices.Clear();
            Double total_duration = 0;
            int i_dur = 0;

            //Get total duration of files
            foreach (ListViewItem item in listView1.Items)
            {
                if (listView1.Items[i_dur].SubItems[3].Text != "N/A" && listView1.Items[i_dur].SubItems[3].Text != "0:00:00" && listView1.Items[i_dur].SubItems[3].Text != "00:00:00" && listView1.Items[i_dur].SubItems[3].Text != "Pending")
                {
                    total_duration = total_duration + TimeSpan.Parse(listView1.Items[i_dur].SubItems[3].Text).TotalSeconds;
                }
                else
                {
                    total_duration = total_duration + 0;
                }

                i_dur = i_dur + 1;
            }
            //End get total duration of files

            Pg1.Maximum = 100;
            foreach (ListViewItem item in listView1.Items)
            {
                item.SubItems[5].Text = "Processing";
            }

            //End total duration

            List<string> list_lines = new List<string>();
            process_glob.StartInfo.Arguments = String.Empty;
            String concat_name = Path.GetFileNameWithoutExtension(element);

            new System.Threading.Thread(() =>
            {
                System.Threading.Thread.CurrentThread.IsBackground = true;

                String remain_time = "";

                String path = String.Empty;
                String inputs = String.Empty;

                if (images_v == false)
                {
                    foreach (ListViewItem item in list_proc.Items)
                    {
                        String file = item.SubItems[1].Text + "\\" + item.Text;
                        //Aborted requested
                        if (cancel_queue == true)
                        {
                            working = false;
                            this.InvokeEx(f => TaskbarProgress.SetState(this.Handle, TaskbarProgress.TaskbarStates.NoProgress));
                            this.InvokeEx(f => f.Pg1.Value = 0);
                            //this.InvokeEx(f => f.pg_current.Value = 0);
                            Enable_Controls();
                            MessageBox.Show("Queue processing aborted", "Tasks aborted", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                            return;
                        }

                        if (check_concat.CheckState == CheckState.Unchecked)
                        {
                            if (file.Contains(" "))
                            {
                                lista_concat[i] = "file " + "'" + file + "'";
                                i = i + 1;
                            }

                            else
                            {
                                lista_concat[i] = "file " + "'" + file.Replace("\\", "\\\\") + "'";
                                i = i + 1;
                            }

                            path = System.IO.Path.Combine(Path.GetTempPath(), "concat.txt");
                        }
                        else
                        {
                            inputs = inputs + " -i " + '\u0022' + file + '\u0022';
                        }
                    }
                }
                if (images_v == true)
                {
                    for (int i1 = 0; i1 < list_proc.Items.Count; i1++)
                    {
                        String file = list_proc.Items[i1].SubItems[1].Text + "\\" + list_proc.Items[i1].Text;
                        //Aborted requested
                        if (cancel_queue == true)
                        {
                            working = false;
                            this.InvokeEx(f => TaskbarProgress.SetState(this.Handle, TaskbarProgress.TaskbarStates.NoProgress));
                            this.InvokeEx(f => f.Pg1.Value = 0);
                            //this.InvokeEx(f => f.pg_current.Value = 0);
                            Enable_Controls();
                            MessageBox.Show("Queue processing aborted", "Tasks aborted", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                            return;
                        }

                        if (check_concat.CheckState == CheckState.Unchecked)
                        {
                            if (file.Contains(" "))
                            {
                                lista_concat[i1] = "file " + "'" + file + "'" + Environment.NewLine + "duration " + images_time;
                                if (i1 == list_proc.Items.Count - 1) lista_concat[i1] = lista_concat[i1] + Environment.NewLine + "file " + "'" + file + "'";


                            }
                            else
                            {
                                lista_concat[i1] = "file " + "'" + file.Replace("\\", "\\\\") + "'" + Environment.NewLine + "duration " + images_time;
                                if (i1 == list_proc.Items.Count - 1) lista_concat[i1] = lista_concat[i1] + Environment.NewLine + "file " + "'" + file.Replace("\\", "\\\\") + "'";

                            }

                            path = System.IO.Path.Combine(Path.GetTempPath(), "concat.txt");
                        }
                        else
                        {
                            inputs = inputs + " -i " + '\u0022' + file + '\u0022';
                        }
                    }                    
                }
            
             //   foreach (String ln in lista_concat) MessageBox.Show(ln);
            //Array.Resize(ref lista_concat, lista_concat.Length - 1);
                
                try
                {
                    File.WriteAllLines(path, lista_concat);
                }
                catch (Exception exc)
                {
                    MessageBox.Show("There was an error creating the intermediate concatenation file." + Environment.NewLine + Environment.NewLine + exc.Message);
                    working = false;
                    Enable_Controls();
                    return;
                }

                //Change Volume
                String change_vol = "";
            if (chk_vol.Checked == true)
            {
                change_vol = "-filter:a " + '\u0022' + "volume=" + vol_ch.Value.ToString() + "dB " + '\u0022' + " ";
            }
            //End change volume
            String AppParam = String.Empty;
            if (check_concat.CheckState == CheckState.Unchecked)
            {
                if (img_aud == String.Empty) AppParam = " -f concat -safe 0 -i " + '\u0022' + path + '\u0022' + " " + txt_parameters.Text + " " + " -y " + change_vol + '\u0022' + destino + "\\" + concat_name + "_joined" + "." + txt_format.Text + '\u0022';
                else AppParam = " -f concat -safe 0 -i " + '\u0022' + path + '\u0022' + " " +  "-i " + '\u0022' + img_aud + '\u0022' + " " + txt_parameters.Text + " " + " -y " + change_vol + '\u0022' + destino + "\\" + concat_name + "_joined" + "." + txt_format.Text + '\u0022';
                }
            else
            {
                AppParam = inputs + " -filter_complex " + '\u0022' + "concat=n=" + list_proc.Items.Count + ":v=1:a=1" + '\u0022' + " " + txt_parameters.Text + " " + " -y " + change_vol + '\u0022' + destino + "\\" + concat_name + "_joined" + "." + txt_format.Text + '\u0022';
            }

            process_glob.StartInfo.FileName = ffm;
            process_glob.StartInfo.Arguments = AppParam;
            process_glob.StartInfo.RedirectStandardOutput = true;
            process_glob.StartInfo.RedirectStandardError = true;
            process_glob.StartInfo.RedirectStandardInput = true;
            process_glob.StartInfo.UseShellExecute = false;
            process_glob.StartInfo.CreateNoWindow = true;
            process_glob.EnableRaisingEvents = true;

            valid_prog = false;

            //this.InvokeEx(f => f.pg_current.Value = 0);

            process_glob.Start();
            System.Threading.Thread.Sleep(50);
            combo_prio.Invoke(new MethodInvoker(delegate
            {
                if (combo_prio.SelectedIndex != 2)
                {
                    Change_mem_prio();
                }

            }));

            String err_txt = "";

            while (!process_glob.StandardError.EndOfStream)
            {
                err_txt = process_glob.StandardError.ReadLine();
                list_lines.Add(err_txt);
                    int percent2 = 0;
                if (err_txt.Contains("time=") && err_txt.Contains("time=-") == false && images_v == false)
                {
                    int start_time_index = err_txt.IndexOf("time=") + 5;
                    Double sec_prog = TimeSpan.Parse(err_txt.Substring(start_time_index, 8)).TotalSeconds;
                    Double percent = (sec_prog * 100 / total_duration);
                        try
                        {
                            percent2 = Convert.ToInt32(percent);
                        }
                        catch
                        {
                            percent2 = 0;
                        }

                    if (percent2 <= 100)
                    {
                        this.InvokeEx(f => f.Pg1.Text = (percent2).ToString() + "%");
                        this.InvokeEx(f => f.Pg1.Value = percent2);
                        this.InvokeEx(f => f.Pg1.Refresh());
                        this.InvokeEx(f => TaskbarProgress.SetValue(this.Handle, percent2, Pg1.Maximum));
                    }
                    //Estimated remaining time

                    remain_time = err_txt.Substring(err_txt.LastIndexOf("speed=") + 6, err_txt.Length - err_txt.LastIndexOf("speed=") - 6);
                    remain_time = remain_time.Replace("x", String.Empty);
                    Double timing1 = 0;

                    if (System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator == ",")
                    {
                        timing1 = Math.Round(Double.Parse(remain_time.Replace(".", ",")), 2);
                    }
                    else
                    {
                        timing1 = Math.Round(Double.Parse(remain_time), 2);
                    }
                    Decimal timing = (decimal)timing1;
                    Decimal total_dur_dec = Convert.ToDecimal(total_duration);
                    Decimal total_prog_dec = Convert.ToDecimal(sec_prog);
                    Decimal remain_secs = 0;
                    if (timing > 0)
                    {
                        remain_secs = (decimal)(total_dur_dec - total_prog_dec) / timing;
                    }

                    if (remain_secs > 60)
                    {
                        remain_secs = remain_secs + 60;
                    }
                    String remain_from_secs = "";

                    TimeSpan t = TimeSpan.FromSeconds(Convert.ToDouble(remain_secs));
                    remain_from_secs = string.Format("{0:D2}h:{1:D2}",
                       t.Hours,
                      t.Minutes);

                    if (remain_secs >= 3600)
                    {
                        this.InvokeEx(f => f.txt_remain.Text = "Time remaining: " + remain_from_secs + " min");
                    }

                    if (remain_secs < 3600 && remain_secs >= 600)
                    {
                        this.InvokeEx(f => f.txt_remain.Text = "Time remaining: " + remain_from_secs.Substring(remain_from_secs.LastIndexOf(":") + 1, 2) + " minutes");
                    }
                    if (remain_secs < 600 && remain_secs >= 120)
                    {
                        this.InvokeEx(f => f.txt_remain.Text = "Time remaining: " + remain_from_secs.Substring(remain_from_secs.LastIndexOf(":") + 2, 1) + " minutes");
                    }

                    if (remain_secs <= 59)
                    {
                        this.InvokeEx(f => f.txt_remain.Text = "Time remaining: " + Convert.ToInt16(remain_secs) + " seconds");
                    }

                    //End remaining time
                }

                //Read output, get progress
            }
            process_glob.WaitForExit();
            process_glob.StartInfo.Arguments = String.Empty;
            this.InvokeEx(f => TaskbarProgress.SetState(this.Handle, TaskbarProgress.TaskbarStates.NoProgress));
            list_lines.Add("");

            if (process_glob.ExitCode == 0)
            {
                foreach (ListViewItem item in list_proc.Items)
                {
                    this.InvokeEx(f => f.listView1.Items[item.Index].SubItems[5].Text = "Success");
                }
                working = false;
                Enable_Controls();

                    if (play_on_end == true) play_end();
                    if (Form.ActiveForm == null)
                    {
                        notifyIcon1.BalloonTipText = "FFmpeg Batch concatenation successfully completed";
                        notifyIcon1.BalloonTipIcon = ToolTipIcon.Info;
                        notifyIcon1.BalloonTipTitle = "Concatenation complete";
                        notifyIcon1.ShowBalloonTip(0);                        
                    }
                        

                    if (checkBox3.Checked)
                    {
                        if (Directory.GetFiles(destino).Length != 0)
                        {
                            Process open_processed = new Process();
                            open_processed.StartInfo.FileName = "explorer.exe";
                            open_processed.StartInfo.Arguments = '\u0022' + destino + '\u0022';
                            open_processed.Start();
                        }
                        else
                        {
                            if (Directory.Exists(destino))
                            {
                                System.IO.Directory.Delete(destino);
                            }
                        }
                    }
                }
                else
                {
                    working = false;
                    Enable_Controls();
                    if (Directory.GetFiles(destino).Length == 0)
                    {
                        if (Directory.Exists(destino))
                        {
                            System.IO.Directory.Delete(destino);
                        }
                    }
                    if (cancel_queue == true)
                    {
                        foreach (ListViewItem item in list_proc.Items)
                        {
                            this.InvokeEx(f => f.listView1.Items[item.Index].SubItems[5].Text = "Aborted");
                        }
                        MessageBox.Show("Concatenation aborted by user", "Concatenation Aborted", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                    else
                    {
                        foreach (ListViewItem item in list_proc.Items)
                        {
                            this.InvokeEx(f => f.listView1.Items[item.Index].SubItems[5].Text = "Error");
                        }

                        MessageBox.Show("Concatenation failed. Check output error below. Some characters in filenames can also cause errors." + Environment.NewLine + Environment.NewLine + '\u0022' + list_lines[list_lines.Count - 2] + '\u0022', "Concatenation failed", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }

                //Save log
                string[] array_err = list_lines.ToArray();
                String path_l = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_batch.log";

                System.IO.StreamWriter SaveFile = new System.IO.StreamWriter(path_l);
                SaveFile.WriteLine("FFmpeg log session: " + System.DateTime.Now);
                SaveFile.WriteLine("-------------------------------");
                foreach (String item in array_err)
                {
                    SaveFile.WriteLine(item);
                }
                SaveFile.Close();

                File.AppendAllText(path_l, "-----------------------");
                File.AppendAllText(path_l, Environment.NewLine + "END OF LOG FILE" + Environment.NewLine);
                System.IO.FileInfo fileInfo = new System.IO.FileInfo(path_l);

                var bytes = fileInfo.Length;

                var kilobytes = (double)bytes / 1024;
                var megabytes = kilobytes / 1024;
                var gigabytes = megabytes / 1024;

                //Format size view
                String size = "";
                String separator = ".";

                if (bytes > 1000000000)
                {
                    if (gigabytes.ToString().Contains("."))
                    {
                        separator = ".";
                    }
                    else
                    {
                        separator = ",";
                    }

                    String gigas = gigabytes.ToString();
                    if (gigas.Length >= 5)
                    {
                        gigas = gigas.Substring(0, gigas.LastIndexOf(separator) + 3);
                        size = (gigas + " GB");
                    }
                    else
                    {
                        size = (gigas + " GB");
                    }
                }

                if (bytes >= 1048576 && bytes <= 1000000000)
                {
                    if (megabytes.ToString().Contains("."))
                    {
                        separator = ".";
                    }
                    else
                    {
                        separator = ",";
                    }
                    String megas = megabytes.ToString();
                    if (megas.Length > 5)
                    {
                        megas = megas.Substring(0, megas.LastIndexOf(separator));
                        size = (megas + " MB");
                    }
                    else
                    {
                        size = (megas + " MB");
                    }
                }

                if (bytes >= 1024 && bytes < 1048576)

                {
                    if (kilobytes.ToString().Contains("."))
                    {
                        separator = ".";
                    }
                    else
                    {
                        separator = ",";
                    }

                    String kbs = kilobytes.ToString();
                    if (kbs.Length >= 5)
                    {
                        kbs = kbs.Substring(0, kbs.LastIndexOf(separator));
                        size = (kbs + " KB");
                    }
                    else
                    {
                        size = (kbs + " KB");
                    }
                }
                if (bytes > -1 && bytes < 1024)
                {
                    String bits = bytes.ToString();
                    size = (bits + " Bytes");
                }

                //End Format size view
                File.AppendAllText(path_l, Environment.NewLine + "LOG SIZE: " + size);

                //End save log

                if (File.Exists(System.IO.Path.Combine(Path.GetTempPath(), "concat.txt")))
                {
                    try
                    {
                        File.Delete(System.IO.Path.Combine(Path.GetTempPath(), "concat.txt"));
                    }
                    catch { }
                    
                }
                if (chkshut.Checked)
                {
                    auto_shut();
                    return;
                }

                Enable_Controls();
            }).Start();
        }

        private void play_end()
        {
                try
                {
                    Task t = Task.Run(() =>
                    {
                        soundPlayer.SoundLocation = play_file_path;
                        soundPlayer.Play();
                        Thread.Sleep(8000);
                        soundPlayer.Stop();
                    });
                }
                catch { }           
        }

        private void chk_no_sleep_CheckedChanged(object sender, EventArgs e)
        {
            Pg1.Focus();
            String f_sleep = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_sleep.ini";

            if (chk_no_sleep.Checked == false)
            {
                chk_no_sleep.ImageIndex = 2;
                groupBox10.Focus();
                NativeMethods.SetThreadExecutionState(EXECUTION_STATE.ES_CONTINUOUS);
                Timer_idle.Stop();
                if (File.Exists(f_sleep))
                {
                    try
                    {
                        File.Delete(f_sleep);
                    }
                    catch
                    {
                        MessageBox.Show("An error occurred while trying to save sleep option", "Error saving option", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
            }
            else
            {
                chk_no_sleep.ImageIndex = 3;
                NativeMethods.SetThreadExecutionState(EXECUTION_STATE.ES_CONTINUOUS | EXECUTION_STATE.ES_AWAYMODE_REQUIRED);
                Timer_idle.Start();
                if (!File.Exists(f_sleep))
                {
                    try
                    {
                        File.WriteAllText(f_sleep, String.Empty);
                    }
                    catch
                    {
                        MessageBox.Show("An error occurred while trying to save sleep option", "Error saving option", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
            }
        }

        private void Timer_idle_Tick(object sender, EventArgs e)
        {
            NativeMethods.SetThreadExecutionState(EXECUTION_STATE.ES_CONTINUOUS | EXECUTION_STATE.ES_AWAYMODE_REQUIRED);
        }

        private void button7_Click_2(object sender, EventArgs e)
        {
            Pg1.Focus();
            Form frm_custom_path = new Form();
            frm_custom_path.Icon = this.Icon;

            frm_custom_path.Height = 141;
            frm_custom_path.Width = 418;
            frm_custom_path.FormBorderStyle = FormBorderStyle.Fixed3D;
            frm_custom_path.MaximizeBox = false;
            frm_custom_path.MinimizeBox = false;
            frm_custom_path.Text = "Custom relative path";

            Label texto = new Label();
            texto.Top = 14;
            texto.Height = 20;
            texto.Left = 45;
            texto.Width = 200;
            texto.Parent = frm_custom_path;
            texto.Text = "Write below your custom relative path";

            PictureBox pic = new PictureBox();
            pic.Top = 9;
            pic.Left = 9;
            pic.Height = 26;            
            pic.Width = 26;
            pic.Parent = frm_custom_path;
            Form19 frm19 = new Form19();
            pic.Image = frm19.pictureBox1.Image;

            Label texto2 = new Label();
            texto2.Top = 41;
            texto2.Left = 5;
            texto2.Width = 35;
            texto2.Parent = frm_custom_path;
            texto2.Text = "Path:";

            path_txt.Parent = frm_custom_path;
            path_txt.Top = 38;
            path_txt.Left = 45;
            path_txt.Width = 343;
            path_txt.Focus();
            path_txt.TabIndex = 0;
            path_txt.KeyDown += new KeyEventHandler(path_txt_KeyDown);

            Button boton_user_source_path = new Button();
            boton_user_source_path.Parent = frm_custom_path;
            boton_user_source_path.Left = 45;
            boton_user_source_path.Top = 66;
            boton_user_source_path.Width = 115;
            boton_user_source_path.Height = 25;
            boton_user_source_path.Text = "Use source files path";
            boton_user_source_path.TabIndex = 0;
            boton_user_source_path.Click += new EventHandler(boton_user_source_path_Click);

            Button boton_ok_path = new Button();
            boton_ok_path.Parent = frm_custom_path;
            boton_ok_path.Left = 320;
            boton_ok_path.Top = 66;
            boton_ok_path.Width = 70;
            boton_ok_path.Height = 25;
            boton_ok_path.Text = "OK";
            boton_ok_path.TabIndex = 0;
            boton_ok_path.Click += new EventHandler(boton_ok_path_Click);

            Button boton_cancel_path = new Button();
            boton_cancel_path.Parent = frm_custom_path;
            boton_cancel_path.Left = 248;
            boton_cancel_path.Top = 66;
            boton_cancel_path.Width = 70;
            boton_cancel_path.Height = 25;
            boton_cancel_path.Text = "Cancel";

            boton_cancel_path.Click += new EventHandler(boton_cancel_path_Click);

            frm_custom_path.StartPosition = FormStartPosition.CenterParent;
            frm_custom_path.ShowDialog();
        }

        private void boton_user_source_path_Click(object sender, EventArgs e)
        {
            if (txt_path_main.Text == ".\\" && btn_save_path.Enabled == false) btn_save_path.Enabled = true;
            if (txt_path_main.Text != ".\\") btn_save_path.Enabled = true;
            txt_path_main.Text = ".\\";
            txt_path_mux.Text = txt_path_main.Text;
            txt_path_main.BackColor = groupBox1.BackColor;
            //btn_reset_path.BackColor = groupBox1.BackColor;

            ActiveForm.Close();
        }

        private void BG_Try_button_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {

        }

        private void item_up_Click(object sender, EventArgs e)
        {            
            Pg1.Focus();
            if (tabControl1.SelectedIndex == 0)
            {
                if (listView1.SelectedItems.Count == 1 && listView1.SelectedItems[0].SubItems[5].Text == "Queued")
                {
                    lvwColumnSorter_Full.Order = SortOrder.None;
                    var currentIndex = listView1.SelectedItems[0].Index;
                    var item = listView1.Items[listView1.SelectedIndices[0]];
                    if (currentIndex > 0 && listView1.Items[currentIndex - 1].SubItems[5].Text == "Queued")
                    {
                        listView1.Items.RemoveAt(currentIndex);
                        listView1.Items.Insert(currentIndex - 1, item);
                    }
                }                
            }

            if (tabControl1.SelectedIndex == 3)
            {
                if (dg1.SelectedCells.Count == 0 || dg1.SelectedCells.Count > 1) return;
                DataGridView dgv = dg1;
                try
                {
                    int totalRows = dgv.Rows.Count;
                    // get index of the row for the selected cell
                    int rowIndex = dgv.SelectedCells[0].OwningRow.Index;
                    if (rowIndex == 0)
                        return;
                    // get index of the column for the selected cell
                    int colIndex = dgv.SelectedCells[0].OwningColumn.Index;
                    DataGridViewRow selectedRow = dgv.Rows[rowIndex];
                    dgv.Rows.Remove(selectedRow);
                    dgv.Rows.Insert(rowIndex - 1, selectedRow);
                    dgv.ClearSelection();
                    dgv.Rows[rowIndex - 1].Cells[colIndex].Selected = true;
                }
                catch {  }
            }
        }

        private void item_down_Click(object sender, EventArgs e)
        {
            Pg1.Focus();
            if (tabControl1.SelectedIndex == 0)
            {
                if (listView1.SelectedItems.Count == 1 && listView1.SelectedItems[0].SubItems[5].Text == "Queued")
                {
                    lvwColumnSorter_Full.Order = SortOrder.None;
                    var currentIndex = listView1.SelectedItems[0].Index;
                    var item = listView1.Items[listView1.SelectedIndices[0]];
                    if (currentIndex > -1 && currentIndex < listView1.Items.Count - 1)
                    {
                        listView1.Items.RemoveAt(currentIndex);
                        listView1.Items.Insert(currentIndex + 1, item);
                    }
                }
            }

            if (tabControl1.SelectedIndex == 3)
            {
                if (dg1.SelectedCells.Count == 0 || dg1.SelectedCells.Count > 1) return;
                DataGridView dgv = dg1;
                try
                {
                    int totalRows = dgv.Rows.Count;
                    // get index of the row for the selected cell
                    int rowIndex = dgv.SelectedCells[0].OwningRow.Index;
                    if (rowIndex == totalRows - 1)
                        return;
                    // get index of the column for the selected cell
                    int colIndex = dgv.SelectedCells[0].OwningColumn.Index;
                    DataGridViewRow selectedRow = dgv.Rows[rowIndex];
                    dgv.Rows.Remove(selectedRow);
                    dgv.Rows.Insert(rowIndex + 1, selectedRow);
                    dgv.ClearSelection();
                    dgv.Rows[rowIndex + 1].Cells[colIndex].Selected = true;
                }
                catch { }
            }
        }

        private void requeue_Click(object sender, EventArgs e)
        {
            Pg1.Focus();
            if (tabControl1.SelectedIndex == 0)
            {
                foreach (ListViewItem item in listView1.Items)
                {
                    item.SubItems[5].Text = "Queued";
                    item.BackColor = Color.White;
                }
            }
        }

        private void chk_try_CheckedChanged(object sender, EventArgs e)
        {
            String f_try = String.Empty;
            if (is_portable == false)
            {
                f_try = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_try.ini";
            }
            else
            {
                f_try = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_try_portable.ini";
            }

            if (chk_try.Checked == false)
            {
                if (File.Exists(f_try))
                {
                    try
                    {
                        File.Delete(f_try);
                    }
                    catch
                    {
                        MessageBox.Show("An error occurred while trying to set the try option", "Error saving option", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
            }
            else
            {
                if (!File.Exists(f_try))
                {
                    try
                    {
                        File.WriteAllText(f_try, String.Empty);
                    }
                    catch
                    {
                        MessageBox.Show("An error occurred while trying to set try option", "Error saving option", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
            }
        }

        private void chk_no_sleep_MouseHover(object sender, EventArgs e)
        {
            toolTip01.AutoPopDelay = 5000;
            toolTip01.InitialDelay = 750;
            toolTip01.ReshowDelay = 500;
            toolTip01.ShowAlways = true;
            if (chk_no_sleep.CheckState == CheckState.Checked) toolTip01.SetToolTip(this.chk_no_sleep, "Prevent computer from going to sleep is enabled");
            else
            {
                toolTip01.SetToolTip(this.chk_no_sleep, "Prevent computer from going to sleep is disabled.");
            }
        }

        private void obtain_ffmpeg()
        {
            if (is_portable == true) return;

            Boolean writable = false;
            try
            {
                FileStream fs = File.Create(Path.Combine(Application.StartupPath, Path.GetRandomFileName()), 1, FileOptions.DeleteOnClose);
                writable = true;
            }
            catch
            {
                writable = false;
            }

            OpenFileDialog browse_file = new OpenFileDialog();
            String file_path = String.Empty;
            browse_file.Filter = "ffmpeg.exe |ffmpeg.exe";

            if (browse_file.ShowDialog() == DialogResult.OK)
            {
                file_path = browse_file.FileName;
                if (Path.GetFileName(file_path.ToLower()) != "ffmpeg.exe")
                {
                    MessageBox.Show("Selected file is not ffmpeg.exe.", "Wrong executable file", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    obtain_ffmpeg();
                    return;
                }
            }
            else
            {
                is_ff_ok = false;
                return;
            }

            String path = "cmd.exe";
            String param = "/C copy " + '\u0022' + file_path + '\u0022' + " " + '\u0022' + Application.StartupPath + '\u0022' + " / Y";
            Process ff_ext = new Process();
            ff_ext.StartInfo.FileName = path;
            ff_ext.StartInfo.Arguments = param;
            ff_ext.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
            if (writable == false) ff_ext.StartInfo.Verb = "runas";
            try
            {
                ff_ext.Start();
                ff_ext.WaitForExit();
                is_ff_ok = true;
            }
            catch
            {
                MessageBox.Show("Error creating destination file.", "Write error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                is_ff_ok = false;
            }
        }

        private void obtain_ffprobe()
        {
            if (is_portable == true) return;

            Boolean writable = false;
            try
            {
                FileStream fs = File.Create(Path.Combine(Application.StartupPath, Path.GetRandomFileName()), 1, FileOptions.DeleteOnClose);
                writable = true;
            }
            catch
            {
                writable = false;
            }

            OpenFileDialog browse_file = new OpenFileDialog();
            String file_path = String.Empty;
            browse_file.Filter = "ffprobe.exe |ffprobe.exe";

            if (browse_file.ShowDialog() == DialogResult.OK)
            {
                file_path = browse_file.FileName;
                if (Path.GetFileName(file_path.ToLower()) != "ffprobe.exe")
                {
                    MessageBox.Show("Selected file is not ffprobe.exe.", "Wrong executable file", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    obtain_ffprobe();
                    return;
                }
            }
            else
            {
                is_ff_ok = false;
                return;
            }

            String path = "cmd.exe";
            String param = "/C copy " + '\u0022' + file_path + '\u0022' + " " + '\u0022' + Application.StartupPath + '\u0022' + " / Y";
            Process ff_ext = new Process();
            ff_ext.StartInfo.FileName = path;
            ff_ext.StartInfo.Arguments = param;
            ff_ext.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
            if (writable == false) ff_ext.StartInfo.Verb = "runas";
            try
            {
                ff_ext.Start();
                ff_ext.WaitForExit();
                is_ff_ok = true;
            }
            catch
            {
                MessageBox.Show("Error creating destination file.", "Write error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                is_ff_ok = false;
            }
        }

        private void obtain_mediainfo()
        {
            if (is_portable == true) return;

            Boolean writable = false;
            try
            {
                FileStream fs = File.Create(Path.Combine(Application.StartupPath, Path.GetRandomFileName()), 1, FileOptions.DeleteOnClose);
                writable = true;
            }
            catch
            {
                writable = false;
            }

            OpenFileDialog browse_file = new OpenFileDialog();
            String file_path = String.Empty;
            browse_file.Filter = "mediainfo.exe |mediainfo.exe";

            if (browse_file.ShowDialog() == DialogResult.OK)
            {
                file_path = browse_file.FileName;
                if (Path.GetFileName(file_path.ToLower()) != "mediainfo.exe")
                {
                    MessageBox.Show("Selected file is not mediainfo.exe.", "Wrong executable file", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    obtain_mediainfo();
                    return;
                }
            }
            else
            {
                is_ff_ok = false;
                return;
            }

            String path = "cmd.exe";
            String param = "/C copy " + '\u0022' + file_path + '\u0022' + " " + '\u0022' + Application.StartupPath + '\u0022' + " / Y";
            Process ff_ext = new Process();
            ff_ext.StartInfo.FileName = path;
            ff_ext.StartInfo.Arguments = param;
            ff_ext.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
            if (writable == false) ff_ext.StartInfo.Verb = "runas";
            try
            {
                ff_ext.Start();
                ff_ext.WaitForExit();
                is_ff_ok = true;
            }
            catch
            {
                MessageBox.Show("Error creating destination file.", "Write error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                is_ff_ok = false;
            }
        }

        private void chk_no_sleep_MouseLeave(object sender, EventArgs e)
        {
            toolTip01.SetToolTip(this.chk_no_sleep, String.Empty);
        }
        
        private void replace_ytdl()
        {
            try
            {
                FileStream fs = File.Create(Path.Combine(Application.StartupPath, Path.GetRandomFileName()), 1, FileOptions.DeleteOnClose);
                writable_yl = true;
            }
            catch
            {
                writable_yl = false;
            }
            if (writable_yl == true)
            {
                try
                {
                    File.Copy(Path.GetTempPath() + "\\" + "youtube-dl.exe", Application.StartupPath + "\\" + "youtube-dl.exe", true);
                }
                catch (Exception excp)
                {
                    MessageBox.Show("An error ocurred trying to update youtube-dl. You can try again, or download and copy the file to application path.", "Error on automatic update", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                }
            }
            else
            {
                Process prc = new Process();
                String path = "cmd.exe";
                String param = "/C copy " + '\u0022' + Path.GetTempPath() + "youtube-dl.exe" + '\u0022' + " " + '\u0022' + Application.StartupPath + "\\" + "youtube-dl.exe" + '\u0022' + " /Y";
                prc.StartInfo.FileName = path;
                prc.StartInfo.Arguments = param;

                prc.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                prc.StartInfo.Verb = "runas";
                lbl_yl_name.Text = "Updating";
                try
                {
                    prc.Start();                 
                }                
                catch (Exception excp)
                {
                    MessageBox.Show("An error ocurred trying to update youtube-dl: " + Environment.NewLine + excp.Message + Environment.NewLine + " You can try again, or download and copy the file to application path.", "Error on automatic update", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                }
                
                Thread.Sleep(4000);
            }

            foreach (Control ct in groupBox_m3u.Controls)
            {
                this.InvokeEx(f => ct.Enabled = true);
            }
            this.InvokeEx(f => f.btn_update_yt.Text = "Update");
            this.InvokeEx(f => f.txt_up_output.Visible = false);
            this.InvokeEx(f => f.pg_update_yl.Visible = false);
            this.InvokeEx(f => f.txt_up_output.Visible = false);
        }

        private void wc_dl_DownloadFileCompleted(object sender, AsyncCompletedEventArgs e)
        {            
            if (e.Cancelled == true)
            {
                try
                {
                    File.Delete(Path.GetTempPath() + "\\" + "youtube-dl.exe");
                }
                catch { }
                wc_dl.Dispose();
                return;
            }
            else
            {
                
                replace_ytdl();                
                youtube_dl_ver();                
                try
                {
                    File.Delete(Path.GetTempPath() + "\\" + "youtube-dl.exe");
                }
                catch { }
            }
        }

        private void wc_dl_DownloadProgressChanged(object sender, DownloadProgressChangedEventArgs e)
        {
            this.InvokeEx(f => f.pg_update_yl.Value = e.ProgressPercentage);
            this.InvokeEx(f => f.pg_update_yl.Refresh());            
        }

        private void wc2_DownloadFileCompleted(object sender, AsyncCompletedEventArgs e)
        {
            this.InvokeEx(f => f.pg_adding.Visible = false);
            this.InvokeEx(f => f.txt_adding_p.Text = "");
            this.InvokeEx(f => f.LB_Wait.Text = "");
            this.InvokeEx(f => f.btn_cancel_add.Visible = false);

            if (e.Error == null)
            {
                Process p = Process.Start(Path.Combine(Path.GetTempPath(), vc_download));
                this.InvokeEx(f => this.Enabled = false);
                p.WaitForExit();
                this.InvokeEx(f => this.Enabled = true);
                if (p.ExitCode == 0)
                {
                    Thread.Sleep(500);
                    this.InvokeEx(f => lbl_yl_name.Left = lbl_yl_name.Left - 16);
                    this.InvokeEx(f => lbl_yl_name.Width = lbl_yl_name.Width - 75);
                    this.InvokeEx(f => lbl_yl_name.Text = "Checking youtube-dl version...");
                    this.InvokeEx(f => lbl_yt_v.Visible = false);
                    youtube_dl_ver();
                }
                else
                {
                    MessageBox.Show("There was an error installing the youtube-dl requirement.", "Installation error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    lbl_yl_name.Text = "Youtube-dl internal error";
                }
            }
            else
            {
                MessageBox.Show("Error downloading the required update, please check your network connection.", "Download failed!",MessageBoxButtons.OK,MessageBoxIcon.Error);
            }
        }
        private void wc2_DownloadProgressChanged(object sender, DownloadProgressChangedEventArgs e)
        {
            this.InvokeEx(f => f.pg_adding.Maximum = 100);
            this.InvokeEx(f => f.pg_adding.Value = e.ProgressPercentage);
            this.InvokeEx(f => f.pg_adding.Refresh());
            this.InvokeEx(f => f.txt_adding_p.Text = e.ProgressPercentage.ToString() + "%");
            this.InvokeEx(f => f.txt_adding_p.Refresh());
        }

        private void check_VC()
        {            
            this.InvokeEx(f => f.lbl_yl_name.Left = lbl_yl_name.Left + 16);
            this.InvokeEx(f => f.lbl_yl_name.Text = "Youtube-dl");
            this.InvokeEx(f => f.lbl_yl_name.Width = lbl_yl_name.Width + 75);
            this.InvokeEx(f => f.lbl_yt_v.Text = " error checking version");
            this.InvokeEx(f => f.pic_ok.Visible = false);
                        
            wc2.DownloadProgressChanged += new DownloadProgressChangedEventHandler(wc2_DownloadProgressChanged);
            wc2.DownloadFileCompleted += new AsyncCompletedEventHandler(wc2_DownloadFileCompleted);
            
            String vc_ver = "http://download.microsoft.com/download/C/6/D/C6D0FD4E-9E53-4897-9B91-836EBA2AACD3/vcredist_x86.exe";
            vc_download = "vc_redist.x86.exe";
                                 
                            this.InvokeEx(f => f.lbl_yl_name.Left = lbl_yl_name.Left - 16);
                            this.InvokeEx(f => f.lbl_yl_name.Width = lbl_yl_name.Width - 75);
                            this.InvokeEx(f => f.lbl_yt_v.Text = " error checking version");
                            this.InvokeEx(f => f.pic_ok.Visible = false);
                            DialogResult a = MessageBox.Show("Microsoft Visual C++ 2010 package is required for YouTube download feature." + Environment.NewLine + Environment.NewLine + "Do you want to download and install it?", "Additional components required", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question);
                    if (a == DialogResult.Cancel || a == DialogResult.No)
                    {
                this.InvokeEx(f => f.lbl_yl_name.Left = lbl_yl_name.Left - 16);
                this.InvokeEx(f => f.lbl_yl_name.Text = "Youtube-dl internal error");
                this.InvokeEx(f => f.lbl_yt_v.Text = " error checking version");
                this.InvokeEx(f => f.pic_ok.Visible = false);
                return;
                    }
                    else
                    {
                
                this.InvokeEx(f => f.pg_adding.Visible = true);
                this.InvokeEx(f => f.btn_cancel_add.Visible = true);
                this.InvokeEx(f => f.LB_Wait.Visible = true);
                this.InvokeEx(f => f.txt_adding_p.Visible = true);
                this.InvokeEx(f => f.LB_Wait.Text = "Downloading update");
                this.InvokeEx(f => f.LB_Wait.Refresh());

                wc2.DownloadFileAsync(new System.Uri(vc_ver), Path.Combine(Path.GetTempPath(), vc_download));
                this.InvokeEx(f => this.TopMost = true);
                this.InvokeEx(f => this.TopMost = false);
                this.InvokeEx(f => f.pic_ok.Visible = false);
                }
        }
            
        private void youtube_dl_ver()
        {
            this.InvokeEx(f => f.lbl_yl_name.Left = lbl_yl_name.Left + 16);
            this.InvokeEx(f => f.lbl_yl_name.Width = lbl_yl_name.Width + 75);
            this.InvokeEx(f => f.lbl_yl_name.Text = "Checking youtube-dl version...");
            this.InvokeEx(f => f.lbl_yt_v.Visible = false);
            BG_check_ytdl.RunWorkerAsync();
        }

        private void resize()
        {
            int width_cols = 10 - listView1.Columns.Count;
            if (big_res == false)
            {
                tabControl1.Height = this.Height - 471;
                listView1.Height = this.Height - 496;
                listView2.Height = this.Height - 496;
                listView3.Height = this.Height - 496;

                tabControl1.Width = this.Width - 18;
                listView1.Width = this.Width - 25;
                listView1.Columns[0].Width = (listView1.Width / 2 - 4) - (4 - width_cols) * 37;
                listView1.Columns[1].Width = (listView1.Width / 2 - 390) - (4 - width_cols) * 47;


                listView2.Width = this.Width - 25;
                listView3.Width = this.Width - 25;

                groupBox_m3u.Top = this.Height - 369;

                list_tracks.Top = this.Height - 367;
                groupBox9.Top = this.Height - 205;
                groupBox2.Top = this.Height - 205;
                groupBox15.Top = this.Height - 370;
                groupBox10.Top = this.Height - 120;

                dg1.Height = this.Height - 496;
                dg1.Width = this.Width - 23;
                groupBox1.Top = this.Height - 370;
                panel1.Top = this.Height - 370;

                groupBox15.Width = this.Width - 25;
                listView3.Columns[1].Width = this.Width - 937;

                groupBox1.Width = this.Width / 2 - 17;
                groupBox10.Width = this.Width - 26;
                panel1.Left = this.Width / 2 - 9;
                panel1.Width = this.Width / 2 - 13;
                list_tracks.Width = this.Width - 23;
                listView2.Columns[0].Width = this.Width - 645;
                list_tracks.Columns[0].Width = this.Width - 655;

                btn_edit_presets.Left = this.Width / 2 - 47;
                btn_del_preset.Left = this.Width / 2 - 73;
                btn_save_preset.Left = this.Width / 2 - 100;
                label2.Left = this.Width / 2 - 98;
                txt_format.Left = this.Width / 2 - 55;
                txt_config_ver.Left = this.Width / 2 - 55;
                lbl_config.Left = this.Width / 2 - 98;
                combo_presets.Width = this.Width / 2 - 170;
                txt_parameters.Width = this.Width / 2 - 170;

                btn_cancel_shut.Width = this.Width - 41;
                combo_prio.Left = this.Width - 175;
                btn_save_prio.Left = this.Width - 60;
                Pg1.Width = groupBox10.Width - 515;
                btn_pause.Left = groupBox10.Width - 250;
                btn_abort_all.Left = groupBox10.Width - 216;
                lbl_updates.Left = this.Width - 145;
                btn_update.Left = this.Width - 145;
                item_up.Left = this.Width - 46;
                item_down.Left = this.Width - 69;
                requeue.Left = this.Width - 95;
                btn_refresh.Left = this.Width - 124;
                btn_clean_list.Left = this.Width - 145;
                txt_search_url.Left = this.Width - 206;
                lbl_search_url.Left = this.Width - 237;
                lbl_size.Left = this.Width - 199;
                lbl_dur_list.Left = this.Width - 283;
                lbl_items.Left = this.Width - 349;

                btn_inc_font.Left = this.Width - 409;
                btn_decr_font.Left = this.Width - 434;
                btn_undo_filter.Left = this.Width - 463;
                btn_filter.Left = this.Width - 492;
                lbl_elapsed.Left = (groupBox10.Width / 2) - 175;
                pic_warnings.Left = (groupBox10.Width / 2) - 11;
                pic_no_errors.Left = (groupBox10.Width / 2) - 8;
                pic_recording.Left = (groupBox10.Width / 2) - 12;
                txt_remain.Left = (groupBox10.Width / 2) + 38;
                lbl_est_size.Left = (groupBox10.Width / 2) + 215;
                lbl_bitrate.Left = (groupBox10.Width / 2) - 310;
                lbl_speed.Left = (groupBox10.Width / 2) - 35;
                btn_cancel_shut.Width = groupBox10.Width - 10;
                TB1.Left = (groupBox10.Width / 2) - 290;

                button24.Left = this.Width - 110;
                button25.Left = this.Width - 110;
                txt_folder_subs.Width = this.Width - 751;
                txt_hard_subs.Width = this.Width - 678;
                txt_output_subs.Width = this.Width - 751;
                lbl_def_sub_mux.Left = this.Width - 174;
                Combo_def_sub_mux.Left = this.Width - 101;
                Combo_sub_lang_mux.Left = (groupBox15.Width / 2) + 300;
                lbl_lang_sub_mux.Left = (groupBox15.Width / 2) + 213;
                groupBox_m3u.Width = this.Width - 25;
                dg1.Columns[4].Width = this.Width - 930;

                ss_time_input.Left = this.Width / 2 - 169;
                lbl_pre_input.Left = this.Width / 2 - 256;

                btn_ref_dcd.Left = (int)(groupBox1.Width / 2) + 55;
                cb_hwdecode.Left = (int)(groupBox1.Width / 2) - 4;
                lbl_gpu.Left = (int)(groupBox1.Width / 2) - 76;
                groupBox3.Left = (int)(groupBox1.Width / 2) - 72;
                btn_try_pr.Left = this.Width / 2 - 260;
                btn_display_log.Left = this.Width / 2 - 200;
                btn_save_queue.Left = this.Width / 2 - 145;
                groupBox4.Width = this.Width / 2 - 99;
                panel2.Width = this.Width / 2 - 492;
                button21.Left = this.Width / 2 - 79;
                txt_path_main.Width = this.Width / 2 - 161;
                btn_save_path.Left = this.Width / 2 - 105;
                btn_reset_path.Left = this.Width / 2 - 130;
                button7.Left = this.Width / 2 - 158;
                txt_ini.Left = this.Width / 2 - 84;
                txt_fin.Left = this.Width / 2 - 84;
                btn_kf.Left = this.Width / 2 - 84;
                chk_trim2.Left = this.Width / 2 - 86;
                label5.Left = this.Width / 2 - 106;
                label6.Left = this.Width / 2 - 106;
                btn_trim.Left = this.Width / 2 - 159;
                btn_concat.Left = this.Width / 2 - 229;
                btn_capture.Left = this.Width / 2 - 299;

                groupBox2.Left = this.Width - 649;
                groupBox2.Width = 627;
                groupBox9.Width = this.Width - 657;
                btn_mux.Left = this.Width - 720;
                groupBox11.Left = this.Width - 731;
                txt_track_format.Left = this.Width - 775;
                btn_extract.Left = this.Width - 840;
                groupBox6.Left = this.Width - 847;
                btn_mux_job.Left = (int)(groupBox9.Width / 2) - 23;
                btn_mux_show_jobs.Left = (int)(groupBox9.Width / 2) + 44;
                panel_yt.Left = this.Width - 275;
                groupBox_yout.Left = this.Width - 263;
                btn_browse_path_m3u.Left = this.Width - 122;
                btn_save_path_url.Left = this.Width - 149;
                txt_path_m3u.Width = this.Width - 760;
                pic_title.Left = (this.Width / 2) - 130;
                change_ff.Left = (this.Width / 2) - 128;
                btn_cancel_add.Left = this.Width - 569;
                txt_adding_p.Left = this.Width - 603;
                pg_adding.Width = this.Width - 1178;
                btn_add_col.Left = this.Width - 519;
            }

            if (big_res == true)
            {
                tabControl1.Height = this.Height - 458 - 40;
                listView1.Height = this.Height - 495 - 30;
                listView2.Height = this.Height - 495 - 30;
                listView3.Height = this.Height - 495 - 30;

                tabControl1.Width = this.Width - 45;
                listView1.Width = this.Width - 50;
                listView1.Columns[0].Width = (listView1.Width / 2 - 2) - (4 - width_cols) * 37;
                listView1.Columns[1].Width = (listView1.Width / 2 - 390) - (4 - width_cols) * 47;


                listView2.Width = this.Width - 50;
                listView3.Width = this.Width - 50;

                dg1.Height = this.Height - 495 - 30;
                dg1.Width = this.Width - 50;
                groupBox1.Top = this.Height - 369 - 20;
                panel1.Top = this.Height - 369 - 20;
                panel1.Left = this.Width / 2 - 1;
                panel1.Width = this.Width / 2 - 31;
                groupBox1.Width = this.Width / 2 - 26;

                btn_edit_presets.Left = this.Width / 2 - 57;
                btn_del_preset.Left = this.Width / 2 - 83;
                btn_save_preset.Left = this.Width / 2 - 110;
                label2.Left = this.Width / 2 - 108;
                txt_format.Left = this.Width / 2 - 65;
                txt_config_ver.Left = this.Width / 2 - 65;
                lbl_config.Left = this.Width / 2 - 108;
                combo_presets.Width = this.Width / 2 - 180;
                txt_parameters.Width = this.Width / 2 - 180; ;

                groupBox10.Width = this.Width - 51;
                btn_cancel_shut.Width = this.Width - 61;
                combo_prio.Left = this.Width - 195;
                btn_save_prio.Left = this.Width - 80;
                Pg1.Width = this.Width - 560;
                btn_pause.Left = this.Width - 296;
                btn_abort_all.Left = this.Width - 262;
                lbl_updates.Left = this.Width - 155;
                btn_update.Left = this.Width - 155;
                item_up.Left = this.Width - 56;
                item_down.Left = this.Width - 79;
                requeue.Left = this.Width - 108;
                btn_refresh.Left = this.Width - 136;
                btn_clean_list.Left = this.Width - 158;
                txt_search_url.Left = this.Width - 216;
                lbl_search_url.Left = this.Width - 247;
                lbl_size.Left = this.Width - 210;
                lbl_dur_list.Left = this.Width - 292;
                lbl_items.Left = this.Width - 355;
                btn_inc_font.Left = this.Width - 419;
                btn_decr_font.Left = this.Width - 444;
                btn_undo_filter.Left = this.Width - 473;
                btn_filter.Left = this.Width - 502;
                lbl_elapsed.Left = (groupBox10.Width / 2) - 178;
                pic_warnings.Left = (groupBox10.Width / 2) - 7;
                pic_no_errors.Left = (groupBox10.Width / 2) - 6;
                pic_recording.Left = (groupBox10.Width / 2) - 8;
                txt_remain.Left = (groupBox10.Width / 2) + 34;
                lbl_est_size.Left = (groupBox10.Width / 2) + 215;
                lbl_bitrate.Left = (groupBox10.Width / 2) - 310;
                lbl_speed.Left = (groupBox10.Width / 2) - 30;
                btn_cancel_shut.Width = groupBox10.Width - 10;
                TB1.Left = (groupBox10.Width / 2) - 290;
                groupBox15.Width = this.Width - 49;
                listView3.Columns[1].Width = this.Width - 959;
                button24.Left = this.Width - 130;
                button25.Left = this.Width - 130;
                txt_folder_subs.Width = this.Width - 771;
                txt_hard_subs.Width = this.Width - 698;
                txt_output_subs.Width = this.Width - 771;
                lbl_def_sub_mux.Left = this.Width - 184;
                Combo_def_sub_mux.Left = this.Width - 111;
                Combo_sub_lang_mux.Left = (groupBox15.Width / 2) + 300;
                lbl_lang_sub_mux.Left = (groupBox15.Width / 2) + 213;
                groupBox_m3u.Width = this.Width - 49;
                dg1.Columns[4].Width = this.Width - 954;


                ss_time_input.Left = this.Width / 2 - 179;
                lbl_pre_input.Left = this.Width / 2 - 266;

                btn_ref_dcd.Left = (int)(groupBox1.Width / 2) + 55;
                cb_hwdecode.Left = (int)(groupBox1.Width / 2) - 4;
                lbl_gpu.Left = (int)(groupBox1.Width / 2) - 76;
                groupBox3.Left = (int)(groupBox1.Width / 2) - 72;
                btn_try_pr.Left = this.Width / 2 - 270;
                btn_display_log.Left = this.Width / 2 - 210;
                btn_save_queue.Left = this.Width / 2 - 155;
                groupBox4.Width = this.Width / 2 - 114;
                panel2.Left = this.Width / 2 - 181;
                button21.Left = this.Width / 2 - 96;
                txt_path_main.Width = this.Width / 2 - 178;
                btn_save_path.Left = this.Width / 2 - 122;
                btn_reset_path.Left = this.Width / 2 - 147;
                button7.Left = this.Width / 2 - 175;
                txt_ini.Left = this.Width / 2 - 101;
                txt_fin.Left = this.Width / 2 - 101;
                btn_kf.Left = this.Width / 2 - 101;
                chk_trim2.Left = this.Width / 2 - 103;
                label5.Left = this.Width / 2 - 123;
                label6.Left = this.Width / 2 - 123;
                btn_trim.Left = this.Width / 2 - 176;
                btn_concat.Left = this.Width / 2 - 246;
                btn_capture.Left = this.Width / 2 - 315;

                chk_overw.Left = this.Width / 2 - 258;
                grp_fade.Width = this.Width / 2 - 264;
                btn_multimedia.Left = (int)(panel1.Width / 2 - 48);
                btn_capture.Left = (int)(panel1.Width / 2 + 22);
                chk_delete_source.Left = (int)(panel1.Width / 2 - 65);
                fade_a_in.Left = (int)(panel1.Width / 2 - 65);
                fade_a_out.Left = (int)(panel1.Width / 2 - 65);
                num_a_in.Left = (int)(panel1.Width / 2 + 5);
                num_a_out.Left = (int)(panel1.Width / 2 + 5);
                label18.Left = (int)(panel1.Width / 2 + 50);
                label23.Left = (int)(panel1.Width / 2 + 50);

                list_tracks.Width = this.Width - 49;
                listView2.Width = this.Width - 49;
                listView2.Columns[0].Width = this.Width - 677;
                list_tracks.Columns[0].Width = this.Width - 677;
                groupBox2.Left = this.Width - 658;
                groupBox2.Width = 627;
                groupBox9.Width = this.Width - 684;
                btn_mux.Left = this.Width - 746;
                groupBox11.Left = this.Width - 751;
                txt_track_format.Left = this.Width - 795;
                btn_extract.Left = this.Width - 860;
                groupBox6.Left = this.Width - 867;
                btn_mux_job.Left = (int)(groupBox9.Width / 2) - 23;
                btn_mux_show_jobs.Left = (int)(groupBox9.Width / 2) + 44;
                panel_yt.Left = this.Width - 295;
                groupBox_yout.Left = this.Width - 283;
                btn_browse_path_m3u.Left = this.Width - 132;
                btn_save_path_url.Left = this.Width - 159;
                txt_path_m3u.Width = this.Width - 770;
                pic_title.Left = (this.Width / 2) - 130;
                change_ff.Left = (this.Width / 2) - 128;
                btn_cancel_add.Left = this.Width - 583;
                txt_adding_p.Left = this.Width - 611;
                pg_adding.Width = this.Width - 1202;
                btn_add_col.Left = this.Width - 529;

                groupBox_m3u.Top = this.Height - 369 - 20;

                list_tracks.Top = this.Height - 366 - 20;
                groupBox9.Top = this.Height - 205 - 20;
                groupBox2.Top = this.Height - 205 - 20;
                groupBox15.Top = this.Height - 369 - 20;
                groupBox10.Top = this.Height - 118 - 19;
            }
        }

        private void Form1_Shown(object sender, EventArgs e)
        {          
            resize();
                    
            //Create presets if file not available
            String path_pr,path_pre = "";
            if (is_portable == false)
            {
                path_pr = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_presets.ini";
                path_pre = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_batch_pre.ini";
            }
            else
            {
                path_pr = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_presets_portable.ini";
                path_pre = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_batch_pre_portable.ini";
            }

            if (!File.Exists(path_pr))
            {
                File.WriteAllText(path_pr, "Version 1.0" + Environment.NewLine
   + "PR: Video: MP4 Stream copy & -c copy % mp4" + Environment.NewLine
   + "PR: Video: Convert audio track to AAC HQ 2 channels & -c:v copy -c:a aac -cutoff 20K -b:a 256K -ac 2 % mkv" + Environment.NewLine + "PR: Video: Convert audio tracks to AC3 2 channels & -map 0 -c:v copy -c:a ac3 -b:a 256K -ac 2 -c:s copy % mkv" + Environment.NewLine + "PR: Video: Convert to ProRes MKV & -c:v prores_ks -profile:v standard -vendor:v ap10 -pix_fmt yuv422p10le -c:a pcm_s16le -chunk_size 64K % mkv" + Environment.NewLine + "PR: Video: Convert to H264 HQ + Source Audio & -map 0 -c:v libx264 -crf 20 -c:a copy % mkv" + Environment.NewLine + "PR: Video: Convert to H264 Ultrafast + Source Audio & -map 0 -c:v libx264 -crf 23 -preset ultrafast -c:a copy % mkv" + Environment.NewLine + "PR: Video: Convert to H265 HQ + Source Audio & -map 0 -c:v libx265 -crf 23 -c:a copy % mkv" + Environment.NewLine + "PR: Video: Resize 1280x720 H264-AAC & -map 0 -c:v libx264 -crf 23 -vf scale=1280:720 -c:a aac -b:a 128K % mp4" + Environment.NewLine + "PR: Video: Rotate 90 degress Clockwise to H264 + Source audio & -c:v libx264 -crf 21 -vf " + "\u0022" + "transpose=1" + "\u0022" + " -c:a aac -b:a 128K % mp4" + Environment.NewLine + "PR: Video: Rotate 90 degress CounterCLockwise and Vertical Flip to H264 + Source audio & -c:v libx264 -crf 21 -vf " + "\u0022" + "transpose=0" + "\u0022" + " -c:a aac -b:a 128K % mp4" + Environment.NewLine + "PR: Video: Rotate 90 degress CounterClockwise to H264 + Source audio & -c:v libx264 -crf 21 -vf " + "\u0022" + "transpose=2" + "\u0022" + " -c:a aac -b:a 128K % mp4" + Environment.NewLine + "PR: Video: Rotate 90 degress Clockwise and Vertical Flip to H264 + Source audio & -c:v libx264 -crf 21 -vf " + "\u0022" + "transpose=3" + "\u0022" + " -c:a aac -b:a 128K % mp4" + Environment.NewLine + "PR: Video: Rotate 180 degress to H264 + Source audio & -c:v libx264 -crf 21 -vf " + "\u0022" + "transpose=2, transpose=2" + "\u0022" + " -c:a aac -b:a 128K % mp4" + Environment.NewLine + "PR: Video: Remove subtitles to MP4 & -map 0 -c copy -sn % mp4" + Environment.NewLine + "PR: Audio: Convert to FLAC 16/44,1KHz 2 channels & -vn -c:a flac -ar 44100 -sample_fmt s16 -ac 2 % flac" + Environment.NewLine + "PR: Audio: Convert to MP3 VBR HQ 2 ch embedded cover & -c:v copy -c:a libmp3lame -qscale:a 0 -ac 2  % mp3" + Environment.NewLine + "PR: Audio: Convert to MP3 VBR HQ 2 ch & -vn -c:a libmp3lame -qscale:a 1 -ac 2 % mp3" + Environment.NewLine + "PR: Audio: Convert to MP3 CBR HQ 2 ch & -vn -c:a libmp3lame -b:a 224K -ac 2 % mp3" + Environment.NewLine + "PR: Audio: Convert to WAV 16/44,1KHz 2 channels & -vn -c:a pcm_s16le -ar 44100 -sample_fmt s16 -ac 2 % wav" + Environment.NewLine + "PR: Subtitle: Extract first subtitle track to SRT & -map 0:2 -c:s copy % srt" + Environment.NewLine + "PR: Image: Extract frame as image & -vframes 1 -f image2  % png" + Environment.NewLine + "PR: Record screen at 24 fps + Audio AAC to MKV & -r 24 -c:a aac -b:a 128K % mkv" + Environment.NewLine + "PR: Record screen at 15 fps 1280x720 + Audio to MKV & -r 15 -vf scale=1280x720 -c:a aac -b:a 128K % mkv" + Environment.NewLine + "PR: Record screen at 30 fps Nvidia NVENC + Audio AAC to MKV & -c:v h264_nvenc -qp 20 -r 30 -c:a aac -b:a 128K % mkv" + Environment.NewLine + "PR: Record screen at 25 fps Intel QuickSync + Audio AAC to MKV & -c:v  h264_qsv -qp 20 -r 25 -c:a aac -b:a 128K % mkv" + Environment.NewLine + "PR: Join images at 1920px width to MP4 video & -c:v libx264 -preset veryfast -vf " + '\u0022' + "fps=25,format=yuv420p,scale=1920:-2" + '\u0022' + " -c:a aac -b:a 128K % mp4");
                btn_load_config.PerformClick();
            }
            
            set_font_size();

            Pg1.Text = "0" + System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator + "0%";

            new System.Threading.Thread(() =>
            {
                System.Threading.Thread.CurrentThread.IsBackground = true;

                foreach (String item in Combo_sub_lang_mux.Items)
                {
                    Combo_single_subs_lang.Items.Add(item);
                    ct3_combo_language.Items.Add(item);
                    combo_item_lang_2.Items.Add(item);
                }

                this.InvokeEx(f => f.combo_ext_m3u.SelectedIndex = 0);
                this.InvokeEx(f => f.chk_subfolders.FlatAppearance.CheckedBackColor = Color.FromArgb(255, 225, 235, 251));
                this.InvokeEx(f => f.combo_ext.SelectedIndex = 0);
                this.InvokeEx(f => f.Combo_def_sub_mux.SelectedIndex = 0);
                this.InvokeEx(f => f.Combo_ext_sub_mux.SelectedIndex = 0);
                this.InvokeEx(f => f.notifyIcon1.Visible = false);
                this.InvokeEx(f => f.listView1.LabelWrap = true);
                this.InvokeEx(f => f.combo_vin_col.SelectedIndex = 0);
                this.InvokeEx(f => f.combo_vout_color.SelectedIndex = 0);
                this.InvokeEx(f => f.combo_shut.SelectedIndex = 0);
            }).Start();

            Create_Tooltips();
            is_ff_ok = true;
            new System.Threading.Thread(() =>
            {
                System.Threading.Thread.CurrentThread.IsBackground = true;
                Thread.Sleep(85);
                for (int i = Application.OpenForms.Count - 1; i >= 0; i--)
                {
                    if (Application.OpenForms[i].Name == "Form6")
                    {
                        this.InvokeEx(f => Application.OpenForms[i].Close());
                        break;
                    }
                }

            }).Start();           

            String ffm = Path.Combine(Application.StartupPath, "ffmpeg.exe");
            if (!File.Exists(ffm))
            {
                this.Enabled = false;
                var a = MessageBox.Show("FFmpeg.exe was not found in application path. Do you want to find it and copy it to application folder?", "FFmpeg.exe not found", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                if (a == DialogResult.No)
                {
                    Application.Exit();
                    return;
                }
                if (a == DialogResult.Yes)
                {
                    obtain_ffmpeg();
                    if (is_ff_ok == false)
                    {
                        Application.Exit();
                    }
                    else
                    {
                        is_ff_ok = true;
                        this.Enabled = true;
                    }
                }
            }
            String ffm2 = System.IO.Path.Combine(Application.StartupPath, "ffprobe.exe");
            if (!File.Exists(ffm2))
            {
                this.Enabled = false;
                var a = MessageBox.Show("FFprobe.exe was not found in application path. Do you want to find it and copy it to application folder?", "FFprobe.exe not found", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                if (a == DialogResult.No) Application.Exit();
                if (a == DialogResult.Yes)
                {
                    obtain_ffprobe();
                    if (is_ff_ok == false)
                    {
                        Application.Exit();
                    }
                    else
                    {
                        is_ff_ok = true;
                        this.Enabled = true;
                    }
                }
            }
            String ffm3 = System.IO.Path.Combine(Application.StartupPath, "mediainfo.exe");
            if (!File.Exists(ffm3))
            {
                this.Enabled = false;
                var a = MessageBox.Show("Mediainfo.exe was not found in application path. Do you want to find it and copy it to application folder?", "FFprobe.exe not found", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                if (a == DialogResult.No) Application.Exit();
                if (a == DialogResult.Yes)
                {
                    obtain_mediainfo();
                    if (is_ff_ok == false)
                    {
                        Application.Exit();
                    }
                    else
                    {
                        is_ff_ok = true;
                        this.Enabled = true;
                    }
                }
            }

            //FFmpeg version

            new System.Threading.Thread(() =>
            {
                System.Threading.Thread.CurrentThread.IsBackground = true;
                try
                {
                    this.InvokeEx(f => f.change_ff.Text = "Loading...");
                Process proc_v = new Process();
                proc_v.StartInfo.FileName = Path.Combine(Application.StartupPath, "ffmpeg.exe");
                proc_v.StartInfo.Arguments = "-version";

                proc_v.StartInfo.RedirectStandardOutput = true;
                proc_v.StartInfo.RedirectStandardError = true;
                proc_v.StartInfo.UseShellExecute = false;
                proc_v.StartInfo.CreateNoWindow = true;
                proc_v.EnableRaisingEvents = true;
                
                    proc_v.Start();
                    String arch = String.Empty;
                    Boolean is_32 = false;
                    if (Environment.Is64BitProcess == false)
                    {
                        is_32 = true;
                        arch = "x86";
                    }
                    else
                    {

                        if ((Environment.OSVersion.Version.Major > 5) || ((Environment.OSVersion.Version.Major == 5) && (Environment.OSVersion.Version.Minor >= 1)))
                        {
                            NativeMethods.IsWow64Process(proc_v.Handle, out is_32);
                            if (is_32 == true) arch = "x86";
                            else
                            {
                                arch = "x64";
                            }
                        }
                    }
                    ff_ver_proc = proc_v.Id;

                    String err_txt = String.Empty;
                    err_txt = proc_v.StandardOutput.ReadLine();
                    err_txt = err_txt.Substring(0, err_txt.IndexOf("Copyright"));
                    err_txt = err_txt.Replace("ff", "FF");
                    if (err_txt.Length >= 42)
                    {
                        this.InvokeEx(f => f.change_ff.Text = err_txt.Substring(0, 42) + " " + arch);
                    }
                    else
                    {
                        this.InvokeEx(f => f.change_ff.Text = err_txt + " " + arch);
                    }
                }
                catch
                {
                    this.InvokeEx(f => f.change_ff.Text = "FFmpeg unknown version");

                }
            }).Start();

            //End FFmpeg version

            watch_ff.Path = Application.StartupPath;

            //Automatic update

            String f_updates = String.Empty;
            if (is_portable == false)
            {
                f_updates = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_updates.ini";
            }
            else
            {
                f_updates = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_updates_portable.ini";
            }
            if (!File.Exists(f_updates))
            {
                chk_auto_updates.Checked = true;
                check_back_updates();
            }
            else
            {
                chk_auto_updates.Checked = false;
            }
            Pg1.Focus();
            //End automatic updates


            String save_path_queue = Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "saved_queue_temp.ffq";
            if (File.Exists(save_path_queue))
            {
                var a = MessageBox.Show("Program was interrupted during file encoding. Do you want to load the last saved queue state file?", "A queue temporary session file was found", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                if (a == DialogResult.No)
                {
                    try
                    {
                        File.Delete(save_path_queue);
                    }
                    catch
                    {

                    }
                }
                if (a == DialogResult.Yes)
                {
                    int linea = 0;
                    int not_found = 0;
                    combo_presets.Text = "";
                    this.Cursor = Cursors.WaitCursor;
                    List<ListViewItem> itemsToAdd = new List<ListViewItem>();
                    try
                    {
                        foreach (string line in File.ReadLines(save_path_queue))
                        {

                            if (linea == 0)
                            {
                                txt_parameters.Text = line;
                            }
                            if (linea == 1)
                            {
                                txt_format.Text = line;
                            }

                            if (linea == 2)
                            {
                                if (line == "Unchecked") checkBox1.CheckState = CheckState.Unchecked;
                                else checkBox1.CheckState = CheckState.Checked;
                            }

                            if (linea == 3)
                            {
                                if (line == "Unchecked") chk_suffix.CheckState = CheckState.Unchecked;
                                else
                                {
                                    chk_suffix.CheckState = CheckState.Checked;
                                    txt_suffix.Text = line;
                                }

                            }

                            if (linea == 4)
                            {
                                txt_path_main.Text = line;
                            }

                            if (linea > 4)
                            {

                                Boolean missing = false;
                                listView1.SmallImageList = imageList2;

                                itemsToAdd.Add(new ListViewItem(Path.GetFileName(line.Substring(0, line.LastIndexOf(" --0 "))), 1));
                                //ListViewItem elemento = new ListViewItem(line.Substring(0, line.LastIndexOf(" --0 ")), 1);
                                //Begin get file icon
                                Icon iconForFile = SystemIcons.WinLogo;

                                // Check to see if the image collection contains an image
                                // for this extension, using the extension as a key.
                                if (File.Exists(line.Substring(0, line.LastIndexOf(" --0 "))))
                                {
                                    if (!imageList2.Images.ContainsKey(System.IO.Path.GetExtension(line.Substring(0, line.LastIndexOf(" --0 ")))))
                                    {
                                        // If not, add the image to the image list.
                                        iconForFile = System.Drawing.Icon.ExtractAssociatedIcon(line.Substring(0, line.LastIndexOf(" --0 ")));
                                        imageList2.Images.Add(System.IO.Path.GetExtension(line.Substring(0, line.LastIndexOf(" --0 "))), iconForFile);
                                    }

                                    //listView1.Items.Add(elemento);
                                    itemsToAdd[linea - 5].ImageKey = System.IO.Path.GetExtension(System.IO.Path.GetExtension(line.Substring(0, line.LastIndexOf(" --0 "))));
                                }
                                else
                                {
                                    not_found = not_found + 1;
                                    missing = true;
                                }

                                //listView1.Items.Add(line.Substring(0,line.LastIndexOf(" --0 ")));
                                String type = line.Substring(line.LastIndexOf(" --0 ") + 5, line.Length - (line.LastIndexOf(" --0") + 5));
                                type = type.Substring(0, type.LastIndexOf(" --1"));
                                String dur = line.Substring(line.LastIndexOf(" --1 ") + 5, line.Length - (line.LastIndexOf(" --1") + 5));
                                dur = dur.Substring(0, dur.LastIndexOf(" --2"));
                                String size = line.Substring(line.LastIndexOf(" --2 ") + 5, line.Length - (line.LastIndexOf(" --2") + 5));
                                size = size.Substring(0, size.LastIndexOf(" --3"));
                                String status = line.Substring(line.LastIndexOf(" --3 ") + 5, line.Length - (line.LastIndexOf(" --3") + 5));

                                itemsToAdd[linea - 5].SubItems.Add(Path.GetDirectoryName(line.Substring(0, line.LastIndexOf(" --0 "))));
                                itemsToAdd[linea - 5].SubItems.Add(type);
                                itemsToAdd[linea - 5].SubItems.Add(dur);
                                itemsToAdd[linea - 5].SubItems.Add(size);
                                if (missing == false) itemsToAdd[linea - 5].SubItems.Add(status);
                                else
                                {
                                    itemsToAdd[linea - 5].SubItems.Add("File not found");
                                    itemsToAdd[linea - 5].BackColor = Color.LightGoldenrodYellow;
                                }
                            }
                            linea = linea + 1;
                        }
                        listView1.Items.AddRange(itemsToAdd.ToArray());

                    }
                    catch (Exception excpt)
                    {
                        this.Cursor = Cursors.Arrow;
                        MessageBox.Show("Error loading queue session. Unexpected file format." + Environment.NewLine + excpt.Message, "Queue file error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        btn_load_config.PerformClick();
                        read_saved_path();
                        return;
                    }
                    foreach (ListViewItem item in listView1.Items)
                    {
                        if (item.SubItems[5].Text == "Error") item.BackColor = Color.Orange;
                    }

                    this.Cursor = Cursors.Arrow;

                    calc_list_size();
                    calc_total_dur();
                    lbl_items.Text = listView1.Items.Count.ToString() + " files";


                    if (not_found > 0)
                    {
                        this.Cursor = Cursors.Arrow;
                        MessageBox.Show("Queue list loaded successfully. " + Environment.NewLine + not_found.ToString() + " queue file(s) were not found. " + Environment.NewLine + Environment.NewLine + "Please sort and check file list for items marked with status " + '\u0022' + "File not found" + '\u0022' + ".", "Queue list loaded with missing files", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    }
                    return;

                }
            }
            //End program crashed

            //Sendto parameters

            String[] arguments = Environment.GetCommandLineArgs();
            String[] file_drop = arguments.Skip(1).ToArray();
            Boolean no_tab_change = false;
            if (file_drop.Count() != 0)
            {
                change_tab_1 = false;
                change_tab_2 = false;
                no_tab_change = true;
                this.Cursor = Cursors.WaitCursor;

                List<string> files2 = new List<string>();

                int num_drop = 0;
                if (file_drop.Count() == 1 && Path.GetExtension(file_drop[0]) == ".ffq")
                //Load queue file
                {
                    int linea = 0;
                    int not_found = 0;
                    combo_presets.Text = "";
                    List<ListViewItem> itemsToAdd = new List<ListViewItem>();
                    try
                    {
                        foreach (string line in File.ReadLines(file_drop[0]))
                        {

                            if (linea == 0)
                            {
                                txt_parameters.Text = line;
                            }
                            if (linea == 1)
                            {
                                txt_format.Text = line;
                            }

                            if (linea == 2)
                            {
                                if (line == "Unchecked") checkBox1.CheckState = CheckState.Unchecked;
                                else checkBox1.CheckState = CheckState.Checked;
                            }

                            if (linea == 3)
                            {
                                if (line == "Unchecked") chk_suffix.CheckState = CheckState.Unchecked;
                                else
                                {
                                    chk_suffix.CheckState = CheckState.Checked;
                                    txt_suffix.Text = line;
                                }

                            }

                            if (linea == 4)
                            {
                                txt_path_main.Text = line;
                            }

                            if (linea > 4)
                            {

                                Boolean missing = false;
                                listView1.SmallImageList = imageList2;

                                itemsToAdd.Add(new ListViewItem(Path.GetFileName(line.Substring(0, line.LastIndexOf(" --0 "))), 1));
                                //ListViewItem elemento = new ListViewItem(line.Substring(0, line.LastIndexOf(" --0 ")), 1);
                                //Begin get file icon
                                Icon iconForFile = SystemIcons.WinLogo;

                                // Check to see if the image collection contains an image
                                // for this extension, using the extension as a key.
                                if (File.Exists(line.Substring(0, line.LastIndexOf(" --0 "))))
                                {
                                    if (!imageList2.Images.ContainsKey(System.IO.Path.GetExtension(line.Substring(0, line.LastIndexOf(" --0 ")))))
                                    {
                                        // If not, add the image to the image list.
                                        iconForFile = System.Drawing.Icon.ExtractAssociatedIcon(line.Substring(0, line.LastIndexOf(" --0 ")));
                                        imageList2.Images.Add(System.IO.Path.GetExtension(line.Substring(0, line.LastIndexOf(" --0 "))), iconForFile);
                                    }

                                    //listView1.Items.Add(elemento);
                                    itemsToAdd[linea - 5].ImageKey = System.IO.Path.GetExtension(System.IO.Path.GetExtension(line.Substring(0, line.LastIndexOf(" --0 "))));
                                }
                                else
                                {
                                    not_found = not_found + 1;
                                    missing = true;
                                }

                                //listView1.Items.Add(line.Substring(0,line.LastIndexOf(" --0 ")));
                                String type = line.Substring(line.LastIndexOf(" --0 ") + 5, line.Length - (line.LastIndexOf(" --0") + 5));
                                type = type.Substring(0, type.LastIndexOf(" --1"));
                                String dur = line.Substring(line.LastIndexOf(" --1 ") + 5, line.Length - (line.LastIndexOf(" --1") + 5));
                                dur = dur.Substring(0, dur.LastIndexOf(" --2"));
                                String size = line.Substring(line.LastIndexOf(" --2 ") + 5, line.Length - (line.LastIndexOf(" --2") + 5));
                                size = size.Substring(0, size.LastIndexOf(" --3"));
                                String status = line.Substring(line.LastIndexOf(" --3 ") + 5, line.Length - (line.LastIndexOf(" --3") + 5));

                                itemsToAdd[linea - 5].SubItems.Add(Path.GetDirectoryName(line.Substring(0, line.LastIndexOf(" --0 "))));
                                itemsToAdd[linea - 5].SubItems.Add(type);
                                itemsToAdd[linea - 5].SubItems.Add(dur);
                                itemsToAdd[linea - 5].SubItems.Add(size);
                                if (missing == false) itemsToAdd[linea - 5].SubItems.Add(status);
                                else
                                {
                                    itemsToAdd[linea - 5].SubItems.Add("File not found");
                                    itemsToAdd[linea - 5].BackColor = Color.LightGoldenrodYellow;
                                }
                            }
                            linea = linea + 1;
                        }
                        listView1.Items.AddRange(itemsToAdd.ToArray());

                    }
                    catch (Exception excpt)
                    {
                        this.Cursor = Cursors.Arrow;
                        MessageBox.Show("Error loading queue session. Unexpected file format." + Environment.NewLine + excpt.Message, "Queue file error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        btn_load_config.PerformClick();
                        read_saved_path();
                        return;
                    }

                    this.Cursor = Cursors.Arrow;
                    calc_list_size();
                    calc_total_dur();
                    lbl_items.Text = listView1.Items.Count.ToString() + " files";

                    if (not_found > 0)
                    {
                        this.Cursor = Cursors.Arrow;
                        MessageBox.Show("Queue list loaded successfully. " + Environment.NewLine + not_found.ToString() + " queue file(s) were not found. " + Environment.NewLine + Environment.NewLine + "Please sort and check file list for items marked with status " + '\u0022' + "File not found" + '\u0022' + ".", "Queue list loaded with missing files", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    }
                    this.Cursor = Cursors.Arrow;
                    return;
                }

                //End load queue file

                foreach (String dropped in file_drop)
                {
                    if (File.Exists(dropped))
                    {
                        files2.Add(dropped);
                        num_drop = files2.Count;
                    }
                    else
                    {
                        if (Directory.Exists(dropped))
                        {
                            if (add_subfs == false)
                            {
                                foreach (String file in Directory.GetFiles(dropped))
                                {
                                    if (!File.GetAttributes(file).HasFlag(FileAttributes.Hidden))
                                    {
                                        files2.Add(file);
                                        num_drop = num_drop + 1;
                                    }
                                }
                            }
                            else
                            {
                                try
                                {
                                    foreach (string f in Directory.GetFiles(dropped, "*.*", System.IO.SearchOption.AllDirectories))
                                    {
                                        if (!File.GetAttributes(f).HasFlag(FileAttributes.Hidden))
                                        {
                                            files2.Add(f);
                                            num_drop = num_drop + 1;
                                        }
                                    }
                                }
                                catch (System.Exception excpt)
                                {
                                    var a = MessageBox.Show("Error: " + excpt.Message, "Access error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                    this.Cursor = Cursors.Arrow;
                                    return;
                                }
                            }
                        }
                    }
                }

                if (num_drop >= 5000)
                {
                    var a = MessageBox.Show("Adding " + num_drop + " files could take some time. Continue?", "Adding many files", MessageBoxButtons.OKCancel, MessageBoxIcon.Question);
                    if (a == DialogResult.Cancel)
                    {
                        this.Cursor = Cursors.Arrow;
                        return;
                    }
                }

                files_to_add = files2;
                canceled_file_adding = false;
                btn_cancel_add.Enabled = true;
                btn_cancel_add.Visible = true;
                btn_cancel_add.Refresh();
                BG_Files.RunWorkerAsync();
                this.Cursor = Cursors.Arrow;

                //End Sendto files
            }
            //Remember last tab

            String f_remember = String.Empty;
            if (is_portable == false)
            {
                f_remember = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_remember.ini";
            }
            else
            {
                f_remember = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_remember_portable.ini";
            }

            if (File.Exists(f_remember))
            {
                remember_last_tab = true;
                if (no_tab_change == false) this.InvokeEx(f => f.tabControl1.SelectedIndex = Convert.ToInt16(File.ReadAllText(f_remember)));
            }
            else
            {
                remember_last_tab = false;
            }
        }

        private void button10_Click_1(object sender, EventArgs e)
        {
            pic_title.Focus();
            if (is_portable == true) return;

            Boolean writable = false;
            try
            {
                FileStream fs = File.Create(Path.Combine(Application.StartupPath, Path.GetRandomFileName()), 1, FileOptions.DeleteOnClose);
                writable = true;
            }
            catch
            {
                writable = false;
            }

            OpenFileDialog browse_file = new OpenFileDialog();
            String file_path = String.Empty;
            browse_file.Filter = "ffmpeg.exe |ffmpeg.exe";

            if (browse_file.ShowDialog() == DialogResult.OK)
            {
                file_path = browse_file.FileName;
                if (Path.GetFileName(file_path) != "ffmpeg.exe")
                {
                    MessageBox.Show("Selected file is not ffmpeg.exe.", "Wrong executable file", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    change_ff.PerformClick();
                    return;
                }
            }
            else
            {
                return;
            }

            if (back_ff == true)
            {
                var a = MessageBox.Show("Do you want to backup current ffmpeg.exe before switching versions?", "Confirm backup", MessageBoxButtons.YesNo, MessageBoxIcon.Question);

                if (a == DialogResult.Yes)
                {
                    FolderBrowserDialog f_back = new FolderBrowserDialog();
                    f_back.Description = "Select backup folder for ffmpeg.exe. If file exists on destination path it will be overwritten.";
                    f_back.ShowNewFolderButton = true;
                    if (f_back.ShowDialog() == DialogResult.OK)
                    {
                        back_ff = true;
                        try
                        {
                            File.Copy(Path.Combine(Application.StartupPath, "ffmpeg.exe"), Path.Combine(f_back.SelectedPath, "ffmpeg.exe"), false);
                        }
                        catch (Exception excpt)
                        {
                            MessageBox.Show("Error creating backup. Please select another location. " + Environment.NewLine + excpt.Message, "Error creating backup", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            return;
                        }
                    }
                    else
                    {
                        return;
                    }
                }
                else
                {
                    back_ff = false;
                }
            }

            String path = "cmd.exe";
            String param = "/C copy " + '\u0022' + file_path + '\u0022' + " " + '\u0022' + Application.StartupPath + '\u0022' + " / Y";
            Process ff_ext = new Process();
            ff_ext.StartInfo.FileName = path;
            ff_ext.StartInfo.Arguments = param;
            ff_ext.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
            if (writable == false)
            {
                ff_ext.StartInfo.Verb = "runas";
                MessageBox.Show("Please allow command prompt admin rights to replace current ffmpeg.exe.", "Admin rights required next", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            try
            {
                ff_ext.Start();
                ff_ext.WaitForExit();
            }
            catch
            {
                MessageBox.Show("Error creating destination file.", "Write error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

            pic_title.Focus();
            //FFmpeg version
            Task tt = Task.Run(() =>
            {
                this.InvokeEx(f => f.change_ff.Text = "Loading...");
                Process proc_v = new Process();
                proc_v.StartInfo.FileName = Path.Combine(Application.StartupPath, "ffmpeg.exe");
                proc_v.StartInfo.Arguments = "-version";

                proc_v.StartInfo.RedirectStandardOutput = true;
                proc_v.StartInfo.RedirectStandardError = true;
                proc_v.StartInfo.UseShellExecute = false;
                proc_v.StartInfo.CreateNoWindow = true;
                proc_v.EnableRaisingEvents = true;
                try
                {
                    proc_v.Start();
                    Boolean is_32 = false;
                    String arch = String.Empty;
                    if ((Environment.OSVersion.Version.Major > 5)
                    || ((Environment.OSVersion.Version.Major == 5) && (Environment.OSVersion.Version.Minor >= 1)))
                    {
                        NativeMethods.IsWow64Process(proc_v.Handle, out is_32);
                        if (is_32 == true) arch = "x86";
                        else
                        {
                            arch = "x64";
                        }
                    }
                    String err_txt = String.Empty;
                    err_txt = proc_v.StandardOutput.ReadLine();
                    err_txt = err_txt.Substring(0, err_txt.IndexOf("Copyright"));
                    err_txt = err_txt.Replace("ff", "FF");
                    if (err_txt.Length >= 42)
                    {
                        this.InvokeEx(f => f.change_ff.Text = err_txt.Substring(0, 42) + " " + arch);
                    }
                    else
                    {
                        this.InvokeEx(f => f.change_ff.Text = err_txt + " " + arch);
                    }
                }
                catch
                {
                    MessageBox.Show("Error parsing ffmpeg version. File may be damaged.", "FFmpeg error", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                }
            });

            //End FFmpeg version
        }

        private void checkBox3_CheckedChanged(object sender, EventArgs e)
        {
            Boolean prev_state = false;
            if (checkBox3.CheckState == CheckState.Checked) prev_state = false;
            if (checkBox3.CheckState == CheckState.Unchecked) prev_state = true;

            String path = String.Empty;
            if (is_portable == false)
            {
                path = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_batch.ini";
            }
            else
            {
                path = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_batch_portable.ini";
            }

            int linea = 0;

            foreach (string line in File.ReadLines(path))
            {
                linea = linea + 1;

                if (linea == 3)
                {
                    if (line == "yes")
                    {
                        if (prev_state == false)
                        {
                            btn_save_config.ImageKey = "Save_settings_39.png";
                            toolTip_settings.SetToolTip(this.btn_save_config, "Save current parameters as default.");
                        }
                        else
                        {
                            btn_save_config.ImageKey = "save_pending.png";
                            toolTip_settings.SetToolTip(this.btn_save_config, "Modified settings not saved.");
                        }
                    }

                    if (line == "no")
                    {
                        if (prev_state == true)
                        {
                            btn_save_config.ImageKey = "Save_settings_39.png";
                            toolTip_settings.SetToolTip(this.btn_save_config, "Save current parameters as default.");
                        }
                        else
                        {
                            btn_save_config.ImageKey = "save_pending.png";
                            toolTip_settings.SetToolTip(this.btn_save_config, "Modified settings not saved.");
                        }
                    }
                }
            }
        }

        private void checkBox1_CheckedChanged(object sender, EventArgs e)
        {
            Boolean prev_state = false;
            if (checkBox1.CheckState == CheckState.Checked) prev_state = false;
            if (checkBox1.CheckState == CheckState.Unchecked) prev_state = true;

            String path = String.Empty;
            if (is_portable == false)
            {
                path = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_batch.ini";
            }
            else
            {
                path = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_batch_portable.ini";
            }

            int linea = 0;

            foreach (string line in File.ReadLines(path))
            {
                linea = linea + 1;

                if (linea == 6)
                {
                    if (line == "keep_yes")
                    {
                        if (prev_state == false)
                        {
                            btn_save_config.ImageKey = "Save_settings_39.png";
                            toolTip_settings.SetToolTip(this.btn_save_config, "Save current parameters as default.");
                        }
                        else
                        {
                            btn_save_config.ImageKey = "save_pending.png";
                            toolTip_settings.SetToolTip(this.btn_save_config, "Modified settings not saved.");
                        }
                    }

                    if (line == "keep_no")
                    {
                        if (prev_state == true)
                        {
                            btn_save_config.ImageKey = "Save_settings_39.png";
                            toolTip_settings.SetToolTip(this.btn_save_config, "Save current parameters as default.");
                        }
                        else
                        {
                            btn_save_config.ImageKey = "save_pending.png";
                            toolTip_settings.SetToolTip(this.btn_save_config, "Modified settings not saved.");
                        }
                    }
                }
            }
        }

        private void textBox1_TextChanged(object sender, EventArgs e)
        {
            btn_save_preset.Enabled = true;
            if (just_started5 == true) btn_save_preset.Enabled = false;
            just_started5 = false;
            btn_try_pr.Image = img_try.Images[0];
        }

        private void btn_exit_Click(object sender, EventArgs e)
        {
            Application.Exit();
        }

        private void combo_prio_Click(object sender, EventArgs e)
        {
            //Load priority

            String f_prio = String.Empty;
            if (is_portable == false)
            {
                f_prio = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_priority.ini";
            }
            else
            {
                f_prio = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_priority_portable.ini";
            }

            if (File.Exists(f_prio))
            {
                String saved_prio = File.ReadAllText(f_prio);
                if (saved_prio != String.Empty)
                {
                    current_prio = Convert.ToInt16(saved_prio);
                }
            }
            else
            {
                current_prio = 2;
            }
            
            //End load priority
        }

        private void cb_hwdecode_SelectedIndexChanged_1(object sender, EventArgs e)
        {
            int current_dcd = cb_hwdecode.SelectedIndex;
            String f_hw_dcd = String.Empty;
            if (is_portable == false)
            {
                f_hw_dcd = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_hw_dcd.ini";
            }
            else
            {
                f_hw_dcd = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_hw_dcd_portable.ini";
            }
            decoders.Clear();

            decoders.Add(cb_hwdecode.SelectedItem.ToString());

            if (!Directory.Exists(System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch")))
            {
                try
                {
                    Directory.CreateDirectory(System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch"));
                    File.WriteAllText(f_hw_dcd, decoders[0]);
                }
                catch
                {

                }
            }
            else
            {
                try
                {
                    File.WriteAllText(f_hw_dcd, decoders[0]);
                }
                catch { }
            }


        }

        private void btn_ref_dcd_Click(object sender, EventArgs e)
        {
            cb_hwdecode.Items.Clear();
            String f_hw_dcd = String.Empty;
            if (is_portable == false)
            {
                f_hw_dcd = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_hw_dcd.ini";
            }
            else
            {
                f_hw_dcd = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_hw_dcd_portable.ini";
            }
            if (File.Exists(f_hw_dcd))
            {
                try
                {
                    File.Delete(f_hw_dcd);
                }
                catch
                {
                    MessageBox.Show("Unknown error refreshing decoders list", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
            }

            cb_hwdecode.Items.Add("none");
            decoders.Add("none");
            cb_hwdecode.SelectedIndex = 0;
            String selected = cb_hwdecode.SelectedItem.ToString();
            hw_decoders = false;
            if (hw_decoders == false)
            {
                hw_decoders = true;

                //Read hardware decoders
                Process consola_hw = new Process();

                consola_hw.StartInfo.FileName = System.IO.Path.Combine(Application.StartupPath, "ffmpeg.exe");
                consola_hw.StartInfo.Arguments = " -hwaccels";
                consola_hw.StartInfo.RedirectStandardOutput = true;
                consola_hw.StartInfo.RedirectStandardError = true;
                consola_hw.StartInfo.UseShellExecute = false;
                consola_hw.StartInfo.CreateNoWindow = true;
                consola_hw.EnableRaisingEvents = true;

                String duracion = String.Empty;
                String std_out = String.Empty;
                consola_hw.Start();
                Boolean hw_found = false;

                while (!consola_hw.StandardOutput.EndOfStream)
                {
                    std_out = consola_hw.StandardOutput.ReadLine();

                    if (std_out.Contains("Hardware acceleration methods:"))
                    {
                        if (selected != "auto") cb_hwdecode.Items.Add("auto");
                        hw_found = true;
                        decoders.Add("auto");
                        continue;
                    }

                    if (hw_found == true && std_out != String.Empty && std_out != selected)
                    {
                        cb_hwdecode.Items.Add(std_out);
                        decoders.Add(std_out);
                    }
                }
                consola_hw.WaitForExit();
                consola_hw.Close();
                File.WriteAllLines(f_hw_dcd, decoders);
            }

        }

        private void btn_save_preset_Click(object sender, EventArgs e)
        {
            if (txt_parameters.Text.Length < 6)
            {
                MessageBox.Show("Parameters field is too short.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            if (combo_presets.Text == "Default parameters")
            {
                btn_save_config.PerformClick();
                return;
            }
            if (combo_presets.Text == "")
            {
                MessageBox.Show("Preset description cannot be empty");
                return;
            }
            if (combo_presets.SelectedIndex == 0)
            {
                return;
            }
            
            String path_d_pr = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_presets.ini";
            if (is_portable == true)
            {
                path_d_pr = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_presets_portable.ini";
            }
            
            File.Create(System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_presets2.txt").Dispose();
            String path2_d_pr = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_presets2.txt";


            int ind = 0;
            foreach (string line in File.ReadLines(path_d_pr))
            {
                ind = ind + 1;
                String linea_sin = String.Empty;

                if (!line.Contains("PR: "))
                {
                    linea_sin = line + Environment.NewLine;
                    File.AppendAllText(path2_d_pr, linea_sin);
                }

                if (line.LastIndexOf("&") >= 0)
                {
                    if (line.Substring(4, line.LastIndexOf("&") - 5) != combo_presets.Text)
                    {
                        if (ind <= File.ReadLines(path_d_pr).Count() - 1)
                        {
                            linea_sin = line + Environment.NewLine;
                            File.AppendAllText(path2_d_pr, linea_sin);
                        }
                        else
                        {
                            File.AppendAllText(path2_d_pr, line);
                        }
                    }
                }
            }
            File.Delete(path_d_pr);
            File.Copy(path2_d_pr, path_d_pr);
            File.Delete(path2_d_pr);
            System.Threading.Thread.Sleep(50);
            btn_save_preset.Enabled = false;

            String path_pr = "";
            if (is_portable == true)  path_pr = Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_presets_portable.ini";
            else path_pr = Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_presets.ini";

            String createText = "PR: " + combo_presets.Text + " & " + txt_parameters.Text + " % " + txt_format.Text;
            File.AppendAllText(path_pr, Environment.NewLine + createText);

            combo_presets.Items.Clear();
            combo_presets.Items.Add("Default parameters");
            String path2 = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_batch.ini";
            int linea = 0;

            foreach (string line in File.ReadLines(path2))
            {
                linea = linea + 1;
                if (linea == 1)
                {
                    this.InvokeEx(f => f.txt_parameters.Text = line);
                    continue;
                }

                if (linea == 2)
                {
                    this.InvokeEx(f => f.txt_format.Text = line);
                    continue;
                }

                if (line == "yes")

                {
                    this.InvokeEx(f => f.checkBox3.CheckState = CheckState.Checked);
                    continue;
                }

                if (line == "no")
                {
                    this.InvokeEx(f => f.checkBox3.CheckState = CheckState.Unchecked);
                    continue;
                }

                //if (linea == 4)
                //{
                if (line == "Vn")
                {
                    this.InvokeEx(f => f.chk_suffix.CheckState = CheckState.Unchecked);
                    continue;
                }
                if (line.Substring(0, 2) == "Vs")
                {
                    this.InvokeEx(f => f.chk_suffix.CheckState = CheckState.Checked);
                    this.InvokeEx(f => f.txt_suffix.Text = line.Substring(3, line.Length - 3));
                    continue;
                }
                //}

                if (line == "grid_yes")
                {
                    this.InvokeEx(f => f.listView1.GridLines = true);
                    this.InvokeEx(f => f.listView2.GridLines = true);
                    this.InvokeEx(f => f.listView3.GridLines = true);
                    continue;
                }
                if (line == "grid_no")
                {
                    this.InvokeEx(f => f.listView1.GridLines = false);
                    this.InvokeEx(f => f.listView2.GridLines = false);
                    this.InvokeEx(f => f.listView3.GridLines = false);
                    continue;
                }

                if (line == "keep_yes")
                {
                    this.InvokeEx(f => f.checkBox1.CheckState = CheckState.Checked);
                    continue;
                }
                if (line == "keep_no")
                {
                    this.InvokeEx(f => f.checkBox1.CheckState = CheckState.Unchecked);
                    continue;
                }

                if (line == "subf_yes")
                {
                    this.InvokeEx(f => f.chk_subfolders.CheckState = CheckState.Checked);
                    add_subfs = true;
                    continue;
                }
                if (line == "subf_no")
                {
                    this.InvokeEx(f => f.chk_subfolders.CheckState = CheckState.Unchecked);
                    add_subfs = false;
                    continue;
                }                
            }

            if (File.Exists(path_pr) == true)
            {
                foreach (string line in File.ReadLines(path_pr))
                {
                    if (line.Length > 8)
                    {
                        if (line.Substring(0, 7).ToLower() == "version")
                        {
                            txt_config_ver.Text = line.Substring(8, line.Length - 8);
                            continue;
                        }
                    }

                    if (line.Length > 4 && line.Substring(0,4) == "PR: ")
                    {
                        this.InvokeEx(f => f.combo_presets.Items.Add(line.Substring(4, line.LastIndexOf("&") - 5)));
                    }
                }
            }

                combo_presets.SelectedIndex = combo_presets.Items.Count - 1;
            MessageBox.Show("The new preset has been saved.", "Preset saved", MessageBoxButtons.OK, MessageBoxIcon.Information);
            btn_load_config.PerformClick();
            combo_presets.SelectedIndex = combo_presets.Items.Count - 1;
        }

        private void txt_format_TextChanged(object sender, EventArgs e)
        {
            btn_save_preset.Enabled = true;
            if (just_started5 == true) btn_save_preset.Enabled = false;
            just_started5 = false;
        }

        private void combo_presets_TextChanged(object sender, EventArgs e)
        {
            btn_save_preset.Enabled = true;
        }

        private void textBox5_MouseClick(object sender, MouseEventArgs e)
        {
            Pg1.Focus();
        }

        private void cti4_2_Click(object sender, EventArgs e)
        {
            listView1.GridLines = !listView1.GridLines;
            listView2.GridLines = !listView2.GridLines;
            listView3.GridLines = !listView3.GridLines;

            Boolean prev_state = false;
            if (listView1.GridLines == true) prev_state = false;
            if (listView1.GridLines == false) prev_state = true;

            String path = String.Empty;
            if (is_portable == false)
            {
                path = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_batch.ini";
            }
            else
            {
                path = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_batch_portable.ini";
            }

            int linea = 0;

            foreach (string line in File.ReadLines(path))
            {
                linea = linea + 1;

                if (linea == 5)
                {
                    if (line == "grid_yes")
                    {
                        if (prev_state == false)
                        {
                            btn_save_config.ImageKey = "Save_settings_39.png";
                            toolTip_settings.SetToolTip(this.btn_save_config, "Save current parameters as default.");
                        }
                        else
                        {
                            btn_save_config.ImageKey = "save_pending.png";
                            toolTip_settings.SetToolTip(this.btn_save_config, "Modified settings not saved.");
                        }
                    }

                    if (line == "grid_no")
                    {
                        if (prev_state == true)
                        {
                            btn_save_config.ImageKey = "Save_settings_39.png";
                            toolTip_settings.SetToolTip(this.btn_save_config, "Save current parameters as default.");
                        }
                        else
                        {
                            btn_save_config.ImageKey = "save_pending.png";
                            toolTip_settings.SetToolTip(this.btn_save_config, "Modified settings not saved.");
                        }
                    }
                }
            }
        }

        private void cti_sort_multi_Click(object sender, EventArgs e)
        {

        }

        private void watch_ff_Deleted(object sender, FileSystemEventArgs e)
        {
            if (!File.Exists(Path.Combine(Application.StartupPath, "ffmpeg.exe")))
            {
                MessageBox.Show("FFmpeg executable file was deleted. Application will not work.", "FFmpeg Batch error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                //FFmpeg version
                new System.Threading.Thread(() =>
                {
                    System.Threading.Thread.CurrentThread.IsBackground = true;
                    this.InvokeEx(f => f.change_ff.Text = "Loading...");
                    Process proc_v = new Process();
                    proc_v.StartInfo.FileName = Path.Combine(Application.StartupPath, "ffmpeg.exe");
                    proc_v.StartInfo.Arguments = "-version";

                    proc_v.StartInfo.RedirectStandardOutput = true;
                    proc_v.StartInfo.RedirectStandardError = true;
                    proc_v.StartInfo.UseShellExecute = false;
                    proc_v.StartInfo.CreateNoWindow = true;
                    proc_v.EnableRaisingEvents = true;
                    try
                    {
                        proc_v.Start();
                        ff_ver_proc = proc_v.Id;

                        String err_txt = String.Empty;
                        err_txt = proc_v.StandardOutput.ReadLine();
                        err_txt = err_txt.Substring(0, err_txt.IndexOf("C"));
                        err_txt = err_txt.Replace("ff", "FF");
                        this.InvokeEx(f => f.change_ff.Text = err_txt);
                    }
                    catch
                    {
                        MessageBox.Show("Error parsing ffmpeg version. File may be damaged.", "FFmpeg Batch error", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    }
                }).Start();

                //End FFmpeg version
            }
            if (!File.Exists(Path.Combine(Application.StartupPath, "ffprobe.exe")))
            {
                MessageBox.Show("FFprobe executable file was deleted. Application will not work.", "Executable error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void watch_ff_Renamed(object sender, RenamedEventArgs e)
        {
            if (!File.Exists(Path.Combine(Application.StartupPath, "ffmpeg.exe")))
            {
                MessageBox.Show("FFmpeg executable file was renamed. Application will not work.", "FFmpeg Batch error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                //FFmpeg version
                new System.Threading.Thread(() =>
                {
                    System.Threading.Thread.CurrentThread.IsBackground = true;
                    this.InvokeEx(f => f.change_ff.Text = "Loading...");
                    Process proc_v = new Process();
                    proc_v.StartInfo.FileName = Path.Combine(Application.StartupPath, "ffmpeg.exe");
                    proc_v.StartInfo.Arguments = "-version";

                    proc_v.StartInfo.RedirectStandardOutput = true;
                    proc_v.StartInfo.RedirectStandardError = true;
                    proc_v.StartInfo.UseShellExecute = false;
                    proc_v.StartInfo.CreateNoWindow = true;
                    proc_v.EnableRaisingEvents = true;
                    try
                    {
                        proc_v.Start();
                        ff_ver_proc = proc_v.Id;

                        String err_txt = String.Empty;
                        err_txt = proc_v.StandardOutput.ReadLine();
                        err_txt = err_txt.Substring(0, err_txt.IndexOf("C"));
                        err_txt = err_txt.Replace("ff", "FF");
                        this.InvokeEx(f => f.change_ff.Text = err_txt);
                    }
                    catch
                    {
                        MessageBox.Show("Error parsing ffmpeg version. File may be damaged.", "FFmpeg Batch error", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    }
                }).Start();

                //End FFmpeg version
            }

            if (!File.Exists(Path.Combine(Application.StartupPath, "ffprobe.exe")))
            {
                MessageBox.Show("FFprobe executable file was renamed. Application will not work.", "FFmpeg Batch error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void watch_ff_Created(object sender, FileSystemEventArgs e)
        {
            //FFmpeg version
            new System.Threading.Thread(() =>
            {
                System.Threading.Thread.CurrentThread.IsBackground = true;
                this.InvokeEx(f => f.change_ff.Text = "Loading...");
                Process proc_v = new Process();
                proc_v.StartInfo.FileName = Path.Combine(Application.StartupPath, "ffmpeg.exe");
                proc_v.StartInfo.Arguments = "-version";

                proc_v.StartInfo.RedirectStandardOutput = true;
                proc_v.StartInfo.RedirectStandardError = true;
                proc_v.StartInfo.UseShellExecute = false;
                proc_v.StartInfo.CreateNoWindow = true;
                proc_v.EnableRaisingEvents = true;
                try
                {
                    proc_v.Start();
                    ff_ver_proc = proc_v.Id;

                    String err_txt = String.Empty;
                    err_txt = proc_v.StandardOutput.ReadLine();
                    err_txt = err_txt.Substring(0, err_txt.IndexOf("C"));
                    err_txt = err_txt.Replace("ff", "FF");
                    this.InvokeEx(f => f.change_ff.Text = err_txt);
                }
                catch
                {
                    MessageBox.Show("Error parsing ffmpeg version. File may be damaged.", "FFmpeg error", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                }

            }).Start();

            //End FFmpeg version
        }

        private void check_concat_CheckedChanged(object sender, EventArgs e)
        {
            String f_concat = String.Empty;
            if (is_portable == false)
            {
                f_concat = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_concat.ini";
            }
            else
            {
                f_concat = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_concat_portable.ini";
            }

            if (check_concat.Checked == false)
            {
                if (File.Exists(f_concat))
                {
                    try
                    {
                        File.Delete(f_concat);


                    }
                    catch
                    {
                        MessageBox.Show("An error occurred while trying to set concat option", "Error saving option", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
            }
            else
            {
                if (!File.Exists(f_concat))
                {
                    try
                    {
                        File.WriteAllText(f_concat, String.Empty);


                    }
                    catch
                    {
                        MessageBox.Show("An error occurred while trying to set concat option", "Error saving option", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
            }
        }

        private void btn_kf_Click(object sender, EventArgs e)
        {
            Pg1.Focus();

            if (listView1.Items.Count == 1)
            {
                listView1.Items[0].Selected = true;
                listView1.Select();
            }
            if (listView1.SelectedIndices.Count != 1)
            {
                MessageBox.Show("Please select a file on the list to read keyframes information.", "No file selected");
                return;
            }
            String file_prueba = listView1.SelectedItems[0].SubItems[1].Text + "\\" + listView1.SelectedItems[0].Text;

            new System.Threading.Thread(() =>
            {
                System.Threading.Thread.CurrentThread.IsBackground = true;

                this.InvokeEx(f => this.Cursor = Cursors.WaitCursor);

                Form frm_kf_wait = new Form();
                frm_kf_wait.Name = "Keyframes_wait";
                frm_kf_wait.Text = "Analysing file";
                frm_kf_wait.Icon = this.Icon;
                frm_kf_wait.Height = 120;
                frm_kf_wait.Width = 247;
                frm_kf_wait.FormBorderStyle = FormBorderStyle.Fixed3D;
                frm_kf_wait.ControlBox = false;
                //frm_kf_wait.MinimizeBox = false;
                //frm_kf_wait.MaximizeBox = false;
                Label kf_wait = new Label();
                kf_wait.Top = 30;
                kf_wait.Left = 30;
                kf_wait.AutoSize = true;
                kf_wait.Text = "Analysing file, please wait...";
                kf_wait.Parent = frm_kf_wait;
                frm_kf_wait.StartPosition = FormStartPosition.CenterScreen;
                frm_kf_wait.Show();
                kf_wait.Refresh();


                Form frm_kf = new Form();
                frm_kf.Name = "Keyframes";
                frm_kf.Icon = this.Icon;

                frm_kf.Height = 575;
                frm_kf.Width = 377;
                frm_kf.FormBorderStyle = FormBorderStyle.Fixed3D;
                frm_kf.MaximizeBox = false;
                frm_kf.MinimizeBox = false;

                var fuente_list = new System.Drawing.Font("Microsoft Sans Serif", 8, FontStyle.Regular);

                LB1_kf.Clear();
                LB1_kf.Items.Clear();
                LB1_kf.Parent = frm_kf;
                LB1_kf.Left = 20;
                LB1_kf.Top = 65;
                LB1_kf.Height = 425;
                LB1_kf.Width = 320;
                LB1_kf.Font = fuente_list;
                LB1_kf.Columns.Add("Number", 58, HorizontalAlignment.Center);
                LB1_kf.Columns.Add("Position", 138, HorizontalAlignment.Center);
                LB1_kf.Columns.Add("Interval", 100, HorizontalAlignment.Center);
                LB1_kf.Activation = ItemActivation.OneClick;
                LB1_kf.FullRowSelect = true;
                LB1_kf.LabelEdit = true;
                LB1_kf.HeaderStyle = ColumnHeaderStyle.Nonclickable;
                LB1_kf.View = View.Details;
                LB1_kf.GridLines = true;


                TextBox titulo = new TextBox();
                titulo.Parent = frm_kf;
                titulo.Top = 15;
                titulo.Left = 20;
                titulo.Width = 321;
                titulo.TabIndex = 0;
                var fuente = new System.Drawing.Font("Microsoft Sans Serif", 11, FontStyle.Bold);

                titulo.Font = fuente;
                titulo.BorderStyle = BorderStyle.Fixed3D;
                titulo.TextAlign = HorizontalAlignment.Center;
                titulo.ReadOnly = true;

                titulo.Text = "Show video keyframes";

                Button boton_kf_close = new Button();
                boton_kf_close.Parent = frm_kf;
                boton_kf_close.Left = 291;
                boton_kf_close.Top = 495;
                boton_kf_close.Width = 50;
                boton_kf_close.Height = 26;
                boton_kf_close.Text = "Close";
                boton_kf_close.Click += new EventHandler(boton_kf_close_Click);

                Button boton_set_start = new Button();
                boton_set_start.Parent = frm_kf;
                boton_set_start.Left = 84;
                boton_set_start.Top = 495;
                boton_set_start.Width = 99;
                boton_set_start.Height = 26;
                boton_set_start.Text = "Set as start time";
                boton_set_start.Click += new EventHandler(boton_set_start_Click);

                Button boton_set_end = new Button();
                boton_set_end.Parent = frm_kf;
                boton_set_end.Left = 183;
                boton_set_end.Top = 495;
                boton_set_end.Width = 99;
                boton_set_end.Height = 26;
                boton_set_end.Text = "Set as end time";
                boton_set_end.Click += new EventHandler(boton_set_end_Click);

                Button boton_copy_kf = new Button();
                boton_copy_kf.Parent = frm_kf;
                boton_copy_kf.Left = 20;
                boton_copy_kf.Top = 495;
                boton_copy_kf.Width = 55;
                boton_copy_kf.Height = 26;
                boton_copy_kf.Text = "Copy";
                boton_copy_kf.Click += new EventHandler(boton_copy_kf_Click);

                Process consola = new Process();

                consola.StartInfo.FileName = Path.Combine(Application.StartupPath, "ffprobe.exe");

                String fichero = Path.GetFileName(file_prueba);
                TextBox titulo2 = new TextBox();
                titulo2.Parent = frm_kf;
                titulo2.Top = 42;
                titulo2.Left = 20;
                titulo2.Width = 318;

                var fuente2 = new System.Drawing.Font("Microsoft Sans Serif", 10, FontStyle.Regular);

                titulo2.Font = fuente2;
                titulo2.BorderStyle = BorderStyle.None;
                titulo2.TextAlign = HorizontalAlignment.Center;
                titulo2.ReadOnly = true;

                titulo2.Text = Path.GetFileName(file_prueba);

                frm_kf.StartPosition = FormStartPosition.CenterScreen;

                Decimal promed = 0;
                Decimal prev = 0;
                int keyframes = 0;
                int prev_keys = 0;
                String k_item = String.Empty;
                String ffpr_key = " -loglevel error -select_streams v:0 -show_entries packet=pts_time,flags -of csv=print_section=0 ";
                consola.StartInfo.Arguments = ffpr_key + '\u0022' + file_prueba + '\u0022';

                consola.StartInfo.RedirectStandardOutput = true;
                consola.StartInfo.RedirectStandardError = true;
                consola.StartInfo.UseShellExecute = false;
                consola.StartInfo.CreateNoWindow = true;
                consola.EnableRaisingEvents = true;
                try
                {
                    consola.Start();

                    while (!consola.StandardOutput.EndOfStream)
                    {
                        k_item = consola.StandardOutput.ReadLine();
                        if (k_item.Contains("K"))
                        {

                            Decimal number = 0;
                            String interval2 = String.Empty;
                            if (LB1_kf.Items.Count > 0)
                            {
                                Decimal interval = Convert.ToDecimal(k_item.Substring(0, k_item.Length - 6));

                                if (LB1_kf.Items[prev_keys].Text != String.Empty)
                                {

                                    interval2 = Regex.Match(LB1_kf.Items[prev_keys].SubItems[1].Text, @"(\d+(\.\d+)?)|(\.\d+)").Value;
                                    number = Convert.ToDecimal(interval2);

                                }
                                prev = interval - number;
                                prev_keys = prev_keys + 1;
                                LB1_kf.Items.Add(keyframes.ToString());
                                LB1_kf.Items[keyframes].SubItems.Add(k_item.Substring(0, k_item.Length - 6) + " seconds");
                                if (System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator == ".")
                                {
                                    LB1_kf.Items[keyframes].SubItems.Add(prev.ToString() + " s.");
                                }
                                else
                                {
                                    LB1_kf.Items[keyframes].SubItems.Add(prev.ToString() + " ms.");
                                }
                            }
                            else
                            {

                                LB1_kf.Items.Add(keyframes.ToString());
                                LB1_kf.Items[keyframes].SubItems.Add(k_item.Substring(0, k_item.Length - 6) + " seconds.");
                                LB1_kf.Items[keyframes].SubItems.Add("");
                            }
                            keyframes = keyframes + 1;

                            promed = promed + prev;
                        }

                    }

                    consola.WaitForExit();

                    if (System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator == ".")
                    {
                        LB1_kf.Items.Add("");
                        LB1_kf.Items.Add("");
                        LB1_kf.Items[keyframes + 1].SubItems.Add("Average keyframe interval");
                        int l = (promed / (keyframes - 1)).ToString().Length;
                        if (l > 9)
                        {
                            LB1_kf.Items[keyframes + 1].SubItems.Add((promed / (keyframes - 1)).ToString().Substring(0, 5) + " s");
                        }
                        else
                        {
                            LB1_kf.Items[keyframes + 1].SubItems.Add((promed / (keyframes - 1)).ToString());
                        }
                    }
                    else
                    {
                        LB1_kf.Items.Add("");
                        LB1_kf.Items.Add("");
                        LB1_kf.Items[keyframes + 1].SubItems.Add("Average keyframe interval");
                        int l = (promed / 1000 / (keyframes - 1)).ToString().Length;
                        if (l > 9)
                        {
                            LB1_kf.Items[keyframes + 1].SubItems.Add((promed / 1000 / (keyframes - 1)).ToString().Substring(0, 5) + " s");
                        }
                        else
                        {
                            LB1_kf.Items[keyframes + 1].SubItems.Add((promed / 1000 / (keyframes - 1)).ToString() + " s");
                        }


                    }
                    LB1_kf.TopItem = LB1_kf.Items[LB1_kf.Items.Count - 1];
                }
                catch (Exception excpt)
                {
                    MessageBox.Show("Error obtaining keyframes. Input format not supported." + Environment.NewLine + excpt.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error); ;
                    return;
                }

                this.InvokeEx(f => this.Enabled = false);
                frm_kf_wait.Close();
                frm_kf.ShowDialog();
                this.InvokeEx(f => this.Cursor = Cursors.Arrow);
                this.InvokeEx(f => this.Enabled = true);

            }).Start();
        }

        private void boton_set_end_Click(object sender, EventArgs e)
        {
            if (LB1_kf.SelectedIndices.Count != 1) return;
            if (LB1_kf.SelectedIndices.Count == 1)
            {
                if (LB1_kf.SelectedItems[0].Text == String.Empty) return;
            }

            String dur = "";
            String seconds = LB1_kf.SelectedItems[0].SubItems[1].Text.Replace(" seconds", String.Empty).Replace(".", String.Empty);
            Double seconds_d = Convert.ToDouble(seconds);
            seconds_d = seconds_d / 1000;
            TimeSpan t = TimeSpan.FromSeconds(seconds_d);
            dur = string.Format("{0:D2}:{1:D2}:{2:D2}.{3:D3}",
                         (int)t.TotalHours,
                         t.Minutes,
                         t.Seconds,
                         t.Milliseconds);

            if (seconds_d / 1000 < 36000)
            {
                this.InvokeEx(f => f.txt_fin.Text = dur.Substring(1, dur.Length - 1));
            }
            else
            {
                this.InvokeEx(f => f.txt_fin.Text = dur);
            }
        }

        private void boton_kf_close_Click(object sender, EventArgs e)
        {
            ActiveForm.Close();
            this.InvokeEx(f => this.TopMost = true);
            this.InvokeEx(f => this.TopMost = false);
        }

        private void boton_set_start_Click(object sender, EventArgs e)
        {
            if (LB1_kf.SelectedIndices.Count != 1) return;
            if (LB1_kf.SelectedIndices.Count == 1)
            {
                if (LB1_kf.SelectedItems[0].Text == String.Empty) return;
            }

            String dur = "";
            String seconds = LB1_kf.SelectedItems[0].SubItems[1].Text.Replace(" seconds", String.Empty).Replace(".", String.Empty);
            Double seconds_d = Convert.ToDouble(seconds);
            seconds_d = seconds_d / 1000;
            TimeSpan t = TimeSpan.FromSeconds(seconds_d);
            dur = string.Format("{0:D2}:{1:D2}:{2:D2}.{3:D3}",
                         (int)t.TotalHours,
                         t.Minutes,
                         t.Seconds,
                         t.Milliseconds);


            if (seconds_d / 1000 < 36000)
            {
                this.InvokeEx(f => txt_ini.Text = dur.Substring(1, dur.Length - 1));
            }
            else
            {
                this.InvokeEx(f => txt_ini.Text = dur);
            }
        }

        private void chk_auto_updates_CheckedChanged(object sender, EventArgs e)
        {

            String f_updates = String.Empty;
            if (is_portable == false)
            {
                f_updates = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_updates.ini";
            }
            else
            {
                f_updates = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_updates_portable.ini";
            }

            if (chk_auto_updates.CheckState == CheckState.Checked)
            {
                if (File.Exists(f_updates))
                {
                    try
                    {
                        File.Delete(f_updates);
                    }
                    catch
                    {
                        MessageBox.Show("An error occurred while trying to set automatic updates option", "Error saving option", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
            }
            else
            {
                if (!File.Exists(f_updates))
                {
                    try
                    {
                        File.WriteAllText(f_updates, String.Empty);
                    }
                    catch
                    {
                        MessageBox.Show("An error occurred while trying to set automatic updates option", "Error saving option", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
            }
        }

        private void main_f_1_Click(object sender, EventArgs e)
        {
            btn_clear_list.PerformClick();
        }

        private void main_f_2_Click(object sender, EventArgs e)
        {
            btn_add_files.PerformClick();
        }

        private void main_f_3_Click(object sender, EventArgs e)
        {
            btn_add_folders.PerformClick();
        }

        private void menu_reload_settings_Click(object sender, EventArgs e)
        {
            btn_load_config.PerformClick();
        }

        private void menu_save_settings_Click(object sender, EventArgs e)
        {
            btn_save_config.PerformClick();
        }


        private void tryCurrentPresetToolStripMenuItem_Click(object sender, EventArgs e)
        {
            btn_try_pr.PerformClick();
        }

        private void openFfmpegConsoleToolStripMenuItem_Click(object sender, EventArgs e)
        {
            btn_show_console.PerformClick();
        }

        private void quickGuideToolStripMenuItem_Click(object sender, EventArgs e)
        {
            btn_help.PerformClick();
        }

        private void helpForumToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Process.Start("https://forum.videohelp.com/threads/386028-FFmpeg-Batch-for-Windows");
        }

        private void checkForUpdateToolStripMenuItem_Click(object sender, EventArgs e)
        {
            btn_update.PerformClick();
        }

        private void menu_about_Click(object sender, EventArgs e)
        {
            Form2 form2 = new Form2();
            form2.StartPosition = FormStartPosition.CenterParent;
            form2.ShowDialog();
        }

        private void menu_settings_Click(object sender, EventArgs e)
        {
            pr_default.Text = txt_parameters.Text;
            form3.StartPosition = FormStartPosition.CenterParent;
            form3.lbl_ff_ver.Text = change_ff.Text;
            form3.ShowDialog();
            if (form3.edit_presets == true)
            {
                Form15 frm_pr = new Form15();
                frm_pr.ShowDialog();
                if (frm_pr.saved == true) btn_load_config.PerformClick();
                return;
            }
            if (form3.reset_asked == true)
            {
                menu_reset.PerformClick();
                return;
            }
            if (form3.cancel == true)
            {
                if (form3.reload_config == true) btn_load_config.PerformClick();
                return;
            }
           
            if (form3.recreate == true) checkBox1.CheckState = CheckState.Checked;
            else checkBox1.CheckState = CheckState.Unchecked;

            if (form3.check_open_c == true) checkBox3.CheckState = CheckState.Checked;
            else checkBox3.CheckState = CheckState.Unchecked;

            if (form3.suffix == true)
            {
                chk_suffix.CheckState = CheckState.Checked;
                txt_suffix.Enabled = true;
                txt_suffix.Text = form3.txt_suffix_str;
            }
            else
            {
                chk_suffix.CheckState = CheckState.Unchecked;
                txt_suffix.Text = "_FFB";
                txt_suffix.Enabled = false;
            }

            if (form3.subfolders == true) chk_subfolders.CheckState = CheckState.Checked;
            else chk_subfolders.CheckState = CheckState.Unchecked;

            if (form3.try_preset == true) chk_try.CheckState = CheckState.Checked;
            else chk_try.CheckState = CheckState.Unchecked;

            if (form3.updates == true) chk_auto_updates.CheckState = CheckState.Checked;
            else chk_auto_updates.CheckState = CheckState.Unchecked;

            if (form3.concat_filter == true) check_concat.CheckState = CheckState.Checked;
            else check_concat.CheckState = CheckState.Unchecked;

            if (form3.updates == true) chk_auto_updates.CheckState = CheckState.Checked;
            else chk_auto_updates.CheckState = CheckState.Unchecked;

            if (form3.to_sleep == true) chk_no_sleep.CheckState = CheckState.Checked;
            else chk_no_sleep.CheckState = CheckState.Unchecked;

            txt_parameters.Text = form3.txt_preset_str;
            txt_format.Text = form3.txt_format_str;

            btn_save_config.PerformClick();

            // Sort Multi

            String f_sort_dur = String.Empty;
            if (is_portable == false)
            {
                f_sort_dur = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_sort_dur.ini";
            }
            else
            {
                f_sort_dur = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_sort_dur_portable.ini";
            }
            try
            {
                if (form3.sort_multi == true)
                    File.WriteAllText(f_sort_dur, "Yes");
                else File.WriteAllText(f_sort_dur, "No");

            }
            catch
            {
                MessageBox.Show("Unknown error changing setting.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

            // End sort multi

            // Send to console

            String f_params_console = String.Empty;
            if (is_portable == false)
            {
                f_params_console = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_par_con.ini";
            }
            else
            {
                f_params_console = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_par_con_portable.ini";
            }
            try
            {
                if (form3.send_params_console == false)
                {
                    send_par_consol = false;
                    File.WriteAllText(f_params_console, String.Empty);
                }
                else
                {
                    send_par_consol = true;
                    if (File.Exists(f_params_console)) File.Delete(f_params_console);
                }

            }
            catch
            {
                MessageBox.Show("Unknown error changing setting.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            // End send params console         

            //Warn successful items

            String f_warn_suc = String.Empty;
            if (is_portable == false)
            {
                f_warn_suc = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_warn_suc.ini";
            }
            else
            {
                f_warn_suc = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_warn_suc_portable.ini";
            }
            try
            {
                if (form3.warn_successful == false)
                {
                    warn_success_items = false;
                    File.WriteAllText(f_warn_suc, String.Empty);
                }
                else
                {
                    warn_success_items = true;
                    if (File.Exists(f_warn_suc)) File.Delete(f_warn_suc);
                }

            }
            catch
            {
                MessageBox.Show("Unknown error changing setting.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            //End warn successful items

            //Warn 0

            String f_warn_0 = String.Empty;
            if (is_portable == false)
            {
                f_warn_0 = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_warn_0.ini";
            }
            else
            {
                f_warn_0 = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_warn_0_portable.ini";
            }
            try
            {
                if (form3.no_warn_0 == true)
                {
                    no_warn_0_dur = true;
                    File.WriteAllText(f_warn_0, String.Empty);
                }
                else
                {
                    no_warn_0_dur = false;
                    if (File.Exists(f_warn_0)) File.Delete(f_warn_0);
                }

            }
            catch
            {
                MessageBox.Show("Unknown error changing setting.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            //End warn 0

            //Do not save logs

            String f_nologs = String.Empty;
            if (is_portable == false)
            {
                f_nologs = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_nologs.ini";
            }
            else
            {
                f_nologs = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_nologs_portable.ini";
            }
            try
            {
                if (form3.not_save_logs == false)
                {
                    no_save_logs = false;
                    if (File.Exists(f_nologs)) File.Delete(f_nologs);

                }
                else
                {
                    no_save_logs = true;
                    File.WriteAllText(f_nologs, String.Empty);
                    String path = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_batch.log";
                    if (File.Exists(path))
                    {
                        var a = MessageBox.Show("Delete last log file?", "Delete logs", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                        if (a == DialogResult.Yes)
                        {
                            try
                            {
                                File.Delete(path);
                            }
                            catch (Exception excpt)
                            {
                                MessageBox.Show("There was an error trying to delete last log file." + Environment.NewLine + Environment.NewLine + excpt.Message, "Delete error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            }
                        }
                    }
                }

            }
            catch
            {
                MessageBox.Show("Unknown error changing setting.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

            //End do not save logs

            //Verbose logs

            String f_verbose = String.Empty;
            if (is_portable == false)
            {
                f_verbose = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_verbose.ini";
            }
            else
            {
                f_verbose = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_verbose_portable.ini";
            }
            try
            {
                if (form3.verbose_logs == false)
                {
                    verbose_logs = false;
                    if (File.Exists(f_verbose)) File.Delete(f_verbose);

                }
                else
                {
                    verbose_logs = true;
                    File.WriteAllText(f_verbose, String.Empty);
                }

            }
            catch
            {
                MessageBox.Show("Unknown error changing setting.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

            //End verbose logs

            //Full report

            String f_report = String.Empty;
            if (is_portable == false)
            {
                f_report = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_report.ini";
            }
            else
            {
                f_report = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_report_portable.ini";
            }
            try
            {
                if (form3.full_report == false)
                {
                    full_report = false;
                    if (File.Exists(f_report)) File.Delete(f_report);

                }
                else
                {
                    full_report = true;
                    File.WriteAllText(f_report, String.Empty);
                }

            }
            catch
            {
                MessageBox.Show("Unknown error changing setting.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

            //End full report


            //Do not cache network files

            String f_no_cache = String.Empty;
            if (is_portable == false)
            {
                f_no_cache = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_nocache.ini";
            }
            else
            {
                f_no_cache = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_nocache_portable.ini";
            }
            try
            {
                if (form3.not_save_cache == false)
                {
                    no_save_cache = false;
                    if (File.Exists(f_no_cache)) File.Delete(f_no_cache);

                }
                else
                {
                    no_save_cache = true;
                    File.WriteAllText(f_no_cache, String.Empty);
                }
            }
            catch
            {
                MessageBox.Show("Unknown error changing setting.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            //End do not cache network files

            //use OS cache dialog

            String f_os_cache = String.Empty;
            if (is_portable == false)
            {
                f_os_cache = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_oscache.ini";
            }
            else
            {
                f_os_cache = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_oscache_portable.ini";
            }
            try
            {
                if (form3.use_cache_os == false)
                {
                    os_save_cache = false;
                    if (File.Exists(f_os_cache)) File.Delete(f_os_cache);

                }
                else
                {
                    os_save_cache = true;
                    File.WriteAllText(f_os_cache, String.Empty);
                }
            }
            catch
            {
                MessageBox.Show("Unknown error changing setting.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            //End use OS cache dialog

            //Remember tab

            String f_remember = String.Empty;
            if (is_portable == false)
            {
                f_remember = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_remember.ini";
            }
            else
            {
                f_remember = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_remember_portable.ini";
            }
            try
            {
                if (form3.remember_tab == false)
                {
                    remember_last_tab = false;
                    if (File.Exists(f_remember)) File.Delete(f_remember);

                }
                else
                {
                    remember_last_tab = true;
                    File.WriteAllText(f_remember, tabControl1.SelectedIndex.ToString());
                }
            }
            catch
            {
                MessageBox.Show("Unknown error changing setting.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            //End remember tab

            //Save play sound

            String ff_play_sound = String.Empty;
            if (is_portable == false)
            {
                ff_play_sound = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_play.ini";
            }
            else
            {
                ff_play_sound = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_play_portable.ini";
            }
            
            if (form3.play_file.Length != 0)
            {               
                    try
                    {
                        File.WriteAllText(ff_play_sound, form3.play_file);
                        play_on_end = true;
                        play_file_path = form3.play_file;
                    }
                    catch (Exception excpt)
                    {
                        MessageBox.Show("An error occurred saving play file setting." + Environment.NewLine + Environment.NewLine + excpt.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        play_on_end = false;
                    }                
            }
            else
            {
                play_on_end = false;
                if (File.Exists(ff_play_sound))
                {
                    try
                    {
                        File.Delete(ff_play_sound);
                    }
                    catch { }
                }
            }
            //End save play sound

            //Remember window and size

            String f_remember_w = String.Empty;
            if (is_portable == false)
            {
                f_remember_w = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_remember_w.ini";
            }
            else
            {
                f_remember_w = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_remember_w_portable.ini";
            }
            try
            {
                if (form3.remember_w == false)
                {
                    remember_w = false;
                    if (File.Exists(f_remember_w)) File.Delete(f_remember_w);

                }
                else
                {
                    remember_w = true;
                    Rectangle rect = Screen.PrimaryScreen.Bounds;
                    File.WriteAllText(f_remember_w, rect.Width + Environment.NewLine + rect.Height);
                }
            }
            catch
            {
                MessageBox.Show("Unknown error changing setting.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            //End remember window
        }

        private void menu_reset_Click(object sender, EventArgs e)
        {
            var a = MessageBox.Show("All custom settings and presets will be deleted. Do you want to continue?", "Confirm reset", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
            if (a == DialogResult.No)
            {
                return;
            }

            String path = String.Empty;
            String path2 = String.Empty;
            String path_pr = String.Empty;
            if (is_portable == false)
            {
                path = Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_batch.ini";
                path_pr = Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_presets.ini";
                path2 = Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_hw_dcd";
            }
            else
            {
                path = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_batch_portable.ini";
                path_pr = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_presets_portable.ini";
                path2 = Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_hw_dcd_portable";
            }

            if (!Directory.Exists(System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch")))
            {
                Directory.CreateDirectory(System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch"));
            }

            if (File.Exists(path))
            {
                File.Delete(path);
            }
            if (File.Exists(path2))
            {
                File.Delete(path2);
            }        

            combo_prio.SelectedIndex = 2;
            btn_save_prio.PerformClick();

            //Sleep off

            String f_sleep = String.Empty;
            if (is_portable == false)
            {
                f_sleep = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_sleep.ini";
            }
            else
            {
                f_sleep = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_sleep_portable.ini";
            }

            if (File.Exists(f_sleep))
            {
                try
                {
                    File.Delete(f_sleep);
                    chk_no_sleep.CheckState = CheckState.Unchecked;
                }
                catch
                {

                }
            }

            //End sleep off                              

            //Disable try preset

            String f_try = String.Empty;
            if (is_portable == false)
            {
                f_try = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_try.ini";
            }
            else
            {
                f_try = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_try_portable.ini";
            }

            if (File.Exists(f_try))
            {
                try
                {
                    File.Delete(f_try);
                    chk_try.CheckState = CheckState.Unchecked;
                }
                catch
                {

                }

            }

            //End Disable preset

            //Concat video filter

            String f_concat = String.Empty;
            if (is_portable == false)
            {
                f_concat = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_concat.ini";
            }
            else
            {
                f_concat = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_concat_portable.ini";
            }

            if (File.Exists(f_concat))
            {
                try
                {
                    File.Delete(f_concat);
                    check_concat.CheckState = CheckState.Unchecked;
                }
                catch
                {

                }
            }

            //End concat video filter
            File.WriteAllText(path, "-c copy" + Environment.NewLine + "mp4" + Environment.NewLine + "yes"
                        + Environment.NewLine + "Vn" + Environment.NewLine + "grid_yes" + Environment.NewLine + "keep_no"
                        + Environment.NewLine + "subf_no");
            
            File.WriteAllText(path_pr, "Version 1.0" + Environment.NewLine
        + "PR: Video: MP4 Stream copy & -c copy % mp4" + Environment.NewLine
   + "PR: Video: Convert audio track to AAC HQ 2 channels & -c:v copy -c:a aac -cutoff 20K -b:a 256K -ac 2 % mkv" + Environment.NewLine + "PR: Video: Convert audio tracks to AC3 2 channels & -map 0 -c:v copy -c:a ac3 -b:a 256K -ac 2 -c:s copy % mkv" + Environment.NewLine + "PR: Video: Convert to ProRes MKV & -c:v prores_ks -profile:v standard -vendor:v ap10 -pix_fmt yuv422p10le -c:a pcm_s16le -chunk_size 64K % mkv" + Environment.NewLine + "PR: Video: Convert to H264 HQ + Source Audio & -map 0 -c:v libx264 -crf 20 -c:a copy % mkv" + Environment.NewLine + "PR: Video: Convert to H264 Ultrafast + Source Audio & -map 0 -c:v libx264 -crf 23 -preset ultrafast -c:a copy % mkv" + Environment.NewLine + "PR: Video: Convert to H265 HQ + Source Audio & -map 0 -c:v libx265 -crf 23 -c:a copy % mkv" + Environment.NewLine + "PR: Video: Resize 1280x720 H264-AAC & -map 0 -c:v libx264 -crf 23 -vf scale=1280:720 -c:a aac -b:a 128K % mp4" + Environment.NewLine + "PR: Video: Rotate 90 degress Clockwise to H264 + Source audio & -c:v libx264 -crf 21 -vf " + "\u0022" + "transpose=1" + "\u0022" + " -c:a aac -b:a 128K % mp4" + Environment.NewLine + "PR: Video: Rotate 90 degress CounterCLockwise and Vertical Flip to H264 + Source audio & -c:v libx264 -crf 21 -vf " + "\u0022" + "transpose=0" + "\u0022" + " -c:a aac -b:a 128K % mp4" + Environment.NewLine + "PR: Video: Rotate 90 degress CounterClockwise to H264 + Source audio & -c:v libx264 -crf 21 -vf " + "\u0022" + "transpose=2" + "\u0022" + " -c:a aac -b:a 128K % mp4" + Environment.NewLine + "PR: Video: Rotate 90 degress Clockwise and Vertical Flip to H264 + Source audio & -c:v libx264 -crf 21 -vf " + "\u0022" + "transpose=3" + "\u0022" + " -c:a aac -b:a 128K % mp4" + Environment.NewLine + "PR: Video: Rotate 180 degress to H264 + Source audio & -c:v libx264 -crf 21 -vf " + "\u0022" + "transpose=2, transpose=2" + "\u0022" + " -c:a aac -b:a 128K % mp4" + Environment.NewLine + "PR: Video: Remove subtitles to MP4 & -map 0 -c copy -sn % mp4" + Environment.NewLine + "PR: Audio: Convert to FLAC 16/44,1KHz 2 channels & -vn -c:a flac -ar 44100 -sample_fmt s16 -ac 2 % flac" + Environment.NewLine + "PR: Audio: Convert to MP3 VBR HQ 2 ch embedded cover & -c:v copy -c:a libmp3lame -qscale:a 0 -ac 2  % mp3" + Environment.NewLine + "PR: Audio: Convert to MP3 VBR HQ 2 ch & -vn -c:a libmp3lame -qscale:a 1 -ac 2 % mp3" + Environment.NewLine + "PR: Audio: Convert to MP3 CBR HQ 2 ch & -vn -c:a libmp3lame -b:a 224K -ac 2 % mp3" + Environment.NewLine + "PR: Audio: Convert to WAV 16/44,1KHz 2 channels & -vn -c:a pcm_s16le -ar 44100 -sample_fmt s16 -ac 2 % wav" + Environment.NewLine + "PR: Subtitle: Extract first subtitle track to SRT & -map 0:2 -c:s copy % srt" + Environment.NewLine + "PR: Image: Extract frame as image & -vframes 1 -f image2  % png" + Environment.NewLine + "PR: Record screen at 24 fps + Audio AAC to MKV & -r 24 -c:a aac -b:a 128K % mkv" + Environment.NewLine + "PR: Record screen at 15 fps 1280x720 + Audio to MKV & -r 15 -vf scale=1280x720 -c:a aac -b:a 128K % mkv" + Environment.NewLine + "PR: Record screen at 30 fps Nvidia NVENC + Audio AAC to MKV & -c:v h264_nvenc -qp 20 -r 30 -c:a aac -b:a 128K % mkv" + Environment.NewLine + "PR: Record screen at 25 fps Intel QuickSync + Audio AAC to MKV & -c:v  h264_qsv -qp 20 -r 25 -c:a aac -b:a 128K % mkv" + Environment.NewLine + "PR: Join images at 1920px width to MP4 video & -c:v libx264 -preset veryfast -vf " + '\u0022' + "fps=25,format=yuv420p,scale=1920:-2" + '\u0022' + " -c:a aac -b:a 64K % mp4");
            btn_load_config.PerformClick();
        }

        private void preset_menu_Click(object sender, EventArgs e)
        {
            btn_wizard.PerformClick();
        }

        private void toolStripMenuItem1_Click(object sender, EventArgs e)
        {
            btn_exit.PerformClick();
        }

        private void chk_overw_CheckedChanged(object sender, EventArgs e)
        {            
            String path_first = String.Empty;
            if (is_portable == false)
            {
                path_first = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_first.ini";
            }
            else
            {
                path_first = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_first_portable.ini";
            }

            Boolean not_show = true;
            String not_first = File.ReadAllText(path_first);

            if (not_first.Contains("chk_overw") == false) not_show = false;

            if (chk_overw.CheckState == CheckState.Checked)
            {
                chk_overw.BackColor = Color.LightGoldenrodYellow;
                if (not_show == false)
                {
                    File.WriteAllText(path_first, "chk_overw");
                    //MessageBox.Show("Overwriting only supported for Sequential processing.", "Limited support feature", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
            }
            else
            {
                chk_overw.BackColor = this.BackColor;
            }
            if (chk_delete_source.Checked == true && chk_overw.Checked == true)
            {
                MessageBox.Show("It is not possible to overwrite and delete source at the same time.");

            }
        }

        private void Form1_KeyPress(object sender, KeyPressEventArgs e)
        {
            MessageBox.Show(e.KeyChar.ToString());
        }

        private void main_f_4_Click(object sender, EventArgs e)
        {
            if (listView1.Items.Count == 0)
            {
                MessageBox.Show("File list is empty", "Queue empty", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }
            if (txt_parameters.Text == "")
            {
                MessageBox.Show("Parameters field can not be empty", "Parameters error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }
            this.Cursor = Cursors.WaitCursor;
            save_ffq.DefaultExt = "ffq";
            save_ffq.InitialDirectory = Path.GetDirectoryName(Environment.SpecialFolder.MyDocuments.ToString());
            save_ffq.RestoreDirectory = true;
            save_ffq.Filter = "FFmpeg Batch queue files |*.ffq";
            if (save_ffq.ShowDialog() != DialogResult.OK)
            {
                this.Cursor = Cursors.Arrow;
                return;
            }
            String save_path = save_ffq.FileName;
            List<string> list_file = new List<string>();
            list_file.Add(txt_parameters.Text);
            list_file.Add(txt_format.Text);
            list_file.Add(checkBox1.CheckState.ToString());

            if (chk_suffix.CheckState == CheckState.Unchecked) list_file.Add(chk_suffix.CheckState.ToString());
            else
            {
                list_file.Add(txt_suffix.Text);
            }

            list_file.Add(txt_path_main.Text);
            foreach (ListViewItem item in listView1.Items)
            {
                list_file.Add(item.SubItems[1].Text + "\\" + item.Text + " --0 " + item.SubItems[2].Text + " --1 " + item.SubItems[3].Text + " --2 " + item.SubItems[4].Text + " --3 " + item.SubItems[5].Text);
            }

            try
            {
                File.WriteAllLines(save_path, list_file);
            }
            catch (Exception excp)
            {
                MessageBox.Show("There was an error saving queue file." + Environment.NewLine + Environment.NewLine + excp.Message, "Error saving file", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            this.Cursor = Cursors.Arrow;
        }

        private void main_f_5_Click(object sender, EventArgs e)
        {
            file_dialog_ffq.DefaultExt = "ffq";
            file_dialog_ffq.InitialDirectory = Path.GetDirectoryName(Environment.SpecialFolder.MyDocuments.ToString());
            file_dialog_ffq.RestoreDirectory = true;
            file_dialog_ffq.Filter = "FFmpeg Batch queue files |*.ffq";
            if (file_dialog_ffq.ShowDialog() != DialogResult.OK) return;
            listView1.Items.Clear();
            String save_path = file_dialog_ffq.FileName;
            this.Cursor = Cursors.WaitCursor;

            int linea = 0;
            int not_found = 0;
            combo_presets.Text = "";
            List<ListViewItem> itemsToAdd = new List<ListViewItem>();
            try
            {
                foreach (string line in File.ReadLines(save_path))
                {

                    if (linea == 0)
                    {
                        txt_parameters.Text = line;
                    }
                    if (linea == 1)
                    {
                        txt_format.Text = line;
                    }

                    if (linea == 2)
                    {
                        if (line == "Unchecked") checkBox1.CheckState = CheckState.Unchecked;
                        else checkBox1.CheckState = CheckState.Checked;
                    }

                    if (linea == 3)
                    {
                        if (line == "Unchecked") chk_suffix.CheckState = CheckState.Unchecked;
                        else
                        {
                            chk_suffix.CheckState = CheckState.Checked;
                            txt_suffix.Text = line;
                        }

                    }

                    if (linea == 4)
                    {
                        txt_path_main.Text = line;
                    }

                    if (linea > 4)
                    {

                        Boolean missing = false;
                        listView1.SmallImageList = imageList2;

                        itemsToAdd.Add(new ListViewItem(Path.GetFileName(line.Substring(0, line.LastIndexOf(" --0 "))), 1));
                                                
                        Icon iconForFile = SystemIcons.WinLogo;

                        // Check to see if the image collection contains an image
                        // for this extension, using the extension as a key.
                        if (File.Exists(line.Substring(0, line.LastIndexOf(" --0 "))))
                        {
                            if (!imageList2.Images.ContainsKey(System.IO.Path.GetExtension(line.Substring(0, line.LastIndexOf(" --0 ")))))
                            {
                                // If not, add the image to the image list.
                                iconForFile = System.Drawing.Icon.ExtractAssociatedIcon(line.Substring(0, line.LastIndexOf(" --0 ")));
                                imageList2.Images.Add(System.IO.Path.GetExtension(line.Substring(0, line.LastIndexOf(" --0 "))), iconForFile);
                            }

                            //listView1.Items.Add(elemento);
                            itemsToAdd[linea - 5].ImageKey = System.IO.Path.GetExtension(System.IO.Path.GetExtension(line.Substring(0, line.LastIndexOf(" --0 "))));
                        }
                        else
                        {
                            not_found = not_found + 1;
                            missing = true;
                        }

                        //listView1.Items.Add(line.Substring(0,line.LastIndexOf(" --0 ")));
                        String type = line.Substring(line.LastIndexOf(" --0 ") + 5, line.Length - (line.LastIndexOf(" --0") + 5));
                        type = type.Substring(0, type.LastIndexOf(" --1"));
                        String dur = line.Substring(line.LastIndexOf(" --1 ") + 5, line.Length - (line.LastIndexOf(" --1") + 5));
                        dur = dur.Substring(0, dur.LastIndexOf(" --2"));
                        String size = line.Substring(line.LastIndexOf(" --2 ") + 5, line.Length - (line.LastIndexOf(" --2") + 5));
                        size = size.Substring(0, size.LastIndexOf(" --3"));
                        String status = line.Substring(line.LastIndexOf(" --3 ") + 5, line.Length - (line.LastIndexOf(" --3") + 5));

                        itemsToAdd[linea - 5].SubItems.Add(Path.GetDirectoryName(line.Substring(0, line.LastIndexOf(" --0 "))));
                        itemsToAdd[linea - 5].SubItems.Add(type);
                        itemsToAdd[linea - 5].SubItems.Add(dur);
                        itemsToAdd[linea - 5].SubItems.Add(size);
                        if (missing == false) itemsToAdd[linea - 5].SubItems.Add(status);
                        else
                        {
                            itemsToAdd[linea - 5].SubItems.Add("File not found");
                            itemsToAdd[linea - 5].BackColor = Color.LightGoldenrodYellow;
                        }
                    }
                    linea = linea + 1;
                }
                listView1.Items.AddRange(itemsToAdd.ToArray());

            }
            catch (Exception excpt)
            {
                this.Cursor = Cursors.Arrow;
                MessageBox.Show("Error loading queue session. Unexpected file format." + Environment.NewLine + excpt.Message, "Queue file error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                btn_load_config.PerformClick();
                read_saved_path();
                return;
            }
            this.Cursor = Cursors.Arrow;
            if (tabControl1.SelectedIndex == 0)
            {
                calc_list_size();
                calc_total_dur();
                lbl_items.Text = listView1.Items.Count.ToString() + " files";


                if (not_found > 0)
                {
                    this.InvokeEx(f => this.Cursor = Cursors.Arrow);
                    MessageBox.Show("Queue list loaded successfully. " + Environment.NewLine + not_found.ToString() + " queue file(s) were not found. " + Environment.NewLine + Environment.NewLine + "Please sort and check file list for items marked with status " + '\u0022' + "File not found" + '\u0022' + ".", "Queue list loaded with missing files", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                }
            }
        }

        private void toolStripMenuItem4_Click(object sender, EventArgs e)
        {
            change_ff.PerformClick();
        }

        private void ctm1_queue_Click(object sender, EventArgs e)
        {
            if (listView1.SelectedIndices.Count > 0)
            {
                foreach (ListViewItem item in listView1.SelectedItems)
                {
                    item.SubItems[5].Text = "Queued";
                }
            }
        }

        private void main_m_logs_Click(object sender, EventArgs e)
        {
            btn_display_log.PerformClick();
        }
        
        private void btn_save_queue_Click(object sender, EventArgs e)
        {
            Pg1.Focus();
            main_f_4.PerformClick();
        }

        private void toolStripMenuItem2_Click(object sender, EventArgs e)
        {
            btn_clean_list.PerformClick();
        }

        private void toolStripMenuItem1_Click_1(object sender, EventArgs e)
        {
            btn_refresh.PerformClick();
        }

        private void toolStripMenuItem3_Click(object sender, EventArgs e)
        {
            requeue.PerformClick();
        }

        private void listView2_ColumnClick(object sender, ColumnClickEventArgs e)
        {

        }

        private void ct2_remove_Click(object sender, EventArgs e)
        {
            if (listView2.SelectedItems.Count > 0)
            {
                listView2.BeginUpdate();
                foreach (ListViewItem item in listView2.SelectedItems)
                {
                    if (working == false)
                    {
                        listView2.Items.Remove(item);
                    }
                }

                listView2.EndUpdate();
                lbl_items.Text = listView1.Items.Count + " file(s)";
            }
        }

        private void btn_filter_Click(object sender, EventArgs e)
        {
            Pg1.Focus();
            
            if (listView1.Items.Count == 0 || tabControl1.SelectedIndex != 0) return;
            if (listView1.SelectedIndices.Count == 1)
            {
                form4.lv1_item = listView1.SelectedItems[0].SubItems[1].Text + "\\" + listView1.SelectedItems[0].Text;
                form5.lv1_item = listView1.SelectedItems[0].SubItems[1].Text + "\\" + listView1.SelectedItems[0].Text;
            }
            else
            {
                form4.lv1_item = listView1.Items[0].SubItems[1].Text + "\\" + listView1.Items[0].Text;
                form5.lv1_item = listView1.Items[0].SubItems[1].Text + "\\" + listView1.Items[0].Text;
            }

            form4.ShowDialog();
            if (form4.cancel_filter == true) return;

            btn_undo_filter.ImageList = img_undo;
            btn_undo_filter.ImageKey = "undo_20.png";

            unfilter_lv1.Clear();
            filtered_lv1.Clear();
            unfilter_lv1.SmallImageList = imageList2;

            //Backup current listView1
            this.Cursor = Cursors.WaitCursor;

            ListViewItem[] itemsToAdd = new ListViewItem[listView1.Items.Count];
            ListViewItem[] itemsToAdd2 = new ListViewItem[listView1.Items.Count];
            filtered_lv1.Clear();
            unfilter_lv1.Clear();

            //Backup listview1
            unfilter_lv1.Items.AddRange((from ListViewItem item in listView1.Items
                                         select (ListViewItem)item.Clone()
                   ).ToArray());

            filtered_lv1.Items.AddRange((from ListViewItem item in listView1.Items
                                         select (ListViewItem)item.Clone()
                  ).ToArray());

            this.Cursor = Cursors.Arrow;
            //End backup current lisView1

            btn_undo_filter.Enabled = true;

            //Apply status filter

            if (form4.filter_type == "Status")
            {
                for (int n = 0; n < listView1.Items.Count; n++)
                {
                    if (listView1.Items[n].SubItems[5].Text == form4.filter_value && form4.filter_action == "Remove")
                    {
                        listView1.Items[n].Remove();
                        filtered_lv1.Items[n].Remove();
                        n = n - 1;
                    }
                    else
                    {

                        if ((listView1.Items[n].SubItems[5].Text == form4.filter_value) == false && form4.filter_action == "Keep")
                        {
                            listView1.Items[n].Remove();
                            filtered_lv1.Items[n].Remove();
                            n = n - 1;
                        }
                    }
                }

                if (form4.remove_invalid == true) btn_clean_list.PerformClick();
                lbl_items.Text = listView1.Items.Count + " file(s)";
                calc_list_dur();
                calc_list_size();
            }

            //End apply status filter

            //Apply extension filter

            if (form4.filter_type == "File extension")
            {
                int ni = listView1.Items.Count;
                if (listView1.Items.Count > 2500)
                {
                    pg_adding.Value = 0;
                    pg_adding.Visible = true;
                    pg_adding.Maximum = listView1.Items.Count;
                    LB_Wait.Visible = true;
                    txt_adding_p.Visible = true;
                    LB_Wait.Text = "Applying filter";
                }

                for (int n = 0; n < listView1.Items.Count; n++)
                {
                    if (ni > 2500)
                    {
                        pg_adding.Value = pg_adding.Value + 1;
                        txt_adding_p.Text = (pg_adding.Value * 100 / ni).ToString() + "%";
                        txt_adding_p.Refresh();
                        LB_Wait.Refresh();
                        pg_adding.Refresh();
                    }

                    if (Path.GetExtension(listView1.Items[n].Text).ToLower() == "." + form4.filter_value.ToLower() && form4.filter_action == "Remove")
                    {
                        listView1.Items[n].Remove();
                        filtered_lv1.Items[n].Remove();
                        n = n - 1;
                    }
                    else
                    {
                        if ((Path.GetExtension(listView1.Items[n].Text).ToLower() == "." + form4.filter_value.ToLower()) == false && form4.filter_action == "Keep")
                        {
                            listView1.Items[n].Remove();
                            filtered_lv1.Items[n].Remove();
                            n = n - 1;
                        }
                    }
                }

                if (form4.remove_invalid == true) btn_clean_list.PerformClick();
                pg_adding.Visible = false;
                txt_adding_p.Visible = false;
                pg_adding.Value = 0;
                LB_Wait.Text = String.Empty;
                listView1.EndUpdate();
                lbl_items.Text = listView1.Items.Count + " file(s)";
                calc_list_dur();
                calc_list_size();

            }
            //End apply Extension filter

            if (form4.filter_type == "File bitrate")
            {
                if (form4.remove_invalid == true) btn_clean_list.PerformClick();
                if (listView1.Items.Count > 999)
                {
                    start_total_time = 0;
                    time_n_tasks = 0;
                    timer_adding.Enabled = true;
                    timer_adding.Start();
                    txt_add_remain.Enabled = true;
                    pg_adding.Maximum = listView1.Items.Count;
                    pg_adding.Value = 0;
                }
                BG_File_Bitrate.RunWorkerAsync();
            }

            //File size filter
            if (form4.filter_type == "File size")
            {
                listView1.BeginUpdate();
                this.Cursor = Cursors.WaitCursor;

                int ni = listView1.Items.Count;
                if (listView1.Items.Count > 5000)
                {
                    pg_adding.Value = 0;
                    pg_adding.Visible = true;
                    pg_adding.Maximum = listView1.Items.Count;
                    LB_Wait.Visible = true;
                    txt_adding_p.Visible = true;
                    LB_Wait.Text = "Applying filter";
                }

                for (int n = 0; n < listView1.Items.Count; n++)
                {
                    if (ni > 5000)
                    {
                        pg_adding.Value = pg_adding.Value + 1;
                        txt_adding_p.Text = (pg_adding.Value * 100 / ni).ToString() + "%";
                        txt_adding_p.Refresh();
                        LB_Wait.Refresh();
                        pg_adding.Refresh();
                    }

                    long size = new FileInfo(listView1.Items[n].SubItems[1].Text + "\\" + listView1.Items[n].Text).Length;
                    long compare = long.Parse(form4.filter_value) * 1048576;

                    if (size >= compare && form4.filter_action == "Remove")
                    {
                        listView1.Items[n].Remove();
                        filtered_lv1.Items[n].Remove();
                        n = n - 1;
                    }
                    else
                    {
                        if (size < compare && form4.filter_action == "Keep")
                        {
                            listView1.Items[n].Remove();
                            filtered_lv1.Items[n].Remove();
                            n = n - 1;
                        }
                    }
                }
                listView1.EndUpdate();
                this.Cursor = Cursors.Arrow;

                if (form4.remove_invalid == true) btn_clean_list.PerformClick();
                pg_adding.Visible = false;
                txt_adding_p.Visible = false;
                pg_adding.Value = 0;
                LB_Wait.Text = String.Empty;
                lbl_items.Text = listView1.Items.Count + " file(s)";
                calc_list_dur();
                calc_list_size();
            }

            //Apply video codec filter

            if (form4.filter_type == "Video codec")
            {
                if (form4.remove_invalid == true) btn_clean_list.PerformClick();
                if (listView1.Items.Count > 999)
                {
                    start_total_time = 0;
                    time_n_tasks = 0;
                    timer_adding.Enabled = true;
                    timer_adding.Start();
                    txt_add_remain.Enabled = true;
                    pg_adding.Maximum = listView1.Items.Count;
                    pg_adding.Value = 0;
                }
                BG_Vfilter.RunWorkerAsync();

            }

            if (form4.filter_type == "Video bitrate")
            {

                if (form4.remove_invalid == true) btn_clean_list.PerformClick();
                if (listView1.Items.Count > 999)
                {
                    start_total_time = 0;
                    time_n_tasks = 0;
                    timer_adding.Enabled = true;
                    timer_adding.Start();
                    txt_add_remain.Enabled = true;
                    pg_adding.Maximum = listView1.Items.Count;
                    pg_adding.Value = 0;
                }
                BG_Video_Bitrate.RunWorkerAsync();
            }

            if (form4.filter_type == "Audio codec")
            {
                if (form4.remove_invalid == true) btn_clean_list.PerformClick();
                if (listView1.Items.Count > 999)
                {
                    start_total_time = 0;
                    time_n_tasks = 0;
                    timer_adding.Enabled = true;
                    timer_adding.Start();
                    txt_add_remain.Enabled = true;
                    pg_adding.Maximum = listView1.Items.Count;
                    pg_adding.Value = 0;
                }
                BG_AFilter.RunWorkerAsync();
            }

            if (form4.filter_type == "Frame rate")
            {
                if (form4.remove_invalid == true) btn_clean_list.PerformClick();
                if (listView1.Items.Count > 999)
                {
                    start_total_time = 0;
                    time_n_tasks = 0;
                    timer_adding.Enabled = true;
                    timer_adding.Start();
                    txt_add_remain.Enabled = true;
                    pg_adding.Maximum = listView1.Items.Count;
                    pg_adding.Value = 0;
                }
                BG_FRate.RunWorkerAsync();
            }

            if (form4.filter_type == "Frame size")
            {
                if (form4.remove_invalid == true) btn_clean_list.PerformClick();
                if (listView1.Items.Count > 999)
                {
                    start_total_time = 0;
                    time_n_tasks = 0;
                    timer_adding.Enabled = true;
                    timer_adding.Start();
                    txt_add_remain.Enabled = true;
                    pg_adding.Maximum = listView1.Items.Count;
                    pg_adding.Value = 0;
                }
                BG_Fsize.RunWorkerAsync();
            }

            if (form4.filter_type == "Custom string")
            {
                if (form4.remove_invalid == true) btn_clean_list.PerformClick();
                if (listView1.Items.Count > 999)
                {
                    start_total_time = 0;
                    time_n_tasks = 0;
                    timer_adding.Enabled = true;
                    timer_adding.Start();
                    txt_add_remain.Enabled = true;
                    pg_adding.Maximum = listView1.Items.Count;
                    pg_adding.Value = 0;
                }
                BG_Custom_search.RunWorkerAsync();
            }

            if (form4.filter_type == "Custom string (MI)")
            {
                if (form4.remove_invalid == true) btn_clean_list.PerformClick();
                if (listView1.Items.Count > 999)
                {
                    start_total_time = 0;
                    time_n_tasks = 0;
                    timer_adding.Enabled = true;
                    timer_adding.Start();
                    txt_add_remain.Enabled = true;
                    pg_adding.Maximum = listView1.Items.Count;
                    pg_adding.Value = 0;
                }
                BG_custom_MI.RunWorkerAsync();
            }

            if (form4.filter_type == "Metadata")
            {
                if (form4.remove_invalid == true) btn_clean_list.PerformClick();
                if (listView1.Items.Count > 999)
                {
                    start_total_time = 0;
                    time_n_tasks = 0;
                    timer_adding.Enabled = true;
                    timer_adding.Start();
                    txt_add_remain.Enabled = true;
                    pg_adding.Maximum = listView1.Items.Count;
                    pg_adding.Value = 0;
                }
                BG_Metadata.RunWorkerAsync();
            }

            lbl_items.Text = listView1.Items.Count + " file(s)";
            calc_list_dur();
            calc_list_size();
        }

        private void btn_undo_filter_Click(object sender, EventArgs e)
        {
            Pg1.Focus();
            LB_Wait.Visible = false;
            if (btn_undo_filter.ImageKey == "undo_20.png")
            {
                btn_undo_filter.ImageKey = "redo_20.png";
                tool_undo_filter.AutoPopDelay = 9000;
                tool_undo_filter.InitialDelay = 750;
                tool_undo_filter.ReshowDelay = 500;
                tool_undo_filter.ShowAlways = true;
                tool_undo_filter.SetToolTip(this.btn_undo_filter, "Redo applied filter");

                //Fill with original listview items
                listView1.Items.Clear();
                listView1.SmallImageList = imageList2;

                ListViewItem[] itemsToAdd = new ListViewItem[unfilter_lv1.Items.Count];

                for (int n = 0; n < unfilter_lv1.Items.Count; n++)
                {
                    Icon iconForFile = SystemIcons.WinLogo;

                    String new_item = unfilter_lv1.Items[n].SubItems[1].Text + "\\" + unfilter_lv1.Items[n].Text;
                    if (!imageList2.Images.ContainsKey(System.IO.Path.GetExtension(new_item)))
                    {
                        iconForFile = System.Drawing.Icon.ExtractAssociatedIcon(new_item);
                        imageList2.Images.Add(System.IO.Path.GetExtension(new_item), iconForFile);
                    }

                    itemsToAdd[n] = new ListViewItem(Path.GetFileName(new_item));
                    itemsToAdd[n].ImageKey = System.IO.Path.GetExtension(new_item);
                    itemsToAdd[n].BackColor = unfilter_lv1.Items[n].BackColor;
                    itemsToAdd[n].SubItems.Add(unfilter_lv1.Items[n].SubItems[1].Text);
                    itemsToAdd[n].SubItems.Add(unfilter_lv1.Items[n].SubItems[2].Text);
                    itemsToAdd[n].SubItems.Add(unfilter_lv1.Items[n].SubItems[3].Text);
                    itemsToAdd[n].SubItems.Add(unfilter_lv1.Items[n].SubItems[4].Text);
                    itemsToAdd[n].SubItems.Add(unfilter_lv1.Items[n].SubItems[5].Text);
                }

                listView1.Items.AddRange(itemsToAdd.ToArray());
            }

            else
            {
                btn_undo_filter.ImageKey = "undo_20.png";
                tool_undo_filter.AutoPopDelay = 9000;
                tool_undo_filter.InitialDelay = 750;
                tool_undo_filter.ReshowDelay = 500;
                tool_undo_filter.ShowAlways = true;
                tool_undo_filter.SetToolTip(this.btn_undo_filter, "Undo applied filter");

                //Fill with filtered listview items
                listView1.Items.Clear();
                listView1.SmallImageList = imageList2;

                ListViewItem[] itemsToAdd = new ListViewItem[filtered_lv1.Items.Count];


                for (int n = 0; n < filtered_lv1.Items.Count; n++)
                {
                    Icon iconForFile = SystemIcons.WinLogo;
                    String new_item = filtered_lv1.Items[n].SubItems[1].Text + "\\" + filtered_lv1.Items[n].Text;

                    if (!imageList2.Images.ContainsKey(System.IO.Path.GetExtension(unfilter_lv1.Items[n].Text)))
                    {
                        iconForFile = System.Drawing.Icon.ExtractAssociatedIcon(new_item);
                        imageList2.Images.Add(System.IO.Path.GetExtension(new_item), iconForFile);
                    }

                    itemsToAdd[n] = new ListViewItem(Path.GetFileName(new_item));
                    itemsToAdd[n].ImageKey = Path.GetExtension(new_item);
                    itemsToAdd[n].BackColor = filtered_lv1.Items[n].BackColor;
                    itemsToAdd[n].SubItems.Add(filtered_lv1.Items[n].SubItems[1].Text);
                    itemsToAdd[n].SubItems.Add(filtered_lv1.Items[n].SubItems[2].Text);
                    itemsToAdd[n].SubItems.Add(filtered_lv1.Items[n].SubItems[3].Text);
                    itemsToAdd[n].SubItems.Add(filtered_lv1.Items[n].SubItems[4].Text);
                    itemsToAdd[n].SubItems.Add(filtered_lv1.Items[n].SubItems[5].Text);
                }
                listView1.Items.AddRange(itemsToAdd.ToArray());
            }

            lbl_items.Text = listView1.Items.Count + " file(s)";
            calc_list_dur();
            calc_list_size();
        }

        private void BG_Vfilter_DoWork(object sender, DoWorkEventArgs e)
        {
            Disable_Controls();
            this.InvokeEx(f => f.btn_abort_all.Enabled = false);
            this.InvokeEx(f => f.btn_pause.Enabled = false);
            this.InvokeEx(f => f.pg_adding.Value = 0);
            this.InvokeEx(f => f.pg_adding.Maximum = listView1.Items.Count);
            this.InvokeEx(f => f.pg_adding.Visible = true);
            this.InvokeEx(f => f.pg_adding.Enabled = true);
            this.InvokeEx(f => f.txt_adding_p.Visible = true);
            this.InvokeEx(f => f.txt_adding_p.Enabled = true);
            this.InvokeEx(f => f.txt_adding_p.Refresh());
            this.InvokeEx(f => f.LB_Wait.Visible = true);
            this.InvokeEx(f => f.LB_Wait.Enabled = true);
            this.InvokeEx(f => f.lbl_items.Visible = false);
            this.InvokeEx(f => f.lbl_items.Refresh());
            this.InvokeEx(f => f.lbl_dur_list.Visible = false);
            this.InvokeEx(f => f.lbl_dur_list.Refresh());
            this.InvokeEx(f => f.lbl_size.Visible = false);
            this.InvokeEx(f => f.lbl_size.Refresh());
            this.InvokeEx(f => f.pg_adding.Value = 0);
            this.InvokeEx(f => f.pg_adding.Minimum = 0);
            this.InvokeEx(f => f.pg_adding.Maximum = listView1.Items.Count);
            this.InvokeEx(f => f.btn_cancel_add.Visible = true);
            this.InvokeEx(f => f.btn_cancel_add.Enabled = true);
            canceled_file_adding = false;

            int i = 0;
            int removed = 0;

            String select_stream = String.Empty;
            if (form4.stream_n == "First stream") select_stream = "Stream #0:0";
            if (form4.stream_n == "Second stream") select_stream = "Stream #0:1";
            if (form4.stream_n == "Any stream") select_stream = "Stream #";

            String item = String.Empty;
            this.InvokeEx(f => f.listView1.BeginUpdate());
            for (int n = 0; n < listView1.Items.Count; n++)
            {
                List<string> lines_ouput = new List<string>();
                Boolean has_video_stream = false;
                Boolean has_video_first_stream = false;
                Boolean has_streams = false;
                Boolean to_remove = false;
                Boolean match = false;

                this.InvokeEx(f => item = listView1.Items[n].SubItems[1].Text + "\\" + listView1.Items[n].Text);
                if (canceled_file_adding == false)
                {
                    Process ff_str = new Process();
                    ff_str.StartInfo.FileName = System.IO.Path.Combine(Application.StartupPath, "ffmpeg.exe");
                    ff_str.StartInfo.Arguments = " -i " + '\u0022' + item + '\u0022' + " -hide_banner";
                    ff_str.StartInfo.RedirectStandardOutput = true;
                    ff_str.StartInfo.RedirectStandardError = true;
                    ff_str.StartInfo.UseShellExecute = false;
                    ff_str.StartInfo.CreateNoWindow = true;
                    ff_str.EnableRaisingEvents = true;
                    ff_str.Start();
                    String stream = "";
                    while (!ff_str.StandardError.EndOfStream)
                    {
                        stream = ff_str.StandardError.ReadLine();
                        lines_ouput.Add(stream);

                    }
                    ff_str.WaitForExit();

                    foreach (String line in lines_ouput)
                    {                        
                        if (line.ToLower().Contains("invalid data")) has_streams = false;
                        if (line.Contains("Stream #")) has_streams = true;
                        if (line.Contains("Stream #") == true && line.Contains("Video:") == true) has_video_stream = true;
                        if (line.Contains("Stream #0:0") == true && line.Contains("Video:") == true) has_video_first_stream = true;

                        if (select_stream == "Stream #0:0" && line.Contains(select_stream))
                        {
                            has_streams = true;
                            if (line.ToLower().Contains(form4.filter_value))
                            {
                                match = true;
                            }
                            else
                            {
                                match = false;
                            }
                            break;
                        }

                        if (select_stream == "Stream #0:1" && line.Contains(select_stream))
                        {
                            has_streams = true;

                            if (line.ToLower().Contains(form4.filter_value))
                            {
                                match = true;
                            }
                            else
                            {
                                match = false;
                            }
                            break;
                        }

                        if (select_stream == ("Stream #"))
                        {
                            has_streams = true;
                            if (line.ToLower().Contains(form4.filter_value))
                            {
                                match = true;
                            }
                        }
                    }

                    if (match == true && form4.filter_action == "Remove") to_remove = true;
                    if (match == true && form4.filter_action == "Keep") to_remove = false;
                    if (match == false && form4.filter_action == "Remove") to_remove = false;
                    if (match == false && form4.filter_action == "Keep") to_remove = true;
                    if (has_video_first_stream == false && form4.remove_not_video == true) to_remove = true;

                    if (to_remove == true || has_streams == false)
                    {
                        this.InvokeEx(f => f.listView1.Items[n].Remove());
                        filtered_lv1.Items[n].Remove();
                        n = n - 1;
                        removed = removed + 1;
                        this.InvokeEx(f => f.pg_adding.Maximum = listView1.Items.Count + removed);
                    }
                }
                else
                {
                    this.InvokeEx(f => f.listView1.Items.Clear());
                    this.InvokeEx(f => f.LB_Wait.Visible = false);
                    this.InvokeEx(f => f.btn_undo_filter.Enabled = true);
                    this.InvokeEx(f => f.btn_undo_filter.ImageKey = "undo_20.png");
                    this.InvokeEx(f => f.btn_undo_filter.PerformClick());
                    this.InvokeEx(f => f.btn_undo_filter.Enabled = false);
                    timer_adding.Stop();
                    this.InvokeEx(f => f.txt_add_remain.Text = String.Empty);
                    this.InvokeEx(f => f.txt_add_remain.Visible = false);
                    this.InvokeEx(f => f.txt_add_remain.Refresh());
                    break;
                }
                i = i + 1;
                this.InvokeEx(f => f.LB_Wait.Text = "Applying filter...");
                this.InvokeEx(f => f.LB_Wait.Refresh());
                this.InvokeEx(f => f.pg_adding.Value = pg_adding.Value + 1);
                this.InvokeEx(f => f.pg_adding.Refresh());
                this.InvokeEx(f => f.txt_adding_p.Text = (i * 100 / pg_adding.Maximum).ToString() + "%");
                this.InvokeEx(f => f.txt_adding_p.Refresh());
            }

            this.InvokeEx(f => f.listView1.EndUpdate());
            timer_adding.Stop();
            this.InvokeEx(f => f.txt_add_remain.Text = String.Empty);
            this.InvokeEx(f => f.txt_add_remain.Visible = false);
            this.InvokeEx(f => f.txt_add_remain.Refresh());

            this.InvokeEx(f => f.LB_Wait.Text = "Removed " + (unfilter_lv1.Items.Count - listView1.Items.Count).ToString() + " file(s)");
        }

        private void BG_Vfilter_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            end_bg_filters();
        }

        private void BG_AFilter_DoWork(object sender, DoWorkEventArgs e)
        {
            Disable_Controls();
            this.InvokeEx(f => f.btn_abort_all.Enabled = false);
            this.InvokeEx(f => f.btn_pause.Enabled = false);
            this.InvokeEx(f => f.pg_adding.Value = 0);
            this.InvokeEx(f => f.pg_adding.Maximum = listView1.Items.Count);
            this.InvokeEx(f => f.pg_adding.Visible = true);
            this.InvokeEx(f => f.pg_adding.Enabled = true);
            this.InvokeEx(f => f.txt_adding_p.Visible = true);
            this.InvokeEx(f => f.txt_adding_p.Enabled = true);
            this.InvokeEx(f => f.txt_adding_p.Refresh());
            this.InvokeEx(f => f.LB_Wait.Visible = true);
            this.InvokeEx(f => f.LB_Wait.Enabled = true);
            this.InvokeEx(f => f.lbl_items.Visible = false);
            this.InvokeEx(f => f.lbl_items.Refresh());
            this.InvokeEx(f => f.lbl_dur_list.Visible = false);
            this.InvokeEx(f => f.lbl_dur_list.Refresh());
            this.InvokeEx(f => f.lbl_size.Visible = false);
            this.InvokeEx(f => f.lbl_size.Refresh());
            this.InvokeEx(f => f.pg_adding.Value = 0);
            this.InvokeEx(f => f.pg_adding.Minimum = 0);
            this.InvokeEx(f => f.pg_adding.Maximum = listView1.Items.Count);
            this.InvokeEx(f => f.btn_cancel_add.Visible = true);
            this.InvokeEx(f => f.btn_cancel_add.Enabled = true);
            canceled_file_adding = false;

            int i = 0;
            int removed = 0;


            String select_stream = String.Empty;
            if (form4.stream_n == "First stream") select_stream = "Stream #0:0";
            if (form4.stream_n == "Second stream") select_stream = "Stream #0:1";
            if (form4.stream_n == "Any stream") select_stream = "Stream #";

            String item = String.Empty;
            this.InvokeEx(f => f.listView1.BeginUpdate());
            for (int n = 0; n < listView1.Items.Count; n++)
            {
                List<string> lines_ouput = new List<string>();
                Boolean has_streams = false;
                Boolean to_remove = false;
                Boolean match = false;

                this.InvokeEx(f => item = listView1.Items[n].SubItems[1].Text + "\\" + listView1.Items[n].Text);
                if (canceled_file_adding == false)
                {
                    Process ff_str = new Process();
                    ff_str.StartInfo.FileName = System.IO.Path.Combine(Application.StartupPath, "ffmpeg.exe");
                    ff_str.StartInfo.Arguments = " -i " + '\u0022' + item + '\u0022' + " -hide_banner";
                    ff_str.StartInfo.RedirectStandardOutput = true;
                    ff_str.StartInfo.RedirectStandardError = true;
                    ff_str.StartInfo.UseShellExecute = false;
                    ff_str.StartInfo.CreateNoWindow = true;
                    ff_str.EnableRaisingEvents = true;
                    ff_str.Start();
                    String stream = "";
                    while (!ff_str.StandardError.EndOfStream)
                    {
                        stream = ff_str.StandardError.ReadLine();
                        lines_ouput.Add(stream);
                    }
                    ff_str.WaitForExit();

                    foreach (String line in lines_ouput)
                    {
                        if (line.ToLower().Contains("invalid data")) has_streams = false;
                        if (line.Contains("Stream #")) has_streams = true;

                        if (select_stream == "Stream #0:1" && line.Contains(select_stream))
                        {


                            if (line.ToLower().Contains(form4.filter_value))
                            {
                                match = true;
                            }
                            else
                            {
                                match = false;
                            }
                            break;
                        }

                        if (select_stream == "Stream #0:0" && line.Contains(select_stream))
                        {

                            if (line.ToLower().Contains(form4.filter_value))
                            {
                                match = true;
                            }
                            else
                            {
                                match = false;
                            }
                            break;
                        }

                        if (select_stream == ("Stream #"))
                        {

                            if (line.ToLower().Contains(form4.filter_value))
                            {
                                match = true;
                            }
                        }
                    }

                    if (match == true && form4.filter_action == "Remove") to_remove = true;
                    if (match == true && form4.filter_action == "Keep") to_remove = false;
                    if (match == false && form4.filter_action == "Remove") to_remove = false;
                    if (match == false && form4.filter_action == "Keep") to_remove = true;


                    //if (has_audio_first_stream == false && form4.remove_not_video == true) to_remove = true;
                    //MessageBox.Show("Has streams: " + has_streams.ToString() + " Has audio stream: " + has_audio_stream.ToString() + " Has first video stream: " + has_audio_first_stream.ToString() + "---Remove? = " + to_remove.ToString());


                    if (to_remove == true || has_streams == false)
                    {
                        this.InvokeEx(f => f.listView1.Items[n].Remove());
                        filtered_lv1.Items[n].Remove();
                        n = n - 1;
                        removed = removed + 1;
                        this.InvokeEx(f => f.pg_adding.Maximum = listView1.Items.Count + removed);
                    }
                }

                else
                {
                        this.InvokeEx(f => f.listView1.Items.Clear());
                        this.InvokeEx(f => f.LB_Wait.Visible = false);
                        this.InvokeEx(f => f.btn_undo_filter.Enabled = true);
                        this.InvokeEx(f => f.btn_undo_filter.ImageKey = "undo_20.png");
                        this.InvokeEx(f => f.btn_undo_filter.PerformClick());
                        this.InvokeEx(f => f.btn_undo_filter.Enabled = false);
                        timer_adding.Stop();
                        this.InvokeEx(f => f.txt_add_remain.Text = String.Empty);
                        this.InvokeEx(f => f.txt_add_remain.Visible = false);
                        this.InvokeEx(f => f.txt_add_remain.Refresh());
                        break;             

                }
                i = i + 1;
                this.InvokeEx(f => f.LB_Wait.Text = "Applying filter...");
                this.InvokeEx(f => f.LB_Wait.Refresh());
                this.InvokeEx(f => f.pg_adding.Value = pg_adding.Value + 1);
                this.InvokeEx(f => f.pg_adding.Refresh());
                this.InvokeEx(f => f.txt_adding_p.Text = (i * 100 / pg_adding.Maximum).ToString() + "%");
                this.InvokeEx(f => f.txt_adding_p.Refresh());
                break;
            }

            this.InvokeEx(f => f.listView1.EndUpdate());
            timer_adding.Stop();
            this.InvokeEx(f => f.txt_add_remain.Text = String.Empty);
            this.InvokeEx(f => f.txt_add_remain.Visible = false);
            this.InvokeEx(f => f.txt_add_remain.Refresh());
            this.InvokeEx(f => f.LB_Wait.Text = "Removed " + (unfilter_lv1.Items.Count - listView1.Items.Count).ToString() + " file(s)");

        }

        private void end_bg_filters()
        {
            Enable_Controls();

            this.InvokeEx(f => f.btn_cancel_add.Visible = false);
            this.InvokeEx(f => f.txt_adding_p.Visible = false);
            this.InvokeEx(f => f.pg_adding.Visible = false);

            //lbl_items.Visible = true;
            //lbl_items.Refresh();
            //lbl_dur_list.Visible = true;
            //lbl_dur_list.Refresh();
            //lbl_size.Visible = true;
            //lbl_size.Refresh();
            //lbl_items.Text = listView1.Items.Count + " file(s)";
            //listView1.Refresh();
            //calc_list_dur();
            //calc_list_size();
        }

        private void BG_AFilter_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            end_bg_filters();
        }

        private void BG_FRate_DoWork(object sender, DoWorkEventArgs e)
        {
            Disable_Controls();
            this.InvokeEx(f => f.btn_abort_all.Enabled = false);
            this.InvokeEx(f => f.btn_pause.Enabled = false);
            this.InvokeEx(f => f.pg_adding.Value = 0);
            this.InvokeEx(f => f.pg_adding.Maximum = listView1.Items.Count);
            this.InvokeEx(f => f.pg_adding.Visible = true);
            this.InvokeEx(f => f.pg_adding.Enabled = true);
            this.InvokeEx(f => f.txt_adding_p.Visible = true);
            this.InvokeEx(f => f.txt_adding_p.Enabled = true);
            this.InvokeEx(f => f.txt_adding_p.Refresh());
            this.InvokeEx(f => f.LB_Wait.Visible = true);
            this.InvokeEx(f => f.LB_Wait.Enabled = true);
            this.InvokeEx(f => f.lbl_items.Visible = false);
            this.InvokeEx(f => f.lbl_items.Refresh());
            this.InvokeEx(f => f.lbl_dur_list.Visible = false);
            this.InvokeEx(f => f.lbl_dur_list.Refresh());
            this.InvokeEx(f => f.lbl_size.Visible = false);
            this.InvokeEx(f => f.lbl_size.Refresh());
            this.InvokeEx(f => f.pg_adding.Value = 0);
            this.InvokeEx(f => f.pg_adding.Minimum = 0);
            this.InvokeEx(f => f.pg_adding.Maximum = listView1.Items.Count);
            this.InvokeEx(f => f.btn_cancel_add.Visible = true);
            this.InvokeEx(f => f.btn_cancel_add.Enabled = true);
            canceled_file_adding = false;

            int i = 0;
            int removed = 0;


            String select_stream = String.Empty;

            String item = String.Empty;
            this.InvokeEx(f => f.listView1.BeginUpdate());
            for (int n = 0; n < listView1.Items.Count; n++)
            {
                Boolean has_streams = false;
                Boolean is_video = false;
                Boolean to_remove = false;
                decimal fade_frames = 0;
                Boolean match = false;

                this.InvokeEx(f => item = listView1.Items[n].SubItems[1].Text + "\\" + listView1.Items[n].Text);
                if (canceled_file_adding == false)
                {
                    String ff_frames = String.Empty;
                    Process get_frames = new Process();
                    get_frames.StartInfo.FileName = System.IO.Path.Combine(Application.StartupPath, "MediaInfo.exe");
                    String ffprobe_frames = " " + '\u0022' + "--Inform=Video;%FrameRate%" + '\u0022';
                    get_frames.StartInfo.Arguments = ffprobe_frames + " " + '\u0022' + item + '\u0022';
                    get_frames.StartInfo.RedirectStandardOutput = true;
                    get_frames.StartInfo.RedirectStandardError = true;
                    get_frames.StartInfo.UseShellExecute = false;
                    get_frames.StartInfo.CreateNoWindow = true;
                    get_frames.EnableRaisingEvents = true;
                    get_frames.Start();

                    ff_frames = get_frames.StandardOutput.ReadLine();
                    get_frames.WaitForExit();
                    String fade_string = String.Empty;
                    if (get_frames.ExitCode == 0)
                    {
                        if (ff_frames != null)
                        {
                            try
                            {
                                fade_frames = decimal.Parse(ff_frames) / 1000;
                                fade_string = fade_frames.ToString().Replace(",", ".");
                                is_video = true;
                            }
                            catch
                            {
                                fade_frames = 0;
                                is_video = false;

                            }

                            has_streams = true;
                        }
                        else
                        {
                            has_streams = false;
                        }
                    }

                    if (form4.filter_value == fade_string && fade_frames != 0)
                    {
                        match = true;
                    }

                    if (match == true && form4.filter_action == "Remove") to_remove = true;
                    if (match == true && form4.filter_action == "Keep") to_remove = false;
                    if (match == false && form4.filter_action == "Remove") to_remove = false;
                    if (match == false && form4.filter_action == "Keep") to_remove = true;

                    if (fade_frames == 0) has_streams = false;

                    //if (has_audio_first_stream == false && form4.remove_not_video == true) to_remove = true;
                    //MessageBox.Show("Has streams: " + has_streams.ToString() + " Has audio stream: " + has_audio_stream.ToString() + " Has first video stream: " + has_audio_first_stream.ToString() + "---Remove? = " + to_remove.ToString());


                    if (to_remove == true || has_streams == false || is_video == false)
                    {
                        this.InvokeEx(f => f.listView1.Items[n].Remove());
                        filtered_lv1.Items[n].Remove();
                        n = n - 1;
                        removed = removed + 1;
                        this.InvokeEx(f => f.pg_adding.Maximum = listView1.Items.Count + removed);
                    }
                }

                else
                {
                    this.InvokeEx(f => f.listView1.Items.Clear());
                    this.InvokeEx(f => f.LB_Wait.Visible = false);
                    this.InvokeEx(f => f.btn_undo_filter.Enabled = true);
                    this.InvokeEx(f => f.btn_undo_filter.ImageKey = "undo_20.png");
                    this.InvokeEx(f => f.btn_undo_filter.PerformClick());
                    this.InvokeEx(f => f.btn_undo_filter.Enabled = false);
                    timer_adding.Stop();
                    this.InvokeEx(f => f.txt_add_remain.Text = String.Empty);
                    this.InvokeEx(f => f.txt_add_remain.Visible = false);
                    this.InvokeEx(f => f.txt_add_remain.Refresh());
                    break;
                }
                i = i + 1;
                this.InvokeEx(f => f.LB_Wait.Text = "Applying filter...");
                this.InvokeEx(f => f.LB_Wait.Refresh());
                this.InvokeEx(f => f.pg_adding.Value = pg_adding.Value + 1);
                this.InvokeEx(f => f.pg_adding.Refresh());
                this.InvokeEx(f => f.txt_adding_p.Text = (i * 100 / pg_adding.Maximum).ToString() + "%");
                this.InvokeEx(f => f.txt_adding_p.Refresh());
            }

            this.InvokeEx(f => f.listView1.EndUpdate());
            timer_adding.Stop();
            this.InvokeEx(f => f.txt_add_remain.Text = String.Empty);
            this.InvokeEx(f => f.txt_add_remain.Visible = false);
            this.InvokeEx(f => f.txt_add_remain.Refresh());
            this.InvokeEx(f => f.LB_Wait.Text = "Removed " + (unfilter_lv1.Items.Count - listView1.Items.Count).ToString() + " file(s)");
        }

        private void BG_FRate_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            end_bg_filters();
        }

        private void BG_Fsize_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            end_bg_filters();
        }

        private void BG_Fsize_DoWork(object sender, DoWorkEventArgs e)
        {
            Disable_Controls();
            this.InvokeEx(f => f.btn_abort_all.Enabled = false);
            this.InvokeEx(f => f.btn_pause.Enabled = false);
            this.InvokeEx(f => f.pg_adding.Value = 0);
            this.InvokeEx(f => f.pg_adding.Maximum = listView1.Items.Count);
            this.InvokeEx(f => f.pg_adding.Visible = true);
            this.InvokeEx(f => f.pg_adding.Enabled = true);
            this.InvokeEx(f => f.txt_adding_p.Visible = true);
            this.InvokeEx(f => f.txt_adding_p.Enabled = true);
            this.InvokeEx(f => f.txt_adding_p.Refresh());
            this.InvokeEx(f => f.LB_Wait.Visible = true);
            this.InvokeEx(f => f.LB_Wait.Enabled = true);
            this.InvokeEx(f => f.lbl_items.Visible = false);
            this.InvokeEx(f => f.lbl_items.Refresh());
            this.InvokeEx(f => f.lbl_dur_list.Visible = false);
            this.InvokeEx(f => f.lbl_dur_list.Refresh());
            this.InvokeEx(f => f.lbl_size.Visible = false);
            this.InvokeEx(f => f.lbl_size.Refresh());
            this.InvokeEx(f => f.pg_adding.Value = 0);
            this.InvokeEx(f => f.pg_adding.Minimum = 0);
            this.InvokeEx(f => f.pg_adding.Maximum = listView1.Items.Count);
            this.InvokeEx(f => f.btn_cancel_add.Visible = true);
            this.InvokeEx(f => f.btn_cancel_add.Enabled = true);
            canceled_file_adding = false;

            int i = 0;
            int removed = 0;
            String select_stream = String.Empty;

            String item = String.Empty;
            this.InvokeEx(f => f.listView1.BeginUpdate());
            for (int n = 0; n < listView1.Items.Count; n++)
            {

                Boolean has_streams = false;
                Boolean has_video = false;
                Boolean to_remove = false;
                Boolean match = false;

                this.InvokeEx(f => item = listView1.Items[n].SubItems[1].Text + "\\" + listView1.Items[n].Text);
                if (canceled_file_adding == false)
                {
                    String ff_frames = String.Empty;
                    Process get_frames = new Process();
                    get_frames.StartInfo.FileName = System.IO.Path.Combine(Application.StartupPath, "ffprobe.exe");
                    String ffprobe_frames = " -v error -select_streams v:0 -show_entries stream=width,height -of csv=s=x:p=0";
                    get_frames.StartInfo.Arguments = ffprobe_frames + " " + '\u0022' + item + '\u0022';
                    get_frames.StartInfo.RedirectStandardOutput = true;
                    get_frames.StartInfo.RedirectStandardError = true;
                    get_frames.StartInfo.UseShellExecute = false;
                    get_frames.StartInfo.CreateNoWindow = true;
                    get_frames.EnableRaisingEvents = true;
                    get_frames.Start();

                    ff_frames = get_frames.StandardOutput.ReadLine();
                    get_frames.WaitForExit();

                    if (get_frames.ExitCode == 0)
                    {
                        if (ff_frames != null)
                        {
                            has_streams = true;
                            if (ff_frames.ToLower().Contains("x"))
                            {
                                has_video = true;
                            }
                            else
                            {

                                has_video = false;
                            }
                        }
                        else
                        {
                            ff_frames = String.Empty;
                            has_streams = false;

                        }
                    }
                    if (form4.filter_value == ff_frames && ff_frames != String.Empty)
                    {
                        match = true;
                    }

                    if (match == true && form4.filter_action == "Remove") to_remove = true;
                    if (match == true && form4.filter_action == "Keep") to_remove = false;
                    if (match == false && form4.filter_action == "Remove") to_remove = false;
                    if (match == false && form4.filter_action == "Keep") to_remove = true;

                    if (ff_frames == String.Empty) has_streams = false;

                    //if (has_audio_first_stream == false && form4.remove_not_video == true) to_remove = true;
                    //MessageBox.Show("Has streams: " + has_streams.ToString() + " Has audio stream: " + has_audio_stream.ToString() + " Has first video stream: " + has_audio_first_stream.ToString() + "---Remove? = " + to_remove.ToString());


                    if (to_remove == true || has_streams == false)
                    {
                        this.InvokeEx(f => f.listView1.Items[n].Remove());
                        filtered_lv1.Items[n].Remove();
                        n = n - 1;
                        removed = removed + 1;
                        this.InvokeEx(f => f.pg_adding.Maximum = listView1.Items.Count + removed);
                    }
                }

                else
                {
                    this.InvokeEx(f => f.listView1.Items.Clear());
                    this.InvokeEx(f => f.LB_Wait.Visible = false);
                    this.InvokeEx(f => f.btn_undo_filter.Enabled = true);
                    this.InvokeEx(f => f.btn_undo_filter.ImageKey = "undo_20.png");
                    this.InvokeEx(f => f.btn_undo_filter.PerformClick());
                    this.InvokeEx(f => f.btn_undo_filter.Enabled = false);

                    timer_adding.Stop();
                    this.InvokeEx(f => f.txt_add_remain.Text = String.Empty);
                    this.InvokeEx(f => f.txt_add_remain.Visible = false);
                    this.InvokeEx(f => f.txt_add_remain.Refresh());
                    break;
                }
                i = i + 1;
                this.InvokeEx(f => f.LB_Wait.Text = "Applying filter...");
                this.InvokeEx(f => f.LB_Wait.Refresh());
                this.InvokeEx(f => f.pg_adding.Value = pg_adding.Value + 1);
                this.InvokeEx(f => f.pg_adding.Refresh());
                this.InvokeEx(f => f.txt_adding_p.Text = (i * 100 / pg_adding.Maximum).ToString() + "%");
                this.InvokeEx(f => f.txt_adding_p.Refresh());
            }

            this.InvokeEx(f => f.listView1.EndUpdate());
            timer_adding.Stop();
            this.InvokeEx(f => f.txt_add_remain.Text = String.Empty);
            this.InvokeEx(f => f.txt_add_remain.Visible = false);
            this.InvokeEx(f => f.txt_add_remain.Refresh());
            this.InvokeEx(f => f.LB_Wait.Text = "Removed " + (unfilter_lv1.Items.Count - listView1.Items.Count).ToString() + " file(s)");
        }
        

        private void BG_Custom_search_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            end_bg_filters();
        }

        private void BG_Custom_search_DoWork(object sender, DoWorkEventArgs e)
        {
            Disable_Controls();
            this.InvokeEx(f => f.btn_abort_all.Enabled = false);
            this.InvokeEx(f => f.btn_pause.Enabled = false);
            this.InvokeEx(f => f.pg_adding.Value = 0);
            this.InvokeEx(f => f.pg_adding.Maximum = listView1.Items.Count);
            this.InvokeEx(f => f.pg_adding.Visible = true);
            this.InvokeEx(f => f.pg_adding.Enabled = true);
            this.InvokeEx(f => f.txt_adding_p.Visible = true);
            this.InvokeEx(f => f.txt_adding_p.Enabled = true);
            this.InvokeEx(f => f.txt_adding_p.Refresh());
            this.InvokeEx(f => f.LB_Wait.Visible = true);
            this.InvokeEx(f => f.LB_Wait.Enabled = true);
            this.InvokeEx(f => f.lbl_items.Visible = false);
            this.InvokeEx(f => f.lbl_items.Refresh());
            this.InvokeEx(f => f.lbl_dur_list.Visible = false);
            this.InvokeEx(f => f.lbl_dur_list.Refresh());
            this.InvokeEx(f => f.lbl_size.Visible = false);
            this.InvokeEx(f => f.lbl_size.Refresh());
            this.InvokeEx(f => f.pg_adding.Value = 0);
            this.InvokeEx(f => f.pg_adding.Minimum = 0);
            this.InvokeEx(f => f.pg_adding.Maximum = listView1.Items.Count);
            this.InvokeEx(f => f.btn_cancel_add.Visible = true);
            this.InvokeEx(f => f.btn_cancel_add.Enabled = true);
            canceled_file_adding = false;

            int i = 0;
            int removed = 0;


            String select_stream = String.Empty;
            if (form4.stream_n == "First stream") select_stream = "Stream #0:0";
            if (form4.stream_n == "Second stream") select_stream = "Stream #0:1";
            if (form4.stream_n == "Any stream") select_stream = "Stream #";

            String item = String.Empty;
            this.InvokeEx(f => f.listView1.BeginUpdate());
            for (int n = 0; n < listView1.Items.Count; n++)
            {
                List<string> lines_ouput = new List<string>();
                Boolean has_streams = false;
                Boolean to_remove = false;
                Boolean match = false;

                this.InvokeEx(f => item = listView1.Items[n].SubItems[1].Text + "\\" + listView1.Items[n].Text);
                if (canceled_file_adding == false)
                {
                    Process ff_str = new Process();
                    ff_str.StartInfo.FileName = System.IO.Path.Combine(Application.StartupPath, "ffmpeg.exe");
                    ff_str.StartInfo.Arguments = " -i " + '\u0022' + item + '\u0022' + " -hide_banner";
                    ff_str.StartInfo.RedirectStandardOutput = true;
                    ff_str.StartInfo.RedirectStandardError = true;
                    ff_str.StartInfo.UseShellExecute = false;
                    ff_str.StartInfo.CreateNoWindow = true;
                    ff_str.EnableRaisingEvents = true;
                    ff_str.Start();
                    String stream = "";
                    while (!ff_str.StandardError.EndOfStream)
                    {
                        stream = ff_str.StandardError.ReadLine();
                        lines_ouput.Add(stream);
                    }
                    ff_str.WaitForExit();

                    foreach (String line in lines_ouput)
                    {

                        if (line.ToLower().Contains("invalid data")) has_streams = false;
                        if (line.Contains("Stream #")) has_streams = true;

                        if (select_stream == "Stream #0:1" && line.Contains(select_stream))
                        {
                            if (line.ToLower().Contains(form4.filter_value.ToLower()))
                            {
                                match = true;

                            }
                            else
                            {
                                match = false;
                            }
                            break;
                        }

                        if (select_stream == "Stream #0:0" && line.Contains(select_stream))
                        {
                            if (line.ToLower().Contains(form4.filter_value.ToLower()))
                            {
                                match = true;
                            }
                            else
                            {
                                match = false;
                            }
                            break;
                        }

                        if (select_stream == ("Stream #"))
                        {

                            if (line.ToLower().Contains(form4.filter_value.ToLower()))
                            {
                                match = true;
                            }
                        }
                    }

                    if (match == true && form4.filter_action == "Remove") to_remove = true;
                    if (match == true && form4.filter_action == "Keep") to_remove = false;
                    if (match == false && form4.filter_action == "Remove") to_remove = false;
                    if (match == false && form4.filter_action == "Keep") to_remove = true;


                    if (to_remove == true || has_streams == false)
                    {
                        this.InvokeEx(f => f.listView1.Items[n].Remove());
                        filtered_lv1.Items[n].Remove();
                        n = n - 1;
                        removed = removed + 1;
                        this.InvokeEx(f => f.pg_adding.Maximum = listView1.Items.Count + removed);
                    }
                }

                else
                {
                    this.InvokeEx(f => f.listView1.Items.Clear());
                    this.InvokeEx(f => f.LB_Wait.Visible = false);
                    this.InvokeEx(f => f.btn_undo_filter.Enabled = true);
                    this.InvokeEx(f => f.btn_undo_filter.ImageKey = "undo_20.png");
                    this.InvokeEx(f => f.btn_undo_filter.PerformClick());
                    this.InvokeEx(f => f.btn_undo_filter.Enabled = false);
                    timer_adding.Stop();
                    this.InvokeEx(f => f.txt_add_remain.Text = String.Empty);
                    this.InvokeEx(f => f.txt_add_remain.Visible = false);
                    this.InvokeEx(f => f.txt_add_remain.Refresh());
                    break;
                }

                i = i + 1;
                this.InvokeEx(f => f.LB_Wait.Text = "Applying filter...");
                this.InvokeEx(f => f.LB_Wait.Refresh());
                this.InvokeEx(f => f.pg_adding.Value = pg_adding.Value + 1);
                this.InvokeEx(f => f.pg_adding.Refresh());
                this.InvokeEx(f => f.txt_adding_p.Text = (i * 100 / pg_adding.Maximum).ToString() + "%");
                this.InvokeEx(f => f.txt_adding_p.Refresh());
            }

            this.InvokeEx(f => f.listView1.EndUpdate());
            timer_adding.Stop();
            this.InvokeEx(f => f.txt_add_remain.Text = String.Empty);
            this.InvokeEx(f => f.txt_add_remain.Visible = false);
            this.InvokeEx(f => f.txt_add_remain.Refresh());
            this.InvokeEx(f => f.LB_Wait.Text = "Removed " + (unfilter_lv1.Items.Count - listView1.Items.Count).ToString() + " file(s)");
        }

        private void timer_adding_Tick(object sender, EventArgs e)
        {
            start_total_time = start_total_time + 1;
            time_n_tasks = time_n_tasks + 1;
            this.InvokeEx(f => f.txt_add_remain.Text = "Time remaining:");
            this.InvokeEx(f => f.txt_add_remain.Refresh());

            if (Convert.ToUInt16(txt_adding_p.Text.Replace("%", "")) > 1 || start_total_time > 9)
            {
                this.InvokeEx(f => f.txt_add_remain.Visible = true);
                Double remain_secs = time_n_tasks * 100 / Convert.ToUInt16(txt_adding_p.Text.Replace("%", "")) - start_total_time;
                //Double remain_secs = start_total_time;
                String remain_string = String.Empty;


                TimeSpan t = TimeSpan.FromSeconds(remain_secs);
                remain_string = string.Format("{0:D2}h:{1:D2}",
                t.Hours,
                t.Minutes);

                if (remain_secs >= 43200)
                {
                    this.InvokeEx(f => f.txt_add_remain.Text = "Time remaining: " + Math.Round(remain_secs / 3600).ToString() + " hours");
                }

                if (remain_secs >= 3600 && remain_secs < 43200)
                {
                    this.InvokeEx(f => f.txt_add_remain.Text = "Time remaining: " + remain_string + " min");
                }

                if (remain_secs < 3600 && remain_secs >= 600)
                {
                    this.InvokeEx(f => f.txt_add_remain.Text = "Time remaining: " + remain_string.Substring(remain_string.LastIndexOf(":") + 1, 2) + " minutes");
                }
                if (remain_secs < 600 && remain_secs >= 120)
                {
                    this.InvokeEx(f => f.txt_add_remain.Text = "Time remaining: " + remain_string.Substring(remain_string.LastIndexOf(":") + 2, 1) + " minutes");
                }

                if (remain_secs < 120 && remain_secs > 59)
                {
                    this.InvokeEx(f => f.txt_add_remain.Text = "Time remaining: " + "About 1 minute");
                }

                if (remain_secs <= 59)
                {
                    this.InvokeEx(f => f.txt_add_remain.Text = "Time remaining: < 1 minute");
                }
                if (remain_secs <= 0)
                {
                    this.InvokeEx(f => f.txt_add_remain.Text = "Time remaining: Almost done");
                }
                this.InvokeEx(f => f.txt_remain.Refresh());
            }
            else
            {
                this.InvokeEx(f => f.txt_add_remain.Text = "Time remaining: Calculating...");
                this.InvokeEx(f => f.txt_add_remain.Refresh());
            }
            this.InvokeEx(f => f.txt_add_remain.Refresh());
        }

        private void BG_File_Bitrate_DoWork(object sender, DoWorkEventArgs e)
        {
            Disable_Controls();
            this.InvokeEx(f => f.btn_abort_all.Enabled = false);
            this.InvokeEx(f => f.btn_pause.Enabled = false);
            this.InvokeEx(f => f.pg_adding.Value = 0);
            this.InvokeEx(f => f.pg_adding.Maximum = listView1.Items.Count);
            this.InvokeEx(f => f.pg_adding.Visible = true);
            this.InvokeEx(f => f.pg_adding.Enabled = true);
            this.InvokeEx(f => f.txt_adding_p.Visible = true);
            this.InvokeEx(f => f.txt_adding_p.Enabled = true);
            this.InvokeEx(f => f.txt_adding_p.Refresh());
            this.InvokeEx(f => f.LB_Wait.Visible = true);
            this.InvokeEx(f => f.LB_Wait.Enabled = true);
            this.InvokeEx(f => f.lbl_items.Visible = false);
            this.InvokeEx(f => f.lbl_items.Refresh());
            this.InvokeEx(f => f.lbl_dur_list.Visible = false);
            this.InvokeEx(f => f.lbl_dur_list.Refresh());
            this.InvokeEx(f => f.lbl_size.Visible = false);
            this.InvokeEx(f => f.lbl_size.Refresh());
            this.InvokeEx(f => f.pg_adding.Value = 0);
            this.InvokeEx(f => f.pg_adding.Minimum = 0);
            this.InvokeEx(f => f.pg_adding.Maximum = listView1.Items.Count);
            this.InvokeEx(f => f.btn_cancel_add.Visible = true);
            this.InvokeEx(f => f.btn_cancel_add.Enabled = true);
            canceled_file_adding = false;

            int i = 0;
            int removed = 0;


            String select_stream = String.Empty;

            String item = String.Empty;
            this.InvokeEx(f => f.listView1.BeginUpdate());
            for (int n = 0; n < listView1.Items.Count; n++)
            {
                Boolean has_streams = false;
                Boolean is_video = false;
                Boolean to_remove = false;
                int fade_frames = 0;
                Boolean match = false;

                this.InvokeEx(f => item = listView1.Items[n].SubItems[1].Text + "\\" + listView1.Items[n].Text);
                if (canceled_file_adding == false)
                {
                    String ff_frames = String.Empty;
                    Process get_frames = new Process();
                    get_frames.StartInfo.FileName = System.IO.Path.Combine(Application.StartupPath, "MediaInfo.exe");
                    String ffprobe_frames = " " + '\u0022' + "--Output=General;%OverallBitRate% " + '\u0022';
                    get_frames.StartInfo.Arguments = ffprobe_frames + " " + '\u0022' + item + '\u0022';
                    get_frames.StartInfo.RedirectStandardOutput = true;
                    get_frames.StartInfo.RedirectStandardError = true;
                    get_frames.StartInfo.UseShellExecute = false;
                    get_frames.StartInfo.CreateNoWindow = true;
                    get_frames.EnableRaisingEvents = true;
                    get_frames.Start();

                    ff_frames = get_frames.StandardOutput.ReadLine();
                    get_frames.WaitForExit();
                    String fade_string = String.Empty;
                    if (get_frames.ExitCode == 0)
                    {
                        if (ff_frames != null)
                        {
                            try
                            {
                                fade_frames = Int32.Parse(ff_frames);
                                is_video = true;
                            }
                            catch
                            {
                                fade_frames = 0;
                                is_video = false;
                            }

                            has_streams = true;
                        }
                        else
                        {
                            has_streams = false;
                        }
                    }
                    Int32 filter_value = Int32.Parse(form4.filter_value);
                    if (filter_value * 1000 <= fade_frames && fade_frames != 0)
                    {
                        match = true;
                    }

                    if (match == true && form4.filter_action == "Remove") to_remove = true;
                    if (match == true && form4.filter_action == "Keep") to_remove = false;
                    if (match == false && form4.filter_action == "Remove") to_remove = false;
                    if (match == false && form4.filter_action == "Keep") to_remove = true;

                    if (fade_frames == 0) has_streams = false;

                    //if (has_audio_first_stream == false && form4.remove_not_video == true) to_remove = true;
                    //MessageBox.Show("Has streams: " + has_streams.ToString() + " Has audio stream: " + has_audio_stream.ToString() + " Has first video stream: " + has_audio_first_stream.ToString() + "---Remove? = " + to_remove.ToString());


                    if (to_remove == true || has_streams == false || is_video == false)
                    {
                        this.InvokeEx(f => f.listView1.Items[n].Remove());
                        filtered_lv1.Items[n].Remove();
                        n = n - 1;
                        removed = removed + 1;
                        this.InvokeEx(f => f.pg_adding.Maximum = listView1.Items.Count + removed);
                    }
                }

                else
                {
                    this.InvokeEx(f => f.listView1.Items.Clear());
                    this.InvokeEx(f => f.LB_Wait.Visible = false);
                    this.InvokeEx(f => f.btn_undo_filter.Enabled = true);
                    this.InvokeEx(f => f.btn_undo_filter.ImageKey = "undo_20.png");
                    this.InvokeEx(f => f.btn_undo_filter.PerformClick());
                    this.InvokeEx(f => f.btn_undo_filter.Enabled = false);
                    timer_adding.Stop();
                    this.InvokeEx(f => f.txt_add_remain.Text = String.Empty);
                    this.InvokeEx(f => f.txt_add_remain.Visible = false);
                    this.InvokeEx(f => f.txt_add_remain.Refresh());
                    break;
                }
                i = i + 1;
                this.InvokeEx(f => f.LB_Wait.Text = "Applying filter...");
                this.InvokeEx(f => f.LB_Wait.Refresh());
                this.InvokeEx(f => f.pg_adding.Value = pg_adding.Value + 1);
                this.InvokeEx(f => f.pg_adding.Refresh());
                this.InvokeEx(f => f.txt_adding_p.Text = (i * 100 / pg_adding.Maximum).ToString() + "%");
                this.InvokeEx(f => f.txt_adding_p.Refresh());
            }

            this.InvokeEx(f => f.listView1.EndUpdate());
            timer_adding.Stop();
            this.InvokeEx(f => f.txt_add_remain.Text = String.Empty);
            this.InvokeEx(f => f.txt_add_remain.Visible = false);
            this.InvokeEx(f => f.txt_add_remain.Refresh());
            this.InvokeEx(f => f.LB_Wait.Text = "Removed " + (unfilter_lv1.Items.Count - listView1.Items.Count).ToString() + " file(s)");
        }

        private void BG_File_Bitrate_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            end_bg_filters();
        }

        private void BG_Video_Bitrate_DoWork(object sender, DoWorkEventArgs e)
        {
            Disable_Controls();
            this.InvokeEx(f => f.btn_abort_all.Enabled = false);
            this.InvokeEx(f => f.btn_pause.Enabled = false);
            this.InvokeEx(f => f.pg_adding.Value = 0);
            this.InvokeEx(f => f.pg_adding.Maximum = listView1.Items.Count);
            this.InvokeEx(f => f.pg_adding.Visible = true);
            this.InvokeEx(f => f.pg_adding.Enabled = true);
            this.InvokeEx(f => f.txt_adding_p.Visible = true);
            this.InvokeEx(f => f.txt_adding_p.Enabled = true);
            this.InvokeEx(f => f.txt_adding_p.Refresh());
            this.InvokeEx(f => f.LB_Wait.Visible = true);
            this.InvokeEx(f => f.LB_Wait.Enabled = true);
            this.InvokeEx(f => f.lbl_items.Visible = false);
            this.InvokeEx(f => f.lbl_items.Refresh());
            this.InvokeEx(f => f.lbl_dur_list.Visible = false);
            this.InvokeEx(f => f.lbl_dur_list.Refresh());
            this.InvokeEx(f => f.lbl_size.Visible = false);
            this.InvokeEx(f => f.lbl_size.Refresh());
            this.InvokeEx(f => f.pg_adding.Value = 0);
            this.InvokeEx(f => f.pg_adding.Minimum = 0);
            this.InvokeEx(f => f.pg_adding.Maximum = listView1.Items.Count);
            this.InvokeEx(f => f.btn_cancel_add.Visible = true);
            this.InvokeEx(f => f.btn_cancel_add.Enabled = true);
            canceled_file_adding = false;

            int i = 0;
            int removed = 0;

            String select_stream = String.Empty;

            String item = String.Empty;
            this.InvokeEx(f => f.listView1.BeginUpdate());
            for (int n = 0; n < listView1.Items.Count; n++)
            {
                Boolean has_streams = false;
                Boolean is_video = false;
                Boolean to_remove = false;
                int fade_frames = 0;
                Boolean match = false;

                this.InvokeEx(f => item = listView1.Items[n].SubItems[1].Text + "\\" + listView1.Items[n].Text);
                if (canceled_file_adding == false)
                {
                    String ff_frames = String.Empty;
                    Process get_frames = new Process();
                    get_frames.StartInfo.FileName = System.IO.Path.Combine(Application.StartupPath, "MediaInfo.exe");
                    String ffprobe_frames = " " + '\u0022' + "--Output=Video;%BitRate%" + '\u0022';
                    get_frames.StartInfo.Arguments = ffprobe_frames + " " + '\u0022' + item + '\u0022';
                    get_frames.StartInfo.RedirectStandardOutput = true;
                    get_frames.StartInfo.RedirectStandardError = true;
                    get_frames.StartInfo.UseShellExecute = false;
                    get_frames.StartInfo.CreateNoWindow = true;
                    get_frames.EnableRaisingEvents = true;
                    get_frames.Start();

                    ff_frames = get_frames.StandardOutput.ReadLine();
                    get_frames.WaitForExit();
                    String fade_string = String.Empty;
                    if (get_frames.ExitCode == 0)
                    {
                        if (ff_frames != null)
                        {
                            try
                            {
                                fade_frames = Int32.Parse(ff_frames);
                                is_video = true;
                            }
                            catch
                            {
                                fade_frames = 0;
                                is_video = false;
                            }

                            has_streams = true;
                        }
                        else
                        {
                            has_streams = false;
                        }
                    }
                    Int32 filter_value = Int32.Parse(form4.filter_value);

                    if (filter_value * 1000 <= fade_frames && fade_frames != 0)
                    {
                        match = true;
                    }

                    if (match == true && form4.filter_action == "Remove") to_remove = true;
                    if (match == true && form4.filter_action == "Keep") to_remove = false;
                    if (match == false && form4.filter_action == "Remove") to_remove = false;
                    if (match == false && form4.filter_action == "Keep") to_remove = true;

                    if (fade_frames == 0) has_streams = false;

                    //if (has_audio_first_stream == false && form4.remove_not_video == true) to_remove = true;
                    //MessageBox.Show("Has streams: " + has_streams.ToString() + " Has audio stream: " + has_audio_stream.ToString() + " Has first video stream: " + has_audio_first_stream.ToString() + "---Remove? = " + to_remove.ToString());


                    if (to_remove == true || has_streams == false || is_video == false)
                    {
                        this.InvokeEx(f => f.listView1.Items[n].Remove());
                        filtered_lv1.Items[n].Remove();
                        n = n - 1;
                        removed = removed + 1;
                        this.InvokeEx(f => f.pg_adding.Maximum = listView1.Items.Count + removed);
                    }
                }

                else
                {
                    this.InvokeEx(f => f.listView1.Items.Clear());
                    this.InvokeEx(f => f.LB_Wait.Visible = false);
                    this.InvokeEx(f => f.btn_undo_filter.Enabled = true);
                    this.InvokeEx(f => f.btn_undo_filter.ImageKey = "undo_20.png");
                    this.InvokeEx(f => f.btn_undo_filter.PerformClick());
                    this.InvokeEx(f => f.btn_undo_filter.Enabled = false);
                    timer_adding.Stop();
                    this.InvokeEx(f => f.txt_add_remain.Text = String.Empty);
                    this.InvokeEx(f => f.txt_add_remain.Visible = false);
                    this.InvokeEx(f => f.txt_add_remain.Refresh());
                    break;
                }
                i = i + 1;
                this.InvokeEx(f => f.LB_Wait.Text = "Applying filter...");
                this.InvokeEx(f => f.LB_Wait.Refresh());
                this.InvokeEx(f => f.pg_adding.Value = pg_adding.Value + 1);
                this.InvokeEx(f => f.pg_adding.Refresh());
                this.InvokeEx(f => f.txt_adding_p.Text = (i * 100 / pg_adding.Maximum).ToString() + "%");
                this.InvokeEx(f => f.txt_adding_p.Refresh());
            }

            this.InvokeEx(f => f.listView1.EndUpdate());
            timer_adding.Stop();
            this.InvokeEx(f => f.txt_add_remain.Text = String.Empty);
            this.InvokeEx(f => f.txt_add_remain.Visible = false);
            this.InvokeEx(f => f.txt_add_remain.Refresh());
            this.InvokeEx(f => f.LB_Wait.Text = "Removed " + (unfilter_lv1.Items.Count - listView1.Items.Count).ToString() + " file(s)");
        }

        private void BG_Video_Bitrate_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            end_bg_filters();
        }

        private void BG_custom_MI_DoWork(object sender, DoWorkEventArgs e)
        {
            Disable_Controls();
            this.InvokeEx(f => f.btn_abort_all.Enabled = false);
            this.InvokeEx(f => f.btn_pause.Enabled = false);
            this.InvokeEx(f => f.pg_adding.Value = 0);
            this.InvokeEx(f => f.pg_adding.Maximum = listView1.Items.Count);
            this.InvokeEx(f => f.pg_adding.Visible = true);
            this.InvokeEx(f => f.pg_adding.Enabled = true);
            this.InvokeEx(f => f.txt_adding_p.Visible = true);
            this.InvokeEx(f => f.txt_adding_p.Enabled = true);
            this.InvokeEx(f => f.txt_adding_p.Refresh());
            this.InvokeEx(f => f.LB_Wait.Visible = true);
            this.InvokeEx(f => f.LB_Wait.Enabled = true);
            this.InvokeEx(f => f.lbl_items.Visible = false);
            this.InvokeEx(f => f.lbl_items.Refresh());
            this.InvokeEx(f => f.lbl_dur_list.Visible = false);
            this.InvokeEx(f => f.lbl_dur_list.Refresh());
            this.InvokeEx(f => f.lbl_size.Visible = false);
            this.InvokeEx(f => f.lbl_size.Refresh());
            this.InvokeEx(f => f.pg_adding.Value = 0);
            this.InvokeEx(f => f.pg_adding.Minimum = 0);
            this.InvokeEx(f => f.pg_adding.Maximum = listView1.Items.Count);
            this.InvokeEx(f => f.btn_cancel_add.Visible = true);
            this.InvokeEx(f => f.btn_cancel_add.Enabled = true);
            canceled_file_adding = false;

            int i = 0;
            int removed = 0;

            String item = String.Empty;
            this.InvokeEx(f => f.listView1.BeginUpdate());
            for (int n = 0; n < listView1.Items.Count; n++)
            {
                List<string> lines_ouput = new List<string>();

                Boolean to_remove = false;
                Boolean match = false;

                this.InvokeEx(f => item = listView1.Items[n].SubItems[1].Text + "\\" + listView1.Items[n].Text);
                if (canceled_file_adding == false)
                {
                    Process ff_str = new Process();
                    ff_str.StartInfo.FileName = System.IO.Path.Combine(Application.StartupPath, "mediainfo.exe");
                    ff_str.StartInfo.Arguments = '\u0022' + item + '\u0022';
                    ff_str.StartInfo.RedirectStandardOutput = true;
                    ff_str.StartInfo.StandardOutputEncoding = Encoding.UTF8;
                    ff_str.StartInfo.UseShellExecute = false;
                    ff_str.StartInfo.CreateNoWindow = true;
                    ff_str.EnableRaisingEvents = true;
                    ff_str.Start();
                    String stream = "";

                    while (!ff_str.StandardOutput.EndOfStream)
                    {
                        stream = ff_str.StandardOutput.ReadLine();
                        lines_ouput.Add(stream);
                    }
                    ff_str.WaitForExit();

                    foreach (String line in lines_ouput)
                    {
                        if (line.ToLower().Contains(form4.filter_value.ToLower()))
                        {
                            match = true;
                            break;
                        }
                    }

                    if (match == true && form4.filter_action == "Remove") to_remove = true;
                    if (match == true && form4.filter_action == "Keep") to_remove = false;
                    if (match == false && form4.filter_action == "Remove") to_remove = false;
                    if (match == false && form4.filter_action == "Keep") to_remove = true;


                    if (to_remove == true)
                    {
                        this.InvokeEx(f => f.listView1.Items[n].Remove());
                        filtered_lv1.Items[n].Remove();
                        n = n - 1;
                        removed = removed + 1;
                        this.InvokeEx(f => f.pg_adding.Maximum = listView1.Items.Count + removed);
                    }
                }
                else
                {
                    this.InvokeEx(f => f.listView1.Items.Clear());
                    this.InvokeEx(f => f.LB_Wait.Visible = false);
                    this.InvokeEx(f => f.btn_undo_filter.Enabled = true);
                    this.InvokeEx(f => f.btn_undo_filter.ImageKey = "undo_20.png");
                    this.InvokeEx(f => f.btn_undo_filter.PerformClick());
                    this.InvokeEx(f => f.btn_undo_filter.Enabled = false);
                    timer_adding.Stop();
                    this.InvokeEx(f => f.txt_add_remain.Text = String.Empty);
                    this.InvokeEx(f => f.txt_add_remain.Visible = false);
                    this.InvokeEx(f => f.txt_add_remain.Refresh());
                    break;
                }

                i = i + 1;
                this.InvokeEx(f => f.LB_Wait.Text = "Applying filter...");
                this.InvokeEx(f => f.LB_Wait.Refresh());
                this.InvokeEx(f => f.pg_adding.Value = pg_adding.Value + 1);
                this.InvokeEx(f => f.pg_adding.Refresh());
                this.InvokeEx(f => f.txt_adding_p.Text = (i * 100 / pg_adding.Maximum).ToString() + "%");
                this.InvokeEx(f => f.txt_adding_p.Refresh());
            }

            this.InvokeEx(f => f.listView1.EndUpdate());
            timer_adding.Stop();
            this.InvokeEx(f => f.txt_add_remain.Text = String.Empty);
            this.InvokeEx(f => f.txt_add_remain.Visible = false);
            this.InvokeEx(f => f.txt_add_remain.Refresh());
            this.InvokeEx(f => f.LB_Wait.Text = "Removed " + (unfilter_lv1.Items.Count - listView1.Items.Count).ToString() + " file(s)");
        }

        private void BG_custom_MI_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            end_bg_filters();
        }

        private void toolStripMenuItem6_Click(object sender, EventArgs e)
        {
            form5.lv1_item = listView2.SelectedItems[0].Text;
            form5.ShowDialog();
        }

        private void BG_Metadata_DoWork(object sender, DoWorkEventArgs e)
        {
            Disable_Controls();
            this.InvokeEx(f => f.btn_abort_all.Enabled = false);
            this.InvokeEx(f => f.pg_adding.Value = 0);
            this.InvokeEx(f => f.pg_adding.Maximum = listView1.Items.Count);
            this.InvokeEx(f => f.pg_adding.Visible = true);
            this.InvokeEx(f => f.pg_adding.Enabled = true);
            this.InvokeEx(f => f.txt_adding_p.Visible = true);
            this.InvokeEx(f => f.txt_adding_p.Enabled = true);
            this.InvokeEx(f => f.txt_adding_p.Refresh());
            this.InvokeEx(f => f.LB_Wait.Visible = true);
            this.InvokeEx(f => f.LB_Wait.Enabled = true);
            this.InvokeEx(f => f.lbl_items.Visible = false);
            this.InvokeEx(f => f.lbl_items.Refresh());
            this.InvokeEx(f => f.lbl_dur_list.Visible = false);
            this.InvokeEx(f => f.lbl_dur_list.Refresh());
            this.InvokeEx(f => f.lbl_size.Visible = false);
            this.InvokeEx(f => f.lbl_size.Refresh());
            this.InvokeEx(f => f.pg_adding.Value = 0);
            this.InvokeEx(f => f.pg_adding.Minimum = 0);
            this.InvokeEx(f => f.pg_adding.Maximum = listView1.Items.Count);
            this.InvokeEx(f => f.btn_cancel_add.Visible = true);
            this.InvokeEx(f => f.btn_cancel_add.Enabled = true);
            canceled_file_adding = false;

            int i = 0;
            int removed = 0;

            String select_meta = form4.stream_n;
            
            String item = String.Empty;
            this.InvokeEx(f => f.listView1.BeginUpdate());
            for (int n = 0; n < listView1.Items.Count; n++)
            {
                List<string> lines_ouput = new List<string>();

                Boolean to_remove = false;
                Boolean match = false;

                this.InvokeEx(f => item = listView1.Items[n].SubItems[1].Text + "\\" + listView1.Items[n].Text);
                if (canceled_file_adding == false)
                {
                    Process ff_str = new Process();
                    ff_str.StartInfo.FileName = System.IO.Path.Combine(Application.StartupPath, "mediainfo.exe");
                    String ffprobe_frames = " " + '\u0022' + "--Output=General;%" + select_meta + "%" + '\u0022';
                    ff_str.StartInfo.Arguments = ffprobe_frames + " " + '\u0022' + item + '\u0022';
                    ff_str.StartInfo.RedirectStandardOutput = true;
                    ff_str.StartInfo.StandardOutputEncoding = Encoding.UTF8;
                    ff_str.StartInfo.UseShellExecute = false;
                    ff_str.StartInfo.CreateNoWindow = true;
                    ff_str.EnableRaisingEvents = true;
                    ff_str.Start();
                    String stream = "";

                    while (!ff_str.StandardOutput.EndOfStream)
                    {
                        stream = ff_str.StandardOutput.ReadLine();
                        lines_ouput.Add(stream);
                    }
                    ff_str.WaitForExit();

                    foreach (String line in lines_ouput)
                    {
                        if (line.ToLower().Contains(form4.filter_value.ToLower()))
                        {
                            match = true;
                            break;
                        }
                    }

                    if (match == true && form4.filter_action == "Remove") to_remove = true;
                    if (match == true && form4.filter_action == "Keep") to_remove = false;
                    if (match == false && form4.filter_action == "Remove") to_remove = false;
                    if (match == false && form4.filter_action == "Keep") to_remove = true;


                    if (to_remove == true)
                    {
                        this.InvokeEx(f => f.listView1.Items[n].Remove());
                        filtered_lv1.Items[n].Remove();
                        n = n - 1;
                        removed = removed + 1;
                        this.InvokeEx(f => f.pg_adding.Maximum = listView1.Items.Count + removed);
                    }
                }
                else
                {
                    this.InvokeEx(f => f.listView1.Items.Clear());
                    this.InvokeEx(f => f.LB_Wait.Visible = false);
                    this.InvokeEx(f => f.btn_undo_filter.Enabled = true);
                    this.InvokeEx(f => f.btn_undo_filter.ImageKey = "undo_20.png");
                    this.InvokeEx(f => f.btn_undo_filter.PerformClick());
                    this.InvokeEx(f => f.btn_undo_filter.Enabled = false);
                    timer_adding.Stop();
                    this.InvokeEx(f => f.txt_add_remain.Text = String.Empty);
                    this.InvokeEx(f => f.txt_add_remain.Visible = false);
                    this.InvokeEx(f => f.txt_add_remain.Refresh());
                    break;
                }

                i = i + 1;
                this.InvokeEx(f => f.LB_Wait.Text = "Applying filter...");
                this.InvokeEx(f => f.LB_Wait.Refresh());
                this.InvokeEx(f => f.pg_adding.Value = pg_adding.Value + 1);
                this.InvokeEx(f => f.pg_adding.Refresh());
                this.InvokeEx(f => f.txt_adding_p.Text = (i * 100 / pg_adding.Maximum).ToString() + "%");
                this.InvokeEx(f => f.txt_adding_p.Refresh());
            }

            this.InvokeEx(f => f.listView1.EndUpdate());
            timer_adding.Stop();
            this.InvokeEx(f => f.txt_add_remain.Text = String.Empty);
            this.InvokeEx(f => f.txt_add_remain.Visible = false);
            this.InvokeEx(f => f.txt_add_remain.Refresh());
            this.InvokeEx(f => f.LB_Wait.Text = "Removed " + (unfilter_lv1.Items.Count - listView1.Items.Count).ToString() + " file(s)");
        }

        private void BG_Metadata_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            end_bg_filters();
        }

        private void toolStripMenuItem7_Click(object sender, EventArgs e)
        {
            if (listView1.Items.Count == 1) listView1.Items[0].Selected = true;
            cti4.PerformClick();
        }

        private void toolStripMenuItem8_Click(object sender, EventArgs e)
        {
            if (listView1.Items.Count == 0)
            {
                MessageBox.Show("No item was selected", "No file selected", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }
            if (listView1.Items.Count == 1)
            {
                listView1.Items[0].Selected = true;
                form5.lv1_item = listView1.SelectedItems[0].SubItems[1].Text + "\\" + listView1.SelectedItems[0].Text;
            }
            else
            {
                if (listView1.SelectedIndices.Count == 1)
                {
                    form5.lv1_item = listView1.SelectedItems[0].SubItems[1].Text + "\\" + listView1.SelectedItems[0].Text;
                }
                else return;
            }

            form5.ShowDialog();
        }

        private void toolStripMenuItem5_Click(object sender, EventArgs e)
        {
            Process.Start("https://sourceforge.net/p/ffmpeg-batch/news/");
        }

        private void toolStripMenuItem9_Click(object sender, EventArgs e)
        {
            btn_multiple_presets.PerformClick();
        }

        private void ct1_streams_Click(object sender, EventArgs e)
        {
            main_menu_streams.PerformClick();
        }

        private void toolStripMenuItem8_Click_1(object sender, EventArgs e)
        {

        }

        private void BG_Try_twopass_DoWork(object sender, DoWorkEventArgs e)
        {
            tried_ok = false;
            if (chk_try.CheckState == CheckState.Checked)
            {
                tried_ok = true;
                return;
            }

            two_try_fail = false;
            this.InvokeEx(f => this.Cursor = Cursors.WaitCursor);
            ListBox LB1_o = new ListBox();
            Process consola_pre = new Process();
            String file_prueba = "";
            String sel_test = "";
            listView1.Invoke(new MethodInvoker(delegate
            {
                if (listView1.SelectedIndices.Count == 1) this.InvokeEx(f => sel_test = listView1.SelectedItems[0].SubItems[1].Text + "\\" + listView1.SelectedItems[0].Text);
                else this.InvokeEx(f => sel_test = listView1.Items[0].SubItems[1].Text + "\\" + listView1.Items[0].Text);

            }));

            file_prueba = sel_test;
            String destino_test = Path.GetTempPath() + "\\" + "FFBatch_test";
            Boolean bad_chars = false;
            Boolean unsupported = false;

            Task tt = Task.Run(() =>
            {
                String fichero = Path.GetFileName(file_prueba);

                if (!Directory.Exists(destino_test))
                {
                    try
                    {
                        Directory.CreateDirectory(destino_test);
                    }
                    catch (System.Exception excpt)
                    {
                        MessageBox.Show("Error: " + excpt.Message, "Error writing to folder", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        this.InvokeEx(f => this.Cursor = Cursors.Arrow);
                        return;
                    }
                }

                String ext_output = "nul";

                textbox_params = multi_1st_pass;
                String templog = Path.GetTempPath() + "\\" + "FF_pass2.log";
                consola_pre.StartInfo.FileName = "ffmpeg.exe";
                consola_pre.StartInfo.Arguments = hw_decode_glob + " -y -i " + "" + '\u0022' + file_prueba + '\u0022' + " -t 00:00:0.250 " + textbox_params + " -passlogfile " + '\u0022' + templog + '\u0022' + " " + ext_output;
                consola_pre.StartInfo.RedirectStandardOutput = true;
                consola_pre.StartInfo.RedirectStandardError = true;
                consola_pre.StartInfo.UseShellExecute = false;
                consola_pre.StartInfo.CreateNoWindow = true;
                consola_pre.EnableRaisingEvents = true;
                consola_pre.Start();

                while (!consola_pre.StandardError.EndOfStream)
                {
                    this.InvokeEx(f => LB1_o.Items.Add(consola_pre.StandardError.ReadLine()));
                    this.InvokeEx(f => LB1_o.TopIndex = LB1_o.Items.Count - 1);
                    this.InvokeEx(f => LB1_o.Refresh());
                }

                consola_pre.WaitForExit();
                consola_pre.StartInfo.Arguments = String.Empty;
            });

            if (!tt.Wait(2500) && consola_pre.StartInfo.Arguments != String.Empty)
            {
                consola_pre.Kill();
                tried_ok = true;
                two_try_fail = false;
                this.InvokeEx(f => this.Cursor = Cursors.Arrow);

                if (Directory.Exists(destino_test) && Directory.GetFiles(destino_test).Length > 0)
                {
                    foreach (String file in Directory.GetFiles(destino_test))
                    {
                        try
                        {
                            File.Delete(file);
                        }
                        catch
                        {
                        }
                    }
                }

                if (Directory.GetFiles(destino_test).Length == 0)
                {
                    System.IO.Directory.Delete(destino_test);
                }
                LB1_o.Items.Clear();
                tried_params.Add(txt_parameters.Text);
                return;
            }

            if (bad_chars == false)
            {
                if (consola_pre.ExitCode != 0)
                {
                    two_try_fail = true;
                    tried_ok = false;
                    if (Directory.Exists(destino_test) && Directory.GetFiles(destino_test).Length > 0)
                    {
                        foreach (String file in Directory.GetFiles(destino_test))
                        {
                            try
                            {
                                File.Delete(file);
                            }
                            catch
                            {
                            }
                        }
                    }

                    if (Directory.GetFiles(destino_test).Length == 0)
                    {
                        System.IO.Directory.Delete(destino_test);
                    }

                    this.InvokeEx(f => this.Cursor = Cursors.Arrow);
                    foreach (String lin in LB1_o.Items)
                    {
                        if (lin.Contains("not load the requested plugin") || lin.Contains("Cannot load nvcuda.dll"))
                        {
                            unsupported = true;
                        }
                    }
                    if (unsupported == true) MessageBox.Show("Encoding test failed on first pass parameters: " + Environment.NewLine + Environment.NewLine + "Possibly unsupported encoder" + Environment.NewLine + Environment.NewLine + LB1_o.Items[LB1_o.Items.Count - 4].ToString() + Environment.NewLine + LB1_o.Items[LB1_o.Items.Count - 3].ToString() + Environment.NewLine + LB1_o.Items[LB1_o.Items.Count - 2].ToString() + Environment.NewLine + LB1_o.Items[LB1_o.Items.Count - 1].ToString() + Environment.NewLine + Environment.NewLine + "Try preset for more error information", "Encoding test failed", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    else MessageBox.Show("Encoding test failed on first pass parameters: " + Environment.NewLine + Environment.NewLine + LB1_o.Items[LB1_o.Items.Count - 4].ToString() + Environment.NewLine + LB1_o.Items[LB1_o.Items.Count - 3].ToString() + Environment.NewLine + LB1_o.Items[LB1_o.Items.Count - 2].ToString() + Environment.NewLine + LB1_o.Items[LB1_o.Items.Count - 1].ToString() + Environment.NewLine + Environment.NewLine + "Try preset for more error information", "Encoding test failed", MessageBoxButtons.OK, MessageBoxIcon.Error);

                    this.InvokeEx(f => this.Cursor = Cursors.Arrow);
                    tried_ok = false;
                    return;
                }
                else
                {
                    tried_params.Add(multi_two_pr1);
                }
            }
            //END try preset

            LB1_o.Items.Clear();
            consola_pre.Dispose();
        }

        private void BG_Try_twopass_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            if (two_try_fail == false) BG_Try_Two_Final.RunWorkerAsync();
        }

        private void BG_Try_Two_Final_DoWork(object sender, DoWorkEventArgs e)
        {
            tried_ok = false;
            if (chk_try.CheckState == CheckState.Checked)
            {
                tried_ok = true;
                return;
            }

            this.InvokeEx(f => this.Cursor = Cursors.WaitCursor);
            ListBox LB1_o = new ListBox();
            Process consola_pre = new Process();
            String file_prueba = "";
            String sel_test = "";
            listView1.Invoke(new MethodInvoker(delegate
            {
                if (listView1.SelectedIndices.Count == 1) this.InvokeEx(f => sel_test = listView1.SelectedItems[0].SubItems[1].Text + "\\" + listView1.SelectedItems[0].Text);
                else this.InvokeEx(f => sel_test = listView1.Items[0].SubItems[1].Text + "\\" + listView1.Items[0].Text);
            }));

            file_prueba = sel_test;
            String destino_test = Path.GetTempPath() + "\\" + "FFBatch_test";
            Boolean bad_chars = false;
            Boolean unsupported = false;

            Task tt = Task.Run(() =>
            {
                String fichero = Path.GetFileName(file_prueba);

                if (!Directory.Exists(destino_test))
                {
                    try
                    {
                        Directory.CreateDirectory(destino_test);
                    }
                    catch (System.Exception excpt)
                    {
                        MessageBox.Show("Error: " + excpt.Message, "Error writing to folder", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        this.InvokeEx(f => this.Cursor = Cursors.Arrow);
                        return;
                    }
                }

                String ext_output = multi_two_ext;
                if (txt_format.Text == String.Empty)
                {
                    ext_output = Path.GetExtension(file_prueba);
                }
                else
                {
                    ext_output = "." + multi_two_ext;
                }

                textbox_params = multi_two_pr1;
                String file_prueba2 = file_prueba;

                if (textbox_params.Contains("%fn"))
                {
                    textbox_params = textbox_params.Replace("%fn", Path.GetFileNameWithoutExtension(file_prueba));
                }
                if (textbox_params.Contains("%fp"))
                {
                    textbox_params = textbox_params.Replace("%fp", Path.GetDirectoryName(file_prueba));
                }
                if (textbox_params.Contains("%fd"))
                {
                    var path = Path.GetFullPath(file_prueba);
                    var dirName = Path.GetFileName(Path.GetDirectoryName(path));
                    textbox_params = textbox_params.Replace("%fd", dirName);
                }

                if (textbox_params.Contains("%1"))
                {
                    if (file_prueba2.Contains("[") || file_prueba2.Contains("]"))
                    {
                        MessageBox.Show("Input file name contains characters [ ]. Please remove them from input file name to avoid errors with -vf filter", "Conflicting characters in file name", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        Enable_Controls();
                        this.InvokeEx(f => this.Cursor = Cursors.Arrow);
                        tried_ok = false;
                        bad_chars = true;
                        return;
                    }
                    file_prueba2 = file_prueba2.Replace("\\", "\\\\\\\\");
                    file_prueba2 = file_prueba2.Replace(":", "\\\\" + ":");
                    textbox_params = textbox_params.Replace("%1", file_prueba2);
                }
                String templog = Path.GetTempPath() + "\\" + "FF_pass2.log";
                consola_pre.StartInfo.FileName = "ffmpeg.exe";
                consola_pre.StartInfo.Arguments = hw_decode_glob + " -y -i " + "" + '\u0022' + file_prueba + '\u0022' + " -t 00:00:0.250 " + "-y " + textbox_params + " -passlogfile " + '\u0022' + templog + '\u0022' + " " + '\u0022' + destino_test + "\\" + System.IO.Path.GetFileNameWithoutExtension(file_prueba) + ext_output + '\u0022';
                consola_pre.StartInfo.RedirectStandardOutput = true;
                consola_pre.StartInfo.RedirectStandardError = true;
                consola_pre.StartInfo.UseShellExecute = false;
                consola_pre.StartInfo.CreateNoWindow = true;
                consola_pre.EnableRaisingEvents = true;
                consola_pre.Start();

                while (!consola_pre.StandardError.EndOfStream)
                {
                    this.InvokeEx(f => LB1_o.Items.Add(consola_pre.StandardError.ReadLine()));
                    this.InvokeEx(f => LB1_o.TopIndex = LB1_o.Items.Count - 1);
                    this.InvokeEx(f => LB1_o.Refresh());
                }

                consola_pre.WaitForExit();
                consola_pre.StartInfo.Arguments = String.Empty;
            });

            if (!tt.Wait(2500) && consola_pre.StartInfo.Arguments != String.Empty)
            {
                consola_pre.Kill();
                tried_ok = true;
                this.InvokeEx(f => this.Cursor = Cursors.Arrow);

                if (Directory.Exists(destino_test) && Directory.GetFiles(destino_test).Length > 0)
                {
                    foreach (String file in Directory.GetFiles(destino_test))
                    {
                        try
                        {
                            File.Delete(file);
                        }
                        catch
                        {
                        }
                    }
                }

                if (Directory.GetFiles(destino_test).Length == 0)
                {
                    System.IO.Directory.Delete(destino_test);
                }
                LB1_o.Items.Clear();
                tried_params.Add(txt_parameters.Text);
                return;
            }

            if (bad_chars == false)
            {
                if (consola_pre.ExitCode != 0)
                {
                    if (Directory.Exists(destino_test) && Directory.GetFiles(destino_test).Length > 0)
                    {
                        foreach (String file in Directory.GetFiles(destino_test))
                        {
                            try
                            {
                                File.Delete(file);
                            }
                            catch
                            {
                            }
                        }
                    }

                    if (Directory.GetFiles(destino_test).Length == 0)
                    {
                        System.IO.Directory.Delete(destino_test);
                    }

                    this.InvokeEx(f => this.Cursor = Cursors.Arrow);
                    foreach (String lin in LB1_o.Items)
                    {
                        if (lin.Contains("not load the requested plugin") || lin.Contains("Cannot load nvcuda.dll"))
                        {
                            unsupported = true;
                        }
                    }
                    if (unsupported == true) MessageBox.Show("Encoding test failed on second pass parameters: " + Environment.NewLine + Environment.NewLine + "Possibly unsupported encoder" + Environment.NewLine + Environment.NewLine + LB1_o.Items[LB1_o.Items.Count - 4].ToString() + Environment.NewLine + LB1_o.Items[LB1_o.Items.Count - 3].ToString() + Environment.NewLine + LB1_o.Items[LB1_o.Items.Count - 2].ToString() + Environment.NewLine + LB1_o.Items[LB1_o.Items.Count - 1].ToString() + Environment.NewLine + Environment.NewLine + "Try preset for more error information", "Encoding test failed", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    else MessageBox.Show("Encoding test failed on second pass parameters: " + Environment.NewLine + Environment.NewLine + LB1_o.Items[LB1_o.Items.Count - 4].ToString() + Environment.NewLine + LB1_o.Items[LB1_o.Items.Count - 3].ToString() + Environment.NewLine + LB1_o.Items[LB1_o.Items.Count - 2].ToString() + Environment.NewLine + LB1_o.Items[LB1_o.Items.Count - 1].ToString() + Environment.NewLine + Environment.NewLine + "Try preset for more error information", "Encoding test failed", MessageBoxButtons.OK, MessageBoxIcon.Error);

                    this.InvokeEx(f => this.Cursor = Cursors.Arrow);
                    tried_ok = false;
                    return;
                }
                else
                {
                    System.Threading.Thread.Sleep(50);
                    if (Directory.Exists(destino_test) && Directory.GetFiles(destino_test).Length > 0)
                    {
                        foreach (String file in Directory.GetFiles(destino_test))
                        {
                            try
                            {
                                File.Delete(file);
                            }
                            catch
                            {
                            }
                        }
                    }

                    if (Directory.Exists(destino_test) && Directory.GetFiles(destino_test).Length == 0)
                    {
                        System.IO.Directory.Delete(destino_test);
                    }
                    tried_params.Add(txt_parameters.Text);
                    tried_ok = true;
                }
            }
            //END try preset
            this.InvokeEx(f => this.Cursor = Cursors.Arrow);

            if (Directory.Exists(destino_test))
            {
                if (Directory.GetFiles(destino_test).Length == 0)
                {
                    System.IO.Directory.Delete(destino_test);
                }
            }
            LB1_o.Items.Clear();
            consola_pre.Dispose();
        }

        private void BG_Try_Two_Final_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            String file_prueba = "";
            String sel_test = String.Empty;
            listView1.Invoke(new MethodInvoker(delegate
            {
                if (listView1.SelectedIndices.Count == 1) this.InvokeEx(f => sel_test = listView1.SelectedItems[0].SubItems[1].Text + "\\" + listView1.SelectedItems[0].Text);
                else this.InvokeEx(f => sel_test = listView1.Items[0].SubItems[1].Text + "\\" + listView1.Items[0].Text);

            }));
            file_prueba = sel_test;
            String destino = Path.Combine(Path.GetTempPath(), "FFBatch_test");
            String borrar = destino + "\\" + System.IO.Path.GetFileNameWithoutExtension(file_prueba) + "." + txt_format.Text;

            if (File.Exists(borrar))
            {
                try
                {
                    File.Delete(borrar);
                }
                catch
                {
                }
            }

            if (Directory.Exists(destino) == true)
            {
                if (Directory.GetFiles(destino).Length == 0)
                {
                    System.IO.Directory.Delete(destino);
                }
            }

            if (tried_ok == true) two_pass_encoding();
        }

        private void menu_two_pass_wizard_Click(object sender, EventArgs e)
        {
            if (!File.Exists(Path.Combine(Application.StartupPath, "ffmpeg.exe")))
            {
                MessageBox.Show("FFmpeg executable file was not found. Restart or reinstall application.", "Executable error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            String ffm = Path.Combine(Application.StartupPath, "AeroWizard.dll");
            if (!File.Exists(ffm))
            {
                MessageBox.Show("AeroWizard.dll was not found in application path. Reinstalling the application should fix it.", "Required file not found", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            if (listView1.Items.Count == 0)
            {
                MessageBox.Show("File list is empty", "No files to be processed", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            foreach (ListViewItem file2 in listView1.Items)
            {
                if (!File.Exists(file2.SubItems[1].Text + "\\" + file2.Text))
                {
                    MessageBox.Show("File was not found: " + file2.Text, "File not found", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
            }

            String is_overw = txt_path_main.Text + "\\" + Path.GetFileNameWithoutExtension(listView1.Items[0].SubItems[1].Text + "\\" + listView1.Items[0].Text) + "." + txt_format.Text;

            if (is_overw == listView1.Items[0].SubItems[1].Text + "\\" + listView1.Items[0].Text && chk_suffix.Checked == false)
            {
                MessageBox.Show("Overwriting is not supported. Change destination directory or enable " + '\u0022' + "Rename output" + '\u0022' + " checkbox.", "Overwriting not allowed", MessageBoxButtons.OK, MessageBoxIcon.Error);

                return;
            }
            DateTime time2;
            if (!DateTime.TryParse(ss_time_input.Text, out time2))
            {
                MessageBox.Show("Pre-input seeking format is incorrect. Change it or reset it by double-clicking on it", "Pre-input seeking format error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            if (ss_time_input.Text != "0:00:00")
            {
                foreach (ListViewItem item in listView1.Items)
                {
                    if (item.SubItems[3].Text != "N/A" && item.SubItems[3].Text != "0:00:00" && item.SubItems[3].Text != "00:00:00" && item.SubItems[3].Text != "Pending")
                    {
                        if (TimeSpan.Parse(item.SubItems[3].Text).TotalSeconds <= TimeSpan.Parse(ss_time_input.Text).TotalSeconds)
                        {
                            MessageBox.Show("Pre-input seeking exceeds duration of file: " + '\u0022' + Path.GetFileName(item.Text) + '\u0022', "Pre-input seeking error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            return;
                        }
                    }
                }
            }

            DateTime time;
            if (!DateTime.TryParse(ss_time_input.Text, out time))
            {
                MessageBox.Show("Pre-input seeking format is incorrect. Change it or reset it by double-clicking on it", "Pre-input seeking format error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            avoid_overw();

            if (avoid_overwriting == true && txt_path_main.Text.Contains(".\\") == false && txt_path_main.Text.Length < 4 && checkBox1.CheckState != CheckState.Checked)
            {
                avoid_overwriting = false;
                DialogResult a2 = MessageBox.Show("Multiple folders to single output folder may lead to overwriting. You can enable " + '\u0022' + "Recreate source path" + '\u0022' + " to avoid opossible overwritings." + Environment.NewLine + Environment.NewLine + "Do you want to continue?", "Different input folders to single output folder", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2);
                if (a2 == DialogResult.No) return;
            }

            //Check path is writable
            String destino1 = String.Empty;
            Boolean rel_path = false;
            if (txt_path_main.Text.Contains(".\\"))
            {
                String destino0 = listView1.Items[0].SubItems[1].Text + "\\" + listView1.Items[0].Text;
                destino1 = destino0.Substring(0, destino0.LastIndexOf('\\')) + txt_path_main.Text.Replace(".", String.Empty);
                rel_path = true;
            }
            else
            {
                if (checkBox1.CheckState == CheckState.Checked)
                {
                    String pre_dest = listView1.Items[0].SubItems[1].Text;
                    destino1 = Path.Combine(txt_path_main.Text, pre_dest.Substring(3, pre_dest.Length - 3));
                    rel_path = true;
                }
                else
                {
                    destino1 = txt_path_main.Text;
                }
            }

            try
            {
                if (rel_path == true)
                {
                    Directory.CreateDirectory(destino1);
                    System.Threading.Thread.Sleep(10);
                }
                else
                {
                    File.WriteAllText(destino1 + "\\" + "FFBatch_test.txt", "FFBatch_test");
                    System.Threading.Thread.Sleep(10);
                    File.Delete(destino1 + "\\" + "FFBatch_test.txt");
                }
            }
            catch (System.Exception excpt)
            {
                MessageBox.Show("Write error: " + excpt.Message, "Error writing to destination folder", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }
            //End path is writable

            //Wizard
            AeroWizard3 wizard3 = new AeroWizard3();
            wizard3.StartPosition = FormStartPosition.CenterScreen;

            if (listView1.SelectedIndices.Count == 1)
            {
                wizard3.lv1_item = listView1.SelectedItems[0].SubItems[1].Text + "\\" + listView1.SelectedItems[0].Text;
            }
            else
            {
                wizard3.lv1_item = listView1.Items[0].SubItems[1].Text + "\\" + listView1.Items[0].Text;
            }
            wizard3.pr1_string_two_params = multi_two_pr1;
            wizard3.pr1_string_two_ext = multi_two_ext;
            if (saved_pres_two.Length > 0)
            {
                wizard3.saved_pres = saved_pres_two;
            }
            if (saved_ext_two.Length > 0)
            {
                wizard3.saved_ext = saved_ext_two;
            }
            
            wizard3.ShowDialog();
            saved_pres_two = wizard3.saved_pres;
            saved_ext_two = wizard3.saved_ext;            

            if (wizard3.cancelled_w == true) return;
            
            multi_1st_pass = wizard3.pr1_first_params;
            multi_two_pr1 = wizard3.pr1_string_two_params;
            multi_two_ext = wizard3.pr1_string_two_ext;

            if (tried_ok == false)
            {
                try
                {
                    BG_Try_twopass.RunWorkerAsync();
                }
                catch
                {
                    tried_ok = true;
                }
                return;
            }
            tried_ok = false;


            //Remove test file/folder

            String file_prueba = "";
            String sel_test = String.Empty;
            if (listView1.SelectedIndices.Count == 1) sel_test = listView1.SelectedItems[0].SubItems[1].Text + "\\" + listView1.SelectedItems[0].Text;
            else sel_test = listView1.Items[0].SubItems[1].Text + "\\" + listView1.Items[0].Text;
            file_prueba = sel_test;
            String destino = Path.GetTempPath() + "\\" + "FFBatch_test";
            String borrar = destino + "\\" + System.IO.Path.GetFileNameWithoutExtension(file_prueba) + "." + txt_format.Text;

            if (File.Exists(borrar))
            {
                try
                {
                    File.Delete(borrar);
                }
                catch
                {
                }
            }

            if (Directory.Exists(destino) == true)
            {
                if (Directory.GetFiles(destino).Length == 0)
                {
                    System.IO.Directory.Delete(destino);
                }
            }

            //END Remove test file/folder
            two_pass_encoding();
        }

        private void btn_try_pr_Click(object sender, EventArgs e)
        {
            Pg1.Focus();
            if (!File.Exists(Path.Combine(Application.StartupPath, "ffmpeg.exe")))
            {
                MessageBox.Show("FFmpeg executable file was not found. Restart or reinstall application.", "Executable error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            if (listView1.Items.Count == 0)
            {
                MessageBox.Show("Add at least one file to try.", "Empty list", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            if (listView1.SelectedIndices.Count == 0)
            {
                listView1.Items[0].Selected = true;
                listView1.Items[0].Focused = true;
                listView1.Focus();
            }

            if (cb_hwdecode.SelectedItem.ToString() != "none")
            {
                hw_decode_glob = "-hwaccel " + cb_hwdecode.SelectedItem.ToString();
            }
            BG_Try_button.RunWorkerAsync();
        }

        public void CopyCache()
        {
            this.InvokeEx(f => f.btn_abort_all.Enabled = false);
            this.InvokeEx(f => f.btn_skip_main.Enabled = false);
            this.InvokeEx(f => f.btn_pause.Enabled = false);

            this.InvokeEx(f => f.txt_adding_p.Visible = true);
            this.InvokeEx(f => f.pg_adding.Maximum = 100);
            this.InvokeEx(f => f.pg_adding.Minimum = 0);
            this.InvokeEx(f => f.pg_adding.Value = 0);
            this.InvokeEx(f => f.pg_adding.Style = ProgressBarStyle.Continuous);
            this.InvokeEx(f => f.pg_adding.Visible = true);
            this.InvokeEx(f => f.pg_adding.Enabled = true);
            this.InvokeEx(f => f.pg_adding.Refresh());
            this.InvokeEx(f => f.LB_Wait.Visible = true);
            this.InvokeEx(f => f.LB_Wait.Text = "Caching network file");
            this.InvokeEx(f => f.LB_Wait.Refresh());
            this.InvokeEx(f => f.btn_cancel_add.Visible = true);
            this.InvokeEx(f => f.btn_cancel_add.Enabled = true);
            this.InvokeEx(f => f.btn_cancel_add.Refresh());
            this.InvokeEx(f => wc.Headers.Clear());
            this.InvokeEx(f => wc.Dispose());
            net_speed();
            Boolean already_cached = false;
            if (File.Exists(Path.Combine(Path.GetTempPath(), "FFBatch_test", Path.GetFileName(file_to_copy))))
            {
                FileInfo fi = new FileInfo(Path.Combine(Path.GetTempPath(), "FFBatch_test", Path.GetFileName(file_to_copy)));
                FileInfo fi2 = new FileInfo(file_to_copy);
                if (fi.Length == fi2.Length)
                {
                    already_cached = true;
                    cached = true;
                    this.InvokeEx(f => f.pg_adding.Visible = false);
                    this.InvokeEx(f => f.txt_add_remain.Visible = false);
                    this.InvokeEx(f => f.LB_Wait.Visible = false);
                    this.InvokeEx(f => f.btn_cancel_add.Visible = false);
                    this.InvokeEx(f => f.txt_adding_p.Visible = false);
                    this.InvokeEx(f => f.txt_add_remain.Visible = false);
                    this.InvokeEx(f => f.txt_add_remain.Enabled = false);
                    this.InvokeEx(f => f.btn_abort_all.Enabled = true);
                    this.InvokeEx(f => f.btn_skip_main.Enabled = true);
                    this.InvokeEx(f => f.btn_pause.Enabled = true);
                }
                else
                {
                    already_cached = false;
                }
            }
            if (already_cached == false)
            {
                Task t = Task.Run(() =>
                {
                    this.InvokeEx(f => wc.DownloadFileAsync(new System.Uri(file_to_copy), Path.Combine(Path.GetTempPath(), "FFBatch_test", Path.GetFileName(file_to_copy))));
                });
                t.Wait();
            }
        }

        public void Extract(object sender, AsyncCompletedEventArgs e)
        {
            cached = true;
            this.InvokeEx(f => f.pg_adding.Visible = false);
            this.InvokeEx(f => f.txt_add_remain.Visible = false);
            this.InvokeEx(f => f.LB_Wait.Visible = false);
            this.InvokeEx(f => f.btn_cancel_add.Visible = false);
            this.InvokeEx(f => f.txt_adding_p.Visible = false);
            this.InvokeEx(f => f.txt_add_remain.Visible = false);
            this.InvokeEx(f => f.txt_add_remain.Enabled = false);
            this.InvokeEx(f => f.btn_abort_all.Enabled = true);
            this.InvokeEx(f => f.btn_skip_main.Enabled = true);
            this.InvokeEx(f => f.btn_pause.Enabled = true);

            if (e.Cancelled == true)
            {
                try
                {
                    File.Delete(Path.Combine(Path.GetTempPath(), "FFBatch_test", Path.GetFileName(file_to_copy)).Replace("\\\\", "\\"));
                }
                catch { }
            }
        }

        private void ProgressChanged(object sender, DownloadProgressChangedEventArgs e)
        {
            this.InvokeEx(f => f.pg_adding.Value = e.ProgressPercentage);
            this.InvokeEx(f => f.pg_adding.Refresh());
            this.InvokeEx(f => f.txt_adding_p.Text = e.ProgressPercentage.ToString() + "%");
            this.InvokeEx(f => f.txt_adding_p.Refresh());
        }

        private void pictureBox1_DoubleClick(object sender, EventArgs e)
        {
            menu_about.PerformClick();
        }

        private void net_speed()
        {
            int i_net = 0;
            float current = 0;
            float accum = 0;
            String data = String.Empty;
            Boolean valid = false;

            Task t = Task.Run(() =>
            {
                this.InvokeEx(f => f.txt_add_remain.Text = String.Empty);
                PerformanceCounter pc = new PerformanceCounter("Process", "IO Data Bytes/sec", "FFbatch");
                while (cached == false)
                {
                    Thread.Sleep(2000);
                    i_net = i_net + 1;
                    current = pc.NextValue();
                    accum = accum + current;
                    try
                    {
                        data = Math.Round(Convert.ToDecimal(accum / 2 / 1048576 / i_net), 2).ToString();
                        valid = true;
                    }
                    catch
                    {
                        valid = false;
                    }
                    if (valid == true && data != "0")
                    {
                        this.InvokeEx(f => f.txt_add_remain.Text = "Avg. transfer rate: " + data + " MB/s");
                    }
                    else
                    {
                        this.InvokeEx(f => f.txt_add_remain.Text = String.Empty);
                    }
                    this.InvokeEx(f => f.txt_add_remain.Refresh());
                }
            });
        }

        private void ct1_total_frames_Click(object sender, EventArgs e)
        {
            String file = listView1.SelectedItems[0].SubItems[1].Text + "\\" + listView1.SelectedItems[0].Text;
            String ff_frames = String.Empty;
            String ff_rate = String.Empty;
            String ff_dur = String.Empty;
            Decimal tot_frames = 0;
            Decimal ff_rate_dec = 0;
            Decimal ff_dur_dec = 0;
            this.Cursor = Cursors.WaitCursor;
            Task t = Task.Run(() =>
            {
                Process get_frames = new Process();
                get_frames.StartInfo.FileName = System.IO.Path.Combine(Application.StartupPath, "MediaInfo.exe");
                String ffprobe_frames = " " + '\u0022' + "--Inform=Video;%FrameCount%,%FrameRate%" + '\u0022';
                get_frames.StartInfo.Arguments = ffprobe_frames + " " + '\u0022' + file + '\u0022';
                get_frames.StartInfo.RedirectStandardOutput = true;
                get_frames.StartInfo.RedirectStandardError = true;
                get_frames.StartInfo.UseShellExecute = false;
                get_frames.StartInfo.CreateNoWindow = true;
                get_frames.EnableRaisingEvents = true;
                get_frames.Start();

                while (!get_frames.StandardOutput.EndOfStream)
                {
                    ff_frames = get_frames.StandardOutput.ReadLine();
                }
                get_frames.WaitForExit();

                try
                {
                    int ff_rate_1 = ff_frames.IndexOf(",");
                    ff_rate = ff_frames.Substring(ff_frames.IndexOf(",") + 1, ff_frames.Length - ff_rate_1 - 1);
                    ff_frames = ff_frames.Substring(0, ff_frames.IndexOf(","));
                }
                catch
                {
                    ff_frames = null;
                    ff_rate = null;
                }

                if (get_frames.ExitCode == 0)
                {
                    if (ff_frames != null)
                    {
                        try
                        {
                            tot_frames = decimal.Parse(ff_frames) / 1000;

                        }
                        catch
                        {
                            tot_frames = 0;
                            ff_rate_dec = 0;
                        }

                    }
                    else
                    {
                        tot_frames = 0;
                        ff_rate_dec = 0;
                    }
                    if (ff_rate != null)
                    {
                        try
                        {
                            ff_rate_dec = decimal.Parse(ff_rate);
                        }
                        catch
                        {
                            tot_frames = 0;
                            ff_rate_dec = 0;
                        }

                    }
                    else
                    {
                        tot_frames = 0;
                        ff_rate_dec = 0;
                    }
                }
                else
                {
                    tot_frames = 0;
                    ff_rate_dec = 0;
                    ff_dur_dec = 0;
                }

                Process get_frames2 = new Process();
                get_frames2.StartInfo.FileName = System.IO.Path.Combine(Application.StartupPath, "MediaInfo.exe");
                ffprobe_frames = " " + '\u0022' + "--Inform=General;%Duration%" + '\u0022';
                get_frames2.StartInfo.Arguments = ffprobe_frames + " " + '\u0022' + file + '\u0022';
                get_frames2.StartInfo.RedirectStandardOutput = true;
                get_frames2.StartInfo.RedirectStandardError = true;
                get_frames2.StartInfo.UseShellExecute = false;
                get_frames2.StartInfo.CreateNoWindow = true;
                get_frames2.EnableRaisingEvents = true;
                get_frames2.Start();

                ff_dur = get_frames2.StandardOutput.ReadLine();

                get_frames2.WaitForExit();

                if (get_frames2.ExitCode == 0)
                {
                    if (ff_dur != null)
                    {
                        try
                        {
                            ff_dur_dec = decimal.Parse(ff_dur) / 1000;

                        }
                        catch
                        {
                            ff_dur_dec = 0;
                        }

                    }
                    else
                    {
                        ff_dur_dec = 0;
                    }
                }
            });

            if (!t.Wait(10000))
            {
                this.Cursor = Cursors.Arrow;
                return;
            }

            this.Cursor = Cursors.Arrow;
            Form frmInfo = new Form();
            frmInfo.Name = "Multimedia file statistics";
            frmInfo.Text = "Multimedia file statistics";
            frmInfo.Icon = this.Icon;
            frmInfo.Height = 228;
            frmInfo.Width = 336;
            frmInfo.FormBorderStyle = FormBorderStyle.Fixed3D;
            frmInfo.MaximizeBox = false;
            frmInfo.MinimizeBox = false;
            frmInfo.BackColor = this.BackColor;

            TextBox titulo2 = new TextBox();
            titulo2.Parent = frmInfo;
            titulo2.Top = 12;
            titulo2.Left = 9;
            titulo2.Width = 293;
            titulo2.BackColor = this.BackColor;
            titulo2.BorderStyle = BorderStyle.None;
            titulo2.TextAlign = HorizontalAlignment.Center;
            titulo2.ReadOnly = true;
            titulo2.TabIndex = 2;
            titulo2.Text = Path.GetFileName(listView1.SelectedItems[0].Text);

            Label line = new Label();
            line.Parent = frmInfo;
            line.Left = 0;
            line.Top = 41;
            line.Height = 2;
            line.BorderStyle = BorderStyle.Fixed3D;
            line.Width = 336;

            Label line2 = new Label();
            line2.Parent = frmInfo;
            line2.Left = 0;
            line2.Top = 136;
            line2.Height = 2;
            line2.BorderStyle = BorderStyle.Fixed3D;
            line2.Width = 336;

            Button boton_ok_st = new Button();
            boton_ok_st.Parent = frmInfo;
            boton_ok_st.Left = 85;
            boton_ok_st.Top = 148;
            boton_ok_st.Width = 145;
            boton_ok_st.Height = 27;
            boton_ok_st.Text = "Close";
            boton_ok_st.TabIndex = 0;
            boton_ok_st.Click += new EventHandler(boton_ok_st_Click);
            frmInfo.CancelButton = boton_ok_st;

            Label lbl_frm_rate = new Label();
            lbl_frm_rate.Parent = frmInfo;
            lbl_frm_rate.Left = 20;
            lbl_frm_rate.Top = 55;
            lbl_frm_rate.Width = 90;
            lbl_frm_rate.Text = "Framerate:";

            Label lbl_frm_rate2 = new Label();
            lbl_frm_rate2.Parent = frmInfo;
            lbl_frm_rate2.Left = 123;
            lbl_frm_rate2.Top = 55;
            lbl_frm_rate2.Width = 110;
            if (ff_rate_dec != 0) lbl_frm_rate2.Text = ff_rate + " fps.";
            else lbl_frm_rate2.Text = "-";

            Label lbl_seconds = new Label();
            lbl_seconds.Parent = frmInfo;
            lbl_seconds.Left = 20;
            lbl_seconds.Top = 81;
            lbl_seconds.Width = 90;
            lbl_seconds.Text = "Total seconds:";

            Label lbl_seconds2 = new Label();
            lbl_seconds2.Parent = frmInfo;
            lbl_seconds2.Left = 123;
            lbl_seconds2.Top = 81;
            lbl_seconds2.Width = 110;
            if (ff_dur_dec != 0) lbl_seconds2.Text = ff_dur_dec.ToString() + " seconds.";
            else lbl_seconds2.Text = "-";

            Label lbl_fr_count = new Label();
            lbl_fr_count.Parent = frmInfo;
            lbl_fr_count.Left = 20;
            lbl_fr_count.Top = 107;
            lbl_fr_count.Width = 95;
            lbl_fr_count.Text = "Total frames:";

            Label lbl_fr_count2 = new Label();
            lbl_fr_count2.Parent = frmInfo;
            lbl_fr_count2.Left = 123;
            lbl_fr_count2.Top = 107;
            lbl_fr_count2.Width = 110;
            if (tot_frames != 0) lbl_fr_count2.Text = tot_frames.ToString().TrimStart('0').Replace(System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator, String.Empty) + " frames.";
            else lbl_fr_count2.Text = "-";
            frmInfo.StartPosition = FormStartPosition.CenterParent;
            frmInfo.ShowDialog();
        }

        private void boton_ok_st_Click(object sender, EventArgs e)
        {
            ActiveForm.Close();
        }


        private void watch_other_instance_Created(object sender, FileSystemEventArgs e)
        {
            String other_file = Path.Combine(Path.GetTempPath(), "FFBatch_test") + "\\" + "Other_instance.fftmp";
            if (File.Exists(other_file) && working == false)
            {
                List<string> files2 = new List<string>();
                int num_drop = 0;
                this.BringToFront();
                foreach (String dropped in File.ReadLines(other_file))
                {
                    if (File.Exists(dropped))
                    {
                        files2.Add(dropped);
                        num_drop = files2.Count();
                    }
                    else
                    {
                        if (Directory.Exists(dropped))
                        {
                            if (add_subfs == false)
                            {
                                foreach (String file in Directory.GetFiles(dropped))
                                {
                                    if (!File.GetAttributes(file).HasFlag(FileAttributes.Hidden))
                                    {
                                        files2.Add(file);
                                        num_drop = num_drop + 1;
                                    }
                                }
                            }
                            else
                            {
                                try
                                {
                                    foreach (string f in Directory.GetFiles(dropped, "*.*", System.IO.SearchOption.AllDirectories))
                                    {
                                        if (!File.GetAttributes(f).HasFlag(FileAttributes.Hidden))
                                        {
                                            files2.Add(f);
                                            num_drop = num_drop + 1;
                                        }
                                    }
                                }
                                catch (System.Exception excpt)
                                {
                                    var a = MessageBox.Show("Error: " + excpt.Message, "Access error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                    return;
                                }
                            }
                        }
                    }
                }

                if (num_drop >= 5000)
                {
                    var a = MessageBox.Show("Adding " + num_drop + " files could take some time. Continue?", "Adding many files", MessageBoxButtons.OKCancel, MessageBoxIcon.Question);
                    if (a == DialogResult.Cancel)
                    {
                        return;
                    }
                }

                files_to_add = files2;
                canceled_file_adding = false;
                btn_cancel_add.Enabled = true;
                btn_cancel_add.Visible = true;
                btn_cancel_add.Refresh();
                BG_Files.RunWorkerAsync();

                try
                {
                    File.Delete(other_file);
                }
                catch { }
            }
        }

        private void notifyIcon1_BalloonTipClosed(object sender, EventArgs e)
        {
            notifyIcon1.Visible = false;
        }

        private void chk_delete_source_CheckedChanged(object sender, EventArgs e)
        {
            String f_delete = String.Empty;
            if (is_portable == false)
            {
                f_delete = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_delete.ini";
            }
            else
            {
                f_delete = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_delete_portable.ini";
            }

            if (chk_delete_source.Checked == false)
            {

                if (File.Exists(f_delete))
                {
                    try
                    {
                        File.Delete(f_delete);
                    }
                    catch
                    {
                        MessageBox.Show("An error occurred while saving settings.", "Error saving option", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
            }
            else
            {
                if (!File.Exists(f_delete))
                {
                    try
                    {
                        File.WriteAllText(f_delete, String.Empty);
                    }
                    catch
                    {
                        MessageBox.Show("An error occurred while saving settings.", "Error saving option", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
            }
            if (chk_delete_source.Checked == true && chk_overw.Checked == true)
            {
                MessageBox.Show("It is not possible to overwrite and delete source at the same time.");

            }
        }

        private void wiz_silence_menu_Click(object sender, EventArgs e)
        {
            detect_silence();
        }

        private void lbl_updates_Click(object sender, EventArgs e)
        {
            if (lbl_updates.Text.ToLower().Contains("available")) btn_update.PerformClick();
        }

        private void btn_abort_all_Click(object sender, EventArgs e)
        {
            Pg1.Focus();
            if (tabControl1.SelectedIndex == 0) abort_view1();
            if (tabControl1.SelectedIndex == 1) abort_mux();
            if (tabControl1.SelectedIndex == 2) abort_sub_mux();
            if (tabControl1.SelectedIndex == 3) abort_m3u();

        }

        private void abort_mux()
        {
            Pg1.Focus();
            if (working == false) return;
            cancel_queue = true;

            if (process_glob.StartInfo.Arguments.Length >= 0)
            {
                StreamWriter write_q = process_glob.StandardInput;
                write_q.Write("q");
                working = false;                
                return;
            }
            else
            {
                System.Threading.Thread.Sleep(50);
                Process[] localByName = Process.GetProcessesByName("ffmpeg");
                foreach (Process p in localByName)
                {
                    p.Kill();
                }
                System.Threading.Thread.Sleep(500);

                Process[] localByName2 = Process.GetProcessesByName("ffmpeg");
                foreach (Process p2 in localByName2)
                {
                    p2.Kill();
                }
                working = false;
            }
        }

        private void abort_sub_mux()
        {
            if (working == false) return;
            cancel_queue = true;
            working = false;
            if (process_glob.StartInfo.Arguments != String.Empty)
            {
                StreamWriter write_q = process_glob.StandardInput;
                write_q.Write("q");
                return;
            }
            else
            {
                System.Threading.Thread.Sleep(250);
                Process[] localByName = Process.GetProcessesByName("ffmpeg");
                foreach (Process p in localByName)
                {
                    p.Kill();
                }
                System.Threading.Thread.Sleep(500);

                Process[] localByName2 = Process.GetProcessesByName("ffmpeg");
                foreach (Process p2 in localByName2)
                {
                    p2.Kill();
                }
            }
        }

        public Boolean Send_CTRLC(Process p)
        {            
            if (AttachConsole((uint)p.Id))
            {
                SetConsoleCtrlHandler(null, true);
                try
                {
                    if (!GenerateConsoleCtrlEvent(CTRL_C_EVENT, 0))
                        return false;
                    p.WaitForExit(10000);
                }
                finally
                {
                    FreeConsole();
                    SetConsoleCtrlHandler(null, false);
                }
                return true;
            }
            return false;
        }


        private void abort_m3u()
        {
            if (m3u_running == true)
            {
                working = false;
                m3u_running = false;
                cancelados_paralelos = true;
                aborted = true;

                foreach (DataGridViewRow row in dg1.Rows)
                {
                    if (row.Cells[5].Value.ToString() != "Success" && row.Cells[5].Value.ToString() != "Ready" && row.Cells[5].Value.ToString() != "Skipped" && row.Cells[5].Value.ToString() != "Recording")
                    {
                        row.Cells[5].Value = "Aborting";
                    }
                    if (row.Cells[5].Value.ToString() != "Recording") row.Cells[5].Value = "Stopping";
                }
                Boolean proc_exist = false;
                if (m3u_single_running == false)
                {
                    Process[] localByName = Process.GetProcessesByName("youtube-dl");
                    foreach (Process p in localByName)
                    {
                        foreach (DataGridViewRow row in dg1.Rows)
                        {
                            try
                            {
                                if (p.Id == procs["proc_urls_" + row.Index.ToString()].Id)
                                {
                                    proc_exist = true;
                                }
                            }
                            catch
                            {
                                proc_exist = false;
                                continue;
                            }

                            if (p.Id == procs["proc_urls_" + row.Index.ToString()].Id)
                            {
                                try
                                {
                                    p.Kill();
                                }
                                catch { }
                            }
                        }
                    }
                    //FFmpeg m3u running
                    Process[] ffs = Process.GetProcessesByName("ffmpeg");
                    foreach (Process p in ffs)
                    {
                        foreach (DataGridViewRow row in dg1.Rows)
                        {
                            try
                            {
                                if (p.Id == procs["proc_urls_" + row.Index.ToString()].Id)
                                {
                                    proc_exist = true;
                                }
                            }
                            catch
                            {
                                proc_exist = false;
                                continue;
                            }

                            if (p.Id == procs["proc_urls_" + row.Index.ToString()].Id)
                            {
                                try
                                {
                                    p.Kill();
                                }
                                catch { }
                            }
                        }
                    }
                    timer2.Stop();
                }

                if (m3u_single_running == true)
                {
                    aborted_url = true;

                    //Live YouTube abort
                    if (dg1.Rows[0].Cells[3].Value.ToString() == "Live")
                    {                        
                        timer2.Stop();
                        aborted_url = false;
                        stopped_recording = true;
                        Pg1.MarqueeAnimationSpeed = 15;
                        Pg1.Text = "Stopping stream recording, please wait...";
                        Pg1.Refresh();

                        Send_CTRLC(process_glob);
                    }
                    else
                    {
                        StreamWriter write_q2 = process_glob.StandardInput;
                        write_q2.Write("q");
                        Process[] localByName = Process.GetProcessesByName("youtube-dl");
                        foreach (Process p in localByName)
                        {
                            if (p.Id == process_glob.Id)
                            {
                                try { p.Kill(); }
                                catch { }
                            }
                        }
                    }
                
                    aborted_url = true;
                    aborted = true;
                    cancel_queue = true;
                    cancelados_paralelos = false;
                }
                return;
            }

            cancel_queue = true;
            cancelados_paralelos = true;

            if (process_glob.StartInfo.Arguments != String.Empty)
            {
                process_glob.Kill();
            }
            else
            {
                System.Threading.Thread.Sleep(250);
                Process[] localByName = Process.GetProcessesByName("ffmpeg");
                foreach (Process p in localByName)
                {
                    p.Kill();
                }
                System.Threading.Thread.Sleep(500);

                Process[] localByName2 = Process.GetProcessesByName("ffmpeg");
                foreach (Process p2 in localByName2)
                {
                    p2.Kill();
                }
            }
        }

        private void btn_multimedia_Click(object sender, EventArgs e)
        {
            Pg1.Focus();
            if (listView1.Items.Count == 0)
            {
                MessageBox.Show("File list is empty empty", "File list empty", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }
            else
            {
                if (listView1.SelectedItems.Count == 0)
                {
                    MessageBox.Show("No file was selected.");
                    return;
                }
            }
            media_info();
        }

        private void button1_Click_1(object sender, EventArgs e)
        {
            Pg1.Focus();
            try
            {
                listView1.Font = new Font("Microsoft Sans Serif", listView1.Font.Size + 1);
                listView2.Font = new Font("Microsoft Sans Serif", listView2.Font.Size + 1);
                listView3.Font = new Font("Microsoft Sans Serif", listView3.Font.Size + 1);
                list_tracks.Font = new Font("Microsoft Sans Serif", list_tracks.Font.Size + 1);
                combo_presets.Font = new Font("Microsoft Sans Serif", combo_presets.Font.Size + 1);
                txt_path_main.Font = new Font("Microsoft Sans Serif", txt_path_main.Font.Size + 1);
                txt_pre_input.Font = new Font("Microsoft Sans Serif", txt_pre_input.Font.Size + 1);
                txt_parameters.Font = new Font("Microsoft Sans Serif", txt_parameters.Font.Size + 1);
                tabControl1.Font = new Font("Microsoft Sans Serif", tabControl1.Font.Size + 1);
                dg1.Font = new Font("Microsoft Sans Serif", dg1.Font.Size + 0.5f);
                FFBatch.Properties.Settings.Default.font_size = FFBatch.Properties.Settings.Default.font_size + 1;
                FFBatch.Properties.Settings.Default.Save();
            }
            catch { }
        }

        private void button5_Click_1(object sender, EventArgs e)
        {
            Pg1.Focus();
            try
            {
                listView1.Font = new Font("Microsoft Sans Serif", listView1.Font.Size - 1);
                listView2.Font = new Font("Microsoft Sans Serif", listView2.Font.Size - 1);
                listView3.Font = new Font("Microsoft Sans Serif", listView3.Font.Size - 1);
                list_tracks.Font = new Font("Microsoft Sans Serif", list_tracks.Font.Size - 1);
                combo_presets.Font = new Font("Microsoft Sans Serif", combo_presets.Font.Size - 1);
                txt_parameters.Font = new Font("Microsoft Sans Serif", txt_parameters.Font.Size - 1);
                txt_path_main.Font = new Font("Microsoft Sans Serif", txt_path_main.Font.Size - 1);
                txt_pre_input.Font = new Font("Microsoft Sans Serif", txt_pre_input.Font.Size - 1);
                tabControl1.Font = new Font("Microsoft Sans Serif", tabControl1.Font.Size - 1);
                dg1.Font = new Font("Microsoft Sans Serif", dg1.Font.Size - 0.5f);
                FFBatch.Properties.Settings.Default.font_size = FFBatch.Properties.Settings.Default.font_size - 1;
                FFBatch.Properties.Settings.Default.Save();
            }
            catch { }
        }

        private void set_font_size()
        {
            try
            {
                if (dg1.Font.Size == 0) return;
                listView1.Font = new Font("Microsoft Sans Serif", listView1.Font.Size + font_size);
                listView2.Font = new Font("Microsoft Sans Serif", listView2.Font.Size + font_size);
                listView3.Font = new Font("Microsoft Sans Serif", listView3.Font.Size + font_size);
                list_tracks.Font = new Font("Microsoft Sans Serif", list_tracks.Font.Size + font_size);
                txt_path_main.Font = new Font("Microsoft Sans Serif", txt_path_main.Font.Size + font_size);
                txt_pre_input.Font = new Font("Microsoft Sans Serif", txt_pre_input.Font.Size + font_size);
                combo_presets.Font = new Font("Microsoft Sans Serif", combo_presets.Font.Size + font_size);
                txt_parameters.Font = new Font("Microsoft Sans Serif", txt_parameters.Font.Size + font_size);
                tabControl1.Font = new Font("Microsoft Sans Serif", tabControl1.Font.Size + font_size);
                dg1.Font = new Font("Microsoft Sans Serif", dg1.Font.Size + (font_size / 2));
            }
            catch
            {

            }
        }
        private Boolean has_m3u_row()
        {            
            foreach (DataGridViewRow row in dg1.Rows)
            {
                if (!row.Cells[1].Value.ToString().ToLower().Contains("youtu.be") && !row.Cells[1].Value.ToString().ToLower().Contains("youtube.com"))
                {
                    return true;
                }
            }
            return false;
        }

        private Boolean has_you_row()
        {
            foreach (DataGridViewRow row in dg1.Rows)
            {
                if (row.Cells[1].Value.ToString().ToLower().Contains("youtu.be") || row.Cells[1].Value.ToString().ToLower().Contains("youtube.com"))
                {
                    return true;
                }
            }
            return false;
        }

        private void ct_paste_youtube_Click(object sender, EventArgs e)
        {
            check_internet();

            if (internet_up == false) return;
            String copied = Clipboard.GetText();

            if (!copied.ToLower().Contains("youtu.be") && !copied.ToLower().Contains("youtube.com"))
            {
                MessageBox.Show("No valid YouTube URL found.");
                return;
            }
            if (has_m3u_row() == true)
            {
                MessageBox.Show("Mixing of YouTube and other types of URLs on the list is not supported.","Mixed URL types",MessageBoxButtons.OK,MessageBoxIcon.Information);
                return;
            }
            
            if (copied.Contains("&list=")) copied = copied.Substring(0, copied.IndexOf("&list="));

            if (copied != String.Empty && copied.ToLower().Contains("http"))
            {
                foreach (DataGridViewRow r in dg1.Rows)
                {
                    if (r.Cells[1].Value.ToString() == copied)
                    {
                        MessageBox.Show("URL was already added to the list.");
                        return;
                    }
                }

                foreach (DataGridViewRow row in dg1.Rows)
                {
                    row.ReadOnly = true;
                    
                }
                foreach (Control ct in groupBox_m3u.Controls)
                {
                    ct.Enabled = false;
                }

                if (copied.ToLower().Contains("playlist"))
                {
                    pl_url = copied;
                    dg1.Rows.Clear();                    
                    Validate_added_row_YT_PL();
                }
                else
                {
                    //this.Enabled = false;
                    btn_cancel_validate.Enabled = true;
                    dg1.Rows.Add(pic_noimg.Image, copied, "", "", "", "");
                    BG_Single_yt.RunWorkerAsync();
                    //Validate_added_row_YT();
                }                
            }
        }

        private void btn_add_yts_Click(object sender, EventArgs e)
        {            
            Pg1.Focus();
            if (!File.Exists(System.IO.Path.Combine(Application.StartupPath, "youtube-dl.exe")))
            {
                MessageBox.Show("Youtube-dl was not found", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                release_datagrid();
                return;
            }           
            check_internet();
            if (internet_up == false) return;
            adding_youtube = true;
            open_file_m3u.Filter = "Text files | *.txt; *.text| All files (*.*) | *.*";
            open_file_m3u.ShowDialog();
        }

        private void clonedg()
        {            
            var targetRows = new List<DataGridViewRow>();

            foreach (DataGridViewRow sourceRow in dg1.Rows)
            {
                if (!sourceRow.IsNewRow)
                {
                    var targetRow = (DataGridViewRow)sourceRow.Clone();
                    
                    foreach (DataGridViewCell cell in sourceRow.Cells)
                    {
                        targetRow.Cells[cell.ColumnIndex].Value = cell.Value;
                    }
                    targetRows.Add(targetRow);
                }
            }
        }

        private void cell_stretch()
        {
            dg1.Invoke(new MethodInvoker(delegate
            {
            for (int i = 0; i < dg1.Columns.Count; i++)
                if (dg1.Columns[i] is DataGridViewImageColumn)
                {
                    ((DataGridViewImageColumn)dg1.Columns[i]).ImageLayout = DataGridViewImageCellLayout.Stretch;
                    break;
                }
            }));
        }

        private void BG_Validate_URLs_YT_DoWork(object sender, DoWorkEventArgs e)
        {
            m3u_params_checked = chk_m3u_params.Checked;
            output_server_checked = chk_output_server.Checked;
            this.InvokeEx(f => this.Enabled = false);
            cell_zoom();
            
                    dg1.ReadOnly = false;

                    groupBox_m3u.Invoke(new MethodInvoker(delegate
                    {
                        foreach (Control ct in groupBox_m3u.Controls)
                        {
                            ct.Enabled = true;
                        }
                    }));

                    chk_m3u_params.Invoke(new MethodInvoker(delegate
                    {
                        if (chk_m3u_params.CheckState == CheckState.Checked)
                        {
                            txt_m3u_params.Enabled = true;
                        }
                        else
                        {
                            txt_m3u_params.Enabled = false;
                        }
                    }));

                    chk_output_server.Invoke(new MethodInvoker(delegate
                    {
                        if (chk_output_server.CheckState == CheckState.Checked)
                        {
                            txt_output_server.Enabled = true;
                        }
                        else
                        {
                            txt_output_server.Enabled = false;
                        }
                    }));

                    foreach (DataGridViewRow row in dg1.Rows)
                    {
                dg1.Invoke(new MethodInvoker(delegate
                {
                    row.ReadOnly = false;

                    row.Cells[4].Value = row.Cells[4].Value.ToString().Replace("/", "");
                    row.Cells[4].Value = row.Cells[4].Value.ToString().Replace(":", "");
                    row.Cells[4].Value = row.Cells[4].Value.ToString().Replace("*", "");
                    row.Cells[4].Value = row.Cells[4].Value.ToString().Replace("?", "");
                    row.Cells[4].Value = row.Cells[4].Value.ToString().Replace("¿", "");
                    row.Cells[4].Value = row.Cells[4].Value.ToString().Replace("\u0022", "");
                    row.Cells[4].Value = row.Cells[4].Value.ToString().Replace("<", "");
                    row.Cells[4].Value = row.Cells[4].Value.ToString().Replace(">", "");
                    row.Cells[4].Value = row.Cells[4].Value.ToString().Replace("|", "");
                    row.Cells[4].Value = row.Cells[4].Value.ToString().Replace("\\", "");
                }));
            }           

            foreach (Control ct in groupBox_m3u.Controls)
            {
                this.InvokeEx(f => ct.Enabled = false);
            }

            this.InvokeEx(f => f.btn_cancel_validate.Enabled = true);
                        
            procs.Clear();
            for (int ii = 0; ii < dg1.RowCount; ii++)
            {
                procs.Add("proc_urls_" + ii.ToString(), new Process());
            }

            clean_imgs();

            ParallelOptions par_op = new ParallelOptions();
            System.Threading.CancellationTokenSource cts = new System.Threading.CancellationTokenSource();
            par_op.CancellationToken = cts.Token;
            par_op.MaxDegreeOfParallelism = (int)n_downs.Value;
            
            int prog = 0;
            this.InvokeEx(f => this.Enabled = false);
            one_ok = false;
            fatal_parallel = false;
            fatal_parallel_msg = "";
            cancelados_paralelos = false;

            Form9 form_prog2 = new Form9();
            form_prog2.abort_validate = false;           
            
            this.InvokeEx(f => TaskbarProgress.SetValue(this.Handle, 1, dg1.RowCount + 1));

            new System.Threading.Thread(() =>
            {
                System.Threading.Thread.CurrentThread.IsBackground = true;
                form_prog2.StartPosition = FormStartPosition.CenterScreen;
                form_prog2.progressBar1.Style = ProgressBarStyle.Continuous;
                form_prog2.progressBar1.Maximum = dg1.RowCount + 1;
                form_prog2.progressBar1.Value = 1;                
                form_prog2.Refresh();
                form_prog2.label1.Text = "Validating youtube links, please wait...";
                form_prog2.lab_count.Text = "1/" + dg1.RowCount;                
                form_prog2.lab_count.Refresh();
                form_prog2.Refresh();
                form_prog2.ShowDialog();
                form_prog2.Refresh();

            }).Start();
            var workItems = Enumerable.Range(0, dg1.RowCount);
            int errors = 0;
            fatal_parallel = false;

            ParallelLoopResult result = new ParallelLoopResult();
            try
            {
                result = Parallel.ForEach(workItems.AsParallel().AsOrdered(), par_op, (file_int) =>
                {
                    if (form_prog2.abort_validate == true)
                    {
                        cancelados_paralelos = true;
                        cts.Cancel();
                    }

                    if (cts.IsCancellationRequested == true) form_prog2.abort_validate = true;

                    if (dg1.Rows[file_int].Cells[1].Value == null) form_prog2.abort_validate = true;

                    if (stop_validating_url == true) form_prog2.abort_validate = true;

                    if (dg1.Rows[file_int].Cells[5].Value.ToString() == "Ready" || dg1.Rows[file_int].Cells[5].Value.ToString() == "Processing" || dg1.Rows[file_int].Cells[5].Value.ToString() == "Success")
                    {
                        prog = prog + 1;
                        try
                        {
                            form_prog2.Invoke(new MethodInvoker(delegate
                                    {
                                        if (form_prog2.progressBar1.Value < form_prog2.progressBar1.Maximum)
                                        {
                                            form_prog2.progressBar1.Value = form_prog2.progressBar1.Value + 1;
                                            this.InvokeEx(f => TaskbarProgress.SetValue(this.Handle, form_prog2.progressBar1.Value, form_prog2.progressBar1.Maximum));
                                        }
                                        form_prog2.progressBar1.Refresh();
                                        form_prog2.lab_count.Text = (prog).ToString() + "/" + dg1.Rows.Count;
                                        form_prog2.lab_count.Refresh();

                                    }));
                        }
                        catch { }
                        return;
                    }

                    this.InvokeEx(f => f.dg1.Rows[file_int].Cells[5].Value = "Validating URL");
                    this.InvokeEx(f => f.dg1.Refresh());
                    if (dg1.Rows[file_int].Cells[1].Value.ToString().ToLower().Contains("playlist") == true)
                    {
                        dg1.Rows[file_int].Cells[2].Value = "00:00:00";
                        dg1.Rows[file_int].Cells[3].Value = "00:00:00";
                        dg1.Rows[file_int].Cells[4].Value = "YouTube Playlist";
                        dg1.Rows[file_int].Cells[5].Value = "Pending analysis";
                        form_prog2.abort_validate = true;
                    }
                    var tmp = procs["proc_urls_" + file_int.ToString()];

                    tmp.StartInfo.FileName = System.IO.Path.Combine(Application.StartupPath, "youtube-dl.exe");
                    tmp.StartInfo.Arguments = "--get-duration --get-title --get-thumbnail " + '\u0022' + dg1.Rows[file_int].Cells[1].Value.ToString() + '\u0022';
                    tmp.StartInfo.RedirectStandardOutput = true;
                    tmp.StartInfo.UseShellExecute = false;
                    tmp.StartInfo.CreateNoWindow = true;
                    tmp.EnableRaisingEvents = true;

                    String filename = "";
                    String out_thumb = "";
                    String duracion = "";

                    PictureBox pic = new PictureBox();
                    if (cts.IsCancellationRequested == false)
                    {
                        tmp.Start();

                        while (!tmp.StandardOutput.EndOfStream)
                        {
                            if (form_prog2.abort_validate == true)
                            {
                                cts.Cancel();
                            }
                            else
                            {
                                filename = tmp.StandardOutput.ReadLine();
                                out_thumb = tmp.StandardOutput.ReadLine();
                                duracion = tmp.StandardOutput.ReadLine();
                            }
                        }
                        tmp.WaitForExit();
                    }
                    else
                    {
                        try
                        {
                            form_prog2.Invoke(new MethodInvoker(delegate
                        {
                                    form_prog2.Close();
                                }));
                        }
                        catch { }
                        release_datagrid();
                        this.InvokeEx(f => this.Enabled = true);
                        this.InvokeEx(f => TaskbarProgress.SetState(this.Handle, TaskbarProgress.TaskbarStates.NoProgress));
                        
                        return;
                    }
                    prog = prog + 1;
                    
                        form_prog2.Invoke(new MethodInvoker(delegate
                        { 
                 
                                if (form_prog2.progressBar1.Value < form_prog2.progressBar1.Maximum)
                                {
                                    form_prog2.progressBar1.Value = form_prog2.progressBar1.Value + 1;
                                    this.InvokeEx(f => TaskbarProgress.SetValue(this.Handle, form_prog2.progressBar1.Value, form_prog2.progressBar1.Maximum));
                                }                          
                                form_prog2.progressBar1.Refresh();
                                form_prog2.lab_count.Text = (prog).ToString() + "/" + dg1.Rows.Count;
                                form_prog2.lab_count.Refresh();

                            }));                    

                    if (out_thumb != null && out_thumb.Contains("http"))
                    {
                        try
                        {
                            pic.Load(out_thumb);
                            dg_thumbs[file_int] = pic.Image;                           
                        }
                        catch
                        {
                            dg_thumbs[file_int] = pic_noimg.Image;
                        }
                    }
                    else
                    {
                        dg_thumbs[file_int] = pic_noimg.Image;
                    }
                    
                    if (duracion == null || duracion == string.Empty)
                    {                        
                       dg1.Invoke(new MethodInvoker(delegate
                        {
                          dg1.Rows[file_int].DefaultCellStyle.BackColor = Color.LightGoldenrodYellow;
                          dg1.Rows[file_int].Cells[2].Value = "";
                          dg1.Rows[file_int].Cells[3].Value = "";
                          dg1.Rows[file_int].DefaultCellStyle.BackColor = dg1.DefaultCellStyle.BackColor;
                          dg1.Rows[file_int].Cells[5].Value = "Error";
                          this.InvokeEx(f => f.dg1.Rows[file_int].Cells[5].Style.BackColor = Color.LightGoldenrodYellow);
                          errors = errors + 1;
                        }));                      
                    }

                    if (duracion != null && filename != "")
                    {                       
                        dg1.Invoke(new MethodInvoker(delegate
                    {
                        if (duracion == "0")
                        {
                            dg1.Rows[file_int].Cells[2].Value = duracion;
                            dg1.Rows[file_int].Cells[3].Value = "Live";
                        }
                        else
                        {                            
                                if (duracion.Length < 6) duracion = "00:" + duracion;
                                dg1.Rows[file_int].Cells[2].Value = duracion;
                                dg1.Rows[file_int].Cells[3].Value = duracion;                           
                        }
                        dg1.Rows[file_int].Cells[4].Value = filename;
                                    dg1.Rows[file_int].DefaultCellStyle.BackColor = dg1.DefaultCellStyle.BackColor;
                                    one_ok = true;
                                    dg1.Rows[file_int].Cells[5].Value = "Ready";
                                    this.InvokeEx(f => f.dg1.Rows[file_int].Cells[5].Style.BackColor = Color.LightGreen);                                    
                                }));                        
                    }                    
                    form_prog2.Invoke(new MethodInvoker(delegate
                    {
                        if (errors > 0 && form_prog2.abort_validate == false)
                        {
                            form_prog2.lab_err.Text = "Errors: " + errors.ToString();
                            form_prog2.lab_err.Refresh();
                            form_prog2.pictureBox1.Visible = true;
                            form_prog2.pictureBox1.Refresh();                            
                        }
                    }));

                    tmp.StartInfo.Arguments = String.Empty;                     
                }); //Parallel
              } //Try Parallel
            catch (Exception exc)
            {
                fatal_parallel_msg = exc.Message;
                fatal_parallel = true;

                try
                {
                    form_prog2.Invoke(new MethodInvoker(delegate
                    { form_prog2.Close(); }));
                }
                catch { form_prog2.abort_validate = true; }
            }
            if (result.IsCompleted == true) fatal_parallel = false;
            else
            {
                if (cts.IsCancellationRequested == false) fatal_parallel = true;
                else fatal_parallel = false;
            }

            //End Parallel
            try
                {
                    form_prog2.Invoke(new MethodInvoker(delegate
                {   form_prog2.Close(); }));
                }
            catch { form_prog2.abort_validate = true; }
        }

        private void BG_Validate_URLs_YT_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            if (m3u_params_checked == false) txt_m3u_params.Enabled = false;
            if (output_server_checked == false) txt_output_server.Enabled = false;

            if (fatal_parallel == true) MessageBox.Show("An error ocurred during queue processing:" + Environment.NewLine + Environment.NewLine + fatal_parallel_msg, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            
            if (one_ok == true)
            {
                this.InvokeEx(f => f.chk_m3u_params.Left = 12);
                this.InvokeEx(f => f.chk_output_server.Enabled = false);
                this.InvokeEx(f => f.chk_m3u_params.Text = "Youtube-dl params");                
            }
            foreach (DataGridViewRow row in dg1.Rows)
            {
                row.Cells[0].Value = dg_thumbs[row.Index];
                if (row.Cells[3].Value == null) continue;
                if (row.Cells[3].Value.ToString() != "" && row.Cells[3].Value.ToString() != "-" && row.Cells[3].Value.ToString() != "N/A" && row.Cells[3].Value.ToString() != "\u221E" && row.Cells[3].Value.ToString() != "Live" && row.Cells[3].Value.ToString() != "Error")
                {
                    Total_dur_urls = Total_dur_urls + TimeSpan.Parse(row.Cells[3].Value.ToString()).TotalSeconds;
                }
            }

            TimeSpan t = TimeSpan.FromSeconds(Total_dur_urls);
            String dur = string.Format("{0:D2}h:{1:D2}m:{2:D2}s:{3:D3}ms",
                 (int)t.TotalHours,
                 t.Minutes,
                 t.Seconds,
                 t.Milliseconds);

            this.InvokeEx(f => f.lbl_urls_time.Visible = true);
            this.InvokeEx(f => f.lbl_urls_time.Text = dur.Substring(0, 11));
            if (dur.Substring(0, 11) == "00h:00m:00s")
            { this.InvokeEx(f => f.lbl_urls_time.Text = ""); }
            cell_stretch();
            urls_duration();
            this.InvokeEx(f => TaskbarProgress.SetState(this.Handle, TaskbarProgress.TaskbarStates.NoProgress));
        }        

        private void button1_Click_2(object sender, EventArgs e)
        {
            if (dg1.Rows.Count == 0) return;
            check_internet();
            if (internet_up == false) return;

            stop_validating_url = false;            

            Boolean all_playlists = false;
            foreach (DataGridViewRow row in dg1.Rows)
            {
                if (row.Cells[1].Value.ToString().ToLower().Contains("playlist"))
                {
                    all_playlists = true;
                }
                else
                {
                    all_playlists = false;
                    MessageBox.Show("Some links on the list are not YouTube playlist. Use validate URLs instead.", "Playlists not found", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }
            }

            foreach (DataGridViewRow row in dg1.Rows)
            {
                row.ReadOnly = true;
            }

            foreach (Control ct in groupBox_m3u.Controls)
            {
                ct.Enabled = false;
            }

            btn_cancel_validate.Enabled = true;
            if (dg1.Rows.Count == 0) return;
            stop_validating_url = false;
            

            foreach (DataGridViewRow row in dg1.Rows)
            {
                row.ReadOnly = true;
            }

            foreach (Control ct in groupBox_m3u.Controls)
            {
                ct.Enabled = false;
            }

            btn_cancel_validate.Enabled = true;
            BG_Validate_added_row_YT_PL_S.RunWorkerAsync();
        }

        private void BG_Validate_PLSS_DoWork(object sender, DoWorkEventArgs e)
        {

        }

        private void BG_Validate_PLSS_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            if (dg1.Rows[0].Cells[1].Value.ToString().ToLower().Contains("playlist"))
            {
                //this.InvokeEx(f => f.btn_pl_videos.PerformClick());
                BG_Validate_added_row_YT_PL_S.RunWorkerAsync();
            }
        }

        private void urls_duration()
        {            
            //foreach (DataGridViewRow row in dg1.Rows)
            //{
            //    if (row.Cells[3].Value == null) continue;
            //    if (row.Cells[3].Value.ToString() != "" && row.Cells[3].Value.ToString() != "-" && row.Cells[3].Value.ToString() != "N/A" && row.Cells[3].Value.ToString() != "\u221E")
            //    {
            //        Total_dur_urls = Total_dur_urls + TimeSpan.Parse(row.Cells[3].Value.ToString()).TotalSeconds;
            //    }
            //}
            TimeSpan t = TimeSpan.FromSeconds(Total_dur_urls);
            String dur = string.Format("{0:D2}h:{1:D2}m:{2:D2}s:{3:D3}ms",
                     (int)t.TotalHours,
                     t.Minutes,
                     t.Seconds,
                     t.Milliseconds);

            this.InvokeEx(f => f.lbl_urls_time.Visible = true);
            this.InvokeEx(f => f.lbl_urls_time.Text = dur.Substring(0, 11));
            if (dur.Substring(0, 11) == "00h:00m:00s")
            { this.InvokeEx(f => f.lbl_urls_time.Text = ""); }
        }

        private void dg1_RowsRemoved(object sender, DataGridViewRowsRemovedEventArgs e)
        {
            if (dg1.RowCount > 0) lbl_n_urls.Text = dg1.RowCount.ToString() + " url(s)";
            else lbl_n_urls.Text = "";
            Total_dur_urls = 0;
            foreach (DataGridViewRow row in dg1.Rows)
            {
                if (row.Cells[3].Value == null) continue;
                if (row.Cells[3].Value.ToString() != "" && row.Cells[3].Value.ToString() != "-" && row.Cells[3].Value.ToString() != "N/A" && row.Cells[3].Value.ToString() != "\u221E")
                {
                    Total_dur_urls = Total_dur_urls + TimeSpan.Parse(row.Cells[3].Value.ToString()).TotalSeconds;
                }
            }
            urls_duration();
            //dg_thumbs[e.RowIndex] = pic_noimg.Image;
        }

        private Boolean max_urls()
        {
            if (dg1.RowCount > 1000)
            {
                MessageBox.Show("The download list supports up to 1000 links.", "Maximum list lenght reached", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                dg1.Rows.Clear();
                clean_imgs();
                return true;
            }
            else return false;
        }

        private void dg1_RowsAdded(object sender, DataGridViewRowsAddedEventArgs e)
        {            
            dg1.Rows[e.RowIndex].Height = 45;
            //lbl_n_urls.Text = dg1.RowCount.ToString() + " url(s)";
            //urls_duration();
        }

        private void btn_save_path_url_Click(object sender, EventArgs e)
        {
            String path_s = "";
            if (is_portable == false)
            {
                path_s = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_path_url.ini";
            }
            else
            {
                path_s = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_path_url_portable.ini";
            }

            String path_to_save = String.Empty;
            path_to_save = txt_path_m3u.Text;
            File.WriteAllText(path_s, path_to_save);
            btn_save_path_url.Enabled = false;
        }

        private void btn_save_downs_Click(object sender, EventArgs e)
        {
            //Save selected theads

            String path = String.Empty;
            if (is_portable == false)
            {
                path = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_downs.ini";
            }
            else
            {
                path = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_downs_portable.ini";
            }

            String txt_threads = txt_threads = n_downs.Value.ToString();
            File.WriteAllText(path, txt_threads);
            btn_save_downs.Enabled = false;
            //End save selected threads
        }

        private void n_downs_ValueChanged(object sender, EventArgs e)
        {
            //Save selected theads

            String path = String.Empty;
            if (is_portable == false)
            {
                path = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_downs.ini";
            }
            else
            {
                path = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_downs_portable.ini";
            }

            if (File.Exists(path))
            {
                String saved_th2 = File.ReadAllText(path);
                if (n_downs.Value.ToString() != saved_th2) btn_save_downs.Enabled = true;
                else btn_save_downs.Enabled = false;
            }
            else btn_save_downs.Enabled = true;
        }        

        private void pic_yout_DoubleClick(object sender, EventArgs e)
        {
            Form10 frm = new Form10();
            frm.pic_y.Image = dg_thumbs[dg1.SelectedCells[0].RowIndex];
            frm.ShowDialog();            
        }

        private void chk_cache_yt_CheckedChanged(object sender, EventArgs e)
        {
            if (chk_cache_yt.Checked == true) Clear_cache = "--rm-cache-dir";
            else Clear_cache = "";
        }

        private void chk_down_limit_CheckedChanged(object sender, EventArgs e)
        {
            if (chk_down_limit.Checked == true) n_down_speed.Enabled = true;
            else n_down_speed.Enabled = false;
        }

        private void chk_save_subtitles_CheckedChanged(object sender, EventArgs e)
        {
            if (chk_save_subtitles.Checked == true) chk_convert_srt.Enabled = true;
            else chk_convert_srt.Enabled = false;
        }        

        private void dg1_CellMouseDoubleClick_1(object sender, DataGridViewCellMouseEventArgs e)
        {
            try
            {
                if (dg1.Rows.Count > 0 && dg1.Rows[e.RowIndex].Cells[0].Selected == true && dg1.Rows[e.RowIndex].Cells[5].Value.ToString() != String.Empty && dg1.Rows.Count > 0)
                {                    
                    if (dg_thumbs[dg1.SelectedCells[0].RowIndex] != null && dg_thumbs[dg1.SelectedCells[0].RowIndex].Width > 160)
                    {
                        Form10 frm = new Form10();
                        frm.pic_y.Image = dg_thumbs[dg1.SelectedCells[0].RowIndex];
                        frm.ShowDialog();
                    }
                }
            }
            catch { }
        }

        private void dg1_CellMouseDown(object sender, DataGridViewCellMouseEventArgs e)
        {            
            try
            {
                if (e.Button == MouseButtons.Right || dg1.RowCount > 0)
                {
                    // Add this
                    dg1.CurrentCell = dg1.Rows[e.RowIndex].Cells[e.ColumnIndex];
                    // Can leave these here - doesn't hurt
                    dg1.Rows[e.RowIndex].Selected = true;
                    dg1.Focus();
                }
            }
            catch { }
        }

        private void ct_remove_url_Click(object sender, EventArgs e)
        {
            foreach (DataGridViewCell cell in dg1.SelectedCells)
            {
                try
                {
                        foreach (DataGridViewCell cell2 in dg1.Rows[cell.RowIndex].Cells)
                        {
                            cell2.Selected = false;
                        }

                        dg1.Rows.RemoveAt(cell.RowIndex);
                    
                }
                catch
                {
                
                }
            }
        }

        private void btn_update_yt_Click(object sender, EventArgs e)
        {
            lbl_yl_name.Text = "Downloading";
            String current = lbl_yt_v.Text;
            pg_update_yl.Style = ProgressBarStyle.Continuous;
            pg_update_yl.Maximum = 100;
            pg_update_yl.Value = 0;

            if (btn_update_yt.Text == "Cancel")
            {
                wc_dl.CancelAsync();                
                btn_update_yt.Text = "Update";
                lbl_yl_name.Text = "youtube-dl new";
                txt_up_output.Text = "";
                txt_up_output.Visible = false;
                pg_update_yl.Visible = false;
                foreach (Control ct in groupBox_m3u.Controls) ct.Enabled = true;
                return;
            }

            Boolean writable = false;
            try
            {
                FileStream fs = File.Create(Path.Combine(Application.StartupPath, Path.GetRandomFileName()), 1, FileOptions.DeleteOnClose);
                writable = true;
            }
            catch
            {
                writable = false;
            }
            foreach (Control ct in groupBox_m3u.Controls) ct.Enabled = false;
            lbl_yl_name.Enabled = true; lbl_yt_v.Enabled = true; pg_update_yl.Enabled = true;
            btn_update_yt.Enabled = true; txt_up_output.Enabled = true; pic_ok.Enabled = true;

            wc_dl.DownloadProgressChanged += new DownloadProgressChangedEventHandler(wc_dl_DownloadProgressChanged);
            wc_dl.DownloadFileCompleted += new AsyncCompletedEventHandler(wc_dl_DownloadFileCompleted);
                       
                btn_update_yt.Text = "Cancel";
                pg_update_yl.Visible = true;
                txt_up_output.Visible = true;
                            
                vc_download = "youtube-dl.exe";
                wc_dl.DownloadFileAsync(new System.Uri(yl_latest), Path.Combine(Path.GetTempPath(), vc_download));            

        }

        private void timer_update_Tick(object sender, EventArgs e)
        {
            if (pg_update_yl.Value >= pg_update_yl.Maximum) pg_update_yl.Value = pg_update_yl.Maximum;
            else pg_update_yl.Value = pg_update_yl.Value + 1;
            pg_update_yl.Refresh();
        }

        private void btn_logs_url_Click(object sender, EventArgs e)
        {
            btn_display_log.PerformClick();
        }

        private void BG_pre_validate_url_txt_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {            
            post_file_url();
            this.InvokeEx(f => TaskbarProgress.SetState(this.Handle, TaskbarProgress.TaskbarStates.NoProgress));
            urls_duration();
            lbl_n_urls.Text = dg1.RowCount.ToString() + " url(s)";           
        }

        private void ct1_paste_youtube_Click(object sender, EventArgs e)
        {
            tabControl1.SelectedTab = tabControl1.TabPages[3];
            this.Refresh();
            ct_paste_youtube.PerformClick();
        }

        private void ct1_paste_m3u_Click(object sender, EventArgs e)
        {
            tabControl1.SelectedTab = tabControl1.TabPages[3];
            this.Refresh();
            ct_paste_m3u.PerformClick();
        }

        private void BG_Multi_M_DoWork(object sender, DoWorkEventArgs e)
        {
            String hw_decode = String.Empty;

            cb_hwdecode.Invoke(new MethodInvoker(delegate
            {
                if (cb_hwdecode.SelectedItem.ToString() != "none")
                {
                    hw_decode = "-hwaccel " + cb_hwdecode.SelectedItem.ToString();
                }
            }));

            procs.Clear();
            multi_logs.Clear();

            List<string> destis = new List<string>();
            List<string> list_lines = new List<string>();
            list_successful_m.Clear();
            list_failed_m.Clear();


            for (int ii = 0; ii < list_global_proc.Items.Count; ii++)
            {
                procs.Add("proc_urls_" + ii.ToString(), new Process());
                destis.Add("destis_" + ii.ToString());
                multi_logs.Add("log_n_" + ii.ToString(), "");
            }

            ParallelOptions par_op = new ParallelOptions();
            CancellationTokenSource cts = new System.Threading.CancellationTokenSource();
            par_op.CancellationToken = cts.Token;
            par_op.MaxDegreeOfParallelism = Convert.ToInt16(n_threads.Value);

            opened_m = false;
            aborted = false;

            var items_lv = Enumerable.Range(0, listView1.Items.Count);
            Disable_Controls();
            ParallelLoopResult result = new ParallelLoopResult();
            
            try
            {
                result = Parallel.ForEach(items_lv.AsParallel().AsOrdered(), par_op, (file_int) =>
                {
                #pragma warning disable CA2008 // No crear tareas sin pasar un TaskScheduler
                    Task
                        .Factory
                        .StartNew(() =>
                        {
                            if (cancelados_paralelos == true || aborted == true)
                            {
                                cts.Cancel();
                                timer1.Stop();
                                timer_tasks.Stop();
                                working = false;
                                multi_running = false;
                                return;
                            }

                            String item_capture_time = String.Empty;
                            Double total_prog = 0;
                            Double row_duration = 0;
                            Boolean valid_prog2 = false;
                            TimeSpan time2;

                            if (TimeSpan.TryParse(list_global_proc.Items[Convert.ToInt32(file_int)].SubItems[3].Text, out time2))
                            {
                                row_duration = TimeSpan.Parse(list_global_proc.Items[Convert.ToInt32(file_int)].SubItems[3].Text).TotalSeconds;
                                valid_prog2 = true;
                            }
                            else
                            {
                                row_duration = 0;
                                valid_prog2 = false;
                            }

                            String ffm = System.IO.Path.Combine(Application.StartupPath, "ffmpeg.exe");
                            String fullPath = list_global_proc.Items[Convert.ToInt32(file_int)].SubItems[1].Text + "\\" + list_global_proc.Items[Convert.ToInt32(file_int)].Text;


                            //Begin Shifting
                            String shifting = "";
                            if (chk_shift.Checked == true)
                            {                               
                                    shifting = " -itsoffset " + Num_Shift.Value.ToString().Replace(",", ".") + " -i " + '\u0022' + fullPath + '\u0022' + " -map 1:v -map 0:a ";                            
                            }

                            //End Shifting

                            //Change Volume
                            String change_vol = "";
                            if (chk_vol.Checked == true)
                            {
                                change_vol = "-filter:a " + '\u0022' + "volume=" + vol_ch.Value.ToString() + "dB " + '\u0022' + " ";
                            }
                            //End change volume


                            if (txt_path_main.Text.Contains(".\\"))
                            {
                                if (txt_path_main.Text != ".\\")
                                {
                                    destis[file_int] = fullPath.Substring(0, fullPath.LastIndexOf('\\')) + txt_path_main.Text.Replace(".", String.Empty);
                                }
                                else
                                {
                                    destis[file_int] = Path.GetDirectoryName(fullPath);
                                }
                            }
                            else
                            {
                                if (checkBox1.CheckState == CheckState.Checked)
                                {
                                    String pre_dest = Path.GetDirectoryName(fullPath);
                                    destis[file_int] = Path.Combine(txt_path_main.Text, pre_dest.Substring(3, pre_dest.Length - 3));
                                }
                                else
                                {
                                    destis[file_int] = txt_path_main.Text;
                                }
                            }
                            if (!Directory.Exists(destis[file_int]))
                            {
                                Directory.CreateDirectory(destis[file_int]);
                            }
                            multi_dest = destis[file_int];

                            String pre_input_var = "";
                            if (txt_pre_input.Text != "")
                            {
                                pre_input_var = txt_pre_input.Text;
                            }

                            String pre_ss = "";
                            if (TimeSpan.Parse(ss_time_input.Text).TotalSeconds != 0)
                            {
                                pre_ss = " -ss " + ss_time_input.Text;
                            }

                            add_suffix = "";
                            if (chk_suffix.Checked == true && txt_suffix.Text != String.Empty)
                            {
                                add_suffix = txt_suffix.Text;
                                n_th_suffix = add_suffix;
                            }

                            String ext_output1 = txt_format.Text;
                            if (txt_format.Text.Length == 0)
                            {
                                ext_output1 = Path.GetExtension(fullPath);
                            }
                            else
                            {
                                ext_output1 = "." + txt_format.Text;
                            }
                            n_th_source_ext = ext_output1;

                            textbox_params = txt_parameters.Text;

                            if (txt_format.Text == "nul") ext_output1 = "nul";

                            String file2 = fullPath;
                            while (textbox_params.Contains("%fn"))
                            {
                                if (textbox_params.Contains("%fn"))
                                {
                                    textbox_params = textbox_params.Replace("%fn", Path.GetFileNameWithoutExtension(file2));
                                }
                            }
                            while (textbox_params.Contains("%fp"))
                            {
                                if (textbox_params.Contains("%fp"))
                                {
                                    textbox_params = textbox_params.Replace("%fp", Path.GetDirectoryName(file2));
                                }
                            }

                            while (textbox_params.Contains("%fd"))
                            {
                                if (textbox_params.Contains("%fd"))
                                {
                                    var path = Path.GetFullPath(file2);
                                    var dirName = Path.GetFileName(Path.GetDirectoryName(path));
                                    textbox_params = textbox_params.Replace("%fd", dirName);
                                }
                            }

                            while (textbox_params.Contains("%1"))
                            {
                                if (textbox_params.Contains("%1"))
                                {
                                    file2 = file2.Replace("\\", "\\\\\\\\");
                                    file2 = file2.Replace(":", "\\\\" + ":");
                                    textbox_params = textbox_params.Replace("%1", file2);
                                }
                            }

                            while (textbox_params.Contains("%2"))
                            {
                                if (textbox_params.Contains("%2"))
                                {
                                    file2 = file2.Replace("\\", "\\\\\\\\");
                                    file2 = file2.Replace(":", "\\\\" + ":");
                                    textbox_params = textbox_params.Replace("%2", Path.Combine(System.IO.Path.GetDirectoryName(file2), Path.GetFileNameWithoutExtension(file2)));
                                }
                            }

                            var tmp = procs["proc_urls_" + file_int.ToString()];
                            var n_logs = multi_logs["log_n_" + file_int.ToString()];
                            tmp.StartInfo.Arguments = tmp.StartInfo.Arguments = hw_decode + " " + pre_input_var + " " + pre_ss + " -i " + "" + '\u0022' + fullPath + '\u0022' + " " + shifting + " " + " -y " + textbox_params + " " + change_vol + '\u0022' + destis[file_int] + "\\" + System.IO.Path.GetFileNameWithoutExtension(fullPath) + add_suffix + ext_output1 + '\u0022' + " -hide_banner";
                            if (ext_output1 == "nul") tmp.StartInfo.Arguments = hw_decode + " " + pre_input_var + " " + pre_ss + " -i " + "" + '\u0022' + fullPath + '\u0022' + " " + shifting + " " + textbox_params + " " + change_vol + " " + " -hide_banner";

                            String second_path = "";
                            if (ext_output1 == "nul")
                            {
                                String[] split = txt_parameters.Text.Split(' ');
                                for (int i = 0; i < split.Length; i++)
                                {
                                    if (split[i].Contains("\\") == true)
                                    {
                                        String pre_path = split[i].Replace("%fp", Path.GetDirectoryName(file2)).Replace("%fn", Path.GetFileNameWithoutExtension(file2)).Replace("%", "_");
                                        second_path = Path.GetDirectoryName(pre_path.Replace('\u0022', ' '));

                                        if (!Directory.Exists(second_path))
                                        {
                                            try
                                            {
                                                Directory.CreateDirectory(second_path);
                                            }
                                            catch
                                            {

                                            }
                                        }
                                    }
                                }
                            }


                            String current_out = destis[file_int] + "\\" + System.IO.Path.GetFileNameWithoutExtension(fullPath) + add_suffix + ext_output1;
                            Boolean to_overw = false;

                            if (chk_overw.CheckState == CheckState.Checked)
                            {
                                if (current_out == fullPath)
                                {
                                    tmp.StartInfo.Arguments = hw_decode + " " + pre_input_var + " " + pre_ss + " -i " + "" + '\u0022' + fullPath + '\u0022' + " " + shifting + " " + " -y " + textbox_params + " " + change_vol + '\u0022' + destis[file_int] + "\\" + System.IO.Path.GetFileNameWithoutExtension(fullPath) + "_fftemp" + add_suffix + ext_output1 + '\u0022' + " -hide_banner";
                                    to_overw = true;
                                }
                            }

                            if (current_out == fullPath && chk_overw.CheckState == CheckState.Unchecked)
                            {
                                MessageBox.Show("Source and destination files are the same, but overwriting is not enabled." + Environment.NewLine + Environment.NewLine + current_out, "Overwriting not enabled", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                this.InvokeEx(f => TaskbarProgress.SetState(this.Handle, TaskbarProgress.TaskbarStates.NoProgress));
                                working = false;
                                time_est_size = 0;
                                cts.Cancel();
                                Enable_Controls();
                                cancelados_paralelos = true;                                                                
                            }
                            
                            if (verbose_logs == false) tmp.StartInfo.Arguments = tmp.StartInfo.Arguments + " -loglevel warning -stats";
                            if (cts.IsCancellationRequested == false)
                            {
                                tmp.StartInfo.FileName = ffm;
                                tmp.StartInfo.RedirectStandardInput = true;
                                tmp.StartInfo.RedirectStandardOutput = true;
                                tmp.StartInfo.RedirectStandardError = true;
                                tmp.StartInfo.UseShellExecute = false;
                                tmp.StartInfo.CreateNoWindow = true;
                                tmp.EnableRaisingEvents = true;
                                tmp.Start();                                
                                this.InvokeEx(f => f.listView1.Items[Convert.ToInt32(file_int)].SubItems[5].Text = "Processing");

                                combo_prio.Invoke(new MethodInvoker(delegate
                                    {
                                        if (combo_prio.SelectedIndex != 2)
                                        {
                                            Change_mem_prio();
                                        }
                                    }));
                            }
                            else
                            {
                                timer1.Stop();
                                this.InvokeEx(f => f.listView1.Enabled = true);
                                working = false;
                                multi_running = false;
                                Enable_Controls();
                                cancelados_paralelos = false;
                                return;
                            }

                            this.InvokeEx(f => f.listView1.Items[Convert.ToInt32(file_int)].SubItems[5].Text = "Processing");
                           
                            String err_txt = "";
                            Double interval = 0;
                            Double durat_n2 = 0;
                            this.InvokeEx(f => multi_logs["log_n_" + file_int.ToString()] = "Logging for: " + listView1.Items[Convert.ToInt32(file_int)].Text + Environment.NewLine);
                            //REVIEW
                            while (!tmp.StandardError.EndOfStream)
                            {
                                err_txt = tmp.StandardError.ReadLine();
                                multi_logs["log_n_" + file_int.ToString()] = multi_logs["log_n_" + file_int.ToString()] + Environment.NewLine + n_logs + err_txt;

                                if (err_txt.Contains("time=") && err_txt.Contains("time=-") == false)
                                {
                                    if (valid_prog2 == true)
                                    {
                                        this.InvokeEx(f => f.txt_remain.Refresh());
                                        this.InvokeEx(f => durat_n2 = row_duration);
                                        int start_time_index = err_txt.IndexOf("time=") + 5;
                                        Double sec_prog = TimeSpan.Parse(err_txt.Substring(start_time_index, 8)).TotalSeconds;
                                        Double percent = (sec_prog * 100 / durat_n2);

                                        total_prog = total_prog + (sec_prog - interval);
                                        interval = sec_prog;
                                        int percent2 = 0;
                                        try
                                        {
                                            percent2 = Convert.ToInt32(percent);
                                        }
                                        catch
                                        {

                                        }

                                        if (percent2 <= 100)
                                        {
                                            if (Math.Round(percent, 1).ToString().Contains(".") || Math.Round(percent, 1).ToString().Contains(","))
                                            {                                               
                                                this.InvokeEx(f => f.listView1.Items[Convert.ToInt32(file_int)].SubItems[5].Text = Math.Round(percent, 1).ToString() + "%");
                                            }
                                            else
                                            {                                             
                                                this.InvokeEx(f => f.listView1.Items[Convert.ToInt32(file_int)].SubItems[5].Text = Math.Round(percent, 1).ToString() + ".0" + "%");
                                            }
                                        }
                                    }
                                }
                            }
                            tmp.WaitForExit();
                            tmp.StartInfo.Arguments = String.Empty;
                            this.InvokeEx(f => multi_logs["log_n_" + file_int.ToString()] = multi_logs["log_n_" + file_int.ToString()] + Environment.NewLine + "--------End of " + listView1.Items[Convert.ToInt32(file_int)].Text + " log--------" + Environment.NewLine);
                            //this.InvokeEx(f => pg_lv.Visible = false);
                            //this.InvokeEx(f => pg_lv.Dispose());

                            if (tmp.ExitCode == 0)
                            {
                                list_successful_m.Add(fullPath);
                                if (cancelados_paralelos == false && cts.IsCancellationRequested == false)
                                {
                                    if (aborted_url == false && File.Exists(fullPath) == true)
                                    {
                                        this.InvokeEx(f => f.listView1.Items[Convert.ToInt32(file_int)].SubItems[5].Text = "Success");
                                        
                                        if (chk_overw.CheckState == CheckState.Checked)
                                        {
                                            if (current_out == fullPath)
                                            {
                                                try
                                                {
                                                
                                                    File.Delete(fullPath);
                                                    //Thread.Sleep(100);
                                                    FileSystem.RenameFile(multi_dest + "\\" + System.IO.Path.GetFileNameWithoutExtension(fullPath) + "_fftemp" + add_suffix + ext_output1, Path.GetFileNameWithoutExtension(fullPath) + add_suffix + ext_output1);
                                                    this.InvokeEx(f => f.listView1.Items[Convert.ToInt32(file_int)].SubItems[5].Text = "Replaced");

                                                }
                                                catch
                                                {
                                                    this.InvokeEx(f => f.listView1.Items[Convert.ToInt32(file_int)].SubItems[5].Text = "Not replaced");
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        this.InvokeEx(f => f.listView1.Items[Convert.ToInt32(file_int)].SubItems[5].Text = "Aborted");
                                        
                                        aborted_url = false;
                                    }
                                }
                                else
                                {

                                    this.InvokeEx(f => f.listView1.Items[Convert.ToInt32(file_int)].SubItems[5].Text = "Aborted");
                                   
                                    if (cancelados_paralelos == false)
                                    {
                                        aborted_url = false;
                                    }
                                }
                            }
                            else
                            {
                                list_failed_m.Add(fullPath);
                                this.InvokeEx(f => f.listView1.Items[Convert.ToInt32(file_int)].SubItems[5].Text = "Failed");
                                errors_enc = errors_enc + 1;
                            }

                        }).Wait();

                    file_int++;
                });
            }
            catch (Exception exc)
            {
                fatal_parallel_msg = exc.Message;
                fatal_parallel = true;
            }

            if (result.IsCompleted == true) fatal_parallel = false;
            else
            {
                if (cts.IsCancellationRequested == false) fatal_parallel = true;
                else fatal_parallel = false;
            }

            if (no_save_logs == false)
            {
                String[] array_err = list_lines.ToArray();

                String path = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_batch.log";
                try
                {
                    System.IO.StreamWriter SaveFile = new System.IO.StreamWriter(path);
                    SaveFile.WriteLine("Multi-file log sesion: " + System.DateTime.Now);
                    SaveFile.WriteLine("-----------------------------------------------------");
                    SaveFile.Write(string.Join(Environment.NewLine, multi_logs.Select(a => $"{a.Value}")));
                    SaveFile.Close();

                    File.AppendAllText(path, "--------------------------");
                    File.AppendAllText(path, Environment.NewLine + "END OF LOG FILE");
                    File.AppendAllText(path, Environment.NewLine);
                    System.IO.FileInfo fileInfo = new System.IO.FileInfo(path);

                    var bytes = fileInfo.Length;

                    var kilobytes = (double)bytes / 1024;
                    var megabytes = kilobytes / 1024;
                    var gigabytes = megabytes / 1024;

                    //Format size view
                    String size = "";
                    String separator = ".";

                    if (bytes > 1000000000)
                    {
                        if (gigabytes.ToString().Contains("."))
                        {
                            separator = ".";
                        }
                        else
                        {
                            separator = ",";
                        }

                        String gigas = gigabytes.ToString();
                        if (gigas.Length >= 5)
                        {
                            gigas = gigas.Substring(0, gigas.LastIndexOf(separator) + 3);
                            size = (gigas + " GB");
                        }
                        else
                        {
                            size = (gigas + " GB");
                        }
                    }

                    if (bytes >= 1048576 && bytes <= 1000000000)
                    {
                        if (megabytes.ToString().Contains("."))
                        {
                            separator = ".";
                        }
                        else
                        {
                            separator = ",";
                        }
                        String megas = megabytes.ToString();
                        if (megas.Length > 5)
                        {
                            megas = megas.Substring(0, megas.LastIndexOf(separator));
                            size = (megas + " MB");
                        }
                        else
                        {
                            size = (megas + " MB");
                        }
                    }

                    if (bytes >= 1024 && bytes < 1048576)

                    {
                        if (kilobytes.ToString().Contains("."))
                        {
                            separator = ".";
                        }
                        else
                        {
                            separator = ",";
                        }

                        String kbs = kilobytes.ToString();
                        if (kbs.Length >= 5)
                        {
                            kbs = kbs.Substring(0, kbs.LastIndexOf(separator));
                            size = (kbs + " KB");
                        }
                        else
                        {
                            size = (kbs + " KB");
                        }
                    }
                    if (bytes > -1 && bytes < 1024)
                    {
                        String bits = bytes.ToString();
                        size = (bits + " Bytes");
                    }

                    //End Format size view
                    File.AppendAllText(path, Environment.NewLine + "LOG SIZE: " + size);
                }
                catch { }

                //End save log
            }
        }

            private void BG_Multi_M_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            timer_aborting.Stop();
            // Close abort form
            for (int i = Application.OpenForms.Count - 1; i >= 0; i--)
            {
                if (Application.OpenForms[i].Name == "Form12")
                {
                    this.InvokeEx(f => Application.OpenForms[i].Close());
                    break;
                }
            }
            //End close abort form
            listView1.SelectedItems.Clear();
            TaskbarProgress.SetState(this.Handle, TaskbarProgress.TaskbarStates.NoProgress);
                timer1.Stop();
                timer_tasks.Stop();
                Pg1.Value = Pg1.Maximum;
                Pg1.Text = "100%";
                Pg1.Refresh();
                listView1.Enabled = true;
                working = false;
                multi_running = false;
                Enable_Controls();
                
                clean_ffb_test();

                if (cancelados_paralelos == false && fatal_parallel == false)
                {
                    //Open on completion
                    String primero_lista = list_global_proc.Items[0].SubItems[1].Text + "\\" + list_global_proc.Items[0].Text;
                    String destino2 = String.Empty;
                    if (checkBox3.Checked == true)
                    {
                        if (txt_path_main.Text.Contains(".\\"))
                        {
                            destino2 = destino2 = primero_lista.Substring(0, primero_lista.LastIndexOf('\\')) + txt_path_main.Text.Replace(".", String.Empty); ;
                        }
                        else
                        {
                            destino2 = txt_path_main.Text;
                        }
                    }

                if (chk_delete_source.CheckState == CheckState.Checked)
                {
                    Disable_Controls();

                    Label prog_txt = new Label();
                    prog_txt.Parent = panel1;
                    prog_txt.Top = 95;
                    prog_txt.Left = 80;
                    prog_txt.Width = 250;
                    prog_txt.TabIndex = 1;
                    prog_txt.BackColor = panel1.BackColor;
                    prog_txt.BorderStyle = BorderStyle.None;
                    prog_txt.TextAlign = ContentAlignment.MiddleLeft;
                    prog_txt.BringToFront();
                    prog_txt.Text = "Sending processed files to recycle bin...";

                    ProgressBar pg_del = new ProgressBar();
                    pg_del.Parent = panel1;
                    pg_del.Top = 98;
                    pg_del.Left = 315;
                    pg_del.Width = 152;
                    pg_del.Height = 15;
                    pg_del.TabIndex = 0;
                    pg_del.BackColor = this.BackColor;
                    pg_del.Minimum = 0;
                    pg_del.BringToFront();
                    pg_del.Maximum = list_global_proc.Items.Count;
                    pg_del.Show();
                    pg_del.Refresh();
                    int i = 0;
                    int err = 0;

                    listView1.Invoke(new MethodInvoker(delegate
                    {
                        foreach (String item in list_successful_m)
                        {
                            try
                            {
                                FileSystem.DeleteFile(item, UIOption.OnlyErrorDialogs, RecycleOption.SendToRecycleBin);
                                pg_del.Value = i;
                                i = i + 1;
                            }
                            catch
                            {
                                err = err + 1;
                            }
                            prog_txt.Text = "Sending source files to recycle bin... " + i.ToString() + " of " + list_global_proc.Items.Count;
                            prog_txt.Refresh();

                        }
                        prog_txt.Visible = false;
                        prog_txt.Dispose();
                        pg_del.Visible = false;
                        pg_del.Dispose();
                        Enable_Controls();

                        if (err > 0) MessageBox.Show(err.ToString() + " files could not be moved to the recycle bin. Check log file at the end for further details.", "Some files not recycled", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);

                        if (list_failed_m.Count > 0)
                        {
                            String path = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_batch.log";
                            File.AppendAllText(path, Environment.NewLine + Environment.NewLine + "Source files that could not be deleted due to failed encoding or file in use:");
                            File.AppendAllText(path, Environment.NewLine + "-------------------------------");
                            foreach (String item in list_failed_m)
                            {
                                File.AppendAllText(path, Environment.NewLine + item);
                            }
                        }
                    }));

                    //End delete source
                }

                if (errors_enc == 0)
                {
                    pic_no_errors.Visible = true;
                    //Delete source                   

                //Automatic shutdown check
                if (chkshut.Checked)
                    {                    
                        auto_shut();
                        return;
                    }
                    //End shutdown check
                   
                        Boolean all_ok = true;
                        foreach (ListViewItem item in list_global_proc.Items)
                        {
                            if (item.SubItems[5].Text != "Success")
                            {
                                all_ok = false;
                                break;
                            }
                        }
                        if (all_ok == true)
                        {
                            btn_refresh.PerformClick();
                        }
                    }

                else
                {
                    pic_no_errors.Visible = false;
                    pic_recording.Visible = false;
                    toolT002.SetToolTip(this.pic_warnings, "There were " + errors_enc.ToString() + " error(s) during last session");
                    pic_warnings.Visible = true;
                }

                if (errors_enc == 0)
                {
                    if (play_on_end == true) play_end();
                }
                else if (play_on_end == true) System.Media.SystemSounds.Asterisk.Play();

                if (this.ContainsFocus == false)
                {
                    if (errors_enc == 0)
                    {
                        notifyIcon1.BalloonTipText = "FFmpeg Batch encoding succesfully completed";
                        notifyIcon1.BalloonTipIcon = ToolTipIcon.Info;
                        notifyIcon1.BalloonTipTitle = "Encoding complete";
                        notifyIcon1.ShowBalloonTip(0);
                        
                    }
                    else
                    {
                        notifyIcon1.BalloonTipText = "FFmpeg Batch encoding completed with " + errors_enc.ToString() + " error(s).";
                        notifyIcon1.BalloonTipIcon = ToolTipIcon.Warning;
                        notifyIcon1.BalloonTipTitle = "Encoding complete";
                        notifyIcon1.ShowBalloonTip(0);                        
                    }                    
                }

                    if (checkBox3.Checked == true && opened_m == false)
                    {
                        opened_m = true;
                        try
                        {
                            if (Directory.GetFiles(destino2).Length != 0)
                            {
                                Process open_processed = new Process();
                                open_processed.StartInfo.FileName = "explorer.exe";
                                open_processed.StartInfo.Arguments = '\u0022' + multi_dest + '\u0022';
                                open_processed.Start();
                            }
                            else
                            {
                                if (Directory.Exists(destino2))
                                {
                                    System.IO.Directory.Delete(destino2);
                                }
                            }
                        }
                        catch
                        {
                        }
                    }

                    return;
                }
                else
                {
                    if (aborted == true)
                    {
                        aborted = false;
                        MessageBox.Show("Queue processing aborted by user.", "Encoding aborted.", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    }
                    cancelados_paralelos = false;                    
                }           
        }

        private void clean_ffb_test()
        {
            //Clean ffbatch_test

            String destino_test = Path.GetTempPath() + "\\" + "FFBatch_test";

            if (Directory.Exists(destino_test) && Directory.GetFiles(destino_test).Length > 0)
            {
                foreach (String file in Directory.GetFiles(destino_test))
                {
                    try
                    {
                        File.Delete(file);
                    }
                    catch
                    {
                    }
                }
            }

            if (Directory.Exists(destino_test))
            {
                if (Directory.GetFiles(destino_test).Length == 0)
                {
                    try
                    {
                        System.IO.Directory.Delete(destino_test);
                    }
                    catch { }
                }
            }

            //End clean ffbatch_test
        }

        private void BG_Validate_added_row_YT_PL_S_DoWork(object sender, DoWorkEventArgs e)
        {
            this.InvokeEx(f => this.Enabled = false);            
            foreach (DataGridViewRow row in dg1.Rows) row.Cells[5].Value = "Getting content";
            
            if (dg1.Rows[dg1.RowCount - 1].Cells[1].Value == null)
            {
                dg1.Rows[dg1.RowCount - 1].Cells[5].Value = String.Empty;
                dg1.Rows[dg1.RowCount - 1].Cells[4].Value = String.Empty;
                dg1.Rows[dg1.RowCount - 1].Cells[3].Value = String.Empty;
                dg1.Rows[dg1.RowCount - 1].Cells[2].Value = String.Empty;
                dg1.Rows[dg1.RowCount - 1].DefaultCellStyle.BackColor = dg1.DefaultCellStyle.BackColor;                
                return;
            }

            if (dg1.Rows[dg1.RowCount - 1].Cells[1].Value.ToString().Contains("http") == false)
            {
                dg1.Rows[dg1.RowCount - 1].Cells[5].Value = "Error";
                dg1.Rows[dg1.RowCount - 1].DefaultCellStyle.BackColor = Color.LightGoldenrodYellow;
                return;
            }

            dg1.Invoke(new MethodInvoker(delegate
            { 
                dg1.Refresh();
                dg1_temp.Rows.Clear();
                dg1_temp.Columns.Clear();
                dg1.AllowUserToAddRows = false;
            foreach (DataGridViewColumn col in dg1.Columns) dg1_temp.Columns.Add((DataGridViewColumn)col.Clone()); ;
            }));               
            
            int prog = 0;

            procs.Clear();
            for (int ii = 0; ii < dg1.RowCount; ii++)
            {
                procs.Add("proc_urls_" + ii.ToString(), new Process());
            }

            ParallelOptions par_op = new ParallelOptions();
            par_op.MaxDegreeOfParallelism = (int)n_downs.Value;
            System.Threading.CancellationTokenSource cts = new System.Threading.CancellationTokenSource();
            par_op.CancellationToken = cts.Token;
            
            var workItems = Enumerable.Range(0, dg1.RowCount);
            ParallelLoopResult result = new ParallelLoopResult();
            fatal_parallel = false;
            fatal_parallel_msg = "";           

            Form9 form_prog2 = new Form9();

            new System.Threading.Thread(() =>
            {
                System.Threading.Thread.CurrentThread.IsBackground = true;

                form_prog2.progressBar1.Visible = false;
                form_prog2.pictureBox2.Visible = true;
                form_prog2.label1.Text = "Obtaining playlist contents...";
                form_prog2.lab_count.Text = "";                
                form_prog2.lab_count.Refresh();
                form_prog2.Refresh();
                form_prog2.progressBar1.Refresh();
                form_prog2.ShowDialog();

            }).Start();          

                try
                {
                    result = Parallel.ForEach(workItems, par_op, (ii) =>
                        {
                            var probe = procs["proc_urls_" + ii.ToString()];
                            
                            if (form_prog2.abort_validate == true || stop_validating_url == true)
                            {
                                cts.Cancel();
                            }

                            if (cts.IsCancellationRequested == true) form_prog2.abort_validate = true;

                            if (dg1.Rows[ii].Cells[1].Value == null) form_prog2.abort_validate = true;

                            if (stop_validating_url == true) form_prog2.abort_validate = true;
                            
                            probe.StartInfo.FileName = System.IO.Path.Combine(Application.StartupPath, "youtube-dl.exe");
                            probe.StartInfo.WorkingDirectory = Application.StartupPath;
                            probe.StartInfo.Arguments = "--flat-playlist --dump-json " + dg1.Rows[ii].Cells[1].Value.ToString();
                            probe.StartInfo.RedirectStandardOutput = true;
                            probe.StartInfo.UseShellExecute = false;
                            probe.StartInfo.StandardOutputEncoding = Encoding.UTF8;
                            probe.StartInfo.CreateNoWindow = true;
                            probe.EnableRaisingEvents = true;

                            probe.Start();
                            String line = "";

                            while (!probe.StandardOutput.EndOfStream)
                            {
                                if (form_prog2.abort_validate == true || stop_validating_url == true)
                                {
                                    cts.Cancel();
                                }
                                else
                                {
                                    line = probe.StandardOutput.ReadLine();
                                    if (line != null && line != "") dg1_temp.Rows.Add(pic_noimg.Image, "https://www.youtube.com/watch?v=" + line.Substring(line.IndexOf('\u0022' + "url" + '\u0022' + ": " + '\u0022') + 8, 11), "-", "-", "", "");
                                }
                            }
                            probe.WaitForExit();
                            probe.StartInfo.Arguments = String.Empty;
                            ii++;
                        });
                }
                catch { }
                
                  form_prog2.Invoke(new MethodInvoker(delegate
                  { form_prog2.Close(); }));                 
            
                if (result.IsCompleted == true) fatal_parallel = false;
                else
                {
                    if (cts.IsCancellationRequested == false) fatal_parallel = true;
                    else fatal_parallel = false;
                }

                //End Parallel
                try
                {
                    form_prog2.Invoke(new MethodInvoker(delegate
                    { form_prog2.Close(); }));
                }
                catch { form_prog2.abort_validate = true; }         
        }

        private void BG_Validate_added_row_YT_PL_S_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {                
                playlists_int = dg1_temp.RowCount;                
                if (dg1_temp.RowCount > 1000)
                {
                    MessageBox.Show("The download list supports up to 1000 links.", "Maximum list lenght reached", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    release_datagrid();
                    return;
                }
                else
                {
                    if (stop_validating_url == false && fatal_parallel == false)
                    {
                    dg1.Rows.Clear();    
                    foreach (DataGridViewRow row2 in dg1_temp.Rows)
                        {
                            DataGridViewRow clonedRow = (DataGridViewRow)row2.Clone();
                            for (Int32 index = 0; index < row2.Cells.Count; index++)
                            {
                                clonedRow.Cells[index].Value = row2.Cells[index].Value;
                            }
                            this.InvokeEx(f => f.dg1.Rows.Add(clonedRow));
                        }
                        foreach (DataGridViewRow row3 in dg1.Rows)
                        {
                            if (row3.Cells[1].Value == null) this.InvokeEx(f => f.dg1.Rows.RemoveAt(row3.Index));
                        }
                        this.InvokeEx(f => f.dg1.Refresh());
                    }
                    this.InvokeEx(f => f.dg1.ReadOnly = false);
                    this.InvokeEx(f => this.Enabled = true);
                    this.InvokeEx(f => f.btn_validate_url.PerformClick());
                }          
        }

        private void timer_aborting_Tick(object sender, EventArgs e)
        {            
            timer_aborting.Stop();
            Form12 frm_abort = new Form12();
            try
            {
                frm_abort.ShowDialog();
                frm_abort.Refresh();
            }
            catch { }
        }

        private void BG_Multi_Down_DoWork(object sender, DoWorkEventArgs e)
        {
            Disable_Controls();
            aborted = false;
            cancelados_paralelos = false;
            m3u_running = true;
            m3u_single_running = false;
            fatal_parallel = false;
            fatal_parallel_msg = "";
            Boolean quit = false;
            List<string> list_lines = new List<string>();
            List<string> er = new List<string>();
            String msg_er = String.Empty;

            ParallelOptions par_op = new ParallelOptions();
            par_op.MaxDegreeOfParallelism = (int)n_downs.Value;
            CancellationTokenSource cts = new System.Threading.CancellationTokenSource();
            par_op.CancellationToken = cts.Token;
                        
            ParallelLoopResult result = new ParallelLoopResult();
            var workItems = Enumerable.Range(0, dg1.RowCount);
            try
            {
                result = Parallel.ForEach(workItems.AsParallel().AsOrdered(), par_op, (file_int) =>
                {  
                    Boolean skip = false;                    
                    //String all_logs = "";

                    if (dg1.Rows[file_int].IsNewRow) skip = true;
                    
                    DataGridViewRow tmp_row = dg1.Rows[file_int];
                    
                    if (cancelados_paralelos == true || aborted == true)
                    {
                        cts.Cancel();                        
                        return;
                    }
                    
                    String url_capture_time = String.Empty;

                    Double total_prog = 0;
                    Double row_duration = 0;

                    TimeSpan time2;
                    if (TimeSpan.TryParse(tmp_row.Cells[3].Value.ToString(), out time2))
                    {
                        row_duration = TimeSpan.Parse(tmp_row.Cells[3].Value.ToString()).TotalSeconds;
                        url_capture_time = " -t " + row_duration.ToString();
                    }
                    else
                    {
                        row_duration = 0;
                        url_capture_time = String.Empty;
                    }

                    String ffm = System.IO.Path.Combine(Application.StartupPath, "ffmpeg.exe");
                    String file = tmp_row.Cells[1].Value.ToString();
                    String destino = txt_path_m3u.Text;

                    String pre_input_var = "";
                    if (txt_pre_input.Text != "")
                    {
                        pre_input_var = txt_pre_input.Text;
                    }

                    String pre_ss = "";
                    if (TimeSpan.Parse(ss_time_input.Text).TotalSeconds != 0)
                    {
                        pre_ss = " -ss " + ss_time_input.Text;
                    }

                    add_suffix = "";

                    String ext_output1 = txt_format.Text;
                    if (txt_format.Text == String.Empty)
                    {
                        ext_output1 = Path.GetExtension(file);
                    }
                    else
                    {
                        ext_output1 = "." + txt_format.Text;
                    }

                    String AppParam = String.Empty;

                    if (chk_output_server.CheckState == CheckState.Checked)
                    {
                        AppParam = pre_input_var + " " + pre_ss + " -i " + file + " " + url_capture_time + " " + m3u_params_m + " -y " + output_server_m;
                    }
                    else
                    {
                        AppParam = pre_input_var + " " + pre_ss + " -i " + file + " " + url_capture_time + " " + m3u_params_m + " -y " + '\u0022' + Path.Combine(destino, tmp_row.Cells[4].Value.ToString() + "." + m3u_output_ext_m);
                    }

                    if (!Directory.Exists(destino))
                    {
                        try
                        {
                            Directory.CreateDirectory(destino);
                        }
                        catch (System.Exception excpt)
                        {
                            MessageBox.Show("Error writing output folder: " + excpt.Message, "Error writing to folder", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            this.Cursor = Cursors.Arrow;
                            return;
                        }
                    }
                    var tmp = procs["proc_urls_" + tmp_row.Index];
                    var n_logs = multi_logs["log_n_" + tmp_row.Index.ToString()];

                    if (multi_dest.ToLower().Contains("youtu.be") || multi_dest.ToLower().Contains("youtube.com"))
                    {                       
                            tmp.StartInfo.FileName = System.IO.Path.Combine(Application.StartupPath, "youtube-dl.exe");
                            if (m3u_params_m.Contains("-f ")) tmp.StartInfo.Arguments = Clear_cache + " " + m3u_params_m + " " + down_speed_m + " " + embed_subs_m + " " + embed_meta_m + " " + write_subs_m + " " + convert_subs_m + " -o " + '\u0022' + destino + "\\" + tmp_row.Cells[4].Value.ToString() + "." + format_out_m + '\u0022' + " " + file;
                            else tmp.StartInfo.Arguments = Clear_cache + " -f " + format_out_m + " " + m3u_params_m + " " + down_speed_m + " " + embed_subs_m + " " + embed_meta_m + " -o " + '\u0022' + destino + "\\" + tmp_row.Cells[4].Value.ToString() + "." + format_out_m + '\u0022' + " " + file;
                            tmp.StartInfo.WorkingDirectory = Application.StartupPath;
                    }
                    else
                    {
                        tmp.StartInfo.FileName = ffm;
                        tmp.StartInfo.Arguments = AppParam;
                    }
                    tmp.StartInfo.RedirectStandardInput = true;
                    tmp.StartInfo.RedirectStandardOutput = true;
                    tmp.StartInfo.RedirectStandardError = true;
                    tmp.StartInfo.UseShellExecute = false;
                    tmp.StartInfo.CreateNoWindow = true;
                    tmp.EnableRaisingEvents = true;

                    if (cts.IsCancellationRequested == false && quit == false)
                    {                       
                        tmp.Start();

                        this.InvokeEx(f => f.dg1.Rows[tmp_row.Index].Cells[5].Value = "Processing");
                        combo_prio.Invoke(new MethodInvoker(delegate
                    {
                                if (combo_prio.SelectedIndex != 2) Change_mem_prio();
                            }));
                    }
                    else
                    {
                        this.InvokeEx(f => TaskbarProgress.SetState(this.Handle, TaskbarProgress.TaskbarStates.NoProgress));
                        timer2.Stop();
                        timer_tasks.Stop();
                        this.InvokeEx(f => f.Pg1.Value = Pg1.Maximum);
                        this.InvokeEx(f => f.Pg1.Text = "100%");
                        this.InvokeEx(f => f.Pg1.Refresh());
                        working = false;
                        m3u_running = false;
                        Enable_Controls();
                        cancelados_paralelos = false;
                        return;
                    }

                // this.InvokeEx(f => validate_duration = tmp_row.Cells[3].Value.ToString());
                Boolean valid_prog2 = false;
                    TimeSpan time3;
                    if (TimeSpan.TryParse(tmp_row.Cells[3].Value.ToString(), out time3))
                    {
                        if (TimeSpan.Parse(tmp_row.Cells[3].Value.ToString()).TotalSeconds > 0)
                        {
                            valid_prog2 = true;
                        }
                    }
                    else
                    {
                        valid_prog2 = false;
                    }

                    String err_txt = "";
                    Double interval = 0;
                    Double sec_prog = 0;                 

                //REVIEW
                multi_logs["log_n_" + tmp_row.Index.ToString()] = "Logging for: " + tmp_row.Cells[4].Value.ToString() + Environment.NewLine;

                    if (!file.ToLower().Contains("youtu.be") && !file.ToLower().Contains("youtube.com"))
                    {
                        while (!tmp.StandardError.EndOfStream)
                        {
                            err_txt = tmp.StandardError.ReadLine();
                            multi_logs["log_n_" + tmp_row.Index.ToString()] = multi_logs["log_n_" + tmp_row.Index.ToString()] + Environment.NewLine + n_logs + err_txt;

                            if (err_txt.Contains("time=") && err_txt.Contains("time=-") == false)
                            {
                                if (valid_prog2 == true)
                                {
                                    this.InvokeEx(f => durat_n = row_duration);
                                    int start_time_index = err_txt.IndexOf("time=") + 5;
                                    sec_prog = TimeSpan.Parse(err_txt.Substring(start_time_index, 8)).TotalSeconds;
                                    Double percent = (sec_prog * 100 / durat_n);

                                    total_prog = total_prog + (sec_prog - interval);
                                    interval = sec_prog;
                                    int percent2 = Convert.ToInt32(percent);

                                    if (percent2 <= 100)
                                    {
                                        this.InvokeEx(f => f.dg1.Rows[tmp_row.Index].Cells[5].Value = percent2.ToString() + "%");

                                        if (show_total_prog_m == true)
                                        {
                                            Double dg_multi_prog = 0;
                                            foreach (DataGridViewRow row_p in dg1.Rows)
                                            {
                                                try
                                                {
                                                    if (row_p.Cells[5].Value.ToString().Contains("%") == true)
                                                    {
                                                        this.InvokeEx(f => dg_multi_prog = dg_multi_prog + Convert.ToDouble( row_p.Cells[5].Value.ToString().Replace("%", "")));
                                                    }

                                                    if (row_p.Cells[5].Value.ToString() == "Success" || row_p.Cells[5].Value.ToString() == "Failed" || row_p.Cells[5].Value.ToString() == "Aborted")
                                                    {
                                                        this.InvokeEx(f => dg_multi_prog = dg_multi_prog + 100);
                                                    }
                                                } catch { }
                                            }

                                            this.InvokeEx(f => f.Pg1.Value = Convert.ToInt32(dg_multi_prog));
                                            if (Math.Round(dg_multi_prog / dg1.Rows.Count, 1).ToString().Contains(".") || Math.Round(dg_multi_prog / dg1.Rows.Count, 1).ToString().Contains(","))
                                            {
                                                this.InvokeEx(f => f.Pg1.Text = Math.Round(dg_multi_prog / dg1.Rows.Count, 1).ToString() + "%");
                                            }
                                            else
                                            {
                                                this.InvokeEx(f => f.Pg1.Text = Math.Round(dg_multi_prog / dg1.Rows.Count, 1).ToString() + System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator + "0" + "%");
                                            }

                                            this.InvokeEx(f => TaskbarProgress.SetValue(this.Handle, dg_multi_prog, Pg1.Maximum));

                                            //this.InvokeEx(f => pg_lv.Value = Convert.ToInt16(percent2));
                                            if (Math.Round(percent, 1).ToString().Contains(".") || Math.Round(percent, 1).ToString().Contains(","))
                                            {
                                                this.InvokeEx(f => f.dg1.Rows[tmp_row.Index].Cells[5].Value = Math.Round(percent, 1).ToString() + "%");
                                                
                                            }
                                            if (cancelados_paralelos != true)
                                            {
                                                //this.InvokeEx(f => pg_lv.Refresh());
                                            }
                                            else
                                            {
                                                //this.InvokeEx(f => pg_lv.Visible = false);
                                            }
                                        }
                                    }
                                }
                            }
                        } // while
                    }
                    else
                    {
                        //this.InvokeEx(f => pg_lv.Maximum = 100);
                        while (!tmp.StandardOutput.EndOfStream)
                        {
                            err_txt = tmp.StandardOutput.ReadLine();
                            multi_logs["log_n_" + tmp_row.Index.ToString()] = multi_logs["log_n_" + tmp_row.Index.ToString()] + Environment.NewLine + n_logs + err_txt;

                            if (err_txt.Contains("%"))
                            {
                                Double prog_y = Double.Parse(err_txt.Substring(err_txt.IndexOf("%") - 4, 4));
                                prog_y = prog_y / 10;
                                int progress = Convert.ToInt32(prog_y);

                                //if (progress > pg_lv.Maximum) progress = pg_lv.Maximum;
                                //this.InvokeEx(f => pg_lv.Value = progress);
                                //this.InvokeEx(f => pg_lv.Text = progress.ToString() + "%");
                                //this.InvokeEx(f => dg1.Rows[tmp_row.Index].Cells[5].Value = pg_lv.Text);
                                this.InvokeEx(f => f.dg1.Rows[tmp_row.Index].Cells[5].Value = progress.ToString() + "%");
                                //this.InvokeEx(f => pg_lv.Refresh());
                            }

                        //Read output, get progress
                        this.InvokeEx(f => f.listBox4.Items.Add(err_txt));
                            this.InvokeEx(f => f.listBox4.TopIndex = listBox4.Items.Count - 1);
                        }
                    }

                    er.Clear();
                    msg_er = String.Empty;

                    multi_logs["log_n_" + tmp_row.Index.ToString()] = multi_logs["log_n_" + tmp_row.Index.ToString()] + Environment.NewLine;

                    while (!tmp.StandardError.EndOfStream)
                    {
                        er.Add(tmp.StandardError.ReadLine().Replace("youtube-dl.exe:", ""));
                    }

                    if (er.Count > 0)
                    {
                        foreach (String st in er)
                        {
                            if (st.ToLower().Contains("usage: youtube-dl") == false)
                            {
                                msg_er = msg_er + st;
                                multi_logs["log_n_" + tmp_row.Index.ToString()] = multi_logs["log_n_" + tmp_row.Index.ToString()] + n_logs + msg_er;
                            }
                        }
                    }

                    if (file_int == 0 && msg_er != String.Empty)
                    {
                        if (msg_er.ToLower().Contains("warning")) MessageBox.Show(msg_er, "Warning message", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        else
                        {
                            MessageBox.Show(msg_er, "Error message", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            quit = true;
                            working = false;
                            m3u_running = false;
                            m3u_single_running = false;
                            timer2.Stop();
                            timer_tasks.Stop();
                            timer_est_size.Stop();
                            cancelados_paralelos = false;
                            aborted_url = false;
                            release_datagrid();
                            this.InvokeEx(f => f.lbl_dw_speed.Text = "");
                            this.InvokeEx(f => f.dg1.Rows[tmp_row.Index].Cells[5].Value = "Aborted");
                            this.InvokeEx(f => f.dg1.Rows[tmp_row.Index].Cells[5].Style.BackColor = Color.PaleGoldenrod);
                            Enable_Controls();
                            this.InvokeEx(f => TaskbarProgress.SetState(this.Handle, TaskbarProgress.TaskbarStates.NoProgress));
                            return;
                        }
                    }

                    tmp.WaitForExit();
                    multi_logs["log_n_" + tmp_row.Index.ToString()] = multi_logs["log_n_" + tmp_row.Index.ToString()] + Environment.NewLine + "--------End of " + dg1.Rows[tmp_row.Index].Cells[4].Value.ToString() + " log--------" + Environment.NewLine;
                    tmp.StartInfo.Arguments = String.Empty;
                    //this.InvokeEx(f => pg_lv.Visible = false);
                    //this.InvokeEx(f => pg_lv.Dispose());

                    if (tmp.ExitCode == 0)
                    {
                        if (aborted_url == false)
                        {                            
                            this.InvokeEx(f => f.dg1.Rows[tmp_row.Index].Cells[5].Value = "Success");
                            //this.InvokeEx(f => f.dg1.Rows[tmp_row.Index].Cells[5].Style.BackColor = Color.PaleGreen);
                        }
                        else
                        {                            
                            this.InvokeEx(f => f.dg1.Rows[tmp_row.Index].Cells[5].Value = "Aborted");
                            //this.InvokeEx(f => f.dg1.Rows[tmp_row.Index].Cells[5].Style.BackColor = Color.PaleGoldenrod);
                            if (cancelados_paralelos == false)
                            {
                                aborted_url = false;
                            }
                        }
                    }
                    else
                    {
                        this.InvokeEx(f => f.dg1.Rows[tmp_row.Index].Cells[5].Value = "Failed");
                        this.InvokeEx(f => f.dg1.Rows[tmp_row.Index].Cells[5].Style.BackColor = Color.PaleGoldenrod);
                    }

                    file_int++;
                    //End loop
                });

            }
            catch (Exception exc)
            {
                fatal_parallel_msg = exc.Message;
                fatal_parallel = true;                
            }
            if (result.IsCompleted == true) fatal_parallel = false;
            else
            {
                if (cts.IsCancellationRequested == false) fatal_parallel = true;
                else fatal_parallel = false;
            }
            if (no_save_logs == false && quit == false)
            {
                String[] array_err = list_lines.ToArray();

                String path = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_batch.log";
                try
                {
                    System.IO.StreamWriter SaveFile = new System.IO.StreamWriter(path);
                    SaveFile.WriteLine("Multiple downloads log sesion: " + System.DateTime.Now);
                    SaveFile.WriteLine("-----------------------------------------------------");
                    SaveFile.Write(string.Join(Environment.NewLine, multi_logs.Select(a => $"{a.Value}")));
                    if (er.Count > 0) SaveFile.WriteLine(msg_er);
                    SaveFile.Close();

                    File.AppendAllText(path, "--------------------------");
                    File.AppendAllText(path, Environment.NewLine + "END OF LOG FILE");
                    File.AppendAllText(path, Environment.NewLine);
                    System.IO.FileInfo fileInfo = new System.IO.FileInfo(path);

                    var bytes = fileInfo.Length;

                    var kilobytes = (double)bytes / 1024;
                    var megabytes = kilobytes / 1024;
                    var gigabytes = megabytes / 1024;

                    //Format size view
                    String size = "";
                    String separator = ".";

                    if (bytes > 1000000000)
                    {
                        if (gigabytes.ToString().Contains("."))
                        {
                            separator = ".";
                        }
                        else
                        {
                            separator = ",";
                        }

                        String gigas = gigabytes.ToString();
                        if (gigas.Length >= 5)
                        {
                            gigas = gigas.Substring(0, gigas.LastIndexOf(separator) + 3);
                            size = (gigas + " GB");
                        }
                        else
                        {
                            size = (gigas + " GB");
                        }
                    }

                    if (bytes >= 1048576 && bytes <= 1000000000)
                    {
                        if (megabytes.ToString().Contains("."))
                        {
                            separator = ".";
                        }
                        else
                        {
                            separator = ",";
                        }
                        String megas = megabytes.ToString();
                        if (megas.Length > 5)
                        {
                            megas = megas.Substring(0, megas.LastIndexOf(separator));
                            size = (megas + " MB");
                        }
                        else
                        {
                            size = (megas + " MB");
                        }
                    }

                    if (bytes >= 1024 && bytes < 1048576)

                    {
                        if (kilobytes.ToString().Contains("."))
                        {
                            separator = ".";
                        }
                        else
                        {
                            separator = ",";
                        }

                        String kbs = kilobytes.ToString();
                        if (kbs.Length >= 5)
                        {
                            kbs = kbs.Substring(0, kbs.LastIndexOf(separator));
                            size = (kbs + " KB");
                        }
                        else
                        {
                            size = (kbs + " KB");
                        }
                    }
                    if (bytes > -1 && bytes < 1024)
                    {
                        String bits = bytes.ToString();
                        size = (bits + " Bytes");
                    }

                    //End Format size view
                    File.AppendAllText(path, Environment.NewLine + "LOG SIZE: " + size);
                }
                catch { }

                //End save log
            }
        }

        private void BG_Multi_Down_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {            

            this.InvokeEx(f => TaskbarProgress.SetState(this.Handle, TaskbarProgress.TaskbarStates.NoProgress));
            timer_tasks.Stop();
            timer2.Stop();
            working = false;
            m3u_running = false;
            this.InvokeEx(f => f.Pg1.Value = Pg1.Maximum);
            this.InvokeEx(f => f.Pg1.Text = "100%");

            clean_ffb_test();

            foreach (DataGridViewRow row1 in dg1.Rows)
            {
                this.InvokeEx(f => row1.ReadOnly = false);
            }

            if (errors_enc == 0) pic_no_errors.Visible = true;
            else
            {
                pic_no_errors.Visible = false;
                pic_recording.Visible = false;
                toolT002.SetToolTip(this.pic_warnings, "There were " + errors_enc.ToString() + " error(s) during last session");
                pic_warnings.Visible = true;
            }

            //Automatic shutdown
            if (chkshut.Checked && cancelados_paralelos == false)
            {
                auto_shut();
                return;
            }

            //End automatic shutdown
            else
            {
                //cancel queue REVIEW
                if (cancelados_paralelos == true)
                {
                    foreach (DataGridViewRow row1 in dg1.Rows)
                    {
                        this.InvokeEx(f => row1.ReadOnly = false);
                    }
                    Enable_Controls();
                    foreach (DataGridViewRow row1 in dg1.Rows)
                    {
                        this.InvokeEx(f => row1.ReadOnly = false);
                    }

                    this.InvokeEx(f => this.Cursor = Cursors.Arrow);

                    this.InvokeEx(f => f.ct_paste_m3u.Enabled = true);
                    this.InvokeEx(f => f.ct_del_m3u.Enabled = true);
                    this.InvokeEx(f => f.ct_show_urls.Enabled = true);
                    this.InvokeEx(f => f.ct_validate_url.Enabled = true);
                    this.InvokeEx(f => f.ct_play_vlc.Enabled = true);
                    this.InvokeEx(f => f.ctm_stop_url.Enabled = false);
                    if (aborted == true)
                    {
                        aborted = false;
                        MessageBox.Show("Queue processing aborted", "Tasks aborted", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    }
                    return;
                }

                //End cancel queue

                Enable_Controls();
                foreach (DataGridViewRow row1 in dg1.Rows)
                {
                    this.InvokeEx(f => row1.ReadOnly = false);
                }

                this.InvokeEx(f => this.Cursor = Cursors.Arrow);

                this.InvokeEx(f => f.ct_paste_m3u.Enabled = true);
                this.InvokeEx(f => f.ct_del_m3u.Enabled = true);
                this.InvokeEx(f => f.ct_show_urls.Enabled = true);
                this.InvokeEx(f => f.ct_validate_url.Enabled = true);
                this.InvokeEx(f => f.ct_play_vlc.Enabled = true);
                this.InvokeEx(f => f.ctm_stop_url.Enabled = false);

                notifyIcon1.BalloonTipText = "FFmpeg Batch URL downloading complete";
                notifyIcon1.BalloonTipIcon = ToolTipIcon.Info;
                notifyIcon1.BalloonTipTitle = "URL downloading complete";
                notifyIcon1.ShowBalloonTip(0);
                
                    if (play_on_end == true) play_end();

                if (checkBox3.Checked == true)
                {
                    String destino2 = txt_path_m3u.Text;
                    if (Directory.GetFiles(destino2).Length != 0)
                    {
                        Process open_processed = new Process();
                        open_processed.StartInfo.FileName = "explorer.exe";
                        open_processed.StartInfo.Arguments = '\u0022' + destino2 + '\u0022';
                        open_processed.Start();
                    }
                }
            }

            this.InvokeEx(f => TaskbarProgress.SetState(this.Handle, TaskbarProgress.TaskbarStates.NoProgress));
            timer2.Stop();
            timer_tasks.Stop();
            this.InvokeEx(f => f.Pg1.Value = Pg1.Maximum);
            this.InvokeEx(f => f.Pg1.Text = "100%");
            this.InvokeEx(f => f.Pg1.Refresh());
            working = false;
            m3u_running = false;
            Enable_Controls();
            if (aborted == true && fatal_parallel == false)
            {
                aborted = false;
                MessageBox.Show("URL downloading aborted", "Tasks aborted", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            }
            cancelados_paralelos = false;
        }

        private void dg1_CellBeginEdit(object sender, DataGridViewCellCancelEventArgs e)
        {
            String cell = dg1.Rows[e.RowIndex].Cells[1].Value.ToString().ToLower();
            
            if (e.ColumnIndex == 3)
            {
                if (cell.Contains("youtu.be") || cell.Contains("youtube.com"))
                {
                    DateTime outTime;
                    Boolean time_ok = DateTime.TryParse(dg1.Rows[e.RowIndex].Cells[3].Value.ToString(),out outTime);

                    if (time_ok == true)
                    {
                        if (outTime.Second != 0) e.Cancel = true;
                    }
                    else e.Cancel = true;                    
                }
            }            
        }

        private void listView1_DrawColumnHeader(object sender, DrawListViewColumnHeaderEventArgs e)
        {
            e.DrawDefault = true;
        }        

        private void listView1_DrawSubItem(object sender, DrawListViewSubItemEventArgs e)
        {
            int prog = 0;
           
                if (e.SubItem.Text.Contains("%") && e.ColumnIndex == 5)
                {
                try
                {
                    prog = int.Parse(e.SubItem.Text.Replace("%", "").Replace(",", "").Replace(".", ""));
                }
                catch { prog = 0; }
                 if (e.SubItem.Text.Contains(",") || e.SubItem.Text.Contains(".")) prog = prog / 10;
                    if (prog < 0) prog = 0;
                    Rectangle rect = new Rectangle();
                    rect.X = e.Bounds.X + 1;
                    rect.Y = e.Bounds.Y;
                    rect.Width = e.Bounds.Width * prog / 100;
                    rect.Height = e.Bounds.Height - 2;

                    Rectangle newRect = new Rectangle(e.Bounds.X + 1,
                e.Bounds.Y, e.Bounds.Width - 2,
                e.Bounds.Height - 2);
                    using (
               Brush gridBrush = new SolidBrush(Color.LightGray),
               backColorBrush = new SolidBrush(Color.White))
                    {
                        using (Pen gridLinePen = new Pen(gridBrush))
                        { // Erase the subitem.
                            e.Graphics.FillRectangle(backColorBrush, e.Bounds);
                        }
                    }
                    
                if (e.ColumnIndex == 5)
                {
                    e.DrawDefault = false;
                    e.DrawBackground();
                    e.Graphics.DrawImage(img_prog.Image, rect);
                    e.Graphics.DrawRectangle(Pens.LightGray, newRect);
                    e.Graphics.DrawString(e.SubItem.Text, e.SubItem.Font, new SolidBrush(e.SubItem.ForeColor), e.SubItem.Bounds.Location.X + (e.Bounds.Width / 2) - e.SubItem.Text.Length * 3, e.SubItem.Bounds.Location.Y + 1);
                }
                else e.DrawDefault = true;
                }
                else
                {
                    if (e.Item.SubItems[5].Text.Contains("Success") || e.Item.SubItems[5].Text.Contains("Replaced") || e.Item.SubItems[5].Text.ToLower().Contains("not replaced"))
                    {                    
                        Rectangle rect = new Rectangle();
                        rect.X = e.Bounds.X + e.Bounds.Width - 18;
                        rect.Y = e.Bounds.Y;
                        rect.Width = 16;
                        rect.Height = 16;
                        
                    if (e.ColumnIndex == 5)
                    {
                        e.DrawDefault = false;
                        e.DrawBackground();
                        e.Graphics.DrawImage(pic_success.Image, rect);
                        e.Graphics.DrawString(e.SubItem.Text, e.SubItem.Font, new SolidBrush(e.SubItem.ForeColor), e.SubItem.Bounds.Location.X + (e.Bounds.Width / e.SubItem.Text.Length) + e.SubItem.Text.Length * 2, e.SubItem.Bounds.Location.Y + 1);
                    }
                    else e.DrawDefault = true;

                }
                    else
                    {
                        if (e.Item.SubItems[5].Text.Contains("Aborted") || e.Item.SubItems[5].Text.Contains("Failed") || e.Item.SubItems[5].Text.Contains("Error"))
                        {
                            Rectangle rect = new Rectangle();
                            rect.X = e.Item.SubItems[5].Bounds.X + e.Bounds.Width - 18;
                            rect.Y = e.Item.SubItems[5].Bounds.Y + 1;
                            rect.Width = 14;
                            rect.Height = 14;
                            
                        if (e.ColumnIndex == 5)
                        {
                            e.DrawDefault = false;
                            e.DrawBackground();
                            e.Graphics.DrawImage(pic_error.Image, rect);
                            e.Graphics.DrawString(e.SubItem.Text, e.SubItem.Font, new SolidBrush(e.SubItem.ForeColor), e.SubItem.Bounds.Location.X + (e.Bounds.Width / e.SubItem.Text.Length) + e.SubItem.Text.Length * 2 + 4, e.SubItem.Bounds.Location.Y + 1);
                        }
                        else e.DrawDefault = true;
                    }
                        else
                        {
                            if (e.Item.SubItems[5].Text.Contains("Queued"))
                            {                                
                            if (e.ColumnIndex == 5)
                            {
                                e.DrawDefault = false;
                                e.DrawBackground();
                                e.Graphics.DrawString(e.SubItem.Text, e.SubItem.Font, new SolidBrush(e.SubItem.ForeColor), e.SubItem.Bounds.Location.X + (e.Bounds.Width / e.SubItem.Text.Length) + e.SubItem.Text.Length * 2, e.SubItem.Bounds.Location.Y + 1);
                            }
                            else e.DrawDefault = true;
                            }
                            else
                            {
                                if (e.Item.SubItems[5].Text.Contains("Processing"))
                                {
                                    
                                if (e.ColumnIndex == 5)
                                {
                                    e.DrawDefault = false;
                                    e.DrawBackground();
                                    e.Graphics.DrawString(e.SubItem.Text, e.SubItem.Font, new SolidBrush(e.SubItem.ForeColor), e.SubItem.Bounds.Location.X + (e.Bounds.Width / e.SubItem.Text.Length) + e.SubItem.Text.Length * 2 - 8, e.SubItem.Bounds.Location.Y + 1);
                                }
                                else e.DrawDefault = true;
                                }

                                else
                                {
                                   e.DrawDefault = true;
                                }
                            }
                        }
                    }
                }                 
        }

        private void dg1_CellPainting(object sender, DataGridViewCellPaintingEventArgs e)
        {
            if (e.ColumnIndex == 5 && e.RowIndex > -1)
            {
                Image img = pic_ok.Image;
                Rectangle rect = new Rectangle();
                
                if (e.Value.ToString().Contains("%"))
                {
                    Decimal dec_prog = Convert.ToDecimal(dg1.Rows[e.RowIndex].Cells[5].Value.ToString().Replace("%", ""));
                    int prog = (int)(dec_prog);

                    rect = new Rectangle(e.CellBounds.X + 1, e.CellBounds.Y + 1, e.CellBounds.Width * prog / 100,
                    e.CellBounds.Height - 2);
                    img = img_prog.Image;                    
                }
                if (e.Value.ToString().Contains("Success"))
                {
                    rect = new Rectangle(e.CellBounds.X + e.CellBounds.Width - 19, e.CellBounds.Y + e.CellBounds.Height / 2 - 8, 16, 16);                    
                    img = pic_ok.Image;
                }
                if (e.Value.ToString().Contains("Failed") || e.Value.ToString().Contains("Error") || e.Value.ToString().Contains("Aborting") || e.Value.ToString().Contains("Aborted"))
                {
                    rect = new Rectangle(e.CellBounds.X + e.CellBounds.Width - 19, e.CellBounds.Y + e.CellBounds.Height / 2 - 8, 16, 16);
                    img = pic_error.Image;
                }
                if (e.Value.ToString().Contains("Recording"))
                {
                    rect = new Rectangle(e.CellBounds.X + e.CellBounds.Width - 16, e.CellBounds.Y + e.CellBounds.Height / 2 - 5, 12, 12);
                    img = pic_rec_cell.Image;
                }

                using (Brush gridBrush = new SolidBrush(this.dg1.GridColor), backColorBrush = new SolidBrush(e.CellStyle.BackColor))
                    {
                        using (Pen gridLinePen = new Pen(gridBrush))
                        {
                            // Erase the cell.
                            e.Graphics.FillRectangle(backColorBrush, e.CellBounds);

                            // Draw the grid lines (only the right and bottom lines;
                            // DataGridView takes care of the others).
                            e.Graphics.DrawLine(gridLinePen, e.CellBounds.Left,
                                e.CellBounds.Bottom - 1, e.CellBounds.Right - 1,
                                e.CellBounds.Bottom - 1);
                            e.Graphics.DrawLine(gridLinePen, e.CellBounds.Right - 1,
                                e.CellBounds.Top, e.CellBounds.Right - 1,
                                e.CellBounds.Bottom);
                            }
                        }
                    e.Graphics.DrawImage(img, rect);
                    e.PaintContent(e.ClipBounds);
                    e.Handled = true;
            }
        }

        private void listView3_DrawColumnHeader(object sender, DrawListViewColumnHeaderEventArgs e)
        {
            e.DrawDefault = true;            
        }

        private void listView3_DrawSubItem(object sender, DrawListViewSubItemEventArgs e)
        {
            int prog = 0;
            if (e.SubItem.Text.Contains("%"))
            {
                
                prog = int.Parse(e.SubItem.Text.Replace("%", "").Replace(",", "").Replace(".", ""));
                if (e.SubItem.Text.Contains(",") || e.SubItem.Text.Contains(".")) prog = prog / 10;
                if (prog < 0) prog = 0;
                Rectangle rect = new Rectangle();
                rect.X = e.Bounds.X;
                rect.Y = e.Bounds.Y;
                rect.Width = e.Bounds.Width * prog / 100;
                rect.Height = e.Bounds.Height;

                Rectangle newRect = new Rectangle(e.Bounds.X + 1,
            e.Bounds.Y, e.Bounds.Width - 2,
            e.Bounds.Height - 2);
                using (
           Brush gridBrush = new SolidBrush(Color.LightGray),
           backColorBrush = new SolidBrush(Color.White))
                {
                    using (Pen gridLinePen = new Pen(gridBrush))
                    { // Erase the subitem.
                        e.Graphics.FillRectangle(backColorBrush, e.Bounds);
                    }
                }
                e.DrawDefault = false;
                e.DrawBackground();
                e.Graphics.DrawRectangle(Pens.LightGray, newRect);
                e.Graphics.DrawImage(img_prog.Image, rect);
                e.Graphics.DrawString(e.SubItem.Text, e.SubItem.Font, new SolidBrush(e.SubItem.ForeColor), e.SubItem.Bounds.Location.X + (e.Bounds.Width / 2) - e.SubItem.Text.Length * 3, e.SubItem.Bounds.Location.Y + 1);               
            }
            else
            {
                if (e.SubItem.Text.Contains("Success"))
                {
                    Rectangle rect = new Rectangle();
                    rect.X = e.Bounds.X + e.Bounds.Width - 18;
                    rect.Y = e.Bounds.Y;
                    rect.Width = 16;
                    rect.Height = 16;
                    e.DrawDefault = false;
                    e.DrawBackground();
                    e.Graphics.DrawImage(pic_success.Image, rect);
                    e.Graphics.DrawString(e.SubItem.Text, e.SubItem.Font, new SolidBrush(e.SubItem.ForeColor), e.SubItem.Bounds.Location.X + (e.Bounds.Width / 2) - e.SubItem.Text.Length * 3 - 2, e.SubItem.Bounds.Location.Y + 1);
                }
                else
                {
                    if (e.SubItem.Text.Contains("Aborted") || e.SubItem.Text.Contains("Error") || e.SubItem.Text.Contains("No Sub"))
                    {
                        Rectangle rect = new Rectangle();
                        rect.X = e.Bounds.X + e.Bounds.Width - 18;
                        rect.Y = e.Bounds.Y + 1;
                        rect.Width = 14;
                        rect.Height = 14;
                        e.DrawDefault = false;
                        e.DrawBackground();
                        e.Graphics.DrawImage(pic_error.Image, rect);
                        e.Graphics.DrawString(e.SubItem.Text, e.SubItem.Font, new SolidBrush(e.SubItem.ForeColor), e.SubItem.Bounds.Location.X + (e.Bounds.Width / 2) - e.SubItem.Text.Length * 3 - 2, e.SubItem.Bounds.Location.Y + 1);
                    }
                    else
                    {
                        if (e.SubItem.Text.Contains("Queued") || e.SubItem.Text.Contains("Processing"))
                        {
                            e.DrawDefault = false;
                            e.DrawBackground();
                            e.Graphics.DrawString(e.SubItem.Text, e.SubItem.Font, new SolidBrush(e.SubItem.ForeColor), e.SubItem.Bounds.Location.X + (e.Bounds.Width / 2) - e.SubItem.Text.Length * 3 - 2, e.SubItem.Bounds.Location.Y + 1);
                        }
                        else
                        {
                            e.DrawDefault = true;
                        }
                    }
                }
            }
        }

        private void lbl_yl_name_Click(object sender, EventArgs e)
        {
            Pg1.Focus();
        }

        private void BG_check_ytdl_DoWork(object sender, DoWorkEventArgs e)
        {
            String ver = String.Empty;
            Process tmp = new Process();
            tmp.StartInfo.FileName = System.IO.Path.Combine(Application.StartupPath, "youtube-dl.exe");
            if (!File.Exists(Path.Combine(Application.StartupPath, "youtube-dl.exe")))
            {
                this.InvokeEx(f => f.lbl_yl_name.Text = "Youtube-dl was not found");
                this.InvokeEx(f => f.btn_add_yts.Enabled = false);
                this.InvokeEx(f => f.pic_wait_1.Visible = false);
                return;
            }
            tmp.StartInfo.Arguments = "--version";
            tmp.StartInfo.RedirectStandardOutput = true;
            tmp.StartInfo.UseShellExecute = false;
            tmp.StartInfo.CreateNoWindow = true;
            tmp.EnableRaisingEvents = true;

            try
            {
                tmp.Start();

                ver = tmp.StandardOutput.ReadToEnd().Trim();
                
                tmp.WaitForExit();                
                if (tmp.ExitCode != 0)
                {
                    this.InvokeEx(f => f.pic_wait_1.Visible = false);
                    check_VC();
                    return;
                }
            }
            catch { }

            try
            {
                WebClient client = new WebClientWithTimeout();
                String content = client.DownloadString("https://youtube-dl.org/");
                               
                    string[] lines = content.Split(new[] { "\r\n", "\r", "\n" }, StringSplitOptions.RemoveEmptyEntries);
               
                foreach (String line in lines)
                {                    
                    if (line.Contains("Latest</a>"))
                    {                        
                        content = line.Substring(line.IndexOf("(") + 2, line.IndexOf(")") - line.IndexOf("(") -2);
                        break;
                    }
                }
                    
                this.InvokeEx(f => f.lbl_yl_name.Left = lbl_yl_name.Left - 16);
                this.InvokeEx(f => f.lbl_yl_name.Width = lbl_yl_name.Width - 75);
                this.InvokeEx(f => f.pic_wait_1.Visible = false);

                if (ver != content)
                {
                    this.InvokeEx(f => f.lbl_yl_name.Text = "New youtube-dl");
                    this.InvokeEx(f => f.lbl_yt_v.Visible = true);
                    this.InvokeEx(f => f.lbl_yt_v.Text = "version " + content);
                    this.InvokeEx(f => f.btn_update_yt.Visible = true);
                    this.InvokeEx(f => f.pic_ok.Visible = false);
                }
                else
                {
                    this.InvokeEx(f => f.lbl_yl_name.Text = "Youtube-dl");
                    this.InvokeEx(f => f.lbl_yt_v.Visible = true);
                    this.InvokeEx(f => f.lbl_yt_v.Text = "version " + ver);
                    this.InvokeEx(f => f.btn_update_yt.Visible = false);
                    this.InvokeEx(f => f.pic_ok.Visible = true);
                }
            }

            catch
            {
                this.InvokeEx(f => f.lbl_yl_name.Left = lbl_yl_name.Left - 16);
                this.InvokeEx(f => f.lbl_yl_name.Width = lbl_yl_name.Width - 75);
                this.InvokeEx(f => f.lbl_yt_v.Text = " error checking version");
                this.InvokeEx(f => f.pic_ok.Visible = false);
            }
        }

        private void BG_Single_yt_DoWork(object sender, DoWorkEventArgs e)
        {
            Boolean one_ok = false;
            dg1.Invoke(new MethodInvoker(delegate
            {
                dg1.Rows[dg1.RowCount - 1].Cells[5].Value = "Validating URL";

                if (dg1.Rows[dg1.RowCount - 1].Cells[1].Value == null)
                {
                    dg1.Rows[dg1.RowCount - 1].Cells[5].Value = String.Empty;
                    dg1.Rows[dg1.RowCount - 1].Cells[4].Value = String.Empty;
                    dg1.Rows[dg1.RowCount - 1].Cells[3].Value = String.Empty;
                    dg1.Rows[dg1.RowCount - 1].Cells[2].Value = String.Empty;
                    dg1.Rows[dg1.RowCount - 1].DefaultCellStyle.BackColor = dg1.DefaultCellStyle.BackColor;
                    return;
                }

                if (dg1.Rows[dg1.RowCount - 1].Cells[1].Value.ToString().Contains("http") == false)
                {
                    dg1.Rows[dg1.RowCount - 1].Cells[5].Value = "Error";
                    dg1.Rows[dg1.RowCount - 1].DefaultCellStyle.BackColor = Color.LightGoldenrodYellow;
                    return;
                }
                dg1.Refresh();
                cell_zoom();
            }));

            Process probe = new Process();
            probe.StartInfo.FileName = System.IO.Path.Combine(Application.StartupPath, "youtube-dl.exe");
            if (!File.Exists(System.IO.Path.Combine(Application.StartupPath, "youtube-dl.exe")))
            {
                MessageBox.Show("Youtube-dl was not found", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                release_datagrid();
                return;
            }
            probe.StartInfo.WorkingDirectory = Application.StartupPath;
            probe.StartInfo.Arguments = "--get-duration --get-title --get-thumbnail " + dg1.Rows[dg1.RowCount - 1].Cells[1].Value.ToString();
            probe.StartInfo.RedirectStandardOutput = true;
            probe.StartInfo.UseShellExecute = false;
            probe.StartInfo.CreateNoWindow = true;
            probe.EnableRaisingEvents = true;
            probe.Start();

            String filename = "";
            String out_thumb = "";
            String duracion = "";

            while (!probe.StandardOutput.EndOfStream)
            {
                filename = probe.StandardOutput.ReadLine();
                out_thumb = probe.StandardOutput.ReadLine();
                duracion = probe.StandardOutput.ReadLine();
            }

            PictureBox pic = new PictureBox();

            if (out_thumb.Contains("http"))
            {
                try
                {
                    new System.Threading.Thread(() =>
                    {
                        System.Threading.Thread.CurrentThread.IsBackground = true;
                        try
                        {
                            pic.Load(out_thumb);
                            dg_thumbs[dg1.RowCount - 1] = pic.Image;
                            dg1.Invoke(new MethodInvoker(delegate
                            {
                                dg1.Rows[dg1.RowCount - 1].Cells[0].Value = pic.Image;
                            }));
                        }
                        catch
                        {
                            dg1.Rows[dg1.RowCount - 1].Cells[0].Value = pic_noimg.Image;
                        }

                    }).Start();
                }
                catch
                {
                    dg_thumbs[dg1.RowCount - 1] = pic_noimg.Image;
                }
            }
            else
            {
                dg_thumbs[dg1.RowCount - 1] = pic_noimg.Image;
            }
            cell_stretch();

            probe.WaitForExit(10000);
            probe.StartInfo.Arguments = "";

            if (duracion == null || duracion == string.Empty)
            {
                dg1.Invoke(new MethodInvoker(delegate
                {
                    dg1.Rows[dg1.RowCount - 1].DefaultCellStyle.BackColor = Color.LightGoldenrodYellow;
                    dg1.Rows[dg1.RowCount - 1].Cells[2].Value = "";
                    dg1.Rows[dg1.RowCount - 1].Cells[3].Value = "";
                    dg1.Rows[dg1.RowCount - 1].DefaultCellStyle.BackColor = dg1.DefaultCellStyle.BackColor;
                    dg1.Rows[dg1.RowCount - 1].Cells[5].Value = "Error";
                    this.InvokeEx(f => f.dg1.Rows[dg1.RowCount - 1].Cells[5].Style.BackColor = Color.LightGoldenrodYellow);

                }));
            }

            if (duracion != null && filename != "")
            {
                dg1.Invoke(new MethodInvoker(delegate
                {
                    if (duracion == "0")
                    {
                        dg1.Rows[dg1.RowCount - 1].Cells[2].Value = duracion;
                        dg1.Rows[dg1.RowCount - 1].Cells[3].Value = "Live";
                    }
                    else
                    {
                        if (duracion.Length < 6) duracion = "00:" + duracion;
                        dg1.Rows[dg1.RowCount - 1].Cells[2].Value = duracion;
                        dg1.Rows[dg1.RowCount - 1].Cells[3].Value = duracion;
                    }
                    dg1.Rows[dg1.RowCount - 1].Cells[4].Value = filename;
                    dg1.Rows[dg1.RowCount - 1].DefaultCellStyle.BackColor = dg1.DefaultCellStyle.BackColor;
                    one_ok = true;
                    dg1.Rows[dg1.RowCount - 1].Cells[5].Value = "Ready";
                    this.InvokeEx(f => f.dg1.Rows[dg1.RowCount - 1].Cells[5].Style.BackColor = Color.LightGreen);
                }));
            }

            if (dg1.RowCount > 1)
            {
                dg1.Invoke(new MethodInvoker(delegate
                {
                    dg1.ClearSelection();
                    dg1.Rows[dg1.RowCount - 1].Cells[1].Selected = true;
                    dg1.CurrentCell = dg1.Rows[dg1.RowCount - 1].Cells[1];
                }));
            }
            urls_duration();
            if (one_ok == true)
            {
                groupBox_m3u.Invoke(new MethodInvoker(delegate
                {
                    chk_m3u_params.Left = 14;
                    chk_output_server.Enabled = false;
                    chk_m3u_params.Text = "Youtube-dl params";

                }));
            }
            //this.Enabled = true; 
            
            release_datagrid();
        }

        private void btn_edit_presets_Click(object sender, EventArgs e)
        {
            Form15 frm_pr = new Form15();
            frm_pr.ShowDialog();
            if (frm_pr.saved == true) btn_load_config.PerformClick();
        }

        private void btn_del_preset_Click(object sender, EventArgs e)
        {
            Pg1.Focus();
            if (combo_presets.SelectedIndex == -1)
            {
                return;
            }
            if (combo_presets.SelectedIndex == 0)
            {
                MessageBox.Show("Default preset can not be removed", "Preset can't be removed", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }
            var a = MessageBox.Show("Do you wish to remove the current preset?", "Confirm action", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
            if (a == DialogResult.Yes)
            {
                String path, path_pr = "";
                if (is_portable == true)
                {
                    path = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_batch_portable.ini";
                    path_pr = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_presets_portable.ini";
                }
                else
                {
                    path = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_batch.ini";
                    path_pr = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_presets.ini";
                }

                
                File.Create(System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_batch2.txt").Dispose();
                File.Create(System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_presets2.txt").Dispose();
                String path2 = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_batch2.txt";
                String path2_pr = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_presets2.txt";

                if (File.Exists(path_pr))
                {
                    path = path_pr;
                    path2 = path2_pr;
                }

                int ind = 0;
                foreach (string line in File.ReadLines(path))
                {
                    ind = ind + 1;
                    String linea_sin = String.Empty;

                    if (!line.Contains("PR: "))
                    {
                        linea_sin = line + Environment.NewLine;
                        File.AppendAllText(path2, linea_sin);
                    }

                    if (line.LastIndexOf("&") >= 0)
                    {
                        if (line.Substring(4, line.LastIndexOf("&") - 5) != combo_presets.SelectedItem.ToString())
                        {
                            if (ind <= File.ReadLines(path).Count() - 1)
                            {
                                linea_sin = line + Environment.NewLine;
                                File.AppendAllText(path2, linea_sin);
                            }
                            else
                            {
                                File.AppendAllText(path2, line);
                            }
                        }
                    }
                }
                File.Delete(path);
                File.Copy(path2, path);
                File.Delete(path2);

                String path1 = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_batch.ini";
                String path1_pr = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_presets.ini";
                combo_presets.Items.Clear();
                combo_presets.Items.Add("Default parameters");
                int linea = 0;

                foreach (string line in File.ReadLines(path1))
                {
                    linea = linea + 1;

                    if (linea == 1)
                    {
                        txt_parameters.Text = line;
                    }

                    if (linea == 2)
                    {
                        txt_format.Text = line;
                    }

                    if (line == "yes")

                    {
                        checkBox3.CheckState = CheckState.Checked;
                    }

                    if (line == "no")
                    {
                        checkBox3.CheckState = CheckState.Unchecked;
                    }

                    if (!File.Exists(path1_pr))
                    {
                        if (line.Contains("PR: "))
                        {
                            combo_presets.Items.Add(line.Substring(4, line.LastIndexOf("&") - 5));
                        }
                    }
                }
                if (File.Exists(path1_pr))
                {
                    foreach (string line in File.ReadLines(path_pr))
                    {
                        if (line.Length > 8)
                        {
                            if (line.Substring(0, 7).ToLower() == "version")
                            {
                                txt_config_ver.Text = line.Substring(8, line.Length - 8);
                                continue;
                            }
                        }

                        if (line.Contains("PR: "))
                        {
                            combo_presets.Items.Add(line.Substring(4, line.LastIndexOf("&") - 5));
                        }
                    }
                }

                combo_presets.SelectedIndex = 0;
            }
        }

        private void pic_warnings_Click(object sender, EventArgs e)
        {
            if (pic_warnings.Visible == true) btn_display_log.PerformClick();
        }

        private void btn_display_log_Click(object sender, EventArgs e)
        {
            Pg1.Focus();
            String path_log_file = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_batch.log";
            if (!File.Exists(path_log_file))
            {
                if (no_save_logs == true) MessageBox.Show("No log file was found. Log saving is disabled.", "File not found", MessageBoxButtons.OK, MessageBoxIcon.Error);
                else
                if (no_save_logs == false) MessageBox.Show("No log file was found.", "File not found", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }
            long length = new System.IO.FileInfo(path_log_file).Length;
            if (length > 20000000)
            {
                var a = MessageBox.Show("Log size is " + (length / 1024).ToString() + " KB " + "and it could take some time to load. Continue?", "Log size warning", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                if (a == DialogResult.No) return;
            }

            //Form frm_output = new Form();
            frm_log.Name = "Last session Batch log";
            frm_log.Text = "FFmpeg Batch AV Converter";
            frm_log.Icon = this.Icon;

            frm_log.Height = 675;
            frm_log.Width = 977;
            frm_log.FormBorderStyle = FormBorderStyle.Fixed3D;
            frm_log.MaximizeBox = false;
            frm_log.MinimizeBox = false;

            var fuente_list = new System.Drawing.Font("Microsoft Sans Serif", 9, FontStyle.Regular);

            Rtxt.Parent = frm_log;
            Rtxt.Left = 20;
            Rtxt.Top = 65;
            Rtxt.Height = 525;
            Rtxt.Width = 920;
            Rtxt.Font = fuente_list;

            ContextMenu Rtxt_menu = new ContextMenu();
            Rtxt.ContextMenu = Rtxt_menu;
            MenuItem CopyItem = new MenuItem("Copy");
            Rtxt_menu.MenuItems.Add(CopyItem);
            CopyItem.Click += new EventHandler(CopyAction);

            TextBox titulo = new TextBox();
            titulo.Parent = frm_log;
            titulo.Top = 15;
            titulo.Left = 20;
            titulo.Width = 921;
            titulo.TabIndex = 0;
            var fuente = new System.Drawing.Font("Microsoft Sans Serif", 11, FontStyle.Bold);

            titulo.Font = fuente;
            titulo.BorderStyle = BorderStyle.Fixed3D;
            titulo.TextAlign = HorizontalAlignment.Center;
            titulo.ReadOnly = true;

            titulo.Text = " Last batch log";

            Button boton_ok_ff = new Button();
            boton_ok_ff.Parent = frm_log;
            boton_ok_ff.Left = 20;
            boton_ok_ff.Top = 595;
            boton_ok_ff.Width = 920;
            boton_ok_ff.Height = 27;
            boton_ok_ff.Text = "Opening log file...";
            boton_ok_ff.Click += new EventHandler(boton_ok_ff_Click);

            TextBox titulo2 = new TextBox();
            titulo2.Parent = frm_log;
            titulo2.Top = 42;
            titulo2.Left = 47;
            titulo2.Width = 867;

            var fuente2 = new System.Drawing.Font("Microsoft Sans Serif", 10, FontStyle.Regular);

            titulo2.Font = fuente2;
            titulo2.BorderStyle = BorderStyle.None;
            titulo2.TextAlign = HorizontalAlignment.Center;
            titulo2.ReadOnly = true;

            titulo2.Text = "ff_batch.log";

            frm_log.StartPosition = FormStartPosition.CenterScreen;
            Rtxt.Text = File.ReadAllText(path_log_file);
            boton_ok_ff.Text = "Close window";
            frm_log.ShowDialog();
            frm_log.Refresh();
        }

        private void btn_fix_pre_Click(object sender, EventArgs e)
        {
            btn_fix_pre.Enabled = false;
            String f_fix_pre = String.Empty;
            if (is_portable == false)
            {
                f_fix_pre = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_fix_pre.ini";
            }
            else
            {
                f_fix_pre = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_fix_pre_portable.ini";
            }

            if (txt_pre_input.Text.Length > 0)
            {
                File.WriteAllText(f_fix_pre, txt_pre_input.Text);
                fix_pre = true;
             }

            else {
                fix_pre = false;
                if (File.Exists(f_fix_pre))
                {
                    try
                    {
                        File.Delete(f_fix_pre);
                    }
                    catch
                    {
                        MessageBox.Show("An error occurred while saving setting");
                    }
                }
            }            
        }

        private void add_video_mux_job()
        {
            Pg1.Focus();
            cancel_queue = false;
            Pg1.Text = "0" + System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator + "0%";

            foreach (ListViewItem file0 in list_tracks.Items)
            {
                if (!File.Exists(file0.Text))
                {
                    MessageBox.Show("File was not found: " + file0.Text, "One file in the track list was not found", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
            }

            if (list_tracks.Items.Count == 0)
            {
                MessageBox.Show("Tracks list is empty", "No files to be processed", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return;
            }

            Boolean video_track_in = false;
            foreach (ListViewItem tracks_item in list_tracks.Items)
            {
                if (tracks_item.SubItems[2].Text.Contains("Video"))
                {
                    video_track_in = true;
                }
            }

            if (video_track_in == false)
            {
                MessageBox.Show("A video track is required for muxing", "No video track found", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            String is_overw = String.Empty;
            if (txt_path_main.Text.Contains(".\\"))
            {
                if (txt_path_main.Text == ".\\")
                {
                    is_overw = Path.GetDirectoryName(list_tracks.Items[0].Text) + "\\" + Path.GetFileNameWithoutExtension(list_tracks.Items[0].Text) + "." + combo_ext.SelectedItem.ToString();
                }
                else
                {
                    is_overw = Path.GetDirectoryName(list_tracks.Items[0].Text) + txt_path_main.Text.Replace(".", String.Empty) + "\\" + Path.GetFileNameWithoutExtension(list_tracks.Items[0].Text) + "." + combo_ext.SelectedItem.ToString();
                }
            }

            if (is_overw == list_tracks.Items[0].Text)
            {
                MessageBox.Show("Overwriting is not supported. Change destination directory on main screen or double-click on the textbox to reset to default", "Overwriting not allowed", MessageBoxButtons.OK, MessageBoxIcon.Error);

                return;
            }

            DateTime time2;
            if (!DateTime.TryParse(ss_time_input.Text, out time2))
            {
                MessageBox.Show("Pre-input seeking selected in Batch processing tab is incorrect. Change it or reset it by double-clicking on it", "Pre-input seeking format error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            //Validated list, start processing
            //Pending duration

            if (dur_ok == false)
            {
                list_pending_dur.Items.Clear();
                foreach (ListViewItem item in listView1.Items)
                {
                    list_pending_dur.Items.Add((ListViewItem)item.Clone());
                }
                BG_Dur.RunWorkerAsync();
                return;
            }

            txt_remain.Text = "Time remaining: 00h:00m:00s";
            time_n_tasks = 0;
            timer_tasks.Start();
            timer_est_size.Start();

            cancel_queue = false;
            Pg1.Value = 0;
            //pg_current.Value = 0;
            //textBox4.Text = "0%";
            ////textBox4.Visible = true;

            //Copy list of tracks for thread processing
            ListView list_proc = new ListView();
            foreach (ListViewItem item in list_tracks.Items)
            {
                list_proc.Items.Add((ListViewItem)item.Clone());
            }
            //End of copy list of tracks for thread processing

            Pg1.Maximum = list_proc.Items.Count;

            Double total_duration = 0;
            Double total_prog = 0;

            //Get specific track list video duration
            //Duration
            Boolean has_audio_for_image = false;
            Process probe = new Process();
            probe.StartInfo.FileName = System.IO.Path.Combine(Application.StartupPath, "ffprobe.exe");

            if (list_proc.Items[0].BackColor == Color.LightYellow)
            {
                foreach (ListViewItem item1 in list_proc.Items)
                {
                    if (item1.SubItems[2].Text.Contains("Audio"))
                    {
                        has_audio_for_image = true;
                    }
                }
                if (has_audio_for_image == false)
                {
                    MessageBox.Show("No audio found in the track list to mux with image", "Error muxing with image", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    working = false;
                    Enable_Controls();
                    return;
                }
                else
                {
                    probe.StartInfo.Arguments = "-v error -show_entries format=duration -sexagesimal -of default=noprint_wrappers=1:nokey=1 " + " -i " + '\u0022' + list_proc.Items[1].Text + '\u0022';
                }
            }
            else
            {
                probe.StartInfo.Arguments = "-v error -show_entries format=duration -sexagesimal -of default=noprint_wrappers=1:nokey=1 " + " -i " + '\u0022' + list_proc.Items[0].Text + '\u0022';
            }

            probe.StartInfo.RedirectStandardOutput = true;
            probe.StartInfo.UseShellExecute = false;
            probe.StartInfo.CreateNoWindow = true;
            probe.EnableRaisingEvents = true;
            probe.Start();

            String duracion = probe.StandardOutput.ReadLine();

            probe.WaitForExit();

            if (duracion != null)
            {
                if (duracion.Length >= 7)
                {
                    //total_duration = Convert.ToDouble(duracion.Substring(0, 7));
                    durat_n = TimeSpan.Parse(duracion).TotalSeconds;
                    total_duration = TimeSpan.Parse(duracion).TotalSeconds;
                }
            }
            else
            {
                total_duration = 0;
            }

            //End duration

            //End

            Pg1.Minimum = 0;
            Pg1.Maximum = 100;
            Pg1.Text = "0" + System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator + "0%";
            lbl_speed.Text = String.Empty;
            lbl_elapsed.Text = "Time elapsed: 00h:00m:00s";

            List<string> list_lines = new List<string>();
            String mux_ext = combo_ext.Text;

            String hw_decode = String.Empty;
            if (cb_hwdecode.SelectedItem.ToString() != "none")
            {
                hw_decode = "-hwaccel " + cb_hwdecode.SelectedItem.ToString();
            }

            //Save selected hw decoder

            String path2 = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_hw_dcd.ini";
            String txt_hw_dcd = cb_hwdecode.SelectedItem.ToString();
            if (txt_hw_dcd != "none")
            {
                File.WriteAllText(path2, txt_hw_dcd);
            }
            else
            {
                if (File.Exists(path2)) File.Delete(path2);
            }

            //End save hw decoder

            String remain_time = "0";


            String ffm = System.IO.Path.Combine(Application.StartupPath, "ffmpeg.exe");

            String file = list_proc.Items[0].Text;
            String fullPath = file;
            String destino = "";

            if (txt_path_main.Text.Contains(".\\"))
            {
                destino = file.Substring(0, fullPath.LastIndexOf('\\')) + txt_path_main.Text.Replace(".", String.Empty);
            }
            else
            {
                destino = txt_path_main.Text;
            }

            if (!Directory.Exists(destino))
            {
                Directory.CreateDirectory(destino);
            }

            //Create joint inputs variable
            String inputs = String.Empty;
            foreach (ListViewItem input_item in list_proc.Items)
            {
                if (input_item.SubItems[2].Text.Contains("Subtitle") && !input_item.SubItems[2].Text.Contains("hdmv_pgs") && !input_item.SubItems[2].Text.Contains("dvd_subtitle"))
                {
                    inputs = inputs + " -sub_charenc UTF-8" + " -i " + '\u0022' + input_item.Text + '\u0022';
                }
                else
                {
                    if (input_item.BackColor != Color.LightYellow)
                    {
                        inputs = inputs + " -i " + '\u0022' + input_item.Text + '\u0022';
                    }
                    else
                    {
                        String ext_image = Path.GetExtension(list_proc.Items[0].Text);

                        //Attempt to extract frame as image
                        Process proc_img = new System.Diagnostics.Process();
                        String ffm_img = Path.Combine(Application.StartupPath, "ffmpeg.exe");

                        String file_img = Path.GetFullPath(list_proc.Items[0].Text);
                        String fullPath_img = file_img;
                        String AppParam_img = "";

                        if (ext_image != ".jpg" && ext_image != ".jpeg" && ext_image != ".png" && ext_image != ".gif" && ext_image != ".bmp" && ext_image != ".tiff" && ext_image != ".psd")
                        {
                            AppParam_img = " -ss " + ss_time_input.Text + " -i " + "" + '\u0022' + file_img + '\u0022' + " -vframes 1 -f image2" + " -qscale:v 2" + " -vf scale=1280:-2" + " -y " + '\u0022' + destino + "\\" + System.IO.Path.GetFileNameWithoutExtension(file_img) + "." + "jpg" + '\u0022';
                        }
                        else
                        {
                            AppParam_img = " -i " + "" + '\u0022' + file_img + '\u0022' + " -qscale:v 2" + " -vf scale=1280:-2" + " -y " + '\u0022' + destino + "\\" + System.IO.Path.GetFileNameWithoutExtension(file_img) + "." + "jpg" + '\u0022';
                        }
                        proc_img.StartInfo.RedirectStandardOutput = false;
                        proc_img.StartInfo.RedirectStandardError = false;
                        proc_img.StartInfo.UseShellExecute = true;
                        proc_img.StartInfo.CreateNoWindow = false;
                        proc_img.EnableRaisingEvents = false;
                        proc_img.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;

                        proc_img.StartInfo.FileName = ffm_img;
                        proc_img.StartInfo.Arguments = AppParam_img;

                        proc_img.Start();
                        proc_img.WaitForExit();
                        if (proc_img.ExitCode == 0)
                        {
                            String extracted_img = "" + '\u0022' + destino + "\\" + System.IO.Path.GetFileNameWithoutExtension(file_img) + ".jpg" + '\u0022' + "";
                            inputs = inputs + " -i " + extracted_img;
                        }
                        else
                        {
                            MessageBox.Show("Error extracting image from video track.", "Error using as image for audio", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            Enable_Controls();
                            working = false;
                            return;
                        }
                        //End extract frame as image
                    }
                }
            }
            //End create joint inputs variable

            //Create mapping inputs variable
            String input_map = String.Empty;
            //Add video track, it must be first
            if (list_proc.Items[0].BackColor == Color.LightYellow)
            {
                //Video track is an still image

                //Attempt to extract first frame from video track as image

                input_map = input_map + " -map 0:0" + " -c:v libx264 -r 1 -crf 29 -preset veryfast -x264-params keyint=1 -pix_fmt yuv420p";
            }
            else
            {
                input_map = input_map + " -map 0:" + list_proc.Items[0].SubItems[1].Text + " -c:v " + list_proc.Items[0].SubItems[5].Text + " -metadata:s:v:0 language=" + list_proc.Items[0].SubItems[3].Text;
            }

            int int_auds = 0;
            int i_subs = 0;

            for (int i = 1; i < list_tracks.Items.Count; i++)

            {
                //Audio tracks
                if (list_proc.Items[i].SubItems[2].Text.Contains("Audio"))
                {
                    String is_default = String.Empty;
                    if (list_proc.Items[i].SubItems[4].Text == "Yes")
                    {
                        is_default = "-disposition:a:" + (int_auds).ToString() + " default";
                    }
                    else
                    {
                        is_default = "-disposition:a:" + (int_auds).ToString() + " 0";
                    }
                    String track_codec = " -c:a copy ";
                    if (list_proc.Items[i].SubItems[5].Text != "copy")
                    {
                        track_codec = " -c:a:" + int_auds + " " + list_proc.Items[i].SubItems[5].Text;
                    }
                    input_map = input_map + " -map " + (i).ToString() + ":" + list_proc.Items[i].SubItems[1].Text + track_codec + " -metadata:s:a:" + (int_auds).ToString() + " language=" + list_proc.Items[i].SubItems[3].Text + " " + is_default;
                    int_auds = int_auds + 1;
                }
            }

            for (int i = 1; i < list_tracks.Items.Count; i++)

            {
                //Subtitle tracks
                if (list_proc.Items[i].SubItems[2].Text.Contains("Subtitle"))
                {
                    String is_default = String.Empty;
                    if (list_proc.Items[i].SubItems[4].Text == "Yes")
                    {
                        is_default = "-disposition:s:" + (i_subs).ToString() + " default";
                    }
                    else
                    {
                        is_default = "-disposition:s:" + (i_subs).ToString() + " 0";
                    }

                    input_map = input_map + " -map " + (i).ToString() + ":" + list_proc.Items[i].SubItems[1].Text + " -c:s " + list_proc.Items[i].SubItems[5].Text + " -metadata:s:s:" + (i_subs).ToString() + " language=" + list_proc.Items[i].SubItems[3].Text + " " + is_default;

                    i_subs = i_subs + 1;
                }
            }

            String AppParam = String.Empty;


            if (list_proc.Items[0].BackColor == Color.LightYellow)
            {
                AppParam = hw_decode + " -loop 1 -r 6 " + inputs + input_map + " -shortest " + "-y ";
            }
            else
            {
                AppParam = hw_decode + " " + inputs + input_map + " -y ";
            }
            String output_file = '\u0022' + destino + "\\" + System.IO.Path.GetFileNameWithoutExtension(file) + "." + mux_ext + '\u0022';

            if (!Directory.Exists(destino))
            {
                Directory.CreateDirectory(destino);
            }

            foreach (DataGridViewRow row in frm_mux_jobs.dg_pr.Rows)
            {
                if (row.Cells[5].Value.ToString() == output_file)
                {
                    MessageBox.Show("Output file name already exists on jobs list. It will be renamed.", "Output file overwrite", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    output_file = '\u0022' + destino + "\\" + System.IO.Path.GetFileNameWithoutExtension(file) + "_mux_" + frm_mux_jobs.dg_pr.RowCount + "." + mux_ext + '\u0022';

                }
            }

            frm_mux_jobs.dg_pr.Rows.Add(frm_mux_jobs.dg_pr.RowCount + 1, Path.GetFileName(list_proc.Items[0].Text), AppParam, list_tracks.Items.Count.ToString(), duracion.Substring(0, 10), output_file);

            try
            {
                Task t = Task.Run(() =>
                {
                    try {
                        Directory.Delete(destino);
                        }
                    catch { }
                });
            }
            catch { }
            btn_mux_show_jobs.Enabled = true;
            if (frm_mux_jobs.dg_pr.RowCount > 0) lbl_mux_jobs.Text = "Jobs: " + frm_mux_jobs.dg_pr.RowCount;
            else lbl_mux_jobs.Text = String.Empty;
        }

        private void add_single_stream_job()
        {
            Pg1.Focus();
            cancel_queue = false;
            Pg1.Text = "0" + System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator + "0%";

            if (list_tracks.Items.Count == 0)
            {
                MessageBox.Show("Tracks list is empty", "No files to be processed", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return;
            }

            if (list_tracks.SelectedIndices.Count != 1)
            {
                MessageBox.Show("Please select one track to be saved", "Multiple tracks selected", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            foreach (ListViewItem file0 in list_tracks.Items)
            {
                if (!File.Exists(file0.Text))
                {
                    MessageBox.Show("File was not found: " + file0.Text, "One file in the track list was not found", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
            }

            if (list_tracks.Items.Count == 0)
            {
                MessageBox.Show("Tracks list is empty", "No files to be processed", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return;
            }
                        
            if (txt_track_format.Text == String.Empty && list_tracks.SelectedItems.Count > 0)
            {
                MessageBox.Show("Track extension is empty. Please select a track format", "No track format selected", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return;
            }

            String is_overw = txt_path_main.Text + "\\" + Path.GetFileNameWithoutExtension(list_tracks.Items[0].Text) + "." + txt_track_format;

            if (is_overw == list_tracks.Items[0].Text)
            {
                MessageBox.Show("You can't overwrite the main file with a saved track. Please select a different extension for saved track", "Overwriting not allowed", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            DateTime time2;
            if (!DateTime.TryParse(ss_time_input.Text, out time2))
            {
                MessageBox.Show("Pre-input seeking selected in Batch processing tab is incorrect. Change it or reset it by double-clicking on it", "Pre-input seeking format error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            //Validated list, start processing
            //Pending duration

            if (dur_ok == false)
            {
                list_pending_dur.Items.Clear();
                foreach (ListViewItem item in listView1.Items)
                {
                    list_pending_dur.Items.Add((ListViewItem)item.Clone());
                }
                BG_Dur.RunWorkerAsync();
                return;
            }
            
            cancel_queue = false;
                        
            //Copy list of tracks for thread processing
            ListView list_proc = new ListView();
            foreach (ListViewItem item in list_tracks.SelectedItems)
            {
                list_proc.Items.Add((ListViewItem)item.Clone());
            }
            //End of copy list of tracks for thread processing

           
            //Duration
            Process probe = new Process();
            probe.StartInfo.FileName = System.IO.Path.Combine(Application.StartupPath, "ffprobe.exe");
            probe.StartInfo.Arguments = "-v error -show_entries format=duration -sexagesimal -of default=noprint_wrappers=1:nokey=1 " + " -i " + '\u0022' + list_proc.Items[0].Text + '\u0022';
            probe.StartInfo.RedirectStandardOutput = true;
            probe.StartInfo.UseShellExecute = false;
            probe.StartInfo.CreateNoWindow = true;
            probe.EnableRaisingEvents = true;
            probe.Start();

            String duracion = probe.StandardOutput.ReadLine();

            probe.WaitForExit();

            if (duracion != null)
            {
                if (duracion.Length >= 7)
                {
                    durat_n = TimeSpan.Parse(duracion).TotalSeconds;
                    total_duration = TimeSpan.Parse(duracion).TotalSeconds;
                }
            }
            else
            {
                total_duration = 0;
            }

            //End duration

            //End

            Pg1.Minimum = 0;
            Pg1.Maximum = 100;
            Pg1.Text = "0" + System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator + "0%";
            lbl_speed.Text = String.Empty;

            List<string> list_lines = new List<string>();
            String mux_ext = txt_track_format.Text;

            // process_glob.StartInfo.Arguments = String.Empty;

                //this.InvokeEx(f => f.pg_current.Value = 0);
                //this.InvokeEx(f => f.pg_current.Refresh());

                String ffm = System.IO.Path.Combine(Application.StartupPath, "ffmpeg.exe");

                String file = list_proc.Items[0].Text;
                String fullPath = file;

                String destino = "";

                if (txt_path_main.Text.Contains(".\\"))
                {
                    destino = file.Substring(0, fullPath.LastIndexOf('\\')) + txt_path_main.Text.Replace(".", String.Empty); ;
                }
                else
                {
                    destino = txt_path_main.Text;
                }

                if (!Directory.Exists(destino))
                {
                    try
                    {
                        Directory.CreateDirectory(destino);
                    }
                    catch (System.Exception excpt)
                    {
                        MessageBox.Show("Error: " + excpt.Message, "Error writing to folder", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        this.Cursor = Cursors.Arrow;
                        Enable_Controls();
                        working = false;
                        return;
                    }
                }

                //Create joint inputs variable
                String inputs = String.Empty;
                foreach (ListViewItem input_item in list_proc.Items)
                {
                    String stream_type = String.Empty;
                    if (input_item.SubItems[2].Text.ToLower().Contains("subtitle"))
                    {
                        stream_type = "s";
                    }

                    if (input_item.SubItems[2].Text.ToLower().Contains("audio"))
                    {
                        stream_type = "a";
                    }
                    if (input_item.SubItems[2].Text.ToLower().Contains("video"))
                    {
                        stream_type = "v";
                    }
                    //{
                    //inputs = inputs + " -sub_charenc UTF-8" + " -i " + '\u0022' + input_item.Text + '\u0022';
                    //}
                    inputs = " -i " + '\u0022' + input_item.Text + '\u0022' + " -map 0:" + input_item.SubItems[1].Text + " -c:" + stream_type + " " + txt_track_param.Text + " ";
                }
            //End create joint inputs variable

            String AppParam = inputs + "-y ";
            String output_file = '\u0022' + destino + "\\" + System.IO.Path.GetFileNameWithoutExtension(file) + "." + mux_ext + '\u0022';
            
            if (!Directory.Exists(destino))
                {
                    Directory.CreateDirectory(destino);
                }
            
            foreach (DataGridViewRow row in frm_mux_jobs.dg_pr.Rows)
            {
                if (row.Cells[5].Value.ToString() == output_file)
                {
                    MessageBox.Show("Output file name already exists on jobs list. It will be renamed.", "Output file overwrite", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    output_file = '\u0022' + destino + "\\" + System.IO.Path.GetFileNameWithoutExtension(file) + "_mux_" + frm_mux_jobs.dg_pr.RowCount + "." + mux_ext + '\u0022';

                }
            }

            frm_mux_jobs.dg_pr.Rows.Add(frm_mux_jobs.dg_pr.RowCount + 1, Path.GetFileName(list_proc.Items[0].Text), AppParam, list_tracks.Items.Count.ToString(), duracion.Substring(0, 10), output_file);

            try
            {
                Task t = Task.Run(() =>
                {
                    try                    {
                        Directory.Delete(destino);
                    }
                    catch { }
                });
            }
            catch { }
            btn_mux_show_jobs.Enabled = true;
            if (frm_mux_jobs.dg_pr.RowCount > 0) lbl_mux_jobs.Text = "Jobs: " + frm_mux_jobs.dg_pr.RowCount;
            else lbl_mux_jobs.Text = String.Empty;            
        }

        private void btn_mux_job_Click(object sender, EventArgs e)
        {
            if (list_tracks.Items.Count == 0)
            {
                MessageBox.Show("Track list is empty", "No track info", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }
            if (list_tracks.Items.Count == 1) add_single_stream_job();
            if (list_tracks.Items.Count > 1) add_video_mux_job();
        }

        private void btn_mux_show_jobs_Click(object sender, EventArgs e)
        {
            Pg1.Focus();            
            frm_mux_jobs.ShowDialog();
            
            if (frm_mux_jobs.dg_pr.RowCount > 0) lbl_mux_jobs.Text = "Jobs: " + frm_mux_jobs.dg_pr.RowCount;
            else
            { 
                lbl_mux_jobs.Text = String.Empty;
                btn_mux_show_jobs.Enabled = false;
            }
            if (frm_mux_jobs.view_logs == true)
            {
                Pg1.Focus();
                String path_log_file = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_batch.log";
                if (!File.Exists(path_log_file))
                {
                    if (no_save_logs == true) MessageBox.Show("No log file was found. Log saving is disabled.", "File not found", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    else
                    if (no_save_logs == false) MessageBox.Show("No log file was found.", "File not found", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
                long length = new System.IO.FileInfo(path_log_file).Length;
                if (length > 20000000)
                {
                    var a = MessageBox.Show("Log size is " + (length / 1024).ToString() + " KB " + "and it could take some time to load. Continue?", "Log size warning", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                    if (a == DialogResult.No) return;
                }

                //Form frm_output = new Form();
                frm_log.Name = "Last session Batch log";
                frm_log.Text = "FFmpeg Batch AV Converter";
                frm_log.Icon = this.Icon;

                frm_log.Height = 675;
                frm_log.Width = 977;
                frm_log.FormBorderStyle = FormBorderStyle.Fixed3D;
                frm_log.MaximizeBox = false;
                frm_log.MinimizeBox = false;

                var fuente_list = new System.Drawing.Font("Microsoft Sans Serif", 9, FontStyle.Regular);

                Rtxt.Parent = frm_log;
                Rtxt.Left = 20;
                Rtxt.Top = 65;
                Rtxt.Height = 525;
                Rtxt.Width = 920;
                Rtxt.Font = fuente_list;

                ContextMenu Rtxt_menu = new ContextMenu();
                Rtxt.ContextMenu = Rtxt_menu;
                MenuItem CopyItem = new MenuItem("Copy");
                Rtxt_menu.MenuItems.Add(CopyItem);
                CopyItem.Click += new EventHandler(CopyAction);

                TextBox titulo = new TextBox();
                titulo.Parent = frm_log;
                titulo.Top = 15;
                titulo.Left = 20;
                titulo.Width = 921;
                titulo.TabIndex = 0;
                var fuente = new System.Drawing.Font("Microsoft Sans Serif", 11, FontStyle.Bold);

                titulo.Font = fuente;
                titulo.BorderStyle = BorderStyle.Fixed3D;
                titulo.TextAlign = HorizontalAlignment.Center;
                titulo.ReadOnly = true;

                titulo.Text = " Last batch log";

                Button boton_ok_ff = new Button();
                boton_ok_ff.Parent = frm_log;
                boton_ok_ff.Left = 20;
                boton_ok_ff.Top = 595;
                boton_ok_ff.Width = 920;
                boton_ok_ff.Height = 27;
                boton_ok_ff.Text = "Opening log file...";
                boton_ok_ff.Click += new EventHandler(boton_ok_ff_Click);

                TextBox titulo2 = new TextBox();
                titulo2.Parent = frm_log;
                titulo2.Top = 42;
                titulo2.Left = 47;
                titulo2.Width = 867;

                var fuente2 = new System.Drawing.Font("Microsoft Sans Serif", 10, FontStyle.Regular);

                titulo2.Font = fuente2;
                titulo2.BorderStyle = BorderStyle.None;
                titulo2.TextAlign = HorizontalAlignment.Center;
                titulo2.ReadOnly = true;

                titulo2.Text = "ff_batch.log";

                frm_log.StartPosition = FormStartPosition.CenterScreen;
                Rtxt.Text = File.ReadAllText(path_log_file);
                boton_ok_ff.Text = "Close window";
                frm_log.ShowDialog();
                frm_log.Refresh();
                return;
            }
            if (frm_mux_jobs.start_jobs == true) start_mux_jobs();
        }

        private void start_mux_jobs()
        {
            Pg1.Focus();
            cancel_queue = false;
            Pg1.Text = "0" + System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator + "0%";
            Disable_Controls();
            txt_remain.Text = "Time remaining: 00h:00m:00s";
            time_n_tasks = 0;
            timer_tasks.Start();
            timer_est_size.Start();

            cancel_queue = false;
            Pg1.Value = 0;
            working = true;

            //Copy list of tracks for thread processing

            DataGridView list_proc = new DataGridView();
            list_proc.Columns.Add("Nr", "");
            list_proc.Columns.Add("Filename", "");
            list_proc.Columns.Add("Parameters", "");
            list_proc.Columns.Add("Streams", "");
            list_proc.Columns.Add("Duration", "");
            list_proc.Columns.Add("Output", "");

            foreach (DataGridViewRow item in frm_mux_jobs.dg_pr.Rows)
            {
                list_proc.Rows.Add(item.Cells[0].Value, item.Cells[1].Value, item.Cells[2].Value, item.Cells[3].Value, item.Cells[4].Value, item.Cells[5].Value);
            }

            //End of copy list of tracks for thread processing

            Double total_duration = 0;
            Double total_prog = 0;

            //Duration
            foreach (DataGridViewRow row in frm_mux_jobs.dg_pr.Rows)
            {
                total_duration = total_duration + TimeSpan.Parse(row.Cells[4].Value.ToString()).TotalSeconds;
            }

            //durat_n = TimeSpan.Parse(row.Cells[5].Value.ToString()).TotalSeconds;
            //End duration


            Pg1.Minimum = 0;
            Pg1.Maximum = 100;
            Pg1.Text = "0" + System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator + "0%";
            lbl_speed.Text = String.Empty;
            lbl_elapsed.Text = "Time elapsed: 00h:00m:00s";

            List<string> list_lines = new List<string>();
            pic_no_errors.Visible = false;
            pic_recording.Visible = false;
            pic_warnings.Visible = false;
            
            int i = 0;
            int rows = list_proc.RowCount - 1;
            process_glob.StartInfo.Arguments = String.Empty;

            groupBox2.Enabled = true;
            foreach (Control p in groupBox2.Controls)
            {
                if (p.Name != lbl_mux_jobs.Name)
                {
                    this.InvokeEx(f => p.Enabled = false);
                }                
            }

            new System.Threading.Thread(() =>
            {
            System.Threading.Thread.CurrentThread.IsBackground = true;

                foreach (DataGridViewRow row in list_proc.Rows)
                {
                    if (cancel_queue == true)
                    {                     
                     
                        working = false;
                        time_est_size = 0;
                        Enable_Controls();

                        this.InvokeEx(f => f.Pg1.Value = 100);
                        this.InvokeEx(f => f.Pg1.Text = "100%");
                        this.InvokeEx(f => f.Pg1.Refresh());

                        process_glob.StartInfo.Arguments = String.Empty;
                        this.InvokeEx(f => this.Text = "FFmpeg Batch AV Converter");
                        this.InvokeEx(f => f.lbl_speed.Text = String.Empty);
                        this.InvokeEx(f => TaskbarProgress.SetState(this.Handle, TaskbarProgress.TaskbarStates.NoProgress));
                        this.InvokeEx(f => f.lbl_est_size.Text = String.Empty);
                        this.InvokeEx(f => f.lbl_bitrate.Text = String.Empty);

                        MessageBox.Show("Queue processing aborted", "Tasks aborted", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                        return;
                    }

                    String remain_time = "0";
                    if (row.IsNewRow == true)
                    {
                        i++;
                        continue;
                    }
                    
                    String destino = row.Cells[5].Value.ToString();
                    destino = destino.Substring(1, destino.Length - 2);
                    destino = Path.GetDirectoryName(destino);
                    String ffm = System.IO.Path.Combine(Application.StartupPath, "ffmpeg.exe");
                    String AppParam = row.Cells[2].Value.ToString();


                    if (!Directory.Exists(destino))
                    {
                        Directory.CreateDirectory(destino);
                    }
                    this.InvokeEx(f => f.lbl_mux_jobs.Text = "Jobs: " + (i + 1).ToString() + " of " + rows.ToString());

                    process_glob.StartInfo.FileName = ffm;
                    process_glob.StartInfo.Arguments = AppParam + " " + row.Cells[5].Value.ToString();
                    valid_prog = false;

                    process_glob.StartInfo.RedirectStandardOutput = true;
                    process_glob.StartInfo.RedirectStandardError = true;
                    process_glob.StartInfo.RedirectStandardInput = true;
                    process_glob.StartInfo.UseShellExecute = false;
                    process_glob.StartInfo.CreateNoWindow = true;
                    process_glob.EnableRaisingEvents = true;

                    process_glob.Start();
                    System.Threading.Thread.Sleep(50);
                    combo_prio.Invoke(new MethodInvoker(delegate
                    {
                        if (combo_prio.SelectedIndex != 2)
                        {
                            Change_mem_prio();
                        }

                    }));

                    valid_prog = true;

                    String err_txt = "";
                    Double interval = 0;
                    Decimal est_bitrate = 0;
                    Decimal est_size = 0;
                    this.InvokeEx(f => f.lbl_speed.Text = String.Empty);
                    Double sec_prog = 0;

                    while (!process_glob.StandardError.EndOfStream)
                    {
                        err_txt = process_glob.StandardError.ReadLine();
                        list_lines.Add(err_txt);

                        if (err_txt.Contains("time=") && err_txt.Contains("time=-") == false)
                        {
                            if (valid_prog == true)
                            {
                                this.InvokeEx(f => durat_n = TimeSpan.Parse(row.Cells[4].Value.ToString()).TotalSeconds);
                                int start_time_index = err_txt.IndexOf("time=") + 5;
                                sec_prog = TimeSpan.Parse(err_txt.Substring(start_time_index, 8)).TotalSeconds;

                                Double percent = (sec_prog * 100 / durat_n);

                                total_prog = total_prog + (sec_prog - interval);
                                interval = sec_prog;
                                int percent2 = Convert.ToInt32(percent);

                                Double percent_tot = (total_prog * 100 / total_duration);
                                int percent_tot_2 = Convert.ToInt32(percent_tot);

                                if (percent_tot_2 <= 100)
                                {
                                    this.InvokeEx(f => f.Pg1.Value = percent_tot_2);
                                    this.InvokeEx(f => f.Pg1.Refresh());

                                    if (Math.Round(percent_tot, 1).ToString().Contains(".") || Math.Round(percent_tot, 1).ToString().Contains(","))
                                    {
                                        this.InvokeEx(f => f.Pg1.Text = Math.Round(percent_tot, 1).ToString() + "%");
                                    }
                                    else
                                    {
                                        this.InvokeEx(f => f.Pg1.Text = Math.Round(percent_tot, 1).ToString() + System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator + "0" + "%");
                                    }

                                    this.InvokeEx(f => TaskbarProgress.SetValue(this.Handle, percent_tot, Pg1.Maximum));
                                }

                                //if (percent2 <= 100)
                                //{
                                //    if (Math.Round(percent, 1).ToString().Contains(".") || Math.Round(percent, 1).ToString().Contains(","))
                                //    {
                                //        this.InvokeEx(f => f.listView1.Items[list_index].SubItems[5].Text = Math.Round(percent, 1).ToString() + "%");

                                //    }
                                //    else
                                //    {
                                //        this.InvokeEx(f => f.listView1.Items[list_index].SubItems[5].Text = Math.Round(percent, 1).ToString() + System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator + "0" + "%");

                                //    }
                                //}

                                if (cancel_queue == false)
                                {
                                    //Estimated remaining time

                                    remain_time = err_txt.Substring(err_txt.LastIndexOf("speed=") + 6, err_txt.Length - err_txt.LastIndexOf("speed=") - 6);
                                    if (time_est_size % 3 == 0) this.InvokeEx(f => f.lbl_speed.Text = "Speed: " + remain_time);
                                    remain_time = remain_time.Replace("x", String.Empty);
                                    Double timing1 = 0;

                                    if (System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator == ",")
                                    {
                                        timing1 = Math.Round(Double.Parse(remain_time.Replace(".", ",")), 2);
                                    }
                                    else
                                    {
                                        timing1 = Math.Round(Double.Parse(remain_time), 2);
                                    }

                                    Decimal timing = (decimal)timing1;
                                    Decimal total_dur_dec = Convert.ToDecimal(total_duration);
                                    Decimal total_prog_dec = Convert.ToDecimal(total_prog);
                                    Decimal remain_secs = 0;
                                    if (timing > 0)
                                    {
                                        remain_secs = (decimal)(total_dur_dec - total_prog_dec) / timing;
                                    }

                                    if (remain_secs > 60)
                                    {
                                        remain_secs = remain_secs + 60;
                                    }

                                    String remain_from_secs = "";

                                    TimeSpan t = TimeSpan.FromSeconds(Convert.ToDouble(remain_secs));
                                    remain_from_secs = string.Format("{0:D2}h:{1:D2}",
                                       t.Hours,
                                      t.Minutes);

                                    if (remain_secs >= 43200)
                                    {
                                        this.InvokeEx(f => f.txt_remain.Text = "Time remaining: " + Math.Round(remain_secs / 3600).ToString() + " hours");
                                        this.InvokeEx(f => this.Text = "Enc. " + Pg1.Text + " / " + "Est. " + Math.Round(remain_secs / 3600).ToString() + " hours");
                                    }

                                    if (remain_secs >= 3600 && remain_secs < 43200)
                                    {
                                        this.InvokeEx(f => f.txt_remain.Text = "Time remaining: " + remain_from_secs + " min");
                                        this.InvokeEx(f => this.Text = "Enc. " + Pg1.Text + " / " + "Est. " + remain_from_secs + " min");
                                    }

                                    if (remain_secs < 3600 && remain_secs >= 600)
                                    {
                                        this.InvokeEx(f => f.txt_remain.Text = "Time remaining: " + remain_from_secs.Substring(remain_from_secs.LastIndexOf(":") + 1, 2) + " minutes");
                                        this.InvokeEx(f => this.Text = "Enc. " + Pg1.Text + " / " + "Est. " + remain_from_secs.Substring(remain_from_secs.LastIndexOf(":") + 1, 2) + " min");
                                    }
                                    if (remain_secs < 600 && remain_secs >= 120)
                                    {
                                        this.InvokeEx(f => f.txt_remain.Text = "Time remaining: " + remain_from_secs.Substring(remain_from_secs.LastIndexOf(":") + 2, 1) + " minutes");
                                        this.InvokeEx(f => this.Text = "Enc. " + Pg1.Text + " / " + "Est. " + remain_from_secs.Substring(remain_from_secs.LastIndexOf(":") + 2, 1) + " min");
                                    }

                                    if (remain_secs <= 59 && remain_secs != 0)
                                    {
                                        this.InvokeEx(f => f.txt_remain.Text = "Time remaining: " + Convert.ToInt16(Math.Abs(remain_secs)) + " seconds");
                                        this.InvokeEx(f => this.Text = "Enc. " + Pg1.Text + " / " + "Est. " + Convert.ToInt16(Math.Abs(remain_secs)) + " s");
                                    }
                                    if (remain_secs == 0)
                                    {
                                        this.InvokeEx(f => f.txt_remain.Text = "Time remaining: " + "About to finish");
                                        this.InvokeEx(f => this.Text = "Enc. " + Pg1.Text);

                                    }
                                }
                                //End remaining time

                                //Estimated size and bitrate

                                String read_size = String.Empty;
                                if (err_txt.Contains("size=") && (time_est_size % 3 == 0))
                                {
                                    int size_index = err_txt.IndexOf("size=") + 5;
                                    read_size = err_txt.Substring(size_index, 8);
                                    if (Convert.ToDecimal(sec_prog) != 0)
                                    {
                                        est_bitrate = (Math.Round(Convert.ToDecimal(read_size) * 8 / Convert.ToDecimal(sec_prog), 0));
                                    }
                                    else
                                    {
                                        est_bitrate = 0;
                                    }

                                    if (Convert.ToDecimal(read_size) > 1 && time_n_tasks > 1)
                                    {
                                        if (est_bitrate < 9999)
                                        {
                                            if (est_bitrate > 48)
                                            {
                                                this.InvokeEx(f => f.lbl_bitrate.Text = "Avg. bitrate: " + est_bitrate + " Kb/s");
                                            }
                                            else
                                            {
                                                this.InvokeEx(f => f.lbl_bitrate.Text = "Avg. bitrate: ");
                                            }
                                        }
                                        else
                                        {
                                            this.InvokeEx(f => f.lbl_bitrate.Text = "Avg. bitrate: " + (Math.Round(est_bitrate / 1000, 0)) + " Mb/s");
                                        }
                                        //Estimated size
                                        est_size = Convert.ToDecimal(durat_n) * est_bitrate / 8;

                                        if (est_size > 1000000)
                                        {
                                            this.InvokeEx(f => f.lbl_est_size.Text = "Estimated size: " + (Math.Round(est_size / 1000000, 1)).ToString() + " GB");
                                        }
                                        else
                                        {
                                            if (Math.Round(est_size / 1000, 0) > 0)
                                            {
                                                this.InvokeEx(f => f.lbl_est_size.Text = "Estimated size: " + (Math.Round(est_size / 1000, 0)).ToString() + " MB");
                                            }
                                            else
                                            {
                                                this.InvokeEx(f => f.lbl_est_size.Text = "Estimated size: ");
                                            }
                                        }
                                    }

                                    this.InvokeEx(f => f.lbl_est_size.Refresh());
                                }
                            }
                        }
                    }
                    
                    process_glob.WaitForExit();
                    process_glob.StartInfo.Arguments = String.Empty;

                    if (process_glob.ExitCode == 0)
                    {

                        if (cancel_queue == false) this.InvokeEx(f => f.frm_mux_jobs.dg_pr.Rows[row.Index].DefaultCellStyle.BackColor = Color.LightGreen);
                        else this.InvokeEx(f => f.frm_mux_jobs.dg_pr.Rows[row.Index].DefaultCellStyle.BackColor = Color.LightSalmon);                        
                    }
                    else
                    {
                        this.InvokeEx(f => f.frm_mux_jobs.dg_pr.Rows[row.Index].DefaultCellStyle.BackColor = Color.LightSalmon);
                        errors_enc = errors_enc + 1;
                    }

                    i++;
                    
                    if (i == list_proc.RowCount - 1)
                    {                        
                        this.InvokeEx(f => this.Text = "FFmpeg Batch AV Converter");
                        this.InvokeEx(f => f.lbl_mux_jobs.Text = "Jobs: " + list_proc.RowCount.ToString());
                        this.InvokeEx(f => f.Pg1.Value = 100);
                        this.InvokeEx(f => f.Pg1.Text = "100%");
                        this.InvokeEx(f => f.Pg1.Refresh());

                        process_glob.StartInfo.Arguments = String.Empty;
                        this.InvokeEx(f => f.lbl_speed.Text = String.Empty);
                        this.InvokeEx(f => TaskbarProgress.SetState(this.Handle, TaskbarProgress.TaskbarStates.NoProgress));
                        this.InvokeEx(f => f.lbl_est_size.Text = String.Empty);
                        this.InvokeEx(f => f.lbl_bitrate.Text = String.Empty);


                        list_lines.Add("");
                        list_lines.Add("---------------------End of " + Path.GetFileName(row.Cells[1].Value.ToString()) + " log-------------------------------");
                        list_lines.Add("");

                        working = false;
                        //
                        if (no_save_logs == false)
                        {
                            string[] array_err = list_lines.ToArray();
                            String path = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_batch.log";

                            System.IO.StreamWriter SaveFile = new System.IO.StreamWriter(path);
                            SaveFile.WriteLine("FFmpeg log sesion: " + System.DateTime.Now);
                            SaveFile.WriteLine("-------------------------------");
                            foreach (String item in array_err)
                            {
                                SaveFile.WriteLine(item);
                            }
                            SaveFile.Close();

                            File.AppendAllText(path, "-----------------------");
                            File.AppendAllText(path, Environment.NewLine + "END OF LOG FILE");
                            System.IO.FileInfo fileInfo = new System.IO.FileInfo(path);

                            var bytes = fileInfo.Length;

                            var kilobytes = (double)bytes / 1024;
                            var megabytes = kilobytes / 1024;
                            var gigabytes = megabytes / 1024;

                            //Format size view
                            String size = "";
                            String separator = ".";

                            if (bytes > 1000000000)
                            {
                                if (gigabytes.ToString().Contains("."))
                                {
                                    separator = ".";
                                }
                                else
                                {
                                    separator = ",";
                                }

                                String gigas = gigabytes.ToString();
                                if (gigas.Length >= 5)
                                {
                                    gigas = gigas.Substring(0, gigas.LastIndexOf(separator) + 3);
                                    size = (gigas + " GB");
                                }
                                else
                                {
                                    size = (gigas + " GB");
                                }
                            }

                            if (bytes >= 1048576 && bytes <= 1000000000)
                            {
                                if (megabytes.ToString().Contains("."))
                                {
                                    separator = ".";
                                }
                                else
                                {
                                    separator = ",";
                                }
                                String megas = megabytes.ToString();
                                if (megas.Length > 5)
                                {
                                    megas = megas.Substring(0, megas.LastIndexOf(separator));
                                    size = (megas + " MB");
                                }
                                else
                                {
                                    size = (megas + " MB");
                                }
                            }

                            if (bytes >= 1024 && bytes < 1048576)

                            {
                                if (kilobytes.ToString().Contains("."))
                                {
                                    separator = ".";
                                }
                                else
                                {
                                    separator = ",";
                                }

                                String kbs = kilobytes.ToString();
                                if (kbs.Length >= 5)
                                {
                                    kbs = kbs.Substring(0, kbs.LastIndexOf(separator));
                                    size = (kbs + " KB");
                                }
                                else
                                {
                                    size = (kbs + " KB");
                                }
                            }
                            if (bytes > -1 && bytes < 1024)
                            {
                                String bits = bytes.ToString();
                                size = (bits + " Bytes");
                            }

                            //End Format size view
                            File.AppendAllText(path, Environment.NewLine + "LOG SIZE: " + size);

                            //End save log
                        }

                        Enable_Controls();
                        timer_est_size.Stop();
                        time_est_size = 0;

                        if (cancel_queue == false)
                        {
                            if (chkshut.Checked)
                            {
                                if (errors_enc == 0)
                                {
                                    this.InvokeEx(f => f.groupBox2.Enabled = true);
                                    foreach (Control ct in groupBox2.Controls)
                                    {
                                        this.InvokeEx(f => ct.Enabled = false);
                                    }
                                    auto_shut();
                                    return;
                                }
                            }

                            //End shutdown check
                            else
                            {
                                if (play_on_end == true) play_end();
                                if (errors_enc == 0) this.InvokeEx(f => f.pic_no_errors.Visible = true);
                                else
                                {
                                    this.InvokeEx(f => f.pic_no_errors.Visible = false);
                                    this.InvokeEx(f => f.pic_recording.Visible = false);
                                    this.InvokeEx(f => toolT002.SetToolTip(this.pic_warnings, "There were " + errors_enc.ToString() + " error(s) during last session"));
                                    this.InvokeEx(f => f.pic_warnings.Visible = true);
                                }

                                if (Form.ActiveForm == null)
                                {
                                    if (errors_enc == 0)
                                    {
                                        notifyIcon1.Visible = true;
                                        notifyIcon1.BalloonTipText = "Batch Jobs multiplexing successfully completed";
                                        notifyIcon1.BalloonTipIcon = ToolTipIcon.Info;
                                        notifyIcon1.BalloonTipTitle = "Jobs Multiplexing complete";
                                        notifyIcon1.ShowBalloonTip(0);
                                    }
                                    else
                                    {
                                        notifyIcon1.Visible = true;
                                        notifyIcon1.BalloonTipText = "Batch Jobs multiplexing completed with errors";
                                        notifyIcon1.BalloonTipIcon = ToolTipIcon.Warning;
                                        notifyIcon1.BalloonTipTitle = "Jobs Multiplexing complete";
                                        notifyIcon1.ShowBalloonTip(0);
                                    }
                                }

                                if (checkBox3.Checked)
                                {
                                    if (Directory.GetFiles(destino).Length != 0)
                                    {
                                        destino = destino.Replace("\\\\", "\\");
                                        Process open_processed = new Process();
                                        open_processed.StartInfo.FileName = "explorer.exe";
                                        open_processed.StartInfo.Arguments = '\u0022' + destino + '\u0022';
                                        open_processed.Start();
                                    }
                                    else
                                    {
                                        if (Directory.Exists(destino))
                                        {
                                            System.IO.Directory.Delete(destino);
                                        }
                                    }
                                }
                            }
                        }
                        else
                        {
                            if (cancel_queue == false)
                            {
                                this.InvokeEx(f => f.Pg1.Text = "100%");
                                this.InvokeEx(f => MessageBox.Show("Multiplexing aborted", "Aborted", MessageBoxButtons.OK, MessageBoxIcon.Error));
                            }
                        }
                    }
                }
            }).Start();        
        }

        private void menu_extract_images_Click(object sender, EventArgs e)
        {
            AeroWizard5 wiz_img = new AeroWizard5();
            wiz_img.pr1_first_params = "";
            wiz_img.StartPosition = FormStartPosition.CenterParent;
            wiz_img.list_count = listView1.Items.Count;
            wiz_img.ShowDialog();
            if (wiz_img.canceled == true) return;
               
            
            if (wiz_img.save_preset == false)
            {
                combo_presets.Text = "New unsaved preset";
                txt_parameters.Text = wiz_img.pr1_first_params;
                txt_format.Text = "nul";
            }
            else
            {
                combo_presets.SelectedIndex = combo_presets.Items.Count - 1;
                combo_presets.Text = wiz_img.txt_preset_name.Text;
                txt_parameters.Text = wiz_img.pr1_first_params;
                txt_format.Text = "nul";
                btn_save_preset.PerformClick();
            }
            if (wiz_img.start_enc == true) button2.PerformClick();
        }


        private void Form1_Resize(object sender, EventArgs e)
        {
            resize();
        }

        private void txt_path_main_TextChanged(object sender, EventArgs e)
        {            
            txt_path_main.BackColor = Color.White;
            btn_save_path.Enabled = true;
        }

        private void txt_path_mux_TextChanged(object sender, EventArgs e)
        {
            txt_path_main.Text = txt_path_mux.Text;
        }

        void refresh_vcodec_col()
        {
            Boolean already_vcodec = false;
            foreach (ColumnHeader head_col in listView1.Columns)
            {
                if (head_col.Text.Contains("Video codec"))
                {
                    already_vcodec = true;
                    break;
                }
            }
            if (already_vcodec == false)
            {
                ColumnHeader columnHeader = listView1.Columns.Add("Video codec", 100, HorizontalAlignment.Left);
                listView1.Columns[0].Width = listView1.Columns[0].Width - 100;
            }
            pre_add_col();
            Task tt = Task.Run(() =>
            {
                BG_Add_col_vcodec.RunWorkerAsync();
            });
            tt.Wait();
            
        }

        void refresh_acodec_col()
        {
            Boolean already_acodec = false;
            foreach (ColumnHeader head_col in listView1.Columns)
            {
                if (head_col.Text.Contains("Audio codec"))
                {
                    already_acodec = true;
                    break;
                }
            }
            if (already_acodec == false)
            {
                ColumnHeader columnHeader = listView1.Columns.Add("Audio codec", 100, HorizontalAlignment.Left);
                listView1.Columns[0].Width = listView1.Columns[0].Width - 100;
            }
            pre_add_col();
            BG_Add_col_Acodec.RunWorkerAsync();
        }


        void refresh_resol_col()
        {
            Boolean already_added = false;
            col_width = 0;
            foreach (ColumnHeader head_col in listView1.Columns)
            {
                if (head_col.Text.Contains("Width"))
                {
                    col_width = head_col.Index;
                    already_added = true;
                    break;
                }
            }
            if (already_added == false)
            {
                ColumnHeader columnHeader = listView1.Columns.Add("Width", 50, HorizontalAlignment.Center);
                ColumnHeader columnHeader2 = listView1.Columns.Add("Height", 50, HorizontalAlignment.Center);
                listView1.Columns[0].Width = listView1.Columns[0].Width - 100;
            }
            foreach (ColumnHeader head_col in listView1.Columns)
            {
                if (head_col.Text.Contains("Width"))
                {
                    col_width = head_col.Index;
                    break;
                }
            }
                    pre_add_col();
           
                BG_add_col_res.RunWorkerAsync();            
        }


        private void btn_add_col_Click(object sender, EventArgs e)
        {
            Pg1.Focus();
                        
            Form17 frm_add_col = new Form17();
            
            frm_add_col.ShowDialog();
            if (frm_add_col.canceled == true) return;
            if (frm_add_col.to_remove == false)
            {
                selected_add_col = frm_add_col.cb_col.SelectedItem.ToString();
                
                if (frm_add_col.cb_col.SelectedIndex == 0)
                {
                    Boolean already_added = false;
                    col_width = 0;
                    foreach (ColumnHeader head_col in listView1.Columns)
                    {
                        if (head_col.Text.Contains("Width"))
                        {
                            col_width = head_col.Index;
                            already_added = true;                           
                            break;
                        }
                    }
                    if (already_added == false)
                    {
                        ColumnHeader columnHeader = listView1.Columns.Add("Width", 50, HorizontalAlignment.Center);
                        ColumnHeader columnHeader2 = listView1.Columns.Add("Height", 50, HorizontalAlignment.Center);
                        listView1.Columns[0].Width = listView1.Columns[0].Width - 100;
                    }
                    foreach (ColumnHeader head_col in listView1.Columns)
                    {
                        if (head_col.Text.Contains("Width"))
                        {
                            col_width = head_col.Index;                            
                            break;
                        }
                    }
                    pre_add_col();
                    BG_add_col_res.RunWorkerAsync();
                }
                if (frm_add_col.cb_col.SelectedIndex == 1)
                {
                    Boolean already_vcodec = false;
                    foreach (ColumnHeader head_col in listView1.Columns)
                    {
                        if (head_col.Text.Contains("Video codec"))
                        {
                            already_vcodec = true;
                            break;
                        }
                    }
                    if (already_vcodec == false)
                    {
                        ColumnHeader columnHeader = listView1.Columns.Add("Video codec", 100, HorizontalAlignment.Left);
                        listView1.Columns[0].Width = listView1.Columns[0].Width - 100;
                    }
                    pre_add_col();
                    BG_Add_col_vcodec.RunWorkerAsync();
                }
                if (frm_add_col.cb_col.SelectedIndex == 2)
                {
                    Boolean already_vcodec = false;
                    foreach (ColumnHeader head_col in listView1.Columns)
                    {
                        if (head_col.Text.Contains("Audio codec"))
                        {
                            already_vcodec = true;
                            break;
                        }
                    }
                    if (already_vcodec == false)
                    {
                        ColumnHeader columnHeader = listView1.Columns.Add("Audio codec", 100, HorizontalAlignment.Center);
                        listView1.Columns[0].Width = listView1.Columns[0].Width - 100;
                    }
                    pre_add_col();
                    BG_Add_col_Acodec.RunWorkerAsync();
                }
            }
            else
            {
                remove_last_col();
            }

            if (listView1.Columns.Count >= 10)
            {
                cti1_cols.Enabled = false;
            }
            if (listView1.Columns.Count <= 10 && listView1.Columns.Count >= 6)
            {
                cti1_cols.Enabled = true;
            }
            if (listView1.Columns.Count > 6)
            {
                cti_remove_col.Enabled = true;
            }
            else
            {
                cti_remove_col.Enabled = false;
            }
        }

        private void pre_add_col()
        {
            listView1.Invoke(new MethodInvoker(delegate
            {
            if (listView1.Items.Count == 0 || tabControl1.SelectedIndex != 0) return;
            }));
        }

        private void BG_add_col_res_DoWork(object sender, DoWorkEventArgs e)
        {            
                Disable_Controls();
                this.InvokeEx(f => f.btn_abort_all.Enabled = false);
                this.InvokeEx(f => f.btn_pause.Enabled = false);
                this.InvokeEx(f => f.pg_adding.Value = 0);
                this.InvokeEx(f => f.pg_adding.Maximum = listView1.Items.Count);
                this.InvokeEx(f => f.pg_adding.Visible = true);
                this.InvokeEx(f => f.pg_adding.Enabled = true);
                this.InvokeEx(f => f.txt_adding_p.Visible = true);
                this.InvokeEx(f => f.txt_adding_p.Enabled = true);
                this.InvokeEx(f => f.txt_adding_p.Refresh());
                this.InvokeEx(f => f.LB_Wait.Visible = true);
                this.InvokeEx(f => f.LB_Wait.Enabled = true);                
                this.InvokeEx(f => f.pg_adding.Value = 0);
                this.InvokeEx(f => f.pg_adding.Minimum = 0);
                this.InvokeEx(f => f.pg_adding.Maximum = listView1.Items.Count);
                this.InvokeEx(f => f.btn_cancel_add.Visible = true);
                this.InvokeEx(f => f.btn_cancel_add.Enabled = true);
                canceled_file_adding = false;

                
                int i = 0;
            listView1.Invoke(new MethodInvoker(delegate
            {
                listView1.BeginUpdate();
                foreach (ListViewItem item in listView1.Items)
                {
                    String itfull = item.SubItems[1].Text + "\\" + item.Text;

                    Boolean has_streams = false;
                    Boolean has_video = false;

                    if (canceled_file_adding == false)
                    {
                        String ff_frames = String.Empty;
                        Process get_frames = new Process();
                        get_frames.StartInfo.FileName = System.IO.Path.Combine(Application.StartupPath, "ffprobe.exe");
                        String ffprobe_frames = " -v error -select_streams v:0 -show_entries stream=width,height -of csv=s=x:p=0";
                        get_frames.StartInfo.Arguments = ffprobe_frames + " " + '\u0022' + itfull + '\u0022';
                        get_frames.StartInfo.RedirectStandardOutput = true;
                        get_frames.StartInfo.RedirectStandardError = true;
                        get_frames.StartInfo.UseShellExecute = false;
                        get_frames.StartInfo.CreateNoWindow = true;
                        get_frames.EnableRaisingEvents = true;
                        get_frames.Start();
                        ff_frames = get_frames.StandardOutput.ReadLine();
                        get_frames.WaitForExit();
                        if (get_frames.ExitCode == 0)
                        {
                            if (ff_frames != null)
                            {
                                has_streams = true;
                                if (ff_frames.Length == 0)
                                {
                                    ff_frames = "-";
                                }
                            }
                            else
                            {
                                ff_frames = "-";
                            }
                        }
                        else
                        {
                            ff_frames = "-";
                        }

                        i++;
                                               
                            if (ff_frames.Length > 1 && ff_frames.Contains("x") == true)
                            {
                                this.InvokeEx(f => listView1.Items[item.Index].SubItems.Add(ff_frames.Substring(0, ff_frames.IndexOf("x"))));
                                this.InvokeEx(f => listView1.Items[item.Index].SubItems.Add(ff_frames.Substring(ff_frames.IndexOf("x") + 1, ff_frames.Length - ff_frames.IndexOf("x") - 1)));
                            }
                            else
                            {
                                this.InvokeEx(f => listView1.Items[item.Index].SubItems.Add("-"));
                                this.InvokeEx(f => listView1.Items[item.Index].SubItems.Add("-"));
                            }
                        //}                        

                        this.InvokeEx(f => f.LB_Wait.Text = "Adding column info...");
                        this.InvokeEx(f => f.LB_Wait.Refresh());
                        this.InvokeEx(f => f.pg_adding.Value = pg_adding.Value + 1);
                        this.InvokeEx(f => f.pg_adding.Refresh());
                        this.InvokeEx(f => f.txt_adding_p.Text = (i * 100 / pg_adding.Maximum).ToString() + "%");
                        this.InvokeEx(f => f.txt_adding_p.Refresh());
                    }
                   
                    else
                    {
                        timer_adding.Stop();
                        this.InvokeEx(f => f.txt_add_remain.Text = String.Empty);
                        this.InvokeEx(f => f.txt_add_remain.Visible = false);
                        this.InvokeEx(f => f.txt_add_remain.Refresh());
                        break;
                    }
                }
                this.InvokeEx(f => f.listView1.EndUpdate());
            }));

            timer_adding.Stop();
                this.InvokeEx(f => f.txt_add_remain.Text = String.Empty);
                this.InvokeEx(f => f.txt_add_remain.Visible = false);
                this.InvokeEx(f => f.txt_add_remain.Refresh());
                this.InvokeEx(f => f.LB_Wait.Text = "");
           
        }

        private void BG_add_col_res_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            end_bg_filters();
        }

        private void BG_Add_col_vcodec_DoWork(object sender, DoWorkEventArgs e)
        {
            Disable_Controls();
            this.InvokeEx(f => f.btn_abort_all.Enabled = false);
            this.InvokeEx(f => f.btn_pause.Enabled = false);
            this.InvokeEx(f => f.pg_adding.Value = 0);
            this.InvokeEx(f => f.pg_adding.Maximum = listView1.Items.Count);
            this.InvokeEx(f => f.pg_adding.Visible = true);
            this.InvokeEx(f => f.pg_adding.Enabled = true);
            this.InvokeEx(f => f.txt_adding_p.Visible = true);
            this.InvokeEx(f => f.txt_adding_p.Enabled = true);
            this.InvokeEx(f => f.txt_adding_p.Refresh());
            this.InvokeEx(f => f.LB_Wait.Visible = true);
            this.InvokeEx(f => f.LB_Wait.Enabled = true);
            this.InvokeEx(f => f.pg_adding.Value = 0);
            this.InvokeEx(f => f.pg_adding.Minimum = 0);
            this.InvokeEx(f => f.pg_adding.Maximum = listView1.Items.Count);
            this.InvokeEx(f => f.btn_cancel_add.Visible = true);
            this.InvokeEx(f => f.btn_cancel_add.Enabled = true);
            canceled_file_adding = false;

            this.InvokeEx(f => f.listView1.BeginUpdate());
            int i = 0;
                        
            
            foreach (ListViewItem item in list_global_proc.Items)
            {
                String itfull = item.SubItems[1].Text + "\\" + item.Text;
                List<string> lines_ouput = new List<string>();

                Boolean has_streams = false;
                Boolean has_video = false;

                if (canceled_file_adding == false)
                {
                    Process ff_str = new Process();
                    ff_str.StartInfo.FileName = System.IO.Path.Combine(Application.StartupPath, "ffmpeg.exe");
                    ff_str.StartInfo.Arguments = " -i " + '\u0022' + itfull + '\u0022' + " -hide_banner";
                    
                    ff_str.StartInfo.RedirectStandardOutput = true;
                    ff_str.StartInfo.RedirectStandardError = true;
                    ff_str.StartInfo.UseShellExecute = false;
                    ff_str.StartInfo.CreateNoWindow = true;
                    ff_str.EnableRaisingEvents = true;
                    ff_str.Start();
                    String stream = "";
                    while (!ff_str.StandardError.EndOfStream)
                    {
                        stream = ff_str.StandardError.ReadLine();
                        lines_ouput.Add(stream);

                    }
                    ff_str.WaitForExit();
                    String ff_frames = "";
                    foreach (String line in lines_ouput)
                    {                        
                        if (line.ToLower().Contains("stream #") && line.ToLower().Contains("video"))
                        {                            
                            int n = line.Length - line.IndexOf("Video: ");
                            int m = line.Length - line.IndexOf(",");
                            ff_frames = line.Substring(line.IndexOf("Video: ") + 7, n - m - 7);
                            ff_frames = av_col_v(ff_frames);
                        }                      
                    }

                    i++;
                                        
                        if (ff_frames.Length > 0)
                        {
                            this.InvokeEx(f => listView1.Items[item.Index].SubItems.Add(ff_frames));

                        }
                        else
                        {
                            this.InvokeEx(f => listView1.Items[item.Index].SubItems.Add("-"));                            
                        }                  

                    this.InvokeEx(f => f.LB_Wait.Text = "Adding column info...");
                    this.InvokeEx(f => f.LB_Wait.Refresh());
                    
                       this.InvokeEx(f => f.pg_adding.Value = pg_adding.Value + 1);
                        this.InvokeEx(f => f.pg_adding.Refresh());
                       this.InvokeEx(f => f.txt_adding_p.Text = (i * 100 / pg_adding.Maximum).ToString() + "%");
                    
                    this.InvokeEx(f => f.txt_adding_p.Refresh());
                }

                else
                {
                    timer_adding.Stop();
                    this.InvokeEx(f => f.txt_add_remain.Text = String.Empty);
                    this.InvokeEx(f => f.txt_add_remain.Visible = false);
                    this.InvokeEx(f => f.txt_add_remain.Refresh());
                    break;
                }
            }
            this.InvokeEx(f => f.listView1.EndUpdate());
            timer_adding.Stop();
            this.InvokeEx(f => f.txt_add_remain.Text = String.Empty);
            this.InvokeEx(f => f.txt_add_remain.Visible = false);
            this.InvokeEx(f => f.txt_add_remain.Refresh());
            this.InvokeEx(f => f.LB_Wait.Text = "");
        }

        private void BG_Add_col_vcodec_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            end_bg_filters();
        }

        
        private void listView1_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Control && e.KeyCode == Keys.A)
            {
                foreach (ListViewItem item in listView1.Items) item.Selected = true;
                return;
            }
        }

        private void BG_Add_col_Acodec_DoWork(object sender, DoWorkEventArgs e)
        {
            Disable_Controls();
            this.InvokeEx(f => f.btn_abort_all.Enabled = false);
            this.InvokeEx(f => f.btn_pause.Enabled = false);
            this.InvokeEx(f => f.pg_adding.Value = 0);
            this.InvokeEx(f => f.pg_adding.Maximum = listView1.Items.Count);
            this.InvokeEx(f => f.pg_adding.Visible = true);
            this.InvokeEx(f => f.pg_adding.Enabled = true);
            this.InvokeEx(f => f.txt_adding_p.Visible = true);
            this.InvokeEx(f => f.txt_adding_p.Enabled = true);
            this.InvokeEx(f => f.txt_adding_p.Refresh());
            this.InvokeEx(f => f.LB_Wait.Visible = true);
            this.InvokeEx(f => f.LB_Wait.Enabled = true);
            this.InvokeEx(f => f.pg_adding.Value = 0);
            this.InvokeEx(f => f.pg_adding.Minimum = 0);
            this.InvokeEx(f => f.pg_adding.Maximum = listView1.Items.Count);
            this.InvokeEx(f => f.btn_cancel_add.Visible = true);
            this.InvokeEx(f => f.btn_cancel_add.Enabled = true);
            canceled_file_adding = false;

            this.InvokeEx(f => f.listView1.BeginUpdate());
            int i = 0;


            foreach (ListViewItem item in list_global_proc.Items)
            {
                String itfull = item.SubItems[1].Text + "\\" + item.Text;
                List<string> lines_ouput = new List<string>();

                Boolean has_streams = false;
                Boolean has_video = false;

                if (canceled_file_adding == false)
                {
                    Process ff_str = new Process();
                    ff_str.StartInfo.FileName = System.IO.Path.Combine(Application.StartupPath, "ffmpeg.exe");
                    ff_str.StartInfo.Arguments = " -i " + '\u0022' + itfull + '\u0022' + " -hide_banner";

                    ff_str.StartInfo.RedirectStandardOutput = true;
                    ff_str.StartInfo.RedirectStandardError = true;
                    ff_str.StartInfo.UseShellExecute = false;
                    ff_str.StartInfo.CreateNoWindow = true;
                    ff_str.EnableRaisingEvents = true;
                    ff_str.Start();
                    String stream = "";
                    while (!ff_str.StandardError.EndOfStream)
                    {
                        stream = ff_str.StandardError.ReadLine();
                        lines_ouput.Add(stream);

                    }
                    ff_str.WaitForExit();
                    String ff_frames = "";                    
                    foreach (String line in lines_ouput)
                    {
                        if (line.ToLower().Contains("stream #0:0") && line.ToLower().Contains("audio"))
                        {
                            int n = line.Length - line.IndexOf("Audio: ");
                            int m = line.Length - line.IndexOf(",");
                            ff_frames = line.Substring(line.IndexOf("Audio: ") + 7, n - m - 7);
                            ff_frames = av_col(ff_frames);
                        }
                        else
                        {
                            if (line.ToLower().Contains("stream #0:1") && line.ToLower().Contains("audio"))
                            {
                                int n = line.Length - line.IndexOf("Audio: ");
                                int m = line.Length - line.IndexOf(",");
                                ff_frames = line.Substring(line.IndexOf("Audio: ") + 7, n - m - 7);
                                ff_frames = av_col(ff_frames);
                            }
                        }                                       
                    }

                    i++;

                    if (ff_frames.Length > 0)
                    {
                        this.InvokeEx(f => listView1.Items[item.Index].SubItems.Add(ff_frames));

                    }
                    else
                    {
                        this.InvokeEx(f => listView1.Items[item.Index].SubItems.Add("-"));                        
                    }

                    this.InvokeEx(f => f.LB_Wait.Text = "Adding column info...");
                    this.InvokeEx(f => f.LB_Wait.Refresh());
                    this.InvokeEx(f => f.pg_adding.Value = pg_adding.Value + 1);
                    this.InvokeEx(f => f.pg_adding.Refresh());
                    this.InvokeEx(f => f.txt_adding_p.Text = (i * 100 / pg_adding.Maximum).ToString() + "%");
                    this.InvokeEx(f => f.txt_adding_p.Refresh());
                }

                else
                {
                    timer_adding.Stop();
                    this.InvokeEx(f => f.txt_add_remain.Text = String.Empty);
                    this.InvokeEx(f => f.txt_add_remain.Visible = false);
                    this.InvokeEx(f => f.txt_add_remain.Refresh());
                    break;
                }
            }
            this.InvokeEx(f => f.listView1.EndUpdate());
            timer_adding.Stop();
            this.InvokeEx(f => f.txt_add_remain.Text = String.Empty);
            this.InvokeEx(f => f.txt_add_remain.Visible = false);
            this.InvokeEx(f => f.txt_add_remain.Refresh());
            this.InvokeEx(f => f.LB_Wait.Text = "");

        }

        private void BG_Add_col_Acodec_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            end_bg_filters();
        }

        private void cti1_cols_Click(object sender, EventArgs e)
        {
            btn_add_col.PerformClick();
        }

        private void listView1_ColumnWidthChanged(object sender, ColumnWidthChangedEventArgs e)
        {            
                if (listView1.Columns[e.ColumnIndex].Width < _minimumColumnWidth)
                {
                    if (e.ColumnIndex == 5)
                    {
                    listView1.Columns[e.ColumnIndex].Width = 104;
                    }
                    if (e.ColumnIndex == 0)
                    {
                    listView1.Columns[e.ColumnIndex].Width = 204;
                    }
                if (e.ColumnIndex == 1)
                {
                    listView1.Columns[e.ColumnIndex].Width = 204;
                }

                if (e.ColumnIndex != 5 && e.ColumnIndex != 0 && e.ColumnIndex != 1)
                    {
                    listView1.Columns[e.ColumnIndex].Width = _minimumColumnWidth;
                    }
                }         
        }

        private void cti_remove_col_Click(object sender, EventArgs e)
        {
            remove_last_col();
        }

        private void remove_last_col()
        {
            Boolean has_resol = false;
            if (listView1.Columns.Count > 6)
            {                
                foreach (ColumnHeader col in listView1.Columns)
                {                 
                        if (col.Index == listView1.Columns.Count - 1)
                        {
                        if (col.Text.Contains("Height")) has_resol = true;
                        listView1.Columns.Remove(col);
                        }
                    }
                }

            if (has_resol == true)
            {
                foreach (ColumnHeader col in listView1.Columns)
                {
                    if (col.Index == listView1.Columns.Count - 1)
                    {                        
                        listView1.Columns.Remove(col);
                    }
                }
            }
            refresh_full();
    }

        private void chk_trim2_CheckedChanged(object sender, EventArgs e)
        {
            String f_trim = String.Empty;
            if (is_portable == false)
            {
                f_trim = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_trim.ini";
            }
            else
            {
                f_trim = System.IO.Path.Combine(Environment.GetEnvironmentVariable("appdata"), "FFBatch") + "\\" + "ff_trim_portable.ini";
            }

            if (chk_trim2.CheckState == CheckState.Checked)
            {
                File.WriteAllText(f_trim, String.Empty);
            }
            else
            {
                try
                {
                    File.Delete(f_trim);
                }
                catch
                {
                    MessageBox.Show("An error ocurred when saving configuration.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }

        private void pic_title_Click(object sender, EventArgs e)
        {
            menu_about.PerformClick();
        }

        private void menu_split_Click(object sender, EventArgs e)
        {
            AeroWizard6 wiz_split = new AeroWizard6();
            wiz_split.pr1_first_params = "";
            wiz_split.StartPosition = FormStartPosition.CenterParent;
            wiz_split.list_count = listView1.Items.Count;
            wiz_split.combo_ext.SelectedIndex = 0;
            wiz_split.combo_Seconds.SelectedIndex = 2;
            wiz_split.ShowDialog();
            if (wiz_split.canceled == true) return;


            if (wiz_split.save_preset == false)
            {
                combo_presets.Text = "New unsaved preset";
                txt_parameters.Text = wiz_split.pr1_first_params;
                txt_format.Text = "nul";
            }
            else
            {
                combo_presets.SelectedIndex = combo_presets.Items.Count - 1;
                combo_presets.Text = wiz_split.txt_preset_name.Text;
                txt_parameters.Text = wiz_split.pr1_first_params;
                txt_format.Text = "nul";
                btn_save_preset.PerformClick();
            }
            if (wiz_split.start_enc == true) button2.PerformClick();
        }

        private void btn_track_up_Click(object sender, EventArgs e)
        {
            if (list_tracks.SelectedItems.Count == 1)
            {
                lvwColumnSorter_Full.Order = SortOrder.None;
                var currentIndex = list_tracks.SelectedItems[0].Index;
                var item = list_tracks.Items[list_tracks.SelectedIndices[0]];
                if (currentIndex > 0) // && list_tracks.Items[currentIndex - 1].SubItems[5].Text == "Queued")
                {
                    list_tracks.Items.RemoveAt(currentIndex);
                    list_tracks.Items.Insert(currentIndex - 1, item);
                }
            }
        }

        private void btn_track_down_Click(object sender, EventArgs e)
        {
            if (list_tracks.SelectedItems.Count == 1)
            {
                lvwColumnSorter_Full.Order = SortOrder.None;
                var currentIndex = list_tracks.SelectedItems[0].Index;
                var item = list_tracks.Items[list_tracks.SelectedIndices[0]];
                if (currentIndex > -1 && currentIndex < list_tracks.Items.Count - 1)
                {
                    list_tracks.Items.RemoveAt(currentIndex);
                    list_tracks.Items.Insert(currentIndex + 1, item);
                }
            }
        }

        public void add_paste_folder (string path1)
        {
            Pg1.Focus();
            if (!File.Exists(Path.Combine(Application.StartupPath, "ffmpeg.exe")))
            {
                MessageBox.Show("FFmpeg executable file was not found. Restart or reinstall application.", "Executable error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }
            if (!File.Exists(Path.Combine(Application.StartupPath, "ffprobe.exe")))
            {
                MessageBox.Show("FFprobe executable file was not found. Restart or reinstall application.", "Executable error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            if (listView1.Items.Count == 0)
            {
                list_not_empty = false;
            }
            else
            {
                list_not_empty = true;
            }

            if (tabControl1.SelectedIndex == 1)
            {
                change_tab_1 = true;
            }
            if (tabControl1.SelectedIndex == 2)
            {
                change_tab_2 = true;
            }
            if (!Directory.Exists(path1))
                {
                MessageBox.Show("Selected path was not found.", "Path not found");
                return;
                }
            Form11_2 frm11_2 = new Form11_2();
            Task t2 = Task.Run(() =>
            {                
                frm11_2.label1.Text = "Reading path contents, please wait...";
                frm11_2.ShowDialog();
            });
            Thread.Sleep(100);
            List<string> files2 = new List<string>();
            int fl = 0;
            foreach (string file in Directory.GetFiles(path1))
            {
                if (!File.GetAttributes(file).HasFlag(FileAttributes.Hidden))
                {
                    files2.Add(file);
                    fl = fl + 1;
                    if (frm11_2.abort_validate == true) return;
                    else
                    {
                        try
                        {
                            frm11_2.Invoke(new MethodInvoker(delegate
                            {
                                frm11_2.label2.Text = fl.ToString() + " files";
                            }));
                        }
                        catch { }
                    }
                }
            }           
                int num_drop = files2.Count();

                if (add_subfs == true)
                {
                    string[] dirs = Directory.GetDirectories(path1);

                    foreach (string ds in dirs)
                    {
                        try
                        {
                            foreach (string f in Directory.GetFiles(ds, "*.*", System.IO.SearchOption.AllDirectories))
                            {
                                if (!File.GetAttributes(f).HasFlag(FileAttributes.Hidden))
                                {
                                    files2.Add(f);
                                    fl = fl + 1;
                                    num_drop++;
                                if (frm11_2.abort_validate == true) return;
                                else
                                {
                                    try
                                    {
                                        frm11_2.Invoke(new MethodInvoker(delegate
                                        {
                                            frm11_2.label2.Text = fl.ToString() + " files";
                                        }));
                                    }
                                    catch { }
                                }
                                
                            }
                            }
                        }
                        catch (System.Exception excpt)
                        {
                        try
                        {
                            
                        }
                        catch { }
                        var a = MessageBox.Show("Error: " + excpt.Message + " Continue?", "Access error", MessageBoxButtons.OKCancel, MessageBoxIcon.Error);
                        if (a == DialogResult.Cancel)
                        {
                            try
                            {
                                frm11_2.Invoke(new MethodInvoker(delegate
                                {
                                    frm11_2.Dispose();
                                }));
                            }
                            catch { }

                            return;
                        }
                        try
                        {
                            frm11_2.Invoke(new MethodInvoker(delegate
                            {
                                frm11_2.TopMost = true;
                                frm11_2.TopMost = false;
                            }));
                        }
                        catch { }
                    }
                    }
                }
            Thread.Sleep(100);
            try
            {
                frm11_2.Invoke(new MethodInvoker(delegate
                {
                    frm11_2.Dispose();
                }));
            }
            catch { }

            if (num_drop == 0)
                {
                    var a = MessageBox.Show("Folder is empty", "Folder empty", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }           

            if (num_drop >= 10000)
                {
                    var a = MessageBox.Show("Adding " + num_drop + " files can take some time. Continue?", "Adding many files", MessageBoxButtons.OKCancel, MessageBoxIcon.Question);
                    if (a == DialogResult.Cancel)
                    {
                        return;
                    }
                }
                files_to_add = files2;
                canceled_file_adding = false;
                btn_cancel_add.Enabled = true;
                btn_cancel_add.Visible = true;
                btn_cancel_add.Refresh();
                BG_Files.RunWorkerAsync();
        }

        private void btn_add_folders_MouseDown(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Right)
            {
                Form19 frm19 = new Form19();
                frm19.ShowDialog();
                if (frm19.canceled == false)
                {
                    add_paste_folder(frm19.textBox1.Text);
                }
            }
        }

        private void ctm_paste_path_Click(object sender, EventArgs e)
        {
            Form19 frm19 = new Form19();
            frm19.ShowDialog();
            if (frm19.canceled == false)
            {
                add_paste_folder(frm19.textBox1.Text);
            }
        }

        private void item_up_MouseClick(object sender, MouseEventArgs e)
        {
            
        }

        private void button1_Click_3(object sender, EventArgs e)
        {
           

        }

        private void button3_Click_1(object sender, EventArgs e)
        {
            
        }

        private void ct_move_top_Click(object sender, EventArgs e)
        {
            if (listView1.SelectedItems.Count == 1 && listView1.SelectedItems[0].SubItems[5].Text == "Queued")
            {
                lvwColumnSorter_Full.Order = SortOrder.None;
                var currentIndex = listView1.SelectedItems[0].Index;
                var item = listView1.Items[listView1.SelectedIndices[0]];
                if (currentIndex > 0 && listView1.Items[currentIndex - 1].SubItems[5].Text == "Queued")
                {
                    listView1.Items.RemoveAt(currentIndex);
                    listView1.Items.Insert(0, item);
                }
            }
        }

        private void ct_move_bottom_Click(object sender, EventArgs e)
        {
            if (listView1.SelectedItems.Count == 1 && listView1.SelectedItems[0].SubItems[5].Text == "Queued")
            {
                lvwColumnSorter_Full.Order = SortOrder.None;
                var currentIndex = listView1.SelectedItems[0].Index;
                var item = listView1.Items[listView1.SelectedIndices[0]];
                if (currentIndex > -1 && currentIndex < listView1.Items.Count - 1)
                {
                    listView1.Items.RemoveAt(currentIndex);
                    listView1.Items.Insert(listView1.Items.Count, item);
                }
            }
        }

        private void ct3_up_Click(object sender, EventArgs e)
        {
            if (list_tracks.SelectedItems.Count == 1)
            {
                lvwColumnSorter_Full.Order = SortOrder.None;
                var currentIndex = list_tracks.SelectedItems[0].Index;
                var item = list_tracks.Items[list_tracks.SelectedIndices[0]];
                if (currentIndex > 0) // && list_tracks.Items[currentIndex - 1].SubItems[5].Text == "Queued")
                {
                    list_tracks.Items.RemoveAt(currentIndex);
                    list_tracks.Items.Insert(currentIndex - 1, item);
                }
            }
        }

        private void ct3_down_Click(object sender, EventArgs e)
        {
            if (list_tracks.SelectedItems.Count == 1)
            {
                lvwColumnSorter_Full.Order = SortOrder.None;
                var currentIndex = list_tracks.SelectedItems[0].Index;
                var item = list_tracks.Items[list_tracks.SelectedIndices[0]];
                if (currentIndex > -1 && currentIndex < list_tracks.Items.Count - 1)
                {
                    list_tracks.Items.RemoveAt(currentIndex);
                    list_tracks.Items.Insert(currentIndex + 1, item);
                }
            }
        }

        private void dg1_CellEndEdit(object sender, DataGridViewCellEventArgs e)
        {
            String cell_out = "";

            if (e.ColumnIndex == 4)
            {
                if (dg1.Rows[e.RowIndex].Cells[4].Value == null)
                {
                    String url1 = dg1.Rows[e.RowIndex].Cells[1].Value.ToString().Substring(dg1.Rows[e.RowIndex].Cells[1].Value.ToString().LastIndexOf("=") + 1, 11);
                    MessageBox.Show("Output name cannot be blank.");
                    dg1.Rows[e.RowIndex].Cells[4].Value = url1 + "_" + (e.RowIndex + 1).ToString();
                    return;
                }
                else
                {
                    cell_out = dg1.Rows[e.RowIndex].Cells[4].Value.ToString();
                    if (cell_out.Contains("/") || cell_out.Contains(":") || cell_out.Contains("*") || cell_out.Contains("?") || cell_out.Contains("¿") || cell_out.Contains('\u0022') || cell_out.Contains("<") || cell_out.Contains(">") || cell_out.Contains("|") || cell_out.Contains("\\"))
                    {
                        MessageBox.Show("Invalid characters were detected and removed.(\\/:*?'\u0022'<>|", "Invalid characters", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                        cell_out = cell_out.Replace("/", "");
                        cell_out = cell_out.Replace(":", "");
                        cell_out = cell_out.Replace("*", "");
                        cell_out = cell_out.Replace("?", "");
                        cell_out = cell_out.Replace("¿", "");
                        cell_out = cell_out.Replace("\u0022", "");
                        cell_out = cell_out.Replace("<", "");
                        cell_out = cell_out.Replace(">", "");
                        cell_out = cell_out.Replace("|", "");
                        cell_out = cell_out.Replace("\\", "");
                        dg1.Rows[e.RowIndex].Cells[4].Value = cell_out.ToString();
                    }
                }
            }
        }
        
        // End code

    } //Form Class

    
    public static class ISynchronizeInvokeExtensions
    {
        public static void InvokeEx<T>(this T @this, Action<T> action) where T : ISynchronizeInvoke
        {
            if (@this.InvokeRequired)
            {
                @this.Invoke(action, new object[] { @this });
            }
            else
            {
                action(@this);
            }
        }
    }

    public static class TextFileEncodingDetector
    {
        private const long _defaultHeuristicSampleSize = 0x10000; //completely arbitrary - inappropriate for high numbers of files / high speed requirements

        public static Encoding DetectTextFileEncoding(string InputFilename)
        {
            using (FileStream textfileStream = File.OpenRead(InputFilename))
            {
                return DetectTextFileEncoding(textfileStream, _defaultHeuristicSampleSize);
            }
        }

        public static Encoding DetectTextFileEncoding(FileStream InputFileStream, long HeuristicSampleSize)
        {
            bool uselessBool = false;
            return DetectTextFileEncoding(InputFileStream, _defaultHeuristicSampleSize, out uselessBool);
        }

        public static Encoding DetectTextFileEncoding(FileStream InputFileStream, long HeuristicSampleSize, out bool HasBOM)
        {
            if (InputFileStream == null)
                throw new ArgumentNullException("Must provide a valid Filestream!", "InputFileStream");

            if (!InputFileStream.CanRead)
                throw new ArgumentException("Provided file stream is not readable!", "InputFileStream");

            if (!InputFileStream.CanSeek)
                throw new ArgumentException("Provided file stream cannot seek!", "InputFileStream");

            Encoding encodingFound = null;

            long originalPos = InputFileStream.Position;

            InputFileStream.Position = 0;

            //First read only what we need for BOM detection
            byte[] bomBytes = new byte[InputFileStream.Length > 4 ? 4 : InputFileStream.Length];
            InputFileStream.Read(bomBytes, 0, bomBytes.Length);

            encodingFound = DetectBOMBytes(bomBytes);

            if (encodingFound != null)
            {
                InputFileStream.Position = originalPos;
                HasBOM = true;
                return encodingFound;
            }

            //BOM Detection failed, going for heuristics now.
            //  create sample byte array and populate it
            byte[] sampleBytes = new byte[HeuristicSampleSize > InputFileStream.Length ? InputFileStream.Length : HeuristicSampleSize];
            Array.Copy(bomBytes, sampleBytes, bomBytes.Length);
            if (InputFileStream.Length > bomBytes.Length)
                InputFileStream.Read(sampleBytes, bomBytes.Length, sampleBytes.Length - bomBytes.Length);
            InputFileStream.Position = originalPos;

            //test byte array content
            encodingFound = DetectUnicodeInByteSampleByHeuristics(sampleBytes);

            HasBOM = false;
            return encodingFound;
        }

        public static Encoding DetectTextByteArrayEncoding(byte[] TextData)
        {
            bool uselessBool = false;
            return DetectTextByteArrayEncoding(TextData, out uselessBool);
        }

        public static Encoding DetectTextByteArrayEncoding(byte[] TextData, out bool HasBOM)
        {
            if (TextData == null)
                throw new ArgumentNullException("Must provide a valid text data byte array!", "TextData");

            Encoding encodingFound = null;

            encodingFound = DetectBOMBytes(TextData);

            if (encodingFound != null)
            {
                HasBOM = true;
                return encodingFound;
            }
            else
            {
                //test byte array content
                encodingFound = DetectUnicodeInByteSampleByHeuristics(TextData);

                HasBOM = false;
                return encodingFound;
            }
        }

        public static string GetStringFromByteArray(byte[] TextData, Encoding DefaultEncoding)
        {
            return GetStringFromByteArray(TextData, DefaultEncoding, _defaultHeuristicSampleSize);
        }

        public static string GetStringFromByteArray(byte[] TextData, Encoding DefaultEncoding, long MaxHeuristicSampleSize)
        {
            if (TextData == null)
                throw new ArgumentNullException("Must provide a valid text data byte array!", "TextData");

            Encoding encodingFound = null;

            encodingFound = DetectBOMBytes(TextData);

            if (encodingFound != null)
            {
                //For some reason, the default encodings don't detect/swallow their own preambles!!
                return encodingFound.GetString(TextData, encodingFound.GetPreamble().Length, TextData.Length - encodingFound.GetPreamble().Length);
            }
            else
            {
                byte[] heuristicSample = null;
                if (TextData.Length > MaxHeuristicSampleSize)
                {
                    heuristicSample = new byte[MaxHeuristicSampleSize];
                    Array.Copy(TextData, heuristicSample, MaxHeuristicSampleSize);
                }
                else
                {
                    heuristicSample = TextData;
                }

                encodingFound = DetectUnicodeInByteSampleByHeuristics(TextData) ?? DefaultEncoding;
                return encodingFound.GetString(TextData);
            }
        }

        public static Encoding DetectBOMBytes(byte[] BOMBytes)
        {
            if (BOMBytes == null)
                throw new ArgumentNullException("Must provide a valid BOM byte array!", "BOMBytes");

            if (BOMBytes.Length < 2)
                return null;

            if (BOMBytes[0] == 0xff
                && BOMBytes[1] == 0xfe
                && (BOMBytes.Length < 4
                    || BOMBytes[2] != 0
                    || BOMBytes[3] != 0
                    )
                )
                return Encoding.Unicode;

            if (BOMBytes[0] == 0xfe
                && BOMBytes[1] == 0xff
                )
                return Encoding.BigEndianUnicode;

            if (BOMBytes.Length < 3)
                return null;

            if (BOMBytes[0] == 0xef && BOMBytes[1] == 0xbb && BOMBytes[2] == 0xbf)
                return Encoding.UTF8;

            if (BOMBytes[0] == 0x2b && BOMBytes[1] == 0x2f && BOMBytes[2] == 0x76)
                return Encoding.UTF7;

            if (BOMBytes.Length < 4)
                return null;

            if (BOMBytes[0] == 0xff && BOMBytes[1] == 0xfe && BOMBytes[2] == 0 && BOMBytes[3] == 0)
                return Encoding.UTF32;

            if (BOMBytes[0] == 0 && BOMBytes[1] == 0 && BOMBytes[2] == 0xfe && BOMBytes[3] == 0xff)
                return Encoding.GetEncoding(12001);

            return null;
        }

        public static Encoding DetectUnicodeInByteSampleByHeuristics(byte[] SampleBytes)
        {
            long oddBinaryNullsInSample = 0;
            long evenBinaryNullsInSample = 0;
            long suspiciousUTF8SequenceCount = 0;
            long suspiciousUTF8BytesTotal = 0;
            long likelyUSASCIIBytesInSample = 0;

            //Cycle through, keeping count of binary null positions, possible UTF-8
            //  sequences from upper ranges of Windows-1252, and probable US-ASCII
            //  character counts.

            long currentPos = 0;
            int skipUTF8Bytes = 0;

            while (currentPos < SampleBytes.Length)
            {
                //binary null distribution
                if (SampleBytes[currentPos] == 0)
                {
                    if (currentPos % 2 == 0)
                        evenBinaryNullsInSample++;
                    else
                        oddBinaryNullsInSample++;
                }

                //likely US-ASCII characters
                if (IsCommonUSASCIIByte(SampleBytes[currentPos]))
                    likelyUSASCIIBytesInSample++;

                //suspicious sequences (look like UTF-8)
                if (skipUTF8Bytes == 0)
                {
                    int lengthFound = DetectSuspiciousUTF8SequenceLength(SampleBytes, currentPos);

                    if (lengthFound > 0)
                    {
                        suspiciousUTF8SequenceCount++;
                        suspiciousUTF8BytesTotal += lengthFound;
                        skipUTF8Bytes = lengthFound - 1;
                    }
                }
                else
                {
                    skipUTF8Bytes--;
                }

                currentPos++;
            }

            //1: UTF-16 LE - in english / european environments, this is usually characterized by a
            //  high proportion of odd binary nulls (starting at 0), with (as this is text) a low
            //  proportion of even binary nulls.
            //  The thresholds here used (less than 20% nulls where you expect non-nulls, and more than
            //  60% nulls where you do expect nulls) are completely arbitrary.

            if (((evenBinaryNullsInSample * 2.0) / SampleBytes.Length) < 0.2
                && ((oddBinaryNullsInSample * 2.0) / SampleBytes.Length) > 0.6
                )
                return Encoding.Unicode;

            //2: UTF-16 BE - in english / european environments, this is usually characterized by a
            //  high proportion of even binary nulls (starting at 0), with (as this is text) a low
            //  proportion of odd binary nulls.
            //  The thresholds here used (less than 20% nulls where you expect non-nulls, and more than
            //  60% nulls where you do expect nulls) are completely arbitrary.

            if (((oddBinaryNullsInSample * 2.0) / SampleBytes.Length) < 0.2
                && ((evenBinaryNullsInSample * 2.0) / SampleBytes.Length) > 0.6
                )
                return Encoding.BigEndianUnicode;

            //3: UTF-8 - Martin Dürst outlines a method for detecting whether something CAN be UTF-8 content
            //  using regexp, in his w3c.org unicode FAQ entry:
            //  http://www.w3.org/International/questions/qa-forms-utf-8
            //  adapted here for C#.
            string potentiallyMangledString = Encoding.ASCII.GetString(SampleBytes);

            Regex UTF8Validator = new Regex(@"\A(" + @"[\x09\x0A\x0D\x20-\x7E]" + @"|[\xC2-\xDF][\x80-\xBF]" + @"|\xE0[\xA0-\xBF][\x80-\xBF]" + @"|[\xE1-\xEC\xEE\xEF][\x80-\xBF]{2}" + @"|\xED[\x80-\x9F][\x80-\xBF]" + @"|\xF0[\x90-\xBF][\x80-\xBF]{2}" + @"|[\xF1-\xF3][\x80-\xBF]{3}" + @"|\xF4[\x80-\x8F][\x80-\xBF]{2}" + @")*\z");
            if (UTF8Validator.IsMatch(potentiallyMangledString))
            {
                //Unfortunately, just the fact that it CAN be UTF-8 doesn't tell you much about probabilities.
                //If all the characters are in the 0-127 range, no harm done, most western charsets are same as UTF-8 in these ranges.
                //If some of the characters were in the upper range (western accented characters), however, they would likely be mangled to 2-byte by the UTF-8 encoding process.
                // So, we need to play stats.

                // The "Random" likelihood of any pair of randomly generated characters being one
                //   of these "suspicious" character sequences is:
                //     128 / (256 * 256) = 0.2%.
                //
                // In western text data, that is SIGNIFICANTLY reduced - most text data stays in the <127
                //   character range, so we assume that more than 1 in 500,000 of these character
                //   sequences indicates UTF-8. The number 500,000 is completely arbitrary - so sue me.
                //
                // We can only assume these character sequences will be rare if we ALSO assume that this
                //   IS in fact western text - in which case the bulk of the UTF-8 encoded data (that is
                //   not already suspicious sequences) should be plain US-ASCII bytes. This, I
                //   arbitrarily decided, should be 80% (a random distribution, eg binary data, would yield
                //   approx 40%, so the chances of hitting this threshold by accident in random data are
                //   VERY low).

                if ((suspiciousUTF8SequenceCount * 500000.0 / SampleBytes.Length >= 1) //suspicious sequences
                    && (
                           //all suspicious, so cannot evaluate proportion of US-Ascii
                           SampleBytes.Length - suspiciousUTF8BytesTotal == 0
                           ||
                           likelyUSASCIIBytesInSample * 1.0 / (SampleBytes.Length - suspiciousUTF8BytesTotal) >= 0.8
                       )
                    )
                    return Encoding.UTF8;
            }

            return null;
        }

        private static bool IsCommonUSASCIIByte(byte testByte)
        {
            if (testByte == 0x0A //lf
                || testByte == 0x0D //cr
                || testByte == 0x09 //tab
                || (testByte >= 0x20 && testByte <= 0x2F) //common punctuation
                || (testByte >= 0x30 && testByte <= 0x39) //digits
                || (testByte >= 0x3A && testByte <= 0x40) //common punctuation
                || (testByte >= 0x41 && testByte <= 0x5A) //capital letters
                || (testByte >= 0x5B && testByte <= 0x60) //common punctuation
                || (testByte >= 0x61 && testByte <= 0x7A) //lowercase letters
                || (testByte >= 0x7B && testByte <= 0x7E) //common punctuation
                )
                return true;
            else
                return false;
        }

        private static int DetectSuspiciousUTF8SequenceLength(byte[] SampleBytes, long currentPos)
        {
            int lengthFound = 0;

            if (SampleBytes.Length >= currentPos + 1
                && SampleBytes[currentPos] == 0xC2
                )
            {
                if (SampleBytes[currentPos + 1] == 0x81
                    || SampleBytes[currentPos + 1] == 0x8D
                    || SampleBytes[currentPos + 1] == 0x8F
                    )
                    lengthFound = 2;
                else if (SampleBytes[currentPos + 1] == 0x90
                    || SampleBytes[currentPos + 1] == 0x9D
                    )
                    lengthFound = 2;
                else if (SampleBytes[currentPos + 1] >= 0xA0
                    && SampleBytes[currentPos + 1] <= 0xBF
                    )
                    lengthFound = 2;
            }
            else if (SampleBytes.Length >= currentPos + 1
                && SampleBytes[currentPos] == 0xC3
                )
            {
                if (SampleBytes[currentPos + 1] >= 0x80
                    && SampleBytes[currentPos + 1] <= 0xBF
                    )
                    lengthFound = 2;
            }
            else if (SampleBytes.Length >= currentPos + 1
                && SampleBytes[currentPos] == 0xC5
                )
            {
                if (SampleBytes[currentPos + 1] == 0x92
                    || SampleBytes[currentPos + 1] == 0x93
                    )
                    lengthFound = 2;
                else if (SampleBytes[currentPos + 1] == 0xA0
                    || SampleBytes[currentPos + 1] == 0xA1
                    )
                    lengthFound = 2;
                else if (SampleBytes[currentPos + 1] == 0xB8
                    || SampleBytes[currentPos + 1] == 0xBD
                    || SampleBytes[currentPos + 1] == 0xBE
                    )
                    lengthFound = 2;
            }
            else if (SampleBytes.Length >= currentPos + 1
                && SampleBytes[currentPos] == 0xC6
                )
            {
                if (SampleBytes[currentPos + 1] == 0x92)
                    lengthFound = 2;
            }
            else if (SampleBytes.Length >= currentPos + 1
                && SampleBytes[currentPos] == 0xCB
                )
            {
                if (SampleBytes[currentPos + 1] == 0x86
                    || SampleBytes[currentPos + 1] == 0x9C
                    )
                    lengthFound = 2;
            }
            else if (SampleBytes.Length >= currentPos + 2
                && SampleBytes[currentPos] == 0xE2
                )
            {
                if (SampleBytes[currentPos + 1] == 0x80)
                {
                    if (SampleBytes[currentPos + 2] == 0x93
                        || SampleBytes[currentPos + 2] == 0x94
                        )
                        lengthFound = 3;
                    if (SampleBytes[currentPos + 2] == 0x98
                        || SampleBytes[currentPos + 2] == 0x99
                        || SampleBytes[currentPos + 2] == 0x9A
                        )
                        lengthFound = 3;
                    if (SampleBytes[currentPos + 2] == 0x9C
                        || SampleBytes[currentPos + 2] == 0x9D
                        || SampleBytes[currentPos + 2] == 0x9E
                        )
                        lengthFound = 3;
                    if (SampleBytes[currentPos + 2] == 0xA0
                        || SampleBytes[currentPos + 2] == 0xA1
                        || SampleBytes[currentPos + 2] == 0xA2
                        )
                        lengthFound = 3;
                    if (SampleBytes[currentPos + 2] == 0xA6)
                        lengthFound = 3;
                    if (SampleBytes[currentPos + 2] == 0xB0)
                        lengthFound = 3;
                    if (SampleBytes[currentPos + 2] == 0xB9
                        || SampleBytes[currentPos + 2] == 0xBA
                        )
                        lengthFound = 3;
                }
                else if (SampleBytes[currentPos + 1] == 0x82
                    && SampleBytes[currentPos + 2] == 0xAC
                    )
                    lengthFound = 3;
                else if (SampleBytes[currentPos + 1] == 0x84
                    && SampleBytes[currentPos + 2] == 0xA2
                    )
                    lengthFound = 3;
            }

            return lengthFound;
        }
    }

    //Pause code

    [Flags]
    public enum ThreadAccess : int
    {
        TERMINATE = (0x0001),
        SUSPEND_RESUME = (0x0002),
        GET_CONTEXT = (0x0008),
        SET_CONTEXT = (0x0010),
        SET_INFORMATION = (0x0020),
        QUERY_INFORMATION = (0x0040),
        SET_THREAD_TOKEN = (0x0080),
        IMPERSONATE = (0x0100),
        DIRECT_IMPERSONATION = (0x0200)
    }

    public enum EXECUTION_STATE : uint
    {
        ES_AWAYMODE_REQUIRED = 0x00000040,
        ES_CONTINUOUS = 0x80000000,
        ES_DISPLAY_REQUIRED = 0x00000002,
        ES_SYSTEM_REQUIRED = 0x00000001,
    }


    public static class NativeMethods
    {

        [DllImport("kernel32.dll", SetLastError = true, CallingConvention = CallingConvention.Winapi)]
        [return: MarshalAs(UnmanagedType.Bool)]
        internal static extern bool IsWow64Process([In] IntPtr process, [Out] out bool wow64Process);

        [DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
        public static extern EXECUTION_STATE SetThreadExecutionState(EXECUTION_STATE esFlags);

        [DllImport("kernel32.dll")]
        private static extern IntPtr OpenThread(ThreadAccess dwDesiredAccess, bool bInheritHandle, uint dwThreadId);

        [DllImport("kernel32.dll")]
        private static extern uint SuspendThread(IntPtr hThread);

        [DllImport("kernel32.dll")]
        private static extern int ResumeThread(IntPtr hThread);


        public static void Suspend(this Process process)
        {
            foreach (ProcessThread thread in process.Threads)
            {
                var pOpenThread = OpenThread(ThreadAccess.SUSPEND_RESUME, false, (uint)thread.Id);
                if (pOpenThread == IntPtr.Zero)
                {
                    break;
                }
                SuspendThread(pOpenThread);
            }
        }

        public static void Resume(this Process process)
        {
            foreach (ProcessThread thread in process.Threads)
            {
                var pOpenThread = OpenThread(ThreadAccess.SUSPEND_RESUME, false, (uint)thread.Id);
                if (pOpenThread == IntPtr.Zero)
                {
                    break;
                }
                ResumeThread(pOpenThread);
            }
        }
    }

    //End pause code
    //Flickering progress bar text
    public class ProgressBarWithText : ProgressBar
    {
        private const int WmPaint = 15;
        private SizeF TextSize;
        private PointF TextPos;

        public ProgressBarWithText()
        {
            this.DoubleBuffered = true;
            this.TextChanged += ProgressBarWithText_TextChanged;
            this.SizeChanged += ProgressBarWithText_SizeChanged;
        }

        public override string Text
        {
            get { return base.Text; }
            set { base.Text = value; }
        }

        private void RecalcTextPos()
        {
            if (string.IsNullOrEmpty(base.Text))
                return;

            using (var graphics = Graphics.FromHwnd(this.Handle))
            {
                TextSize = graphics.MeasureString(base.Text, this.Font);
                TextPos.X = (this.Width / 2) - (TextSize.Width / 2) + 1;
                TextPos.Y = (this.Height / 2) - (TextSize.Height / 2) + 1;
            }
        }

        private void ProgressBarWithText_SizeChanged(object sender, EventArgs e)
        {
            RecalcTextPos();
        }

        private void ProgressBarWithText_TextChanged(object sender, EventArgs e)
        {
            RecalcTextPos();
        }

        protected override void WndProc(ref Message m)
        {
            base.WndProc(ref m);

            switch (m.Msg)
            {
                case WmPaint:
                    using (var graphics = Graphics.FromHwnd(Handle))
                        graphics.DrawString(base.Text, base.Font, Brushes.Black, TextPos.X, TextPos.Y);
                    break;
            }
        }

        protected override CreateParams CreateParams
        {
            get
            {
                CreateParams result = base.CreateParams;
                result.ExStyle |= 0x02000000; // WS_EX_COMPOSITED
                return result;
            }
        }
    }

    public static class TaskbarProgress
    {
        public enum TaskbarStates
        {
            NoProgress = 0,
            Indeterminate = 0x1,
            Normal = 0x2,
            Error = 0x4,
            Paused = 0x8
        }

        [ComImport()]
        [Guid("ea1afb91-9e28-4b86-90e9-9e9f8a5eefaf")]
        [InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
        private interface ITaskbarList3
        {
            // ITaskbarList
            [PreserveSig]
            void HrInit();

            [PreserveSig]
            void AddTab(IntPtr hwnd);

            [PreserveSig]
            void DeleteTab(IntPtr hwnd);

            [PreserveSig]
            void ActivateTab(IntPtr hwnd);

            [PreserveSig]
            void SetActiveAlt(IntPtr hwnd);

            // ITaskbarList2
            [PreserveSig]
            void MarkFullscreenWindow(IntPtr hwnd, [MarshalAs(UnmanagedType.Bool)] bool fFullscreen);

            // ITaskbarList3
            [PreserveSig]
            void SetProgressValue(IntPtr hwnd, UInt64 ullCompleted, UInt64 ullTotal);

            [PreserveSig]
            void SetProgressState(IntPtr hwnd, TaskbarStates state);
        }

        [ComImport()]
        [Guid("56fdf344-fd6d-11d0-958a-006097c9a090")]
        [ClassInterface(ClassInterfaceType.None)]
        private class TaskbarInstance
        {
        }

        private static ITaskbarList3 taskbarInstance = (ITaskbarList3)new TaskbarInstance();
        private static bool taskbarSupported = Environment.OSVersion.Version >= new Version(6, 1);

        public static void SetState(IntPtr windowHandle, TaskbarStates taskbarState)
        {
            if (taskbarSupported) taskbarInstance.SetProgressState(windowHandle, taskbarState);
        }

        public static void SetValue(IntPtr windowHandle, double progressValue, double progressMax)
        {
            if (taskbarSupported) taskbarInstance.SetProgressValue(windowHandle, (ulong)progressValue, (ulong)progressMax);
        }        
    }

    //END APP
}
